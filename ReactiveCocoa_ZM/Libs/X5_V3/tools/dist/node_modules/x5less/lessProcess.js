var fs = require('fs');
var path = require('path');
var less = require('less');

var options = {
    compress: false
};

var dir = process.argv[2];
var skins = [];
var skinFileNames = [];

var excluded = [];
var excludedArg = process.argv[3];
if(excludedArg){
	excluded = excludedArg.split(';');
	excluded = excluded.map(function(file){
		return path.join(dir, file);
	});
}

var skinPath = path.join(dir, "/system/components/bootstrap/lib/skin");
fs.readdir(skinPath, function(error, files) {
	files && files.forEach(function(name) {
		if (name[0] === '.') return;
		if (/^variables.*\.less$/.test(name)){
			if('variables.less'!=name){
				skins.push(name.substring("variables.".length,name.indexOf(".less")));
				skinFileNames.push(path.join(skinPath, name));
			}else{
				skins.splice(0,0,"");
				skinFileNames.splice(0,0,path.join(skinPath, name));
			}
		}
	});
	console.log('skins : ' + skins);
	//console.log('process bootstrap css......');
	bootstrap(path.join(dir, "/system/components/bootstrap/lib/css"));
	walkFile(dir);
})


function bootstrap(dir){
	var files = ['bootstrap','bootstrap-theme'];
	files.forEach(function(name){
		cssBootstrap(dir, name);
	});
}

function cssBootstrap(dir, name){
	var file = path.join(dir, name+'.less')
	for(var i=0;i<skins.length;i++){
		var skin = skins[i],skinVar = skinFileNames[i];
		doBootstrapLess(skin, skinVar, file);
	}
}

function doBootstrapLess(skin, skinVar, file){
	var code = '@import "' + skinVar + '";\n'+'@import "' + file + '";';
	var dest = file.replace(/\.less$/, (skin?('.'+skin):'')+'.css');
	//console.log(code + '\n' + dest);
	less.render(code, function(err, css){
		err && errorFn(err);
		fs.writeFile(dest, css, function(err){
			err && errorFn(err);
			console.log('file : ' + dest);
		});
	});
	var min_dest = file.replace(/\.less$/, '.min'+(skin?('.'+skin):'')+'.css');
	//console.log(code + '\n' + min_dest);
	less.render(code, {compress: true}, function(err, css){
		err && errorFn(err);
		fs.writeFile(min_dest, css, function(err){
			err && errorFn(err);
			console.log('file : ' + min_dest);
		});
	});
}

function walkFile(dir){
	fs.readdir(dir, function(error, files) {
		files && files.forEach(function(name) {
			if (name[0] === '.') return;
			var fullname = path.join(dir, name); 
	        fs.stat(fullname, function(error, stats) {
				if (stats.isFile()) {
					if (/\.less$/.test(name) && !isExcluded(fullname) && !isCustomSkinLess(name)){
						css(fullname);
					}
				}else{
					walkFile(fullname);
				}
	        });	
		});
	})
}

function css(file){
	//console.log('process less:' + file);
	for(var i=0;i<skins.length;i++){
		var skin = skins[i],skinVar = skinFileNames[i];
		var sSkinLess = file.replace(/\.less$/, (skin?('.'+skin):'______')+'.less');
		//console.log('process less:' + file + '------' + skin);
		doLess(sSkinLess,skin,skinVar,file);
	}
}

function doLess(sSkinLess,skin,skinVar,file){
		fs.exists(sSkinLess,function(exists){
			var code = '@import "' + skinVar + '";\n'+'@import "' + file + '";';
			var dest = file.replace(/\.less$/, (skin?('.'+skin):'')+'.css');
			if(exists){
				console.log('exists:'+sSkinLess);
				code = '@import "' + sSkinLess + '";';
			}
			//console.log(code + '\n' + dest);
			less.render(code, options, function(err, css){
				err && errorFn(err);
				fs.writeFile(dest, css, function(err){
					err && errorFn(err);
					console.log('file : ' + dest);
				});
			});
		});
}

function isCustomSkinLess(file){
	for(var i=0;i<skins.length;i++){
		var skin = skins[i];
		var b = (new RegExp('\\.'+skin+'\\.less$')).test(file);
		if(b) return true;
	}
}

function errorFn(err){
	console.log(err);
	process.exit(-1);
};

function isExcluded(file){
	var rst = false;
	excluded.forEach(function(f){
		if(file.indexOf(f) == 0){
			rst = true;
			return false;
		}
			
	});
	return rst;
}
