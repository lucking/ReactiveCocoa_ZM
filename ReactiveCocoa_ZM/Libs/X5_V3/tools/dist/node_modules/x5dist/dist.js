require(['build', 'optimize'], function(build, optimize){
	var fs = require('fs');
	var path = require('path');
	var xm = require('xml-mapping');
	var less = require('less');
	var when = require('when');
	var sequence = require('when/sequence');

	var modelDir = path.resolve('.').replace(/\\/g, '/');
	_X5_UIServer_Dir = path.join(modelDir, '../runtime/UIServer');
	
	var jsCfgFileRE = /min\.js\.xml$/,
		cssCfgFileRE = /min\.css\.xml$/,
		defaultFiles = [
			'UI2/system/core.min.js.xml',
			'UI2/system/common.min.js.xml',
			'UI2/system/biz.min.js.xml',
			'UI2/system/components/comp.min.js.xml',
			'UI2/system/components/comp.min.css.xml',
			'UI2/system/components/justep/comp.min.js.xml'
		];

    var noOptimize = false,
    	file, dir;
    for(var i in process.argv){
    	var cmd = process.argv[i];
    	if(cmd == '-noOptimize')
    		noOptimize =  true;
    	if(cmd == '-file'){
    		file = process.argv[++i];
    	}
    	if(cmd == '-dir'){
    		file = process.argv[++i];
    	}
    }
	function getConfig(options, dir){
		var rst = {
			baseUrl: ".",
		    paths: {
		    	'modernizr': 'UI2/system/lib/base/modernizr-2.8.3.min',
		    	'$model': '.',
		        'text': 'UI2/system/lib/require/text.2.0.10',
		        'bind': 'UI2/system/lib/bind/bind',
		        'bootstrap': 'UI2/system/components/bootstrap/lib/js/bootstrap.min',
		        'jquery': 'UI2/system/lib/jquery/jquery-1.11.1.min'
		    },
		    include: [],
		    depend: [],
		    shim: {
		        'bootstrap': {
		            deps: ['jquery'],
		            exports: 'jQuery'
		        },
		        'komapping': {
		        	deps: ['knockout'],
		        	exports: 'komapping'
		        },
				'modernizr': {
					exports: 'Modernizr'
				}
		    },
			map: {
		        '*': {
		            css: 'UI2/system/lib/require/css.js',
					w: 'UI2/system/lib/require/w.js',
					cordova: 'UI2/system/lib/require/cordova.js',
					res: 'UI2/system/lib/require/res.js'
		        }
		    }
		};

		for(var i in options.file){
			var file = options.file[i].$t;
			var name = file;
			if(/\.js$/.test(file))
				var name = path.join('$model', dir, file).replace(/\\/g, '/').replace(/\.js$/, '');
			rst.include.push(name);
		}
		if(options.depend && options.depend.$t)
			options.depend = [options.depend];
		if(options.depend){
			for(var i = options.depend.length-1; i>=0; i--){
				var file = options.depend[i].$t;
				var name = file;
				if(/\.js$/.test(file))
					var name = path.join('$model', dir, file).replace(/\\/g, '/').replace(/\.js$/, '');
				rst.depend.unshift(name);
				rst.include.unshift(name);
			}
		}
		rst.out = path.join(dir, options.output.name).replace(/\\/g, '/');
		
		if(options.ignoreFileNotFound)
			rst.ignoreFileNotFound = options.ignoreFileNotFound
		if(noOptimize){
			rst.optimize = 'none';
			rst.out = rst.out.replace(/(\.min)?\.js$/, '.debug.js');
		}
		
		return rst;
	}
	
	function processCSS(options, dir){
		//default
		function cssFile(skin){
	    	var d = when.defer();
			var imports = [];
			options.file = options.file instanceof Array? options.file : [options.file];
			for(var i in options.file){
				var filename = options.file[i].$t;
				if(skin){
					var maybe = filename.replace(/\.css$/i, '.' + skin + '.css');
					var existed = true;
					try{
						existed = !!fs.statSync(path.join(dir, maybe));
					}catch(e){
						existed = false;
					}
					if(existed){
						filename = maybe;
					}
				}
				if(/\.css$/.test(filename))
					imports.push('@import url("' + filename + '");\n');
				else
					imports.push('@import "' + filename + '";\n');
			}
			var outfile = path.join(dir, options.output.name);
			if(skin)
				outfile = outfile.replace(/\.css$/i, '.' + skin + '.css');
			var tempfile = path.resolve(outfile + '.temp');

			less.render(imports.join(''), function(err, css){
				if(err){
					d.reject(err);
					return;
				}
				fs.writeFile(tempfile, css, function(err){
					if(err){
						d.reject(err);
						return;
					}
					build._run({cssIn: tempfile, out: outfile}).then(function(){
						d.resolve();
					}, function(err){
						d.reject(err);
					});
					fs.unlink(tempfile);
				});
			});
			
			return d.promise;
		}
		
		
		var tasks = [function(){
			return cssFile();
		}];
		
		if(options.output.skin){
			var skins = options.output.skin.split(',');
			for(var i in skins){
				tasks.push((function(skin){
					return function(){
						return cssFile(skin); 
					};
				})(skins[i]));
				
			}
		}
		
		return sequence(tasks);
		
	}

	function processFile(file, config){
    	var name = file.split('/').pop();

    	var d = when.defer();
    	
        fs.stat(file, function(error, stats) {
        	if(error) {
        		d.resolve();//如果文件不存忽略, 比如core.min.js.xml不存在了
        		return;
        	}
			if(jsCfgFileRE.test(name)){
				var tasks = [];
				for(var i in config){
					//文件所在
					var dir = path.dirname(file);
					//获得配置
					var cfg = getConfig(config[i], dir);
					tasks.push((function(cfg){
						return function(){
							return build._run(cfg).fail(function(e){
								if(e.errno === 34 && cfg.ignoreFileNotFound === 'true'){//TODO
									console.log('warnning: source no exist, try to load min file ' + cfg.out);
									var minFile = path.relative(cfg.out, '.');
									require(minFile);
								}else{
									throw(e);
								}
							});
						};
					})(cfg))
				}
				sequence(tasks).then(function(){
					d.resolve();
				}, function(err){
					d.reject(err);
				})
			}else if (cssCfgFileRE.test(name)){
				//文件所在
				var dir = path.dirname(file);
				var tasks = [];
				for(var i in config){
					//获得配置
					tasks.push((function(cfg){
						return function(){
							return processCSS(cfg, dir);
						};
					})(config[i]));
				}
				sequence(tasks).then(function(){
					d.resolve();
				}, function(err){
					d.reject(err);
				})
			}
        });

		return d.promise;
		
	}
	
	function findConfigFiles(dir){
		var files = {};
		walkFile(dir);
		return files;
		function walkFile(dir){
			fs.readdirSync(dir).forEach(function(name) {
				if (name[0] === '.') return;
				var fullname = path.join(dir, name); 
				var stats = fs.statSync(fullname);
				if (stats.isFile()) {
					if(jsCfgFileRE.test(name) || cssCfgFileRE.test(name)){
						var content = fs.readFileSync(fullname);
						content = content.toString();
						var config = xm.load(content).root.config;
						if(!config.length)
							config = [config];
						files[fullname]	= config;
					}	
				}else{
					walkFile(fullname);
				}
			});
		}
	}
	
	function findConfigFilesByNames(names){
		var files = {};
		for(var i in names){
			var fullname = names[i];
			var content = fs.readFileSync(fullname);
			content = content.toString();
			var config = xm.load(content).root.config;
			if(!config.length)
				config = [config];
			files[fullname]	= config;
		}
		return files;
	}

	var files = file? findConfigFilesByNames(file.split(';')) : findConfigFiles(dir || '.'), 
		tasks = [];
	
	//按照depend排序
	var sortedFiles = {};
	
	function look(name){
		if(!sortedFiles[name]){
			var dir = path.dirname(name);
			var cfgs = files[name];
			for(var i in cfgs){
				var cfg = cfgs[i];
				if(cfg.depend){
					if(cfg.depend.length === undefined){
						cfg.depend = [cfg.depend];
					}
					for(var j in cfg.depend){
						var fName = cfg.depend[j].config;
						//可能应该允许为空
						if(fName){
							fName = path.join(dir, fName);
							if(!sortedFiles[fName]){
								//递归
								look(fName);
							}
						}
					}
				}
			}
			sortedFiles[name] = cfgs;
		}
	}
	
	for(var name in files){
		look(name);
	}

	for(var name in sortedFiles){
    	tasks.push((function(file, cfg){
    		return function(){
    			return processFile(file, cfg);
    		};
    	})(name, files[name]));
	}
	
	sequence(tasks).then(function(){
	
	}, function(err){
    	console.log(err);
    	process.exit(-1);
	});
	
});