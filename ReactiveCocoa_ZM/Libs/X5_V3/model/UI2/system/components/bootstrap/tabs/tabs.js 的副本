define(function(require) {
	require("../lib/js/bootstrap");
	var justep = require("$UI/system/lib/justep");
	var Tab = require("./tab");
	var url = require.normalizeName("./tabs");
	require("$UI/system/resources/system.res");

	var ComponentConfig = require("./tabs.config");
	
	
	var Tabs = justep.BindComponent.extend({
		getConfig: function(){
			return ComponentConfig;	
		},
		
    	constructor: function(config){
    		this.callParent(config);
			this.fade = false;
			this.type = "tab"; //tab, pill
			this.justified = false;
			this.stacked = false;
			this.activeTab = "";
			
			this.selector = {
					nav: ">.nav",
					tab: ">.nav>li",
					lastTab: ">.nav>li:last",
					tabByIndex: ">.nav>li:eq({0})",
					header: ">.nav a",
					lastHeader: ">.nav a:last",
					paneContainer: ">.tab-content",
					pane: ">.tab-content>.tab-pane",
					paneByIndex: ">.tab-content>.tab-pane:eq({0})",
					lastPane: ">.tab-content>.tab-pane:last",
					activePane: ">.tab-content>.active",
					target: "[xid=\'{0}\'] > .tab-content > .tab-pane:eq({1})"
				};
			this.template = {
				header: '<li component="{5}" xid="{3}"><a data-target="' + this.selector.target  + '" data-toggle="{2}" >{4}</a></li>',
				pane: '<div class="tab-pane {0}" />',
				tabs: '<div xid="{0}" component="' + url + '"><ul class="nav {1}"/><div class="tab-content"/></div>'
			};
    	},
    	
    	/**
    	 * @param config 参数模式
    	 * 	{
    	 * 		xid: '',
    	 * 		fade: false,
    	 * 		type: 'tab',
    	 * 		justified: false,
    	 * 		stacked: false,
    	 * 		activeTab: '',
    	 * 		tabs: [
    	 * 			{
    	 * 				xid: '',
    	 * 				label: '', 
    	 * 				body: ''
    	 * 			},
    	 * 			{
    	 * 				xid: '',
    	 * 				label: '', 
    	 * 				body: ''
    	 * 			}
    	 * 		]
    	 * 	}
    	 */
    	buildTemplate: function(config){
    		config = config || {};
    		var xid = config.xid || justep.UUID.createUUID().toString();
    		
    		this.set(config);
    		
    		var ulClass = "";
    		ulClass += ((this.type==="pill")?" nav-pills ":" nav-tabs ");
    		ulClass += (this.justified ? " nav-justified " : "");
    		ulClass += (this.stacked ? " nav-stacked " : "");
    		
    		var result = $(justep.String.format(this.template.tabs, xid, ulClass));
    		if (config.tabs && config.tabs.length>0){
        		var nav = $(this.selector.nav, result)[0];
        		var paneParentNode = $(this.selector.paneContainer, result)[0];

        		curIndex = 0;
        		for (var i=0; i<config.tabs.length; i++){
        			var curConfig = config.tabs[i] || {};
            		curConfig.owner = this;
            		curConfig.parentNode = nav;
            		curConfig.paneParentNode = paneParentNode;
            		var tab = new Tab(curConfig); //创建Tab时，会添加到tabs上
            		
            		if ((this.activeTab) && (config.xid === this.activeTab)){
            			curIndex = i; 
                	}
        		}
        		$(justep.String.format(this.selector.tabByIndex, curIndex), result).addClass("active");
        		var curPane = $(justep.String.format(this.selector.paneByIndex, curIndex), result);
        		curPane.addClass("active");
        		if (this.fade){
        			curPane.addClass("in");
        		}
    		}
    		
    		return result[0];
        },
    	
    	
    	propertyChangedHandler:function(key, oldVal, value){
    		if (!this.$domNode) return;
    		if (key === "fade"){
    			var panes = $(this.selector.pane, this.$domNode);
    			var activePane = $(this.selector.activePane, this.$domNode);
    			if (value){
    				panes.addClass("fade");
    				activePane.addClass("in");
    			}else{
    				panes.removeClass("fade");
    				activePane.removeClass("in");
        		}
    			
    		}else if (key === "type"){
    			var nav = $(this.selector.nav, this.$domNode);
    			var header = $(this.selector.header, this.$domNode);
    			if (value === "pill"){
    				nav.removeClass("nav-tabs").addClass("nav-pills");
    				header.each(function(index){
    					var $this = $(this);
    					if ($this.attr("data-toggle") === "tab"){
    						$this.attr("data-toggle", "pill");
    					}
    				});
    			}else{
    				nav.removeClass("nav-pills").addClass("nav-tabs");
    				header.each(function(index){
    					var $this = $(this);
    					if ($this.attr("data-toggle") === "pill"){
    						$this.attr("data-toggle", "tab");
    					}
    				});
    			}
    			
    		}else if (key === "justified"){
    			var nav = $(this.selector.nav, this.$domNode);
    			if (value){
    				nav.addClass("nav-justified");
    			}else{
    				nav.removeClass("nav-justified");
    			}
    			
    		}else if (key === "stacked"){
    			var nav = $(this.selector.nav, this.$domNode);
    			if (value){
    				nav.addClass("nav-stacked");
    			}else{
    				nav.removeClass("nav-stacked");
    			}
    		}else if (key === "activeTab"){
    			this.setActiveTab(value);
    		}
    	},

    	_buildTabPane: function(config){
    		config = config || {};
    		var fadeClass = this.fade ? "fade" : "";
    		var pane = $(justep.String.format(this.template.pane, fadeClass));
    		if (config.body){
    			pane.append(config.body);
    		}
    		return pane[0];
    	},
    	
    	_buildTabHeader: function(config){
    		var config = config || {};
    		var $tabsNode = $(config.parentNode).parent();
    		var parentXid = $tabsNode.attr("xid");
    		var index = $(this.selector.tab, $tabsNode).length;
    		var toggle = (this.type === "pill") ? "pill" : "tab";
    		var xid = config.xid || ((parentXid) +  this._getNextIndex($tabsNode));
    		var label = config.label || "";
    		var header = $(justep.String.format(this.template.header, parentXid, index, toggle, xid, label, config.component));
    		return header[0];
    	},
    	
    	_getNextIndex: function($tabsNode){
    		var result = 0;
    		var xid = $tabsNode.attr("xid") + "_Tab";
    		$(this.selector.tab, $tabsNode).each(function(index){
    			var curXid = $(this).attr("xid");
    			if (curXid && (curXid.indexOf(xid)==0)){
    				var cur = parseInt(curXid.substring(xid.length));
    				if (!isNaN(cur) && (cur>result)){
    					result = cur;
    				}
    			}
    		});
    		result++;
    		return "_Tab" + result;
    	},
    	
    	/**
    	 * config格式:
    	 * 	{
    	 * 		xid: '',  	//tab的唯一标识
    	 * 		label: '',	//tab的标题
    	 * 		body: ''	//tab的内容
    	 * 	}
    	 */
    	addTab: function(config){
    		config.parentNode = $(this.selector.nav, this.$domNode)[0]; 
    		config.paneParentNode = $(this.selector.paneContainer, this.$domNode)[0];    		
        		

    		config.owner = this;
    		var tab = this._createTab(config);
    		tab.show();
    	},
    	
    	_createTab: function(config){
    		return new Tab(config); //创建Tab时，会添加到tabs上
    	},
    	
    	removeTab: function(xid){
    		this.getTab(xid).remove();
    	},
    	
    	_getNextTab: function(tab){
    		var curIndex = -1;
    		var node = null;
    		$(this.selector.tab, this.$domNode).each(function(index){
    			if (tab.domNode === this){
    				curIndex = index;
    			}else{
    				if (curIndex==-1){
    					node = this;
    				}else if ((curIndex-index)==1){
    					node = this;
    				}
    			}
    		});
    		
    		return this.getModel().comp(node);
    	},
    	
    	_getTabPane: function(tab){
    		var self = this;
    		var result = null;
    		$(this.selector.tab, this.$domNode).each(function(index){
    			if (tab.domNode === this){
        			var pane = $(justep.String.format(self.selector.paneByIndex, index), self.$domNode);
        			if (pane.length > 0){
        				result = pane[0];	
        			}
    			}
    		});
    		
    		return result;
    	},
    	
    	
    	setTabLabel: function(xid, label){
    		this.getTab(xid).set("label", label);
    	},
    	
    	getTabLabel: function(xid){
    		return this.getTab(xid).get("label");
    	},
    	
    	//只支持xid
    	setActiveTab: function(xid){
    		if (!xid) return;
        	this.getModel().componentPromise(xid).done(function(tab){
        		tab.show();
        	}).fail(function(err){
        		var code = justep.Message.JUSTEP230078;
				var msg = new justep.Message(code, xid);
				throw justep.Error.create(msg);
        	});
    	},
    	
    	addTabContent: function(xid, componentsOrNodes){
    		if (componentsOrNodes){
    			this.getTab(xid).addContent(componentsOrNodes);
    		}
    	},
    	
    	clearTabContent: function(xid){
    		this.getTab(xid).clearContent();
    	},
    	
    	clear: function(){
    		$(this.selector.pane, this.$domNode).each(function(index){
    			justep.Bind.removeNode(this);
    		});
    		$(this.selector.tab, this.$domNode).each(function(index){
    			justep.Bind.removeNode(this);
    		});
    	},
    	
    	getTab: function(xid){
    		var node = null;
    		var code = null;
    		if (xid instanceof Tab){
    			return xid;
    		}else if (typeof(xid) === "number"){
    			node = $(justep.String.format(this.selector.tabByIndex, xid), this.$domNode);
    			code = justep.Message.JUSTEP230077;
    		}else{
    			code = justep.Message.JUSTEP230078;
    		}
			var tab = this.getModel().comp(node || xid);
			if (tab){
				return tab;
			}else{
				var msg = new justep.Message(code, xid);
				throw justep.Error.create(msg);
			}
    	},
    	
        
        //组件初始化
        init: function(value, bindingContext){
	        this.callParent(value, bindingContext);
	        var self = this;
	        this.$domNode.on('show.bs.tab', this._fireDeselectEvent.bind(this));
	        this.$domNode.on('shown.bs.tab', this._fireSelectEvent.bind(this));
        },
        
        _fireSelectEvent: function(event){
        	var prevTab = event.relatedTarget ? this.getModel().comp($(event.relatedTarget).parent()[0]) : null;
        	var tab = event.target ? this.getModel().comp($(event.target).parent()[0]) : null;
        	//只触发自身的，不支持向上冒泡
        	if (tab.getTabs() !== this) return;
        	
        	var tabSelectEvent = {source: tab, prevTab: prevTab, tabs: this, cacne: false};
        	tab.fireEvent(Tab.SELECT_EVENT, tabSelectEvent);
        	if (tabSelectEvent.cacnel) return;
        	
        	
        	var selectEvent = {source: this, prevTab: prevTab, tab: tab, cancel: false};
        	this.fireEvent(Tabs.SELECT_EVENT, selectEvent);
        },
        
        _fireDeselectEvent: function(event){
        	if (event.relatedTarget){
        		var tab = this.getModel().comp($(event.relatedTarget).parent()[0]);
            	if (tab.getTabs() !== this) return;

        		var tabDeselectEvent = {source: tab, tabs: this, cacnel: false};
        		tab.fireEvent(Tab.DESELECT_EVENT, tabDeselectEvent);
        		if (tabDeselectEvent.cancel){
        			event.preventDefault();
        			return;
        		} 
        		
        		var deselectEvent = {source: this, tab: tab, cancel: false};
        		this.fireEvent(Tabs.DESELECT_EVENT, deselectEvent);
        		if (deselectEvent.cancel){
        			event.preventDefault();
        		} 
        	}
        },
        
        //组件初始化
        update: function(value, bindingContext){
	        this.callParent(value, bindingContext);
        }
   	});

	/**
	 * event格式：
	 * 	{
	 * 		source: this, 
	 * 		tab: tabObj,
	 * 		cacnel: false			
	 * 	}
	 */
	Tabs.DESELECT_EVENT = "onDeSelect";
	
	
	/**
	 * event格式：
	 * 	{
	 * 		source: this, 
	 * 		tab: tabObj,
	 * 		prevTab: prevTabObj,
	 * 		cacnel: false			
	 * 	}
	 */
	Tabs.SELECT_EVENT = "onSelect";

	
	justep.Component.register(url, Tabs);
	return Tabs;
});
