/**
	@name MessageDialog
	@component $UI/system/components/justep/messageDialog/messageDialog
	@extends BindComponent
	@extendurl $UI/system/lib/base/bindComponent
	@model UI2
	@description MessageDialog
*/

/**
	@name MessageDialog#xid
	@attribute 
	@type string
	@description 组件标示
*/

/**
	@name MessageDialog#title
	@attribute 
	@type string
	@description 标题
*/

/**
	@name MessageDialog#message
	@attribute 
	@type string
	@description 提示信息,支持html格式
*/

/**
	@name MessageDialog#type
	@attribute 
	@type string
	@description 类型，取值范围：OK,OKCancel,YesNo,YesNoCancel,Prompt
*/

/**
	@name MessageDialog#width
	@attribute 
	@type string
	@description 对话框宽度，高根据内容自动，默认值：270px
*/

/**
	@name MessageDialog#show
	@function
	@description 显示messageDialog
	@param {json} arg 属性值对
	<br/><b>结构如下：</b>
	<xmp> 
	{
			type: {string} 类型，取值范围：OK,OKCancel,YesNo,YesNoCancel,Prompt
			title: {string} 标题
			message: {string} 提示信息
			width: {string} 对话框宽度，高根据内容自动，默认值：270px
			callback: {function} 关闭后的回调,可参考onClose事件,回调执行this为组件，参数param包含button: 触发关闭的按钮type，取值范围：'ok'、'cancel'、'yes'、'no'	；input: 当type=='Prompt'时返回输入的值 
	}
	</xmp>	
*/

/**
	@name MessageDialog#set
	@function
	@description 设置属性值
	@param {json} arg 属性值对
	<br/><b>结构如下：</b>
	<xmp> 
	{
			type: {string} 类型，取值范围：OK,OKCancel,YesNo,YesNoCancel,Prompt
			title: {string} 标题
			message: {string} 提示信息
			width: {string} 对话框宽度，高根据内容自动，默认值：270px
	}
	</xmp>	
	@return {void} 
*/

/**
	@name MessageDialog#get
	@function
	@description 获取属性值
	@param {String} name 属性名称，取值范围："type"、"title"、"message"
	@return {Object} 
*/

/**
	@name MessageDialog#onClose
	@event
	@description <b>[回调型事件]</b>关闭对话框时触发事件
	@param {object} event 
	<br/><b>结构如下：</b>
	<xmp> 
	{
		"source" : 组件的js对象，
		"bindingContext" : 组件绑定的上下文，包含$model、$object等具体请参考bindingContext说明，
		"button" : 触发关闭的按钮type，取值范围：'ok'、'cancel'、'yes'、'no'
		"input" : 当type=='Prompt'时返回输入的值 
	}
	</xmp>	
*/

/**
	@name MessageDialog#onOK
	@event
	@description <b>[回调型事件]</b>点击OK按钮，关闭对话框时触发事件
	@param {object} event 
	<br/><b>结构如下：</b>
	<xmp> 
	{
		"source" : 组件的js对象，
		"bindingContext" : 组件绑定的上下文，包含$model、$object等具体请参考bindingContext说明，
		"button" : 触发关闭的按钮type=='ok'
		"input" : 当type=='Prompt'时返回输入的值 
	}
	</xmp>	
*/

/**
	@name MessageDialog#onCancel
	@event
	@description <b>[回调型事件]</b>点击Cancel按钮，关闭对话框时触发事件
	@param {object} event 
	<br/><b>结构如下：</b>
	<xmp> 
	{
		"source" : 组件的js对象，
		"bindingContext" : 组件绑定的上下文，包含$model、$object等具体请参考bindingContext说明，
		"button" : 触发关闭的按钮type=='cancel'
	}
	</xmp>	
*/

/**
	@name MessageDialog#onYes
	@event
	@description <b>[回调型事件]</b>点击Yes按钮，关闭对话框时触发事件
	@param {object} event 
	<br/><b>结构如下：</b>
	<xmp> 
	{
		"source" : 组件的js对象，
		"bindingContext" : 组件绑定的上下文，包含$model、$object等具体请参考bindingContext说明，
		"button" : 触发关闭的按钮type=='yes'
	}
	</xmp>	
*/

/**
	@name MessageDialog#onNo
	@event
	@description <b>[回调型事件]</b>点击Yes按钮，关闭对话框时触发事件
	@param {object} event 
	<br/><b>结构如下：</b>
	<xmp> 
	{
		"source" : 组件的js对象，
		"bindingContext" : 组件绑定的上下文，包含$model、$object等具体请参考bindingContext说明，
		"button" : 触发关闭的按钮type=='no'
	}
	</xmp>	
*/

