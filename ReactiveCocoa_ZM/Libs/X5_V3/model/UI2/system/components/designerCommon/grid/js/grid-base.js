/*
 * file from "src\jqxcore.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
    $.jqx = $.jqx || {}

    $.jqx.define = function (namespace, classname, baseclass) {
        namespace[classname] = function () {
            if (this.baseType) {
                this.base = new namespace[this.baseType]();
                this.base.defineInstance();
            }
            this.defineInstance();
        }

        namespace[classname].prototype.defineInstance = function () { };
        namespace[classname].prototype.base = null;
        namespace[classname].prototype.baseType = undefined;

        if (baseclass && namespace[baseclass])
            namespace[classname].prototype.baseType = baseclass;
    }

    // method call
    $.jqx.invoke = function (object, args) {
        if (args.length == 0)
            return;

        var method = typeof (args) == Array || args.length > 0 ? args[0] : args;
        var methodArg = typeof (args) == Array || args.length > 1 ? Array.prototype.slice.call(args, 1) : $({}).toArray();

        while (object[method] == undefined && object.base != null) {
            if (object[method] != undefined && $.isFunction(object[method]))
                return object[method].apply(object, methodArg);

            if (typeof method == 'string') {
                var methodLowerCase = method.toLowerCase();
                if (object[methodLowerCase] != undefined && $.isFunction(object[methodLowerCase])) {
                    return object[methodLowerCase].apply(object, methodArg);
                }
            }
            object = object.base;
        }

        if (object[method] != undefined && $.isFunction(object[method]))
            return object[method].apply(object, methodArg);

        if (typeof method == 'string') {
            var methodLowerCase = method.toLowerCase();
            if (object[methodLowerCase] != undefined && $.isFunction(object[methodLowerCase])) {
                return object[methodLowerCase].apply(object, methodArg);
            }
        }

        return;
    }
    $.jqx.hasProperty = function (obj, property) {
        if (typeof (property) == 'object') {
            for (var prop in property) {
                var o = obj;
                while (o) {
                    if (o.hasOwnProperty(prop))
                        return true;
                    if (o.hasOwnProperty(prop.toLowerCase()))
                        return true;
                    o = o.base;
                }
                return false;
            }
        }
        else {
            while (obj) {
                if (obj.hasOwnProperty(property))
                    return true;
                if (obj.hasOwnProperty(property.toLowerCase()))
                    return true;
                obj = obj.base;
            }
        }

        return false;
    }

    $.jqx.hasFunction = function (object, args) {
        if (args.length == 0)
            return false;

        if (object == undefined)
            return false;

        var method = typeof (args) == Array || args.length > 0 ? args[0] : args;
        var methodArg = typeof (args) == Array || args.length > 1 ? Array.prototype.slice.call(args, 1) : {};

        while (object[method] == undefined && object.base != null) {
            if (object[method] && $.isFunction(object[method]))
                return true;

            if (typeof method == 'string') {
                var methodLowerCase = method.toLowerCase();
                if (object[methodLowerCase] && $.isFunction(object[methodLowerCase]))
                    return true;
            }
            object = object.base;
        }

        if (object[method] && $.isFunction(object[method]))
            return true;

        if (typeof method == 'string') {
            var methodLowerCase = method.toLowerCase();
            if (object[methodLowerCase] && $.isFunction(object[methodLowerCase]))
                return true;
        }

        return false;
    }

    $.jqx.isPropertySetter = function (obj, args) {
        if (args.length == 1 && typeof (args[0]) == 'object')
            return true;

        if (args.length == 2 &&
            typeof (args[0]) == 'string' &&
            !$.jqx.hasFunction(obj, args)) {
            return true;
        }

        return false;
    }

    $.jqx.validatePropertySetter = function (obj, args, suppressException) {
        if (!$.jqx.propertySetterValidation)
            return true;

        if (args.length == 1 && typeof (args[0]) == 'object') {
            for (var i in args[0]) {
                var o = obj;
                while (!o.hasOwnProperty(i) && o.base)
                    o = o.base;

                if (!o || !o.hasOwnProperty(i)) {
                    if (!suppressException) {
                        var hasLowerCase = o.hasOwnProperty(i.toString().toLowerCase());
                        if (!hasLowerCase) {
                            throw 'Invalid property: ' + i;
                        }
                        else return true;
                    }
                    return false;
                }
            }

            return true;
        }

        if (args.length != 2) {
            if (!suppressException)
                throw 'Invalid property: ' + args.length >= 0 ? args[0] : '';

            return false;
        }

        while (!obj.hasOwnProperty(args[0]) && obj.base)
            obj = obj.base;

        if (!obj || !obj.hasOwnProperty(args[0])) {
            if (!suppressException)
                throw 'Invalid property: ' + args[0];

            return false;
        }

        return true;
    }

    $.jqx.set = function (object, args) {
        if (args.length == 1 && typeof (args[0]) == 'object') {
            $.each(args[0], function (key, value) {
                var obj = object;
                while (!obj.hasOwnProperty(key) && obj.base != null)
                    obj = obj.base;

                if (obj.hasOwnProperty(key)) {
                    $.jqx.setvalueraiseevent(obj, key, value);
                }
                else if (obj.hasOwnProperty(key.toLowerCase())) {
                    $.jqx.setvalueraiseevent(obj, key.toLowerCase(), value);
                }
                else if ($.jqx.propertySetterValidation)
                    throw "jqxCore: invalid property '" + key + "'";
            });
        }
        else if (args.length == 2) {
            while (!object.hasOwnProperty(args[0]) && object.base)
                object = object.base;

            if (object.hasOwnProperty(args[0])) {
                $.jqx.setvalueraiseevent(object, args[0], args[1]);
            }
            else if (object.hasOwnProperty(args[0].toLowerCase())) {
                $.jqx.setvalueraiseevent(object, args[0].toLowerCase(), args[1]);
            }
            else if ($.jqx.propertySetterValidation)
                throw "jqxCore: invalid property '" + args[0] + "'";
        }
    }

    $.jqx.setvalueraiseevent = function (object, key, value) {
        var oldVal = object[key];

        object[key] = value;

        if (!object.isInitialized)
            return;

        if (object.propertyChangedHandler != undefined)
            object.propertyChangedHandler(object, key, oldVal, value);

        if (object.propertyChangeMap != undefined && object.propertyChangeMap[key] != undefined)
            object.propertyChangeMap[key](object, key, oldVal, value);
    };

    $.jqx.get = function (object, args) {
        if (args == undefined || args == null)
            return undefined;

        if (object.propertyMap) {
            var newVal = object.propertyMap(args);
            if (newVal != null)
                return newVal;
        }

        if (object.hasOwnProperty(args))
            return object[args];

        if (object.hasOwnProperty(args.toLowerCase()))
            return object[args.toLowerCase()];

        var arg = undefined;
        if (typeof (args) == Array) {
            if (args.length != 1)
                return undefined;
            arg = args[0];
        }
        else if (typeof (args) == 'string')
            arg = args;

        while (!object.hasOwnProperty(arg) && object.base)
            object = object.base;

        if (object)
            return object[arg];

        return undefined;
    }

    $.jqx.serialize = function (obj) {
        var txt = '';
        if ($.isArray(obj)) {
            txt = '['
            for (var i = 0; i < obj.length; i++) {
                if (i > 0)
                    txt += ', ';
                txt += $.jqx.serialize(obj[i]);
            }
            txt += ']';
        }
        else if (typeof (obj) == 'object') {
            txt = '{';
            var j = 0;
            for (var i in obj) {
                if (j++ > 0)
                    txt += ', ';
                txt += i + ': ' + $.jqx.serialize(obj[i]);
            }
            txt += '}';
        }
        else
            txt = obj.toString();

        return txt;
    }

    $.jqx.propertySetterValidation = true;

    $.jqx.jqxWidgetProxy = function (controlName, element, args) {
        var host = $(element);
        var vars = $.data(element, controlName);
        if (vars == undefined) {
            return undefined;
        }

        var obj = vars.instance;

        if ($.jqx.hasFunction(obj, args))
            return $.jqx.invoke(obj, args);

        if ($.jqx.isPropertySetter(obj, args)) {
            if ($.jqx.validatePropertySetter(obj, args)) {
                $.jqx.set(obj, args);
                return undefined;
            }
        } else {
            if (typeof (args) == 'object' && args.length == 0)
                return;
            else if (typeof (args) == 'object' && args.length == 1 && $.jqx.hasProperty(obj, args[0]))
                return $.jqx.get(obj, args[0]);
            else if (typeof (args) == 'string' && $.jqx.hasProperty(obj, args[0]))
                return $.jqx.get(obj, args);
        }

        throw "jqxCore: Invalid parameter '" + $.jqx.serialize(args) + "' does not exist.";
        return undefined;
    }

    $.jqx.applyWidget = function (element, controlName, args, instance) {
        var WinJS = false;
        try {
            WinJS = window.MSApp != undefined;
        }
        catch (e) {
        }

        var host = $(element);
        if (!instance) {
            instance = new $.jqx['_' + controlName]();
        }
        else {
            instance.host = host;
            instance.element = element;
        }
        if (element.id == "") {
            element.id = $.jqx.utilities.createId();
        }

        var vars = { host: host, element: element, instance: instance };

        instance.widgetName = controlName;

        $.data(element, controlName, vars);
        $.data(element, 'jqxWidget', vars.instance);

        var inits = new Array();
        var instance = vars.instance;
        while (instance) {
            instance.isInitialized = false;
            inits.push(instance);
            instance = instance.base;
        }
        inits.reverse();
        inits[0].theme = $.jqx.theme || '';

        $.jqx.jqxWidgetProxy(controlName, element, args);

        for (var i in inits) {
            instance = inits[i];
            if (i == 0) {
                instance.host = host;
                instance.element = element;
                instance.WinJS = WinJS;
            }
            if (instance != undefined) {
                if (instance.createInstance != null) {
                    if (WinJS) {
                        MSApp.execUnsafeLocalFunction(function () {
                            instance.createInstance(args);
                        });
                    }
                    else {
                        instance.createInstance(args);
                    }
                }
            }
        }

        for (var i in inits) {
            if (inits[i] != undefined) {
                inits[i].isInitialized = true;
            }
        }

        if (WinJS) {
            MSApp.execUnsafeLocalFunction(function () {
                vars.instance.refresh(true);
            });
        }
        else {
            vars.instance.refresh(true);
        }

    }

    $.jqx.jqxWidget = function (name, base, params) {
        var WinJS = false;
        try {
            jqxArgs = Array.prototype.slice.call(params, 0);
        }
        catch (e) {
            jqxArgs = '';
        }

        try {
            WinJS = window.MSApp != undefined;
        }
        catch (e) {
        }

        var controlName = name;

        var baseControl = '';
        if (base)
            baseControl = '_' + base;
        $.jqx.define($.jqx, '_' + controlName, baseControl);

        $.fn[controlName] = function () {
            var args = Array.prototype.slice.call(arguments, 0);

            if (args.length == 0 || (args.length == 1 && typeof (args[0]) == 'object')) {
                if (this.length == 0) {
                    if (this.selector) {
                        throw new Error('Invalid jQuery Selector - ' + this.selector + '! Please, check whether the used ID or CSS Class name is correct.');
                    }
                    else {
                        throw new Error('Invalid jQuery Selector! Please, check whether the used ID or CSS Class name is correct.');
                    }
                }

                return this.each(function () {
                    var host = $(this);
                    var element = this; // element == this == host[0]
                    var vars = $.data(element, controlName);

                    if (vars == null) {
                        $.jqx.applyWidget(element, controlName, args, undefined);
                    }
                    else {
                        $.jqx.jqxWidgetProxy(controlName, this, args);
                    }
                }); // each
            }
            else {
                if (this.length == 0) {
                    if (this.selector) {
                        throw new Error('Invalid jQuery Selector - ' + this.selector + '! Please, check whether the used ID or CSS Class name is correct.');
                    }
                    else {
                        throw new Error('Invalid jQuery Selector! Please, check whether the used ID or CSS Class name is correct.');
                    }
                }

                var returnVal = null;

                var cnt = 0;
                this.each(function () {
                    var result = $.jqx.jqxWidgetProxy(controlName, this, args);

                    if (cnt == 0) {
                        returnVal = result;
                        cnt++;
                    }
                    else {
                        if (cnt == 1) {
                            var tmp = [];
                            tmp.push(returnVal);
                            returnVal = tmp;
                        }
                        returnVal.push(result);
                    }
                }); // each
            }

            return returnVal;
        }

        try {
            $.extend($.jqx['_' + controlName].prototype, Array.prototype.slice.call(params, 0)[0]);
        }
        catch (e) {
        }

        $.extend($.jqx['_' + controlName].prototype, {
            toThemeProperty: function (propertyName, override) {
                if (this.theme == '')
                    return propertyName;

                if (override != null && override) {
                    return propertyName + '-' + this.theme;
                }

                return propertyName + ' ' + propertyName + '-' + this.theme;
            }
        });

        $.jqx['_' + controlName].prototype.refresh = function () {
            if (this.base)
                this.base.refresh(true);
        }
        $.jqx['_' + controlName].prototype.createInstance = function () {
        }
        $.jqx['_' + controlName].prototype.applyTo = function (element, args) {
            if (!(args instanceof Array)) {
                var a = [];
                a.push(args);
                args = a;
            }

            $.jqx.applyWidget(element, controlName, args, this);
        }

        $.jqx['_' + controlName].prototype.getInstance = function () {
            return this;
        }
        $.jqx['_' + controlName].prototype.propertyChangeMap = {};

        $.jqx['_' + controlName].prototype.addHandler = function (source, event, func, data) {
            switch (event) {
                case 'mousewheel':
                    if (window.addEventListener) {
                        if ($.jqx.browser.mozilla) {
                            source[0].addEventListener('DOMMouseScroll', func, false);
                        }
                        else {
                            source[0].addEventListener('mousewheel', func, false);
                        }
                        return false;
                    }
                    break;
                case 'mousemove':
                    if (window.addEventListener && !data) {
                        source[0].addEventListener('mousemove', func, false);
                        return false;
                    }
                    break;
            }

            if (data == undefined || data == null) {
                if (source.on) {
                    source.on(event, func);
                }
                else {
                    source.bind(event, func);
                }
            }
            else {
                if (source.on) {
                    source.on(event, data, func);
                }
                else {
                    source.bind(event, data, func);
                }
            }
        };

        $.jqx['_' + controlName].prototype.removeHandler = function (source, event, func) {
            switch (event) {
                case 'mousewheel':
                    if (window.removeEventListener) {
                        if ($.jqx.browser.mozilla) {
                            source[0].removeEventListener('DOMMouseScroll', func, false);
                        }
                        else {
                            source[0].removeEventListener('mousewheel', func, false);
                        }
                        return false;
                    }
                    break;
                case 'mousemove':
                    if (func) {
                        if (window.removeEventListener) {
                            source[0].removeEventListener('mousemove', func, false);
                        }
                    }
                    break;
            }

            if (event == undefined) {
                if (source.off) {
                    source.off();
                }
                else source.unbind();
                return;
            }

            if (func == undefined) {
                if (source.off) {
                    source.off(event);
                }
                else {
                    source.unbind(event);
                }
            }
            else {
                if (source.off) {
                    source.off(event, func);
                }
                else {
                    source.unbind(event, func);
                }
            }
        };
    } // jqxWidget

    $.jqx.theme = $.jqx.theme || "";
    $.jqx.ready = function () {
        $(window).trigger('jqxReady');
    }
    $.jqx.init = function () {
        $.each(arguments[0], function (index, value) {
            if (index == "theme") {
                $.jqx.theme = value;
            }
            if (index == "scrollBarSize") {
                $.jqx.utilities.scrollBarSize = value;
            }
            if (index == "touchScrollBarSize") {
                $.jqx.utilities.touchScrollBarSize = value;
            }
            if (index == "scrollBarButtonsVisibility") {
                $.jqx.utilities.scrollBarButtonsVisibility = value;
            }
        });
    }

    // Utilities
    $.jqx.utilities = $.jqx.utilities || {};
    $.extend($.jqx.utilities,
    {
        scrollBarSize: 15,
        touchScrollBarSize: 10,
        scrollBarButtonsVisibility: "visible",
        createId: function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            return "jqxWidget" + S4() + S4();
        },

        setTheme: function (oldTheme, theme, element) {
            if (typeof element === 'undefined') {
                return;
            }
            var classNames = element[0].className.split(' '),
                oldClasses = [], newClasses = [],
                children = element.children();
            for (var i = 0; i < classNames.length; i += 1) {
                if (classNames[i].indexOf(oldTheme) >= 0) {
                    if (oldTheme.length > 0) {
                        oldClasses.push(classNames[i]);
                        newClasses.push(classNames[i].replace(oldTheme, theme));
                    }
                    else {
                        newClasses.push(classNames[i] + '-' + theme);
                    }
                }
            }
            this._removeOldClasses(oldClasses, element);
            this._addNewClasses(newClasses, element);
            for (var i = 0; i < children.length; i += 1) {
                this.setTheme(oldTheme, theme, $(children[i]));
            }
        },

        _removeOldClasses: function (classes, element) {
            for (var i = 0; i < classes.length; i += 1) {
                element.removeClass(classes[i]);
            }
        },

        _addNewClasses: function (classes, element) {
            for (var i = 0; i < classes.length; i += 1) {
                element.addClass(classes[i]);
            }
        },

        getOffset: function (el) {
            var left = $.jqx.mobile.getLeftPos(el[0]);
            var top = $.jqx.mobile.getTopPos(el[0]);
            return { top: top, left: left };
        },

        resize: function(element, callback, destroy, checkForHidden)
        {
            if (checkForHidden === undefined) {
                checkForHidden = true;
            }

            var index = -1;
            var that = this;
            var getHiddenIndex = function (element) {
                if (!that.hiddenWidgets) {
                    return -1;
                }

                var hiddenIndex = -1;
                for (var i = 0; i < that.hiddenWidgets.length; i++) {
                    if (element.id) {
                        if (that.hiddenWidgets[i].id == element.id) {
                            hiddenIndex = i;
                            break;
                        }
                    }
                    else {
                        if (that.hiddenWidgets[i].id == element[0].id) {
                            hiddenIndex = i;
                            break;
                        }
                    }
                }
                return hiddenIndex;
            }


            if (this.resizeHandlers) {
                for (var i = 0; i < this.resizeHandlers.length; i++) {
                    if (element.id) {
                        if (this.resizeHandlers[i].id == element.id) {
                            index = i;
                            break;
                        }
                    }
                    else {
                        if (this.resizeHandlers[i].id == element[0].id) {
                            index = i;
                            break;
                        }
                    }
                }

                if (destroy === true) {
                    if (index != -1) {
                        this.resizeHandlers.splice(index, 1);
                    }

                    if (this.resizeHandlers.length == 0) {
                        var w = $(window);
                        if (w.off) {
                            w.off('resize.jqx');
                            w.off('orientationchange.jqx');
                            w.off('orientationchanged.jqx');
                        }
                        else {
                            w.unbind('resize.jqx');
                            w.unbind('orientationchange.jqx');
                            w.unbind('orientationchanged.jqx');
                        }
                        this.resizeHandlers = null;
                    }
                    var hiddenIndex = getHiddenIndex(element);
                    if (hiddenIndex != -1 && this.hiddenWidgets) {
                        this.hiddenWidgets.splice(hiddenIndex, 1);
                    }
                    return;
                }
            }
            else if (destroy === true) {
                var hiddenIndex = getHiddenIndex(element);
                if (hiddenIndex != -1 && this.hiddenWidgets) {
                    this.hiddenWidgets.splice(hiddenIndex, 1);
                }
                return;
            }
            var that = this;
            var doResize = function (isHidden, type) {
                if (!that.resizeHandlers)
                    return;

                var getParentsCount = function (element) {
                    var index = -1;
                    var parent = element.parentNode;
                    while (parent) {
                        index++;
                        parent = parent.parentNode;
                    }
                    return index;
                }

                var compare = function (value1, value2) {
                    if (!value1.widget || !value2.widget)
                        return 0;

                    var parents1 = getParentsCount(value1.widget[0]);
                    var parents2 = getParentsCount(value2.widget[0]);

                    try {
                        if (parents1 < parents2) { return -1; }
                        if (parents1 > parents2) { return 1; }
                    }
                    catch (error) {
                        var er = error;
                    }

                    return 0;
                };

                that.hiddenWidgets = new Array();
                that.resizeHandlers.sort(compare);
                for(var i = 0; i < that.resizeHandlers.length; i++)
                {
                    var handler = that.resizeHandlers[i];
                    var widget = handler.widget;
                    var data = handler.data;
                    if (!data) continue;
                    if (!data.jqxWidget) continue;

                    var width = data.jqxWidget.width;
                    var height = data.jqxWidget.height;

                    if (data.jqxWidget.base) {
                        if (width == undefined) {
                            width = data.jqxWidget.base.width;
                        }
                        if (height == undefined) {
                            height = data.jqxWidget.base.height;
                        }
                    }

                    var percentageSize = false;
                    if (width != null && width.toString().indexOf("%") != -1) {
                        percentageSize = true;
                    }

                    if (height != null && height.toString().indexOf("%") != -1) {
                        percentageSize = true;
                    }

                    if ($.jqx.isHidden(widget)) {
                        if (getHiddenIndex(widget) === -1) {
                            if (percentageSize || isHidden === true) {
                                if (handler.data.nestedWidget !== true) {
                                    that.hiddenWidgets.push(handler);
                                }
                            }
                        }
                    }
                    else if (isHidden === undefined || isHidden !== true) {
                        if (percentageSize) {
                            handler.callback(type);
                            if (that.hiddenWidgets.indexOf(handler) >= 0) {
                                that.hiddenWidgets.splice(that.hiddenWidgets.indexOf(handler), 1);
                            }
                        }
                    }
                };
                if (that.hiddenWidgets.length > 0) {
                    that.hiddenWidgets.sort(compare);
                    if (that.__resizeInterval) clearInterval(that.__resizeInterval);
                    that.__resizeInterval = setInterval(function () {
                        var hasHiddenWidget = false;
                        var currentHiddenWidgets = new Array();
                        for (var p = 0; p < that.hiddenWidgets.length; p++) {
                            var handler = that.hiddenWidgets[p];
                            if ($.jqx.isHidden(handler.widget)) {
                                hasHiddenWidget = true;
                                currentHiddenWidgets.push(handler);
                            }
                            else {
                                if (handler.callback) {
                                    handler.callback(type);
                                }
                            }
                        }
                        that.hiddenWidgets = currentHiddenWidgets;
                        if (!hasHiddenWidget) {
                            clearInterval(that.__resizeInterval);
                        }
                    }, 100);
                }
            }

            if (!this.resizeHandlers) {
                this.resizeHandlers = new Array();
             
                var w = $(window);
                if (w.on) {
                    this._resizeTimer = null;
                    w.on('resize.jqx', function (event) {
                        if (that._resizeTimer != undefined) {
                            clearTimeout(that._resizeTimer);
                        }
                        that._resizeTimer = setTimeout(function () {
                            doResize(null, 'resize');
                        }, 10);
                    });
                    w.on('orientationchange.jqx', function (event) {
                        doResize(null, 'orientationchange');
                    });
                    w.on('orientationchanged.jqx', function (event) {
                        doResize(null, 'orientationchange');
                    });
                }
                else {
                    w.bind('resize.jqx', function (event) {
                        doResize(null, 'orientationchange');
                    });
                    w.bind('orientationchange.jqx', function (event) {
                        doResize(null, 'orientationchange');
                    });
                    w.bind('orientationchanged.jqx', function (event) {
                        doResize(null, 'orientationchange');
                    });
                }
            }
            if (checkForHidden) {
                if (index === -1) {
                    this.resizeHandlers.push({ id: element[0].id, widget: element, callback: callback, data: element.data() });
                }
            }
            if ($.jqx.isHidden(element) && checkForHidden === true) {
                doResize(true);
            }
        },

        html: function (element, value) {
            if (!$(element).on) {
                return $(element).html(value);
            }
            try
            {
                return jQuery.access(element, function (value) {
                    var elem = element[0] || {},
                        i = 0,
                        l = element.length;

                    if (value === undefined) {
                        return elem.nodeType === 1 ?
                            elem.innerHTML.replace(rinlinejQuery, "") :
                            undefined;
                    }

                    var rnoInnerhtml = /<(?:script|style|link)/i,
                        nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
            "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
                        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
                        rtagName = /<([\w:]+)/,
                        rnocache = /<(?:script|object|embed|option|style)/i,
                        rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
                        rleadingWhitespace = /^\s+/,
                        wrapMap = {
                            option: [1, "<select multiple='multiple'>", "</select>"],
                            legend: [1, "<fieldset>", "</fieldset>"],
                            thead: [1, "<table>", "</table>"],
                            tr: [2, "<table><tbody>", "</tbody></table>"],
                            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
                            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
                            area: [1, "<map>", "</map>"],
                            _default: [0, "", ""]
                        };

                    if (typeof value === "string" && !rnoInnerhtml.test(value) &&
                        (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) &&
                        (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) &&
                        !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

                        value = value.replace(rxhtmlTag, "<$1></$2>");

                        try {
                            for (; i < l; i++) {
                                elem = this[i] || {};
                                if (elem.nodeType === 1) {
                                    jQuery.cleanData(elem.getElementsByTagName("*"));
                                    elem.innerHTML = value;
                                }
                            }

                            elem = 0;
                        } catch (e) { }
                    }

                    if (elem) {
                        element.empty().append(value);
                    }
                }, null, value, arguments.length);
            }
            catch (error) {
                return $(element).html(value);
            }
        },

        hasTransform: function (el) {
            var transform = "";
            transform = el.css('transform');

            if (transform == "" || transform == 'none') {
                transform = el.parents().css('transform');
                if (transform == "" || transform == 'none') {
                    var browserInfo = $.jqx.utilities.getBrowser();
                    if (browserInfo.browser == 'msie') {
                        transform = el.css('-ms-transform');
                        if (transform == "" || transform == 'none') {
                            transform = el.parents().css('-ms-transform');
                        }
                    }
                    else if (browserInfo.browser == 'chrome') {
                        transform = el.css('-webkit-transform');
                        if (transform == "" || transform == 'none') {
                            transform = el.parents().css('-webkit-transform');
                        }
                    }
                    else if (browserInfo.browser == 'opera') {
                        transform = el.css('-o-transform');
                        if (transform == "" || transform == 'none') {
                            transform = el.parents().css('-o-transform');
                        }
                    }
                    else if (browserInfo.browser == 'mozilla') {
                        transform = el.css('-moz-transform');
                        if (transform == "" || transform == 'none') {
                            transform = el.parents().css('-moz-transform');
                        }
                    }
                } else {
                    return transform != "" && transform != 'none';
                }
            }
            if (transform == "" || transform == 'none') {
                transform = $(document.body).css('transform');
            }
            return transform != "" && transform != 'none' && transform != null;
        },

        getBrowser: function () {
            var ua = navigator.userAgent.toLowerCase();

            var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
		        /(webkit)[ \/]([\w.]+)/.exec(ua) ||
		        /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
		        /(msie) ([\w.]+)/.exec(ua) ||
		        ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
		        [];

            var obj = {
                browser: match[1] || "",
                version: match[2] || "0"
            };
            if (ua.indexOf("rv:11.0") >= 0 && ua.indexOf(".net4.0c") >= 0) {
                obj.browser = "msie";
                obj.version = "11";
                match[1] = "msie";
            }
            obj[match[1]] = match[1];
            return obj;
        }
    });
    $.jqx.browser = $.jqx.utilities.getBrowser();
    $.jqx.isHidden = function (element) {
        try
        {
            var w = element[0].offsetWidth, h = element[0].offsetHeight;
            if (w === 0 || h === 0)
                return true;
            else {
                return false;
            }
        }
        catch (error) {
            return false;
        }
    };

    $.jqx.ariaEnabled = true;
    $.jqx.aria = function (that, property, value) {
        if (!$.jqx.ariaEnabled)
            return;

        if (property == undefined) {
            $.each(that.aria, function (index, value) {
                var attrValue = !that.base ? that.host.attr(index) : that.base.host.attr(index);
                if (attrValue != undefined && !$.isFunction(attrValue)) {
                    var newValue = attrValue;
                    switch (value.type) {
                        case "number":
                            newValue = new Number(attrValue);
                            if (isNaN(newValue)) newValue = attrValue;
                            break;
                        case "boolean":
                            newValue = attrValue == "true" ? true : false;
                            break;
                        case "date":
                            newValue = new Date(attrValue);
                            if (newValue == "Invalid Date" || isNaN(newValue)) newValue = attrValue;
                            break;
                    }

                    that[value.name] = newValue;
                }
                else {
                    var attrValue = that[value.name];
                    if ($.isFunction(attrValue)) attrValue = that[value.name]();
                    if (attrValue == undefined) attrValue = "";
                    try
                    {
                        !that.base ? that.host.attr(index, attrValue.toString()) : that.base.host.attr(index, attrValue.toString());
                    }
                    catch (error) {
                    }
                }
            });
        }
        else {
            try {
                if (that.host) {
                    if (!that.base) {
                        if (that.host) {
                            if (that.element.setAttribute) {
                                that.element.setAttribute(property, value.toString());
                            }
                            else {
                                that.host.attr(property, value.toString());
                            }
                        }
                        else {
                            that.attr(property, value.toString());
                        }
                    }
                    else {
                        if (that.base.host) {
                            that.base.host.attr(property, value.toString());
                        }
                        else {
                            that.attr(property, value.toString());
                        }
                    }
                }
                else if (that.setAttribute) {
                    that.setAttribute(property, value.toString());
                }
            }
            catch (error) {
            }
        }
    };

    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function (elt /*, from*/) {
            var len = this.length;

            var from = Number(arguments[1]) || 0;
            from = (from < 0)
                ? Math.ceil(from)
                : Math.floor(from);
            if (from < 0)
                from += len;

            for (; from < len; from++) {
                if (from in this &&
                this[from] === elt)
                    return from;
            }
            return -1;
        };
    }

    $.jqx.mobile = $.jqx.mobile || {};
    $.jqx.position = function (event) {
        var left = parseInt(event.pageX);
        var top = parseInt(event.pageY);

        if ($.jqx.mobile.isTouchDevice()) {
            var touches = $.jqx.mobile.getTouches(event);
            var touch = touches[0];
            left = parseInt(touch.pageX);
            top = parseInt(touch.pageY);
        }
        return { left: left, top: top }
    }

    $.extend($.jqx.mobile,
    {
        _touchListener: function (e, me) {
            var createTouchEvent = function (name, e) {
                var event = document.createEvent('MouseEvents');

                event.initMouseEvent(
                    name,
                    e.bubbles,
                    e.cancelable,
                    e.view,
                    e.detail,
                    e.screenX,
                    e.screenY,
                    e.clientX,
                    e.clientY,
                    e.ctrlKey,
                    e.altKey,
                    e.shiftKey,
                    e.metaKey,
                    e.button,
                    e.relatedTarget
                );
                event._pageX = e.pageX;
                event._pageY = e.pageY;

                return event;
            }

            var eventMap = { 'mousedown': 'touchstart', 'mouseup': 'touchend', 'mousemove': 'touchmove' };
            var event = createTouchEvent(eventMap[e.type], e);
            e.target.dispatchEvent(event);

            var fn = e.target['on' + eventMap[e.type]];
            if (typeof fn === 'function') fn(e);
        },

        setMobileSimulator: function (element, value) {
            if (this.isTouchDevice()) {
                return;
            }

            this.simulatetouches = true;
            if (value == false) {
                this.simulatetouches = false;
            }

            var eventMap = { 'mousedown': 'touchstart', 'mouseup': 'touchend', 'mousemove': 'touchmove' };

            var self = this;
            if (window.addEventListener) {
                var subscribeToEvents = function () {
                    for (var key in eventMap) {
                        if (element.addEventListener) {
                            element.removeEventListener(key, self._touchListener);
                            element.addEventListener(key, self._touchListener, false);
                        }

                        //  document.removeEventListener(key, self._touchListener);
                        //  document.addEventListener(key, self._touchListener, false);
                    }
                }

                if ($.jqx.browser.msie) {
                    subscribeToEvents();
                }
                else {
                    subscribeToEvents();
                }
            }
        },

        isTouchDevice: function () {
            if (this.touchDevice != undefined)
                return this.touchDevice;

            var txt = "Browser CodeName: " + navigator.appCodeName + "";
            txt += "Browser Name: " + navigator.appName + "";
            txt += "Browser Version: " + navigator.appVersion + "";
            txt += "Platform: " + navigator.platform + "";
            txt += "User-agent header: " + navigator.userAgent + "";

            if (txt.indexOf('Android') != -1)
                return true;

            if (txt.indexOf('IEMobile') != -1)
                return true;

            if (txt.indexOf('Windows Phone') != -1)
                return true;

            if (txt.indexOf('WPDesktop') != -1)
                return true;
         
            if (txt.indexOf('ZuneWP7') != -1)
                return true;

            if (txt.indexOf('BlackBerry') != -1 && txt.indexOf('Mobile Safari') != -1)
                return true;

            if (txt.indexOf('ipod') != -1)
                return true;

            if (txt.indexOf('nokia') != -1 || txt.indexOf('Nokia') != -1)
                return true;

            if (txt.indexOf('Chrome/17') != -1)
                return false;

            if (txt.indexOf('CrOS') != -1)
                return false;

            if (txt.indexOf('Opera') != -1 && txt.indexOf('Mobi') == -1 && txt.indexOf('Mini') == -1 && txt.indexOf('Platform: Win') != -1) {
                return false;
            }

            if (txt.indexOf('Opera') != -1 && txt.indexOf('Mobi') != -1 && txt.indexOf('Opera Mobi') != -1) {
                return true;
            }

            var deviceTypes = {
                    ios: 'i(?:Pad|Phone|Pod)(?:.*)CPU(?: iPhone)? OS ',
                    android: '(Android |HTC_|Silk/)',
                    blackberry: 'BlackBerry(?:.*)Version\/',
                    rimTablet: 'RIM Tablet OS ',
                    webos: '(?:webOS|hpwOS)\/',
                    bada: 'Bada\/'
            }

            // check for IPad, IPhone, IE and Chrome
            try {
                if (this.touchDevice != undefined)
                    return this.touchDevice;

                this.touchDevice = false;
                for (i in deviceTypes) {
                    if (deviceTypes.hasOwnProperty(i)) {
                        prefix = deviceTypes[i];                  
                        match = txt.match(new RegExp('(?:' + prefix + ')([^\\s;]+)'));
                        if (match) {
                            if (i.toString() == "blackberry") {
                                // handle touches through mouse pointer.
                                this.touchDevice = false;
                                return false;
                            }

                            this.touchDevice = true;
                            return true;
                        }
                    }
                }

                if (navigator.platform.toLowerCase().indexOf('win') != -1) {
                    if (navigator.userAgent.indexOf('Windows Phone') >= 0 || navigator.userAgent.indexOf('WPDesktop') >= 0 || navigator.userAgent.indexOf('IEMobile') >= 0 || navigator.userAgent.indexOf('ZuneWP7') >= 0) {
                        this.touchDevice = true;
                        return true;
                    }
                    else {
                        if (navigator.userAgent.indexOf('Touch') >= 0) {
                            var supported = ('MSPointerDown' in window);
                            if (supported) {
                                this.touchDevice = true;
                                return true;
                            }
                            if (navigator.userAgent.indexOf('ARM') >= 0) {
                                this.touchDevice = true;
                                return true;
                            }

                            this.touchDevice = false;
                            return false;
                        }
                    }
                }

                if (navigator.platform.toLowerCase().indexOf('win') != -1) {
                    this.touchDevice = false;
                    return false;
                }
                if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
                    this.touchDevice = true;
                }
                return this.touchDevice;
            } catch (e) {
                this.touchDevice = false;
                return false;
            }
        },

        getLeftPos: function (inputObj) {
            var returnValue = inputObj.offsetLeft;
            while ((inputObj = inputObj.offsetParent) != null) {
                if (inputObj.tagName != 'HTML') {
                    returnValue += inputObj.offsetLeft;
                    if (document.all) returnValue += inputObj.clientLeft;
                }
            }
            return returnValue;
        },

        getTopPos: function (inputObj) {
            var returnValue = inputObj.offsetTop;
            var initialOffset = $(inputObj).coord();
            while ((inputObj = inputObj.offsetParent) != null) {
                if (inputObj.tagName != 'HTML') {
                    returnValue += (inputObj.offsetTop - inputObj.scrollTop);
                    if (document.all) returnValue += inputObj.clientTop;
                }
            }
            var agent = navigator.userAgent.toLowerCase();
            var wp8 = (agent.indexOf('windows phone') != -1 || agent.indexOf('WPDesktop') != -1 || agent.indexOf('ZuneWP7') != -1 || agent.indexOf('msie 9') != -1 || agent.indexOf('msie 11') != -1 || agent.indexOf('msie 10') != -1) && agent.indexOf('touch') != -1;
            if (wp8) {
                return initialOffset.top;
            }

            if (this.isSafariMobileBrowser()) {
                if (this.isSafari4MobileBrowser() && this.isIPadSafariMobileBrowser()) {
                    return returnValue;
                }
                if (agent.indexOf('version/7') != -1) {
                    return initialOffset.top;
                }

                returnValue = returnValue + $(window).scrollTop();
            }

            return returnValue;
        },

        isChromeMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('android') != -1;
            return result;
        },

        isOperaMiniMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('opera mini') != -1 || agent.indexOf('opera mobi') != -1;
            return result;
        },

        isOperaMiniBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('opera mini') != -1;
            return result;
        },

        isNewSafariMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('ipod') != -1;
            result = result && (agent.indexOf('version/5') != -1);
            return result;
        },

        isSafari4MobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('ipod') != -1;
            result = result && (agent.indexOf('version/4') != -1);
            return result;
        },

        isWindowsPhone: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = (agent.indexOf('windows phone') != -1 || agent.indexOf('WPDesktop') != -1 || agent.indexOf('ZuneWP7') != -1 || agent.indexOf('msie 9') != -1 || agent.indexOf('msie 11') != -1 || agent.indexOf('msie 10') != -1) && agent.indexOf('touch') != -1;
            return result;
        },

        isSafariMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('ipod') != -1;
            return result;
        },

        isIPadSafariMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('ipad') != -1;
            return result;
        },

        isMobileBrowser: function () {
            var agent = navigator.userAgent.toLowerCase();
            var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1 || agent.indexOf('android') != -1;
            return result;
        },

        // Get the touch points from this event
        getTouches: function (e) {
            if (e.originalEvent) {
                if (e.originalEvent.touches && e.originalEvent.touches.length) {
                    return e.originalEvent.touches;
                } else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length) {
                    return e.originalEvent.changedTouches;
                }
            }

            if (!e.touches) {
                e.touches = new Array();
                e.touches[0] = e.originalEvent != undefined ? e.originalEvent : e;

                if (e.originalEvent != undefined && e.pageX)
                    e.touches[0] = e;
                if (e.type == 'mousemove') e.touches[0] = e;
            }

            return e.touches;
        },

        getTouchEventName: function (name) {
            if (this.isWindowsPhone()) {
                if (name.toLowerCase().indexOf('start') != -1) return 'MSPointerDown';
                if (name.toLowerCase().indexOf('move') != -1) return 'MSPointerMove';
                if (name.toLowerCase().indexOf('end') != -1) return 'MSPointerUp';
            }
            else {
                return name;
            }
        },

        // Dispatches a fake mouse event from a touch event
        dispatchMouseEvent: function (name, touch, target) {
            if (this.simulatetouches)
                return;

            var e = document.createEvent('MouseEvent');
            e.initMouseEvent(name, true, true, touch.view, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
            if (target != null) {
                target.dispatchEvent(e);
            }
        },

        // Find the root node of this target
        getRootNode: function (target) {
            while (target.nodeType !== 1) {
                target = target.parentNode;
            }
            return target;
        },

        setTouchScroll: function (enable, key) {
            if (!this.enableScrolling) this.enableScrolling = [];
            this.enableScrolling[key] = enable;
        },

        touchScroll: function (element, scrollHeight, callback, key, horizontalScroll, verticalScroll) {
            if (element == null)
                return;

            var me = this;
            var scrollY = 0;
            var touchY = 0;
            var movedY = 0;
            var scrollX = 0;
            var touchX = 0;
            var movedX = 0;
            if (!this.scrolling) this.scrolling = [];
            this.scrolling[key] = false;
            var moved = false;
            var $element = $(element);
            var touchTags = ['select', 'input', 'textarea'];
            var touchStart = 0;
            var touchEnd = 0;
            if (!this.enableScrolling) this.enableScrolling = [];
            this.enableScrolling[key] = true;
            var key = key;
            var touchStartName = this.getTouchEventName('touchstart') + ".touchScroll";
            var touchEndName = this.getTouchEventName('touchend') + ".touchScroll";
            var touchMoveName = this.getTouchEventName('touchmove') + ".touchScroll";

            var touchStart = function (event) {
                if (!me.enableScrolling[key])
                    return true;

                // Allow certain HTML tags to receive touch events
                if ($.inArray(event.target.tagName.toLowerCase(), touchTags) !== -1) {
                    return;
                }

                var touches = me.getTouches(event);
                var touch = touches[0];
                if (touches.length == 1) {
                    me.dispatchMouseEvent('mousedown', touch, me.getRootNode(touch.target));
                }

                moved = false;
                touchY = touch.pageY;
                touchX = touch.pageX;
                if (me.simulatetouches) {
                    touchY = touch._pageY;
                    touchX = touch._pageX;
                }
                me.scrolling[key] = true;

                scrollY = 0;
                scrollX = 0;
                return true;
            }

            if ($element.on) {
                $element.on(touchStartName, touchStart);
            }
            else {
                $element.bind(touchStartName, touchStart);
            }

            var touchMove = function (event) {
                if (!me.enableScrolling[key])
                    return true;

                if (!me.scrolling[key]) {
                    return true;
                }
                var touches = me.getTouches(event);
                if (touches.length > 1) {
                    return true;
                }

                var pageY = touches[0].pageY;
                var pageX = touches[0].pageX;

                if (me.simulatetouches) {
                    pageY = touches[0]._pageY;
                    pageX = touches[0]._pageX;
                }

                var dy = pageY - touchY;
                var dx = pageX - touchX;
                touchEnd = pageY;
                touchHorizontalEnd = pageX;
                movedY = dy - scrollY;
                movedX = dx - scrollX;
                moved = true;
                scrollY = dy;
                scrollX = dx;
            
                var hScrollVisible = horizontalScroll != null ? horizontalScroll[0].style.visibility != 'hidden' : true;
                var vScrollVisible = verticalScroll != null ? verticalScroll[0].style.visibility != 'hidden' : true;

                if (hScrollVisible || vScrollVisible) {
                    if ((movedX !== 0 && hScrollVisible) || (movedY !== 0 && vScrollVisible)) {
                        callback(-movedX * 1, -movedY * 1, dx, dy, event);
                        event.preventDefault();
                        event.stopPropagation();
                        if (event.preventManipulation) {
                            event.preventManipulation();
                        }
                        return false;
                    }
                }
            }

            if ($element.on) {
                $element.on(touchMoveName, touchMove);
            }
            else $element.bind(touchMoveName, touchMove);

            if (this.simulatetouches) {
                var windowBindFunc = $(window).on != undefined || $(window).bind;
                var windowMouseUp = function (event) {
                    me.scrolling[key] = false;
                };
                $(window).on != undefined ? $(document).on('mouseup.touchScroll', windowMouseUp) : $(document).bind('mouseup.touchScroll', windowMouseUp);

                if (window.frameElement) {
                    if (window.top != null) {
                        var eventHandle = function (event) {
                            me.scrolling[key] = false;
                        };

                        if (window.top.document) {
                            $(window.top.document).on ? $(window.top.document).on('mouseup', eventHandle) : $(window.top.document).bind('mouseup', eventHandle);
                        }
                    }
                }

                var docBindFunc = $(document).on != undefined || $(document).bind;
                var touchEndFunc = function (event) {
                    if (!me.scrolling[key]) {
                        return true;
                    }
                    me.scrolling[key] = false;
                    var touch = me.getTouches(event)[0],
						target = me.getRootNode(touch.target);

                    // Dispatch fake mouse up and click events if this touch event did not move
                    me.dispatchMouseEvent('mouseup', touch, target);
                    me.dispatchMouseEvent('click', touch, target);
                };

                $(document).on != undefined ? $(document).on('touchend', touchEndFunc) : $(document).bind('touchend', touchEndFunc);
            }

            var touchCancel = function (event) {
                if (!me.enableScrolling[key])
                    return true;

                var touch = me.getTouches(event)[0];
                if (!me.scrolling[key]) {
                    return true;
                }
                me.scrolling[key] = false;
                if (moved) {
                    me.dispatchMouseEvent('mouseup', touch, target);
                } else {
                    var touch = me.getTouches(event)[0],
						target = me.getRootNode(touch.target);

                    //        event.preventDefault();
                    //         event.stopPropagation();
                    // Dispatch fake mouse up and click events if this touch event did not move
                    me.dispatchMouseEvent('mouseup', touch, target);
                    me.dispatchMouseEvent('click', touch, target);
                    return true;
                }
            }

            if ($element.on) {
                $element.on('dragstart', function (event) {
                    event.preventDefault();
                });
                $element.on('selectstart', function (event) {
                    event.preventDefault();
                });
            }
            $element.on ? $element.on(touchEndName + ' touchcancel.touchScroll', touchCancel) : $element.bind(touchEndName + ' touchcancel.touchScroll', touchCancel);
        }
    });

    $.jqx.cookie = $.jqx.cookie || {};
    $.extend($.jqx.cookie,
    {
        cookie: function (key, value, options) {
            // set cookie.
            if (arguments.length > 1 && String(value) !== "[object Object]") {
                options = jQuery.extend({}, options);

                if (value === null || value === undefined) {
                    options.expires = -1;
                }

                if (typeof options.expires === 'number') {
                    var days = options.expires, t = options.expires = new Date();
                    t.setDate(t.getDate() + days);
                }

                value = String(value);

                return (document.cookie = [
                encodeURIComponent(key), '=',
                options.raw ? value : encodeURIComponent(value),
                options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
                options.path ? '; path=' + options.path : '',
                options.domain ? '; domain=' + options.domain : '',
                options.secure ? '; secure' : ''
        ].join(''));
            }
            // get cookie...
            options = value || {};
            var result, decode = options.raw ? function (s) { return s; } : decodeURIComponent;
            return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null;
        }
    });

    // stringutilities
    $.jqx.string = $.jqx.string || {};
    $.extend($.jqx.string,
    {
        replace: function (text, stringToFind, stringToReplace) {
            if (stringToFind === stringToReplace) return this;
            var temp = text;
            var index = temp.indexOf(stringToFind);
            while (index != -1) {
                temp = temp.replace(stringToFind, stringToReplace);
                index = temp.indexOf(stringToFind);
            }
            return temp;
        },

        contains: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            return fullString.indexOf(value) != -1;
        },

        containsIgnoreCase: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            return fullString.toUpperCase().indexOf(value.toUpperCase()) != -1;
        },

        equals: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            fullString = this.normalize(fullString);

            if (value.length == fullString.length) {
                return fullString.slice(0, value.length) == value;
            }

            return false;
        },

        equalsIgnoreCase: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            fullString = this.normalize(fullString);

            if (value.length == fullString.length) {
                return fullString.toUpperCase().slice(0, value.length) == value.toUpperCase();
            }

            return false;
        },

        startsWith: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            return fullString.slice(0, value.length) == value;
        },

        startsWithIgnoreCase: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            return fullString.toUpperCase().slice(0, value.length) == value.toUpperCase();
        },

        normalize: function (fullString) {
            if (fullString.charCodeAt(fullString.length - 1) == 65279) {
                fullString = fullString.substring(0, fullString.length - 1);
            }

            return fullString;
        },

        endsWith: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            fullString = this.normalize(fullString);
            return fullString.slice(-value.length) == value;
        },

        endsWithIgnoreCase: function (fullString, value) {
            if (fullString == null || value == null)
                return false;

            fullString = this.normalize(fullString);

            return fullString.toUpperCase().slice(-value.length) == value.toUpperCase();
        }
    });

    $.extend(jQuery.easing, {
        easeOutBack: function (x, t, b, c, d, s) {
            if (s == undefined) s = 1.70158;
            return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
        },
        easeInQuad: function (x, t, b, c, d) {
            return c * (t /= d) * t + b;
        },
        easeInOutCirc: function (x, t, b, c, d) {
            if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
            return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
        },
        easeInOutSine: function (x, t, b, c, d) {
            return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
        },
        easeInCubic: function (x, t, b, c, d) {
            return c * (t /= d) * t * t + b;
        },
        easeOutCubic: function (x, t, b, c, d) {
            return c * ((t = t / d - 1) * t * t + 1) + b;
        },
        easeInOutCubic: function (x, t, b, c, d) {
            if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
            return c / 2 * ((t -= 2) * t * t + 2) + b;
        },
        easeInSine: function (x, t, b, c, d) {
            return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
        },
        easeOutSine: function (x, t, b, c, d) {
            return c * Math.sin(t / d * (Math.PI / 2)) + b;
        },
        easeInOutSine: function (x, t, b, c, d) {
            return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
        }
    });
})(jQuery);
(function ($) {
    $.extend(jQuery.event.special,
    {
        "close": { noBubble: true },
        "open": { noBubble: true },
        "cellclick": { noBubble: true },
        "rowclick": { noBubble: true },
        "tabclick": { noBubble: true },
        "selected": { noBubble: true },
        "expanded": { noBubble: true },
        "collapsed": { noBubble: true },
        "valuechanged": { noBubble: true },
        "expandedItem": { noBubble: true },
        "collapsedItem": { noBubble: true },
        "expandingItem": { noBubble: true },
        "collapsingItem": { noBubble: true }
    });

    $.fn.extend({
        ischildof: function (filter_string) {
            var parents = $(this).parents().get();

            for (var j = 0; j < parents.length; j++) {
                if (typeof filter_string != "string") {
                    var parent = parents[j];
                    if (filter_string !== undefined) {
                        if (parent == filter_string[0])
                            return true;
                    }
                }
                else {
                    if (filter_string !== undefined) {
                        if ($(parents[j]).is(filter_string)) {
                            return true;
                        }
                    }
                }
            }

            return false;
        }
    });

    $.fn.jqxProxy = function () {
        var widget = $(this).data().jqxWidget;

        var args = Array.prototype.slice.call(arguments, 0);
        return $.jqx.jqxWidgetProxy(widget.widgetName, widget.element, args);
    }

    var originalVal = this.originalVal = $.fn.val;
    $.fn.val = function (value) {
        if (typeof value == 'undefined') {
            if ($(this).hasClass('jqx-widget')) {
                var widget = $(this).data().jqxWidget;
                if (widget && widget.val) {
                    return widget.val();
                }
            }
            return originalVal.call(this);
        }
        else {
            if ($(this).hasClass('jqx-widget')) {
                var widget = $(this).data().jqxWidget;
                if (widget && widget.val) {
                    if (arguments.length != 2) {
                        return widget.val(value);
                    }
                    else {
                        return widget.val(value, arguments[1]);
                    }
                }
            }

            return originalVal.call(this, value);
        }
    };

    $.fn.coord = function (options) {
        var docElem, win,
            box = { top: 0, left: 0 },
            elem = this[0],
            doc = elem && elem.ownerDocument;
        if (!doc) {
            return;
        }
        docElem = doc.documentElement;
        if (!jQuery.contains(docElem, elem)) {
            return box;
        }
        if (typeof elem.getBoundingClientRect !== undefined) {
            box = elem.getBoundingClientRect();
        }
        var getWindow = function(elem) {
            return jQuery.isWindow(elem) ?
                elem :
                elem.nodeType === 9 ?
                    elem.defaultView || elem.parentWindow :
                    false;
        };

        win = getWindow(doc);
        var additionalLeftOffset = 0;
        var additionalTopOffset = 0;
        var agent = navigator.userAgent.toLowerCase();
        var result = agent.indexOf('ipad') != -1 || agent.indexOf('iphone') != -1;
        if (result) {
            // fix for iphone/ipad left offsets.
            additionalLeftOffset = 2;
        }
        if (true == options) {
            if ($(document.body).css('position') != 'static') {
                var coords = $(document.body).coord();
                additionalLeftOffset = -coords.left;
                additionalTopOffset = -coords.top;
            }
        }

        return {
            top: additionalTopOffset + box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
            left: additionalLeftOffset + box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
        };
    };
})(jQuery);

/*
 * file from "src\jqxdata.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
    $.jqx.dataAdapter = function (source, options) {
        if (source != undefined) {
            if (source.dataFields !== undefined) {
                source.datafields = source.dataFields;
            }
            if (source.dataType !== undefined) {
                source.datatype = source.dataType;
            }
            if (source.localData !== undefined) {
                source.localdata = source.localData;
            }
            if (source.sortColumn !== undefined) {
                source.sortcolumn = source.sortColumn;
            }
            if (source.sortDirection !== undefined) {
                source.sortdirection = source.sortDirection;
            }
            if (source.sortOrder !== undefined) {
                source.sortdirection = source.sortOrder;
            }
            if (source.formatData !== undefined) {
                source.formatdata = source.formatData;
            }
            if (source.processData !== undefined) {
                source.processdata = source.processData;
            }
            if (source.pageSize !== undefined) {
                source.pagesize = source.pageSize;
            }
            if (source.pageNum !== undefined) {
                source.pagenum = source.pageNum;
            }
            if (source.updateRow !== undefined) {
                source.updaterow = source.updateRow;
            }
            if (source.addRow !== undefined) {
                source.addrow = source.addRow;
            }
            if (source.deleteRow !== undefined) {
                source.deleterow = source.deleteRow;
            }
            if (source.contentType !== undefined) {
                source.contenttype = source.contentType;
            }
            if (source.totalRecords != undefined) {
                source.totalrecords = source.totalRecords;
            }
            if (source.loadError != undefined) {
                source.loadError = source.loadError;
            }
            if (source.sortComparer != undefined) {
                source.sortcomparer = source.sortComparer;
            }
        }

        this._source = source;
        this._options = options || {};
        this.records = new Array();
        this._downloadComplete = new Array();
        this._bindingUpdate = new Array();

        if (source != undefined && source.localdata != null && source.localdata._subscriptions) {
            var localData = source.localdata.get();
            if (localData != null) {
                source._localdata = source.localdata;
                var me = this;
                if (source._localdata.subscribe) {
                    me._oldlocaldata = [];
                    source._localdata.subscribe(function (value) {
                        var deepClone = function (objThing) {
                            if (jQuery.isArray(objThing)) {
                                return jQuery.makeArray(deepClone($(objThing)));
                            }
                            return jQuery.extend(true, {}, objThing);
                        };
                        if (me.suspendKO == false || me.suspendKO == undefined || me._oldlocaldata.length == 0) {
                            me._oldlocaldata = deepClone(value);
                        }
                    }, source._localdata, 'beforeChange');

                    source._localdata.subscribe(function (value) {
                        if (me.suspendKO == false || me.suspendKO == undefined) {
                            var changeType = "";
                            me._oldrecords = me.records;
                            if (me._oldlocaldata.length == 0) {
                                source.localdata = source._localdata.get();
                            }

                            if (me._oldlocaldata.length == 0) {
                                changeType = 'change';
                            }
                            else {
                                if (me._oldlocaldata.length == value.length) {
                                    changeType = 'update';
                                }
                                if (me._oldlocaldata.length > value.length) {
                                    changeType = 'remove';
                                }
                                if (me._oldlocaldata.length < value.length) {
                                    changeType = 'add';
                                }
                            }
                            me.dataBind(null, changeType);
                        }
                    }, source._localdata, 'change');

                    me._knockoutdatasource = true;
                }

                source.localdata = localData;
            }
        }
        if (this._options.autoBind == true) {
            this.dataBind();
        }
    }

    $.jqx.dataAdapter.prototype = {
        getrecords: function () {
            return this.records;
        },

        beginUpdate: function () {
            this.isUpdating = true;
        },

        endUpdate: function (refresh) {
            this.isUpdating = false;
            if (refresh != false) {
                if (this._changedrecords && this._changedrecords.length > 0) {
                    this.callBindingUpdate("update");
                    this._changedrecords = [];
                }
                else {
                    this.dataBind(null, "");
                }
            }
        },

        formatDate: function(value, format, calendar)
        {
            var result = $.jqx.dataFormat.formatdate(value, format, calendar);
            return result;
        },

        formatNumber: function (value, format, calendar) {
            var result = $.jqx.dataFormat.formatnumber(value, format, calendar);
            return result;
        },

        dataBind: function (objectuniqueId, collectionChanged) {
            if (this.isUpdating == true)
                return;

            var source = this._source;
            if (!source)
                return;

            $.jqx.dataFormat.datescache = new Array();
            if (source.dataFields != null) {
                source.datafields = source.dataFields;
            }

            if (source.recordstartindex == undefined) {
                source.recordstartindex = 0;
            }
            if (source.recordendindex == undefined) {
                source.recordendindex = 0;
            }
            if (source.loadallrecords == undefined) {
                source.loadallrecords = true;
            }

            if (source.sort != undefined) {
                this.sort = source.sort;
            }

            if (source.filter != undefined) {
                this.filter = source.filter;
            }
            else this.filter = null;

            if (source.sortcolumn != undefined) {
                this.sortcolumn = source.sortcolumn;
            }

            if (source.sortdirection != undefined) {
                this.sortdirection = source.sortdirection;
            }

            if (source.sortcomparer != undefined) {
                this.sortcomparer = source.sortcomparer;
            }

            this.records = new Array();
            var options = this._options || {};
            this.virtualmode = options.virtualmode != undefined ? options.virtualmode : false;
            this.totalrecords = options.totalrecords != undefined ? options.totalrecords : 0;
            this.pageable = options.pageable != undefined ? options.pageable : false;
            this.pagesize = options.pagesize != undefined ? options.pagesize : 0;
            this.pagenum = options.pagenum != undefined ? options.pagenum : 0;
            this.cachedrecords = options.cachedrecords != undefined ? options.cachedrecords : new Array();
            this.originaldata = new Array();
            this.recordids = new Array();
            this.updaterow = options.updaterow != undefined ? options.updaterow : null;
            this.addrow = options.addrow != undefined ? options.addrow : null;
            this.deleterow = options.deleterow != undefined ? options.deleterow : null;
            this.cache = options.cache != undefined ? options.cache : false;
            this.unboundmode = false;
            if (source.formatdata != undefined) {
                options.formatData = source.formatdata;
            }
            if (source.data != undefined) {
                if (options.data == undefined) {
                    options.data = {};
                }
                $.extend(options.data, source.data);
            }

            if (source.mapchar != undefined) {
                this.mapChar = source.mapchar ? source.mapchar : '>';
            }
            else {
                this.mapChar = options.mapChar ? options.mapChar : '>';
            }

            if (options.unboundmode || source.unboundmode) {
                this.unboundmode = options.unboundmode || source.unboundmode;
            }

            if (source.cache != undefined) {
                this.cache = source.cache;
            }

            if (this.koSubscriptions) {
                for (var subscription = 0; subscription < this.koSubscriptions.length; subscription++) {
                    this.koSubscriptions[subscription].dispose();
                }
            }
            this.koSubscriptions = new Array();

            if (this.pagenum < 0) {
                this.pagenum = 0;
            }

            var me = this;

            var datatype = source.datatype;

            if (source.datatype === 'csv' || source.datatype === 'tab' || source.datatype === 'tsv' || source.datatype == 'text')
                datatype = 'text';

            var async = options.async != undefined ? options.async : true;

            if (source.async != undefined) {
                async = source.async;
            }

            switch (datatype) {
                case "local":
                case "array":
                case "observablearray":
                default:
                    if (source.localdata == undefined && source.length) {
                        source.localdata = new Array();
                        for (var i = 0; i < source.length; i++) {
                            source.localdata[source.localdata.length] = source[i];
                            source[i].uid = i;
                        }
                    }
                    if (source.beforeprocessing && $.isFunction(source.beforeprocessing)) {
                        source.beforeprocessing(source.localdata);
                    }

                    var length = source.localdata.length;
                    this.totalrecords = this.virtualmode ? (source.totalrecords || length) : length;

                    if (this.unboundmode) {
                        this.totalrecords = this.unboundmode ? (source.totalrecords || length) : length;
                        var datafieldslength = source.datafields ? source.datafields.length : 0;
                        if (datafieldslength > 0) {
                            for (var i = 0; i < this.totalrecords; i++) {
                                var record = {};
                                for (var j = 0; j < datafieldslength; j++) {
                                    record[source.datafields[j].name] = "";
                                }
                                record.uid = i;
                                source.localdata[source.localdata.length] = record;
                            }
                        }
                    }

                    if (this.totalrecords == undefined) {
                        this.totalrecords = 0;
                    }

                    var datafieldslength = source.datafields ? source.datafields.length : 0;
                    var getrecord = function (record, datafieldslength) {
                        var datarow = {};
                        for (var j = 0; j < datafieldslength; j++) {
                            var datafield = source.datafields[j];
                            var value = '';
                            if (undefined == datafield || datafield == null) {
                                continue;
                            }

                            if (datafield.map) {
                                if ($.isFunction(datafield.map)) {
                                    value = datafield.map(record);
                                }
                                else {
                                    var splitMap = datafield.map.split(me.mapChar);
                                    if (splitMap.length > 0) {
                                        var datarecord = record;
                                        for (var p = 0; p < splitMap.length; p++) {
                                            if (!datarecord) continue;
                                            datarecord = datarecord[splitMap[p]];
                                        }
                                        value = datarecord;
                                    }
                                    else {
                                        value = record[datafield.map];
                                    }
                                }

                                if (value != undefined && value != null) {
                                    value = value.toString();
                                }
                                else {
                                    if (value == undefined && value != null) {
                                        value = '';
                                    }
                                }
                            }
                            // searches by both selectors when necessary.
                            if (value == '') {
                                value = record[datafield.name];
                                if (value != undefined && value != null) {
                                    if (source._localdata && value.subscribe) {
                                        value = value();
                                    }
                                    else {
                                        value = value.toString();
                                    }
                                }
                            }

                            value = me.getvaluebytype(value, datafield);
                            if (datafield.displayname != undefined) {
                                datarow[datafield.displayname] = value;
                            }
                            else {
                                datarow[datafield.name] = value;
                            }
                        }
                        return datarow;
                    }

                    if (source._localdata) {
                        this._changedrecords = [];
                        this.records = new Array();
                        var localdata = source._localdata.get();

                        $.each(localdata, function (i, value) {
                            if (typeof value === 'string') {
                                me.records.push(value);
                            }
                            else {
                                var record = {};
                                var _koindex = 0;
                                var dataObject = this;
                                $.each(this.row, function (obj, objvalue) {
                                    var map = null;
                                    var type = 'string';
                                    var dataFieldName = obj;
                                    if (datafieldslength > 0) {
                                        var hasField = false;
                                        var hasMap = false;
                                        for (var j = 0; j < datafieldslength; j++) {
                                            var datafield = source.datafields[j];
                                            if (datafield != undefined && (datafield.name == obj)) {
                                                hasField = true;
                                                map = datafield.map;
                                                type = datafield.type;
                                                dataFieldName = datafield.name;
                                                break;
                                            }
                                            else if (datafield != undefined && datafield.map && (datafield.map.indexOf(obj) >= 0)) {
                                                hasField = true;
                                                map = datafield.map;
                                                type = datafield.type;
                                                dataFieldName = datafield.name;
                                                hasMap = true;
                                                var value = dataObject[obj];
                                                if (map != null) {
                                                    var splitMap = map.split(me.mapChar);
                                                    if (splitMap.length > 0) {
                                                        var datarecord = dataObject;
                                                        for (var p = 0; p < splitMap.length; p++) {
                                                            datarecord = datarecord[splitMap[p]];
                                                        }
                                                        value = datarecord;
                                                    }
                                                    else {
                                                        value = dataObject[map];
                                                    }
                                                }

                                                if (type != 'string') {
                                                    value = me.getvaluebytype(value, { type: type });
                                                }
                                                record[dataFieldName] = value;
                                                if (record[dataFieldName] != undefined) {
                                                    _koindex += record[dataFieldName].toString().length + record[dataFieldName].toString().substr(0, 1);
                                                }
                                            }
                                        }
                                        if (!hasField) return true;
                                        if (hasMap) return true;
                                    }

                                    var isFunction = ('function'==typeof(dataObject['ref']) && dataObject.ref(obj));
                                    if (isFunction) {
                                        var ref=dataObject.ref(obj),value = ref.get();
                                        if (type != 'string') {
                                            value = me.getvaluebytype(value, { type: type });
                                        }
                                        record[obj] = value;
                                        if (ref.subscribe) {
                                            var recordindex = i;
                                            me.koSubscriptions[me.koSubscriptions.length] = ref.subscribe(function (value) {
                                                var _changeindex = recordindex;
                                                record[obj] = value;
                                                var changedRecord = { index: _changeindex, oldrecord: record, record: record };
                                                me._changedrecords.push(changedRecord);
                                                if (me.isUpdating)
                                                    return;

                                                me.callBindingUpdate("update");
                                                me._changedrecords = [];
                                                return false;
                                            });
                                        }
                                    }
                                    else {
                                        var value = dataObject[obj];
                                        if (map != null) {
                                            var splitMap = map.split(me.mapChar);
                                            if (splitMap.length > 0) {
                                                var datarecord = dataObject;
                                                for (var p = 0; p < splitMap.length; p++) {
                                                    datarecord = datarecord[splitMap[p]];
                                                }
                                                value = datarecord;
                                            }
                                            else {
                                                value = dataObject[map];
                                            }
                                        }

                                        if (type != 'string') {
                                            value = me.getvaluebytype(value, { type: type });
                                        }
                                        record[dataFieldName] = value;
                                        if (record[dataFieldName] != undefined) {
                                            _koindex += record[dataFieldName].toString().length + record[dataFieldName].toString().substr(0, 1);
                                        }
                                    }
                                });

                                var recordid = me.getid(source.id, dataObject, i);
                                record.uid = recordid;
                                me.records.push(record);
                    
                                record._koindex = _koindex;
                                if (me._oldrecords) {
                                    var _changeindex = me.records.length - 1;
                                    if (collectionChanged == 'update') {
                                        if (me._oldrecords[_changeindex]._koindex != _koindex) {
                                            var changedRecord = { index: _changeindex, oldrecord: me._oldrecords[_changeindex], record: record };
                                            me._changedrecords.push(changedRecord);
                                        }
                                    }
                                }
                            }
                        });
                        if (collectionChanged == 'add') {
                            var length = me.records.length;
                            for (var i = 0; i < length; i++) {
                                var record = me.records[i];
                                var hasOldRecord = false;
                                for (var p = 0; p < me._oldrecords.length; p++) {
                                    if (me._oldrecords[p]._koindex === record._koindex) {
                                        hasOldRecord = true;
                                        break;
                                    }
                                }
                                if (!hasOldRecord) {
                                    me._changedrecords.push({ index: i, oldrecord: null, record: record, position: (i != 0 ? "last" : "first") });
                                }
                            }
                        }
                        else if (collectionChanged == 'remove') {
                            var length = me._oldrecords.length;
                            for (var i = 0; i < length; i++) {
                                var oldrecord = me._oldrecords[i];
                                if (!me.records[i]) {
                                    me._changedrecords.push({ index: i, oldrecord: oldrecord, record: null });
                                }
                                else {
                                    if (me.records[i]._koindex != oldrecord._koindex) {
                                        me._changedrecords.push({ index: i, oldrecord: oldrecord, record: null });
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (!$.isArray(source.localdata)) {
                            this.records = new Array();
                            $.each(source.localdata, function (i) {
                                var recordid = me.getid(source.id, this, i);

                                if (datafieldslength > 0) {
                                    var record = this;
                                    var datarow = getrecord(record, datafieldslength);
                                    datarow.uid = recordid;
                                    me.records[me.records.length] = datarow;                                  
                                }
                                else {
                                    this.uid = recordid;
                                    me.records[me.records.length] = this;
                                }
                            });
                        }
                        else {
                            if (datafieldslength == 0) {
                                $.each(source.localdata, function (i, value) {
                                    var record = $.extend({}, this);
                                    if (typeof value === "string") {
                                        me.records = source.localdata;
                                        return false;
                                    }
                                    else {
                                        var recordid = me.getid(source.id, record, i);
                                        if (typeof (recordid) === "object") {
                                            recordid = i;
                                        }
                                        record.uid = recordid;
                                        me.records[me.records.length] = record;
                                    }
                                });
                            }
                            else {
                                $.each(source.localdata, function (i) {
                                    var record = this;
                                    var datarow = getrecord(record, datafieldslength);
                                    var recordid = me.getid(source.id, datarow, i);
                                    if (typeof (recordid) === "object") {
                                        recordid = i;
                                    }
                                    var record = $.extend({}, datarow);
                                    record.uid = recordid;
                                    me.records[me.records.length] = record;
                                });
                            }
                        }
                    }

                    this.originaldata = source.localdata;
                    this.cachedrecords = this.records;
                    this.addForeignValues(source);
                    if (options.uniqueDataFields) {
                        var uniquerecords = this.getUniqueRecords(this.records, options.uniqueDataFields);
                        this.records = uniquerecords;
                        this.cachedrecords = uniquerecords;
                    }

                    if (options.beforeLoadComplete) {
                        var newRecords = options.beforeLoadComplete(me.records, this.originaldata);
                        if (newRecords != undefined) {
                            me.records = newRecords;
                            me.cachedrecords = newRecords;
                        }
                    }

                    if (options.autoSort && options.autoSortField) {
                        var tmpToString = Object.prototype.toString;
                        Object.prototype.toString = (typeof field == "function") ? field : function () { return this[options.autoSortField] };
                        me.records.sort(function (value1, value2) {
                            if (value1 === undefined) { value1 = null; }
                            if (value2 === undefined) { value2 = null; }
                            if (value1 === null && value2 === null) {
                                return 0;
                            }
                            if (value1 === null && value2 !== null) {
                                return 1;
                            }
                            if (value1 !== null && value2 === null) {
                                return -1;
                            }

                            value1 = value1.toString();
                            value2 = value2.toString();

                            if ($.jqx.dataFormat.isNumber(value1) && $.jqx.dataFormat.isNumber(value2)) {
                                if (value1 < value2) { return -1; }
                                if (value1 > value2) { return 1; }
                                return 0;
                            }
                            else if ($.jqx.dataFormat.isDate(value1) && $.jqx.dataFormat.isDate(value2)) {
                                if (value1 < value2) { return -1; }
                                if (value1 > value2) { return 1; }
                                return 0;
                            }
                            else if (!$.jqx.dataFormat.isNumber(value1) && !$.jqx.dataFormat.isNumber(value2)) {
                                value1 = String(value1).toLowerCase();
                                value2 = String(value2).toLowerCase();
                            }

                            try {
                                if (value1 < value2) { return -1; }
                                if (value1 > value2) { return 1; }
                            }
                            catch (error) {
                                var er = error;
                            }

                            return 0;
                        });
                        Object.prototype.toString = tmpToString;
                    }

                    me.loadedData = source.localdata;
                    me.buildHierarchy();

                    if ($.isFunction(options.loadComplete)) {
                        options.loadComplete(source.localdata, me.records);
                    }
                    break;
                case "json":
                case "jsonp":
                case "xml":
                case "xhtml":
                case "script":
                case "text":
                    {
                        if (source.localdata != null) {
                            if ($.isFunction(source.beforeprocessing)) {
                                source.beforeprocessing(source.localdata);
                            }
                            if (source.datatype === "xml") {
                                me.loadxml(source.localdata, source.localdata, source);
                            }
                            else if (datatype === "text") {
                                me.loadtext(source.localdata, source);
                            }
                            else {
                                me.loadjson(source.localdata, source.localdata, source);
                            }
                            me.addForeignValues(source);
                            if (options.uniqueDataFields) {
                                var uniquerecords = me.getUniqueRecords(me.records, options.uniqueDataFields);
                                me.records = uniquerecords;
                                me.cachedrecords = uniquerecords;
                            }

                            if (options.beforeLoadComplete) {
                                var newRecords = options.beforeLoadComplete(me.records, this.originaldata);
                                if (newRecords != undefined) {
                                    me.records = newRecords;
                                    me.cachedrecords = newRecords;
                                }
                            }

                            me.loadedData = source.localdata;
                            me.buildHierarchy.call(me);
                            if ($.isFunction(options.loadComplete)) {
                                options.loadComplete(source.localdata, me.records);
                            }
                            me.callBindingUpdate(collectionChanged);
                            return;
                        }

                        var postdata = options.data != undefined ? options.data : {};
                        // call the source object's processdata function.
                        if (source.processdata) {
                            source.processdata(postdata);
                        }
                        // call the adapter's process data function.
                        if ($.isFunction(options.processData)) {
                            options.processData(postdata);
                        }

                        // call the adapter's format data function.
                        if ($.isFunction(options.formatData)) {
                            var newpostdata = options.formatData(postdata);
                            if (newpostdata != undefined) {
                                postdata = newpostdata;
                            }
                        }

                        var contentType = 'application/x-www-form-urlencoded';
                        if (options.contentType) {
                            contentType = options.contentType;
                        }

                        var type = "GET";
                        if (source.type) {
                            type = source.type;
                        }

                        if (options.type) {
                            type = options.type;
                        }

                        if (source.url && source.url.length > 0) {
                            if ($.isFunction(options.loadServerData)) {
                                me._requestData(postdata, source, options);
                            }
                            else {
                                this.xhr = $.jqx.data.ajax({
                                    dataType: datatype,
                                    cache: this.cache,
                                    type: type,
                                    url: source.url,
                                    async: async,
                                    contentType: contentType,
                                    data: postdata,
                                    success: function (data, status, xhr) {
                                        if ($.isFunction(source.beforeprocessing)) {
                                            var tmpdata = source.beforeprocessing(data, status, xhr);
                                            if (tmpdata != undefined) {
                                                data = tmpdata;
                                            }
                                        }
                                        if ($.isFunction(options.downloadComplete)) {
                                            var tmpdata = options.downloadComplete(data, status, xhr);
                                            if (tmpdata != undefined) {
                                                data = tmpdata;
                                            }
                                        }

                                        if (data == null) {
                                            me.records = new Array();
                                            me.cachedrecords = new Array();
                                            me.originaldata = new Array();

                                            me.callDownloadComplete();
                                            if ($.isFunction(options.loadComplete)) {
                                                options.loadComplete(new Array());
                                            }
                                            return;
                                        }

                                        var records = data;
                                        if (data.records) {
                                            records = data.records;
                                        }

                                        if (data.totalrecords != undefined) {
                                            source.totalrecords = data.totalrecords;
                                        }

                                        if (source.datatype === "xml") {
                                            me.loadxml(null, records, source);
                                        }
                                        else if (datatype === "text") {
                                            me.loadtext(records, source);
                                        }
                                        else {
                                            me.loadjson(null, records, source);
                                        }

                                        // add foreign values.
                                        me.addForeignValues(source);

                                        if (options.uniqueDataFields) {
                                            var uniquerecords = me.getUniqueRecords(me.records, options.uniqueDataFields);
                                            me.records = uniquerecords;
                                            me.cachedrecords = uniquerecords;
                                        }

                                        if (options.beforeLoadComplete) {
                                            var newRecords = options.beforeLoadComplete(me.records, data);
                                            if (newRecords != undefined) {
                                                me.records = newRecords;
                                                me.cachedrecords = newRecords;
                                            }
                                        }

                                        me.loadedData = data;
                                        me.buildHierarchy.call(me);

                                        me.callDownloadComplete();
                                        if ($.isFunction(options.loadComplete)) {
                                            options.loadComplete(data, status, xhr, me.records);
                                        }
                                    },
                                    error: function (xhr, status, error) {
                                        if ($.isFunction(source.loaderror)) { source.loaderror(xhr, status, error); }
                                        if ($.isFunction(options.loadError)) { options.loadError(xhr, status, error); }
                                        xhr = null;
                                        me.callDownloadComplete();
                                    },
                                    beforeSend: function (xhr, settings) {
                                        if ($.isFunction(options.beforeSend)) { options.beforeSend(xhr, settings); }
                                        if ($.isFunction(source.beforesend)) { source.beforesend(xhr, settings); }
                                    }
                                });
                            }
                        }
                        else {
                            me.buildHierarchy(new Array());
                            me.callDownloadComplete();
                            if ($.isFunction(options.loadComplete)) {
                                if (!data) {
                                    var data = {};
                                }
                                options.loadComplete(data);
                            }
                        }
                    }
                    break;
            }
            this.callBindingUpdate(collectionChanged);
        },

        buildHierarchy: function(dataRecords)
        {
            var source = this._source;
            var hierarchy = new Array();
            if (!source.datafields) {
                return;
            }

            if (source.hierarchy && !source.hierarchy.reservedNames) {
                source.hierarchy.reservedNames = {
                    leaf: "leaf",
                    parent: "parent",
                    expanded: "expanded",
                    checked: "checked",
                    selected: "selected",
                    level: "level",
                    icon: "icon",
                    data: "data"
                }
            }
            else {
                if (source.hierarchy) {
                    var names = source.hierarchy.reservedNames;
                    if (!names.leaf) names.leaf = "leaf";
                    if (!names.parent) names.parent = "parent";
                    if (!names.expanded) names.expanded = "expanded";
                    if (!names.checked) names.checked = "checked";
                    if (!names.selected) names.selected = "selected";
                    if (!names.level) names.level = "level";
                    if (!names.data) names.data = "data";
                }
            }

            if (!source.hierarchy) {
                return;
            }

            var that = this;
            var names = source.hierarchy.reservedNames;
            if (source.hierarchy.root) {
                if (source.dataType == "xml") {
                    var hierarchy = this.getRecordsHierarchy('uid', 'parentuid', 'records', null, dataRecords);
                    this.hierarchy = hierarchy;
                    return hierarchy;
                }
                else {
                    this.hierarchy = this.records;
                    var root = source.hierarchy.root;
                    for (var i = 0; i < this.records.length; i++) {
                        var record = this.records[i];
                        if (!record) {
                            continue;
                        }

                        var addRecords = function (record) {
                            if (source.hierarchy.record) {
                                record.records = record[root][source.hierarchy.record];
                            }
                            else {
                                var splitMap = root.split(that.mapChar);
                                var records = null;
                                if (splitMap.length > 1) {
                                    var d = record;
                                    for (var p = 0; p < splitMap.length; p++) {
                                        if (d != undefined) {
                                            d = d[splitMap[p]];
                                        }
                                    }
                                    records = d;
                                }
                                else records = record[root];
                                record.records = records;
                            }
                            if (record.records == null || (record.records && record.records.length == 0)) {
                                record[names.leaf] = true;
                            }
                        }
                        addRecords(record);
                        record[names.level] = 0;
                        var recordid = this.getid(source.id, record, i);
                        record.uid = recordid;
                        record[names.parent] = null;
                        record[names.data] = record;
                        if (record[names.expanded] === undefined) {
                            record[names.expanded] = false;
                        }
                        var drillThrough = function (parent, records) {
                            if (!records) {
                                parent.records = new Array();
                                return;
                            }

                            for (var i = 0; i < records.length; i++) {
                                var record = records[i];
                                if (!record) {
                                    continue;
                                }

                                addRecords(record);
                                record[names.level] = parent[names.level] + 1;
                                record[names.parent] = parent;
                                record[names.data] = record;
                                var recordid = that.getid(source.id, record, i);
                                if (recordid == i && source.id == null) {
                                    record.uid = parent.uid + "_" + recordid;
                                }
                                else {
                                    record.uid = recordid;
                                }

                                if (record[names.expanded] === undefined) {
                                    record[names.expanded] = false;
                                }
                                drillThrough(record, record.records);
                            }
                        }
                        drillThrough(record, record.records);
                    }
                }             
                return this.hierarchy;
            }

            if (source.hierarchy.keyDataField && source.hierarchy.parentDataField) {
                var hierarchy = this.getRecordsHierarchy(source.hierarchy.keyDataField.name, source.hierarchy.parentDataField.name, 'records', null, dataRecords);
                this.hierarchy = hierarchy;
                return hierarchy;
            }

            if (source.hierarchy.groupingDataFields) {
                var groups = new Array();
                for (var i = 0; i < source.hierarchy.groupingDataFields.length; i++) {
                    groups.push(source.hierarchy.groupingDataFields[i].name);
                }

                var hierarchy = this.getGroupedRecords(groups, 'records', 'label', null, 'data', null, 'parent', dataRecords);
                this.hierarchy = hierarchy;
                return hierarchy;
            }
        },

        addRecord: function (record, position, parentID, virtualMode) {
            var that = this;
            var reservedNames = function()
            {
                return {
                    leaf: "leaf",
                    parent: "parent",
                    expanded: "expanded",
                    checked: "checked",
                    selected: "selected",
                    level: "level",
                    icon: "icon",
                    data: "data"
                }
            }
            if (record != undefined) {
                if (parentID != undefined) {
                    if (this.hierarchy.length > 0) {
                        var traverse = function (records) {
                            if (records) {
                                for (var i = 0; i < records.length; i++) {
                                    var r = records[i];
                                    if (r.uid == parentID) {
                                        var names = (that._source && that._source.hierarchy) ? that._source.hierarchy.reservedNames : null;  
                                        if (names == null) names = reservedNames();

                                        record[names.parent] = r;
                                        record[names.level] = r[names.level] + 1;

                                        if (!r.records) {
                                            r.records = new Array();
                                            r[names.leaf] = false;
                                        }
                                        if (position == 'last') {
                                            r.records.push(record);
                                        }
                                        else if (typeof position === 'number' && isFinite(position)) {
                                            r.records.splice(position, 0, record);
                                        }
                                        else {
                                            r.records.splice(0, 0, record);
                                        }
                                        that.records.push(record);
                                        return true;
                                    }
                                    if (r.records) {
                                        traverse(r.records);
                                    }
                                }
                            }
                        }
                        traverse(this.hierarchy);
                    }
                }
                else {
                    if (this.hierarchy && this.hierarchy.length >= 0 && (this._source.hierarchy || virtualMode)) {
                        var names = (that._source && that._source.hierarchy) ? that._source.hierarchy.reservedNames : null;
                        if (names == null) names = reservedNames();

                        record[names.level] = 0;

                        if (position == 'last') {
                            this.hierarchy.push(record);
                        }
                        else if (typeof position === 'number' && isFinite(position)) {
                            this.hierarchy.splice(position, 0, record);
                        }
                        else {
                            this.hierarchy.splice(0, 0, record);
                        }
                    }
                    else {
                        if (position == 'last') {
                            this.records.push(record);
                        }
                        else if (typeof position === 'number' && isFinite(position)) {
                            this.records.splice(position, 0, record);
                        }
                        else {
                            this.records.splice(0, 0, record);
                        }
                    }
                    return true;
                }
            }
            return false;
        },

        deleteRecord: function(uid)
        {
            var that = this;
            if (this.hierarchy.length > 0) {
                var traverse = function (records) {
                    if (records) {
                        for (var i = 0; i < records.length; i++) {
                            var r = records[i];
                            if (r.uid == uid) {
                                records.splice(i, 1);
                                if (that.recordids[uid]) {
                                    delete that.recordids[uid];
                                }

                                var removeChildren = function (children) {
                                    for (var x = 0; x < children.length; x++) {
                                        var uid = children[x].uid;
                                        for (var j = 0; j < that.records.length; j++) {
                                            var r = that.records[j];
                                            if (r.uid == uid) {
                                                that.records.splice(j, 1);
                                                break;
                                            }
                                        }
                                        if (children[x].records) {
                                            removeChildren(children[x].records);
                                        }
                                    }
                                }
                                if (r.records) {
                                    removeChildren(r.records);                              
                                }
                                for (var j = 0; j < that.records.length; j++) {
                                    var r = that.records[j];
                                    if (r.uid == uid) {
                                        that.records.splice(j, 1);
                                        break;
                                    }
                                }
                                return true;
                            }
                            if (r.records) {
                                traverse(r.records);
                            }
                        }
                    }
                }
                traverse(this.hierarchy);
            }
            else {
                for (var i = 0; i < this.records.length; i++) {
                    var r = this.records[i];
                    if (r.uid == uid) {
                        this.records.splice(i, 1);
                        return true;
                    }
                }
            }
            return false;
        },

        addForeignValues: function(source)
        {
            var me = this;
            var datafieldslength = source.datafields ? source.datafields.length : 0;
            for (var j = 0; j < datafieldslength; j++) {
                var datafield = source.datafields[j];
                if (datafield != undefined) {
                    if (datafield.values != undefined) {
                        if (datafield.value == undefined) datafield.value = datafield.name;
                        if (datafield.values['value'] == undefined) {
                            datafield.values['value'] = datafield.value;
                        }

                        var matchedIDs = new Array();
                        var start, end;
                        if (me.pageable && me.virtualmode) {
                            start = me.pagenum * me.pagesize;
                            end = start + me.pagesize;
                            if (end > me.totalrecords) {
                                end = me.totalrecords;
                            }
                        }
                        else if (me.virtualmode) {
                            start = source.recordstartindex;
                            end = source.recordendindex;
                            if (end > me.totalrecords) {
                                end = me.totalrecords;
                            }
                        }
                        else {
                            start = 0;
                            end = me.records.length;
                        }

                        for (var i = start; i < end; i++) {
                            var record = me.records[i];
                            var name = datafield.name;
                            var value = record[datafield.value];

                            if (matchedIDs[value] != undefined) {
                                record[name] = matchedIDs[value];
                            }
                            else {
                                for (var p = 0; p < datafield['values'].source.length; p++) {
                                    var sourcerecord = datafield.values.source[p];
                                    var sourcevalue = sourcerecord[datafield.values['value']];
                                    if (sourcevalue == undefined) {
                                        sourcevalue = sourcerecord.uid;
                                    }
                                    if (sourcevalue == value) {
                                        var label = sourcerecord[datafield.values['name']];
                                        record[name] = label;
                                        matchedIDs[value] = label;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else if (datafield.value != undefined) {
                        for (var i = 0; i < me.records.length; i++) {
                            var record = me.records[i];
                            record[datafield.name] = record[datafield.value];
                        }
                    }
                }
            }
        },

        abort: function () {
            if (this.xhr && this.xhr.readyState != 4) {
                this.xhr.abort();
                me.callDownloadComplete();
            }
        },

        _requestData: function (postdata, source, options) {
            var me = this;
            var success = function (requestedData) {
                if (requestedData.totalrecords) {
                    source.totalrecords = requestedData.totalrecords;
                    me.totalrecords = requestedData.totalrecords;
                }
                if (requestedData.records) {
                    me.records = requestedData.records;
                    me.cachedrecords = requestedData.records;
                }
                if ($.isFunction(options.loadComplete)) {
                    options.loadComplete(requestedData);
                }
                me.callDownloadComplete();
            }
            options.loadServerData(postdata, source, success);
        },

        getUniqueRecords: function (records, dataFields) {
            if (records && dataFields) {
                var length = records.length;
                var datafieldslength = dataFields.length;

                var uniqueRecords = new Array();
                var lookupkeys = new Array();
                // loop through all records.
                for (var urec = 0; urec < length; urec++) {
                    var datarow = records[urec];
                    var lookupkey = "";
                    if (datarow == undefined)
                        continue;
                    // build lookup key from the datafield values.
                    for (var datafieldindex = 0; datafieldindex < datafieldslength; datafieldindex++) {
                        var datafield = dataFields[datafieldindex];
                        lookupkey += datarow[datafield] + "_";
                    }
                    // add the unique record.
                    if (!lookupkeys[lookupkey]) {
                        uniqueRecords[uniqueRecords.length] = datarow;
                    }
                    // add the lookup key.
                    lookupkeys[lookupkey] = true;
                }
            }

            return uniqueRecords;
        },

        getAggregatedData: function (aggregates, calendar, records, level) {
            var dataRecords = records;
            if (!dataRecords) {
                dataRecords = this.records;
            }
            var data = {};
            var dataValuesByAggregate = new Array();
            var length = dataRecords.length;
            if (length == 0) return;
            if (length == undefined) return;
            for (var i = 0; i < length; i++) {
                var record = dataRecords[i];
                for (var j = 0; j < aggregates.length; j++) {
                    var aggregate = aggregates[j];
                    var value = record[aggregate.name];
                    if (value === null) continue;
                    if (aggregate.aggregates) {
                        data[aggregate.name] = data[aggregate.name] || {};
                        dataValuesByAggregate[aggregate.name] = dataValuesByAggregate[aggregate.name] || 0;
                        dataValuesByAggregate[aggregate.name]++;
                        var _customCalcFunc = function (aggObject) {
                            for (obj in aggObject) {
                                var oldValue = data[aggregate.name][obj];
                                if (oldValue == null) {
                                    data[aggregate.name][obj] = 0;
                                    oldValue = 0;
                                }
                                if ($.isFunction(aggObject[obj])) {
                                    oldValue = aggObject[obj](oldValue, value, aggregate.name, record, level);
                                }
                                data[aggregate.name][obj] = oldValue;
                            }
                        }

                        var canParse = parseFloat(value);
                        if (isNaN(canParse)) canParse = false; else canParse = true;
                        if (canParse)
                            value = parseFloat(value);

                        if (typeof value === 'number' && isFinite(value)) {
                            $.each(aggregate.aggregates, function () {
                                var oldValue = data[aggregate.name][this];
                                if (oldValue == null) {
                                    oldValue = 0;
                                    if (this == 'min') oldValue = 9999999999999;
                                    if (this == 'max') oldValue = -9999999999999;
                                }
                                if (this == 'sum' || this == 'avg' || this == 'stdev'
                                || this == 'stdevp' || this == 'var' || this == 'varp') {
                                    oldValue += parseFloat(value);
                                }
                                else if (this == 'product') {
                                    if (i == 0)
                                        oldValue = parseFloat(value);
                                    else
                                        oldValue *= parseFloat(value);
                                }
                                else if (this == 'min') {
                                    oldValue = Math.min(oldValue, parseFloat(value));
                                }
                                else if (this == 'max') {
                                    oldValue = Math.max(oldValue, parseFloat(value));
                                }
                                else if (this == 'count') {
                                    oldValue++;
                                }
                                else if (typeof (this) == 'object') {
                                    _customCalcFunc(this);
                                    return;
                                }
                                data[aggregate.name][this] = oldValue;
                            });
                        }
                        else {
                            $.each(aggregate.aggregates, function () {
                                if (this == 'min' || this == 'max' || this == 'count' || this == 'product' || this == 'sum'
                                 || this == 'avg' || this == 'stdev'
                                || this == 'stdevp' || this == 'var' || this == 'varp') {
                                    var oldValue = data[aggregate.name][this];
                                    if (oldValue == null) {
                                        oldValue = 0;
                                    }
                                    data[aggregate.name][this] = oldValue;
                                    return true;
                                }

                                if (typeof (this) == 'object') {
                                    _customCalcFunc(this);
                                }
                            });
                        }
                    }
                }
            }

            for (var j = 0; j < aggregates.length; j++) {
                var aggregate = aggregates[j];
                if (!data[aggregate.name]) {
                    data[aggregate.name] = {};
                    $.each(aggregate.aggregates, function (index) {
                        data[aggregate.name][this] = 0;
                    });
                }

                if (data[aggregate.name]['avg'] != undefined) {
                    var value = data[aggregate.name]['avg'];
                    var dataValues = dataValuesByAggregate[aggregate.name];
                    if (dataValues === 0 || dataValues == undefined) {
                        data[aggregate.name]['avg'] = 0;
                    }
                    else {
                        data[aggregate.name]['avg'] = value / dataValues;
                    }
                }
                else if (data[aggregate.name]['count'] != undefined) {
                    data[aggregate.name]['count'] = length;
                }

                // stdev, stdevp, var, varp.
                // stdev - Standard deviation on a sample.
                // varp - Variance on an entire population.
                // var - Variance on a sample.
                if (data[aggregate.name]['stdev'] || data[aggregate.name]['stdevp']
                || data[aggregate.name]['var'] || data[aggregate.name]['varp']) {
                    $.each(aggregate.aggregates, function (index) {
                        if (this == 'stdev' || this == 'var' || this == 'varp' || this == 'stdevp') {
                            var value = data[aggregate.name][this];
                            var count = length;
                            var average = (value / length);
                            var sumSq = 0.0;
                            for (var i = 0; i < length; i++) {
                                var record = dataRecords[i];
                                var recordvalue = record[aggregate.name];
                                sumSq += (recordvalue - average) * (recordvalue - average);
                            }

                            var denominator = (this == 'stdevp' || this == 'varp') ? count : count - 1;
                            if (denominator == 0)
                                denominator = 1;

                            if (this == 'var' || this == 'varp') {
                                data[aggregate.name][this] = sumSq / denominator;
                            }
                            else if (this == 'stdevp' || this == 'stdev') {
                                data[aggregate.name][this] = Math.sqrt(sumSq / denominator);
                            }
                        }
                    });
                }

                if (aggregate.formatStrings) {
                    $.each(aggregate.aggregates, function (index) {
                        var formatString = aggregate.formatStrings[index];
                        if (formatString) {
                            if (this == 'min' || this == 'max' || this == 'count' || this == 'product' || this == 'sum'
                                 || this == 'avg' || this == 'stdev'
                                || this == 'stdevp' || this == 'var' || this == 'varp') {
                                var value = data[aggregate.name][this];
                                data[aggregate.name][this] = $.jqx.dataFormat.formatnumber(value, formatString, calendar);
                            }
                            else if (typeof this == 'object') {
                                for (obj in this) {
                                    var value = data[aggregate.name][obj];
                                    data[aggregate.name][obj] = $.jqx.dataFormat.formatnumber(value, formatString, calendar);
                                }
                            }
                        }
                    });
                }
            }
            return data;
        },

        bindDownloadComplete: function (id, func) {
            this._downloadComplete[this._downloadComplete.length] = { id: id, func: func };

        },

        unbindDownloadComplete: function (id) {
            for (var i = 0; i < this._downloadComplete.length; i++) {
                if (this._downloadComplete[i].id == id) {
                    this._downloadComplete[i].func = null;
                    this._downloadComplete.splice(i, 1);
                    break;
                }
            }
        },

        callDownloadComplete: function () {
            for (var complete = 0; complete < this._downloadComplete.length; complete++) {
                var downloadComplete = this._downloadComplete[complete];
                if (downloadComplete.func != null) {
                    downloadComplete.func();
                }
            }
        },

        setSource: function (source) {
            this._source = source;
        },

        generatekey: function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
        },

        getGroupedRecords: function (groups, collectionName, groupName, mappingFields, recordName, valueName, parentName, data, startIndex) {
            var visualRows = 0;
            var self = this;
            if (!startIndex) startIndex = 0;
            var groupHashCodes = new Array();
            for (var iGroupColumn = 0; iGroupColumn < groups.length; iGroupColumn++) {
                groupHashCodes[iGroupColumn] = self.generatekey();
            }

            if (!collectionName) {
                collectionName = 'items';
            }

            if (!groupName) {
                groupName = 'group';
            }

            if (!recordName) {
                recordName = 'record';
            }

            if (!parentName) {
                parentName = 'parentItem';
            }

            if (undefined === valueName) {
                valueName = 'value';
            }

            var grouprecords = new Array();
            var grouprecordsindex = 0;
            var hashRowGroups = new Array();
            var groupslength = groups.length;
            var groupsHierarchy = new Array();
            if (!data) {
                var data = this.records;
            }

            var dataLength = data.length;

            var itemByRecord = function (record) {
                var itemObj = record;
                if (mappingFields) {
                    $.each(mappingFields, function () {
                        if (this.name && this.map) {
                            itemObj[this.map] = itemObj[this.name];
                        }
                    });
                }

                return itemObj;
            }

            for (var obj = 0; obj < dataLength; obj++) {
                var item = itemByRecord(data[obj]);
                id = item[self.uniqueId];
                var itemKeysHierarchy = new Array();
                var keys = 0;
                for (iGroupColumn = 0; iGroupColumn < groupslength; iGroupColumn++) {
                    var group = groups[iGroupColumn];
                    var value = item[group];

                    if (null == value)
                        continue;

                    itemKeysHierarchy[keys++] = { value: value, hash: groupHashCodes[iGroupColumn] };
                }

                if (itemKeysHierarchy.length != groupslength)
                    break;

                var parentItem = null;

                var lookupKey = "";
                var iLevel = -1;
                for (var q = 0; q < itemKeysHierarchy.length; q++) {
                    iLevel++;
                    var itemKey = itemKeysHierarchy[q].value;
                    var columnHash = itemKeysHierarchy[q].hash;
                    lookupKey = lookupKey + "_" + columnHash + "_" + itemKey;
                    if (hashRowGroups[lookupKey] != undefined && hashRowGroups[lookupKey] != null) {
                        parentItem = hashRowGroups[lookupKey];
                        continue;
                    }
                    if (parentItem == null) {
                        parentItem = { level: 0 };
                        parentItem[parentName] = null;
                        parentItem[groupName] = itemKey;
                        parentItem[recordName] = item;
                        if (item.expanded !== undefined) {
                            parentItem.expanded = item.expanded;
                        }
                        else
                        {
                            parentItem.expanded = false;
                        }

                        if (valueName) {
                            parentItem[valueName] = item[valueName];
                        }
                        parentItem[collectionName] = new Array();
                        var uid = grouprecords.length + startIndex;
                        if (!this._source.id || typeof item.uid === "number") {
                            uid = "Row" + uid;
                        }
                        parentItem.uid = uid;
                        grouprecords[grouprecordsindex++] = parentItem;
                    }
                    else {
                        var subItem = { level: parentItem.level + 1 };
                        subItem[parentName] = parentItem;
                        subItem[groupName] = itemKey;
                        subItem[collectionName] = new Array();
                        subItem[recordName] = item;
                        if (item.expanded !== undefined) {
                            subItem.expanded = item.expanded;
                        }
                        else {
                            subItem.expanded = false;
                        }

                        if (valueName) {
                            subItem[valueName] = item[valueName];
                        }
                        subItem.uid = parentItem.uid + "_" + parentItem[collectionName].length;
                        parentItem[collectionName][parentItem[collectionName].length] = subItem;
                        parentItem = subItem;
                    }

                    hashRowGroups[lookupKey] = parentItem;
                }

                if (item) {
                    item.leaf = true;
                }

                if (parentItem != null) {
                    if (this._source.id == null) {
                        item.uid = parentItem.uid + "_" + parentItem[collectionName].length;
                    }
                    item[parentName] = parentItem;
                    item.level = parentItem.level + 1;
                    parentItem[collectionName][parentItem[collectionName].length] = item;
                }
                else {
                    if (!item.uid) {
                        item.uid = this.generatekey();
                    }
                }
            }
            return grouprecords;
        },

        getRecordsHierarchy: function (fieldName, parentFieldName, collectionName, mappingFields, dataRecords) {
            var recordsHierarchy = new Array();
            var flatData = this.records;
            if (dataRecords) {
                flatData = dataRecords;
            }

            if (this.records.length == 0)
                return null;

            var subItemsName = collectionName != null ? collectionName : "items";
            var items = [];
            var data = flatData;
            var dataLength = data.length;
            var names = (this._source && this._source.hierarchy) ? this._source.hierarchy.reservedNames : null;

            var itemByRecord = function (record) {
                var itemObj = record;
                if (mappingFields) {
                    $.each(mappingFields, function () {
                        if (this.name && this.map) {
                            itemObj[this.map] = itemObj[this.name];
                        }
                    });
                }

                return itemObj;
            }

            // build hierarchical source.
            for (var i = 0; i < dataLength; i++) {
                var item = $.extend({}, data[i]);
                var parentid = item[parentFieldName];
                var id = item[fieldName];
                items[id] = { parentid: parentid, item: item };
            }

            for (var i = 0; i < dataLength; i++) {
                var item = $.extend({}, data[i]);
                var parentid = item[parentFieldName];
                var id = item[fieldName];

                if (items[parentid] != undefined) {
                    var item = { parentid: parentid, item: items[id].item };
                    var parentItem = items[parentid].item;
                    if (!parentItem[subItemsName]) {
                        parentItem[subItemsName] = [];
                    }
                    var length = parentItem[subItemsName].length;
                    var record = item.item;

                    if (!names)
                    {
                        if (record.parent == undefined) {
                            record.parent = parentItem;
                        }
                    }
                    else
                    {
                        if (record[names.parent] == undefined) {
                            record[names.parent] = parentItem;
                        }                   
                    }

                    var itemObj = itemByRecord(record);
                    parentItem[subItemsName][length] = itemObj;
                    items[parentid].item = parentItem;
                    items[id] = item;
                }
                else {
                    var record = items[id].item;
                    if (!names)
                    {
                        if (record.parent == undefined) {
                            record.parent = null;
                        }
                    }
                    else
                    {
                        if (record[names.parent] == undefined) {
                            record[names.parent] = null;
                        }
                    }

                    var itemObj = itemByRecord(record);
                    if (!names)
                    {
                        itemObj.level = 0;
                    }
                    else
                    {
                        itemObj[names.level] = 0;
                    }

                    recordsHierarchy[recordsHierarchy.length] = itemObj;
                }
            }
            if (recordsHierarchy.length != 0) {
                var updateLevels = function (level, records) {
                    for (var i = 0; i < records.length; i++) {
                        if (!names)
                        {
                            records[i].level = level;
                        }
                        else
                        {
                            records[i][names.level] = level;
                        }

                        var subRecords = records[i][subItemsName];
                        if (subRecords) {
                            if (subRecords.length > 0) {
                                updateLevels(level + 1, subRecords);
                            }
                            else {
                                if (!names)
                                {
                                    records[i].leaf = true;
                                }
                                else
                                {
                                    records[i][names.leaf] = true;
                                }
                            }
                        }
                        else {
                            if (!names)
                            {                 
                                records[i].leaf = true;
                            }
                            else
                            {
                                records[i][names.leaf] = true;
                            }
                        }
                    }
                };
                updateLevels(0, recordsHierarchy);
            }
            return recordsHierarchy;
        },

        bindBindingUpdate: function (id, func) {
            this._bindingUpdate[this._bindingUpdate.length] = { id: id, func: func };

        },

        unbindBindingUpdate: function (id) {
            for (var i = 0; i < this._bindingUpdate.length; i++) {
                if (this._bindingUpdate[i].id == id) {
                    this._bindingUpdate[i].func = null;
                    this._bindingUpdate.splice(i, 1);
                    break;
                }
            }
        },

        callBindingUpdate: function (collectionChanged) {
            for (var update = 0; update < this._bindingUpdate.length; update++) {
                var bindingUpdate = this._bindingUpdate[update];
                if (bindingUpdate.func != null) {
                    bindingUpdate.func(collectionChanged);
                }
            }
        },

        getid: function (id, record, index) {
            if (id != null && id.name != undefined) {
                if (id.name) {
                    var result = $(record).attr(id.name);
                    if (result != null && result.toString().length > 0) {
                        return result;
                    }
                    else if (id.map) {
                        try
                        {
                            var result = $(record).attr(id.map);
                            if (result != null && result.toString().length > 0) {
                                return result;
                            }
                            else if ($(id.map, record).length > 0) {
                                return $(id.map, record).text();
                            }
                            else if ($(id.name, record).length > 0) {
                                return $(id.name, record).text();
                            }
                        }
                        catch (error) {
                            return index;
                        }
                    }
                    return;
                }
            }

            if ($(id, record).length > 0) {
                return $(id, record).text();
            }

            if (id) {
                if (id.toString().length > 0) {
                    var result = $(record).attr(id);
                    if (result != null && result.toString().length > 0) {
                        return result;
                    }
                }
            }

            return index;
        },

        loadjson: function (jsondata, data, source) {
            if (typeof (jsondata) == 'string') {
                jsondata = $.parseJSON(jsondata);
            }

            if (source.root == undefined) source.root = '';
            if (source.record == undefined) source.record = '';

            var jsondata = jsondata || data;
            if (!jsondata) {
                jsondata = [];
            }

            var me = this;
            if (source.root != '') {
                var splitMap = source.root.split(me.mapChar);
                if (splitMap.length > 1) {
                    var d = jsondata;
                    for (var p = 0; p < splitMap.length; p++) {
                        if (d != undefined) {
                            d = d[splitMap[p]];
                        }
                    }
                    jsondata = d;
                }
                else {
                    if (jsondata[source.root] != undefined) {
                        jsondata = jsondata[source.root];
                    }
                    else {
                        $.each(jsondata, function (i) {
                            var root = this;
                            if (this == source.root) {
                                jsondata = this;
                                return false;
                            }
                            else if (this[source.root] != undefined) {
                                jsondata = this[source.root];
                            }
                        });
                    }

                    if (!jsondata) {
                        var splitMap = source.root.split(me.mapChar);
                        if (splitMap.length > 0) {
                            var d = jsondata;
                            for (var p = 0; p < splitMap.length; p++) {
                                if (d != undefined) {
                                    d = d[splitMap[p]];
                                }
                            }
                            jsondata = d;
                        }
                    }
                }
            }
            else {
                if (!jsondata.length) {
                    for (obj in jsondata) {
                        if ($.isArray(jsondata[obj])) {
                            jsondata = jsondata[obj];
                            break;
                        }
                    }
                }
            }

            if (jsondata != null && jsondata.length == undefined) {
                jsondata = $.makeArray(jsondata);
            }

            if (jsondata == null || jsondata.length == undefined) {
                alert('JSON Parse error.');
                return;
            }

            if (jsondata.length == 0) {
                this.totalrecords = 0;
                return;
            }

            var length = jsondata.length;
            this.totalrecords = this.virtualmode ? (source.totalrecords || length) : length;
            this.records = new Array();
            this.originaldata = new Array();

            var records = this.records;
            var recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;

            this.recordids = new Array();

            if (source.loadallrecords) {
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var dataoffset = 0;
            if (this.virtualmode) {
                recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;
                dataoffset = recordsstartindex;
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var datafieldslength = source.datafields ? source.datafields.length : 0;
            // auto-generate data columns
            if (datafieldslength == 0) {
                var firstrecord = jsondata[0];
                var datafields = new Array();
                for (obj in firstrecord) {
                    var field = obj;
                    datafields[datafields.length] = { name: field };
                }
                source.datafields = datafields;
                datafieldslength = datafields.length;
            }

            var index = recordsstartindex;
            for (var i = recordsstartindex; i < length; i++) {
                var record = jsondata[i];

                if (record == undefined)
                    break;

                if (source.record && source.record != '') {
                    record = record[source.record];
                    if (record == undefined)
                        continue;
                }

                var recordid = this.getid(source.id, record, i);
                if (typeof (recordid) === "object") {
                    recordid = i;
                }

                if (!this.recordids[recordid]) {
                    this.recordids[recordid] = record;
                    var datarow = {};

                    for (var j = 0; j < datafieldslength; j++) {
                        var datafield = source.datafields[j];
                        var value = '';
                        if (undefined == datafield || datafield == null) {
                            continue;
                        }

                        if (datafield.map) {
                            if ($.isFunction(datafield.map)) {
                                value = datafield.map(record);
                            }
                            else {
                                var splitMap = datafield.map.split(me.mapChar);
                                if (splitMap.length > 0) {
                                    var datarecord = record;
                                    for (var p = 0; p < splitMap.length; p++) {
                                        if (datarecord != undefined) {
                                            datarecord = datarecord[splitMap[p]];
                                        }
                                    }
                                    value = datarecord;
                                }
                                else {
                                    value = record[datafield.map];
                                }
                            }

                            if (value != undefined && value != null) {
                                value = this.getvaluebytype(value, datafield);
                            }
                            else if (value == undefined && value != null) {
                                value = '';
                            }
                        }

                        // searches by both selectors when necessary.
                        if (value == '' && !datafield.map) {
                            value = record[datafield.name];
                            if (value == undefined && value != null) {
                                value = '';
                            }
                            // the datafield.value allows you to load values like: "Nombre":{"#text":"FASE 1"}, where the datafield is Nombre, the value is object. 
                            // If the datafield.value is "#text", the value that will be loaded will be "FASE 1".
                            if (datafield.value != undefined) {
                                if (value != undefined) {
                                    var tmpvalue = value[datafield.value];
                                    if (tmpvalue != undefined) {
                                        value = tmpvalue;
                                    }
                                }
                            }
                        }

                        value = this.getvaluebytype(value, datafield);
                        if (datafield.displayname != undefined) {
                            datarow[datafield.displayname] = value;
                        }
                        else {
                            datarow[datafield.name] = value;
                        }

                        if (datafield.type === "array") {
                            var updateValues = function (records) {
                                if (!records) return;
                                for (var t = 0; t < records.length; t++) {
                                    var record = records[t];
                                    if (!record) {
                                        continue;
                                    }

                                    for (var c = 0; c < datafieldslength; c++) {
                                        var datafield = source.datafields[c];
                                        var value = '';
                                        if (undefined == datafield || datafield == null) {
                                            continue;
                                        }

                                        if (datafield.map) {
                                            if ($.isFunction(datafield.map)) {
                                                value = datafield.map(record);
                                            }
                                            else {
                                                var splitMap = datafield.map.split(me.mapChar);
                                                if (splitMap.length > 0) {
                                                    var datarecord = record;
                                                    for (var p = 0; p < splitMap.length; p++) {
                                                        if (datarecord != undefined) {
                                                            datarecord = datarecord[splitMap[p]];
                                                        }
                                                    }
                                                    value = datarecord;
                                                }
                                                else {
                                                    value = record[datafield.map];
                                                }
                                            }

                                            if (value != undefined && value != null) {
                                                value = this.getvaluebytype(value, datafield);
                                            }
                                            else if (value == undefined && value != null) {
                                                value = '';
                                            }
                                        }

                                        // searches by both selectors when necessary.
                                        if (value == '' && !datafield.map) {
                                            value = record[datafield.name];
                                            if (value == undefined && value != null) {
                                                value = '';
                                            }
                                            // the datafield.value allows you to load values like: "Nombre":{"#text":"FASE 1"}, where the datafield is Nombre, the value is object. 
                                            // If the datafield.value is "#text", the value that will be loaded will be "FASE 1".
                                            if (datafield.value != undefined) {
                                                if (value != undefined) {
                                                    var tmpvalue = value[datafield.value];
                                                    if (tmpvalue != undefined) {
                                                        value = tmpvalue;
                                                    }
                                                }
                                            }
                                        }

                                        value = this.getvaluebytype(value, datafield);
                                        if (datafield.displayname != undefined) {
                                            record[datafield.displayname] = value;
                                        }
                                        else {
                                            record[datafield.name] = value;
                                        }
                                        if (datafield.type === "array") {
                                            updateValues.call(this, value);
                                        }
                                    }
                                }
                            }
                            updateValues.call(this, value);
                        }
                    }

                    if (source.recordendindex <= 0 || recordsstartindex < source.recordendindex) {
                        records[dataoffset + index] = $.extend({}, datarow);
                        records[dataoffset + index].uid = recordid;

                        this.originaldata[dataoffset + index] = $.extend({}, records[i]);
                        index++;
                    }
                }
            }
            this.records = records;
            this.cachedrecords = this.records;
        },

        loadxml: function (xmldata, data, source) {
            if (typeof (xmldata) == 'string') {
                xmldata = data = $($.parseXML(xmldata));
                xmldata = null;
            }

            if (source.root == undefined) source.root = '';
            if (source.record == undefined) source.record = '';


            var xmldata;

            if ($.jqx.browser.msie && data) {
                if (data.xml != undefined) {
                    xmldata = $(source.root + " " + source.record, $.parseXML(data.xml));
                }
                else {
                    xmldata = xmldata || $(source.root + " " + source.record, data);
                }
            }
            else xmldata = xmldata || $(source.root + " " + source.record, data);

            if (!xmldata) {
                xmldata = [];
            }

            var length = xmldata.length;
            if (xmldata.length == 0) {
                return;
            }

            this.totalrecords = this.virtualmode ? (source.totalrecords || length) : length;
            this.records = new Array();
            this.originaldata = new Array();

            var records = this.records;
            var recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;

            this.recordids = new Array();

            if (source.loadallrecords) {
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var dataoffset = 0;
            if (this.virtualmode) {
                recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;
                dataoffset = recordsstartindex;
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var datafieldslength = source.datafields ? source.datafields.length : 0;
            // auto-generate data columns
            if (datafieldslength == 0) {
                var firstrecord = xmldata[0];
                var datafields = new Array();
                for (obj in firstrecord) {
                    var field = obj;
                    datafields[datafields.length] = { name: field };
                }
                source.datafields = datafields;
                datafieldslength = datafields.length;
            }

            var p = recordsstartindex;
            var hasArray = false;
            for (var i = recordsstartindex; i < length; i++) {
                var record = xmldata[i];
                if (record == undefined)
                    break;
       
                var recordid = this.getid(source.id, record, i);
                if (!this.recordids[recordid]) {
                    this.recordids[recordid] = record;
                    var datarow = {};

                    var multiLevel = false;
                    if (source.hierarchy && source.hierarchy.root) {           
                        multiLevel = true;
                    }

                    for (var j = 0; j < datafieldslength; j++) {
                        var datafield = source.datafields[j];
                        var value = '';
                        if (undefined == datafield || datafield == null) {
                            continue;
                        }

                        if (datafield.map) {
                            if ($.isFunction(datafield.map)) {
                                value = datafield.map(record);
                            }
                            else {
                                var attributeStartIndex = datafield.map.indexOf('[');
                                if (attributeStartIndex < 0) {
                                    value = $(datafield.map, record);
                                    if (value.length == 1) value = value.text();
                                    else {
                                        hasArray = true;
                                        var subArray = new Array();
                                        for (var f = 0; f < value.length; f++) {
                                            subArray.push($(value[f]).text());
                                        }
                                        value = subArray;
                                        if (multiLevel && subArray.length > 0) {
                                            value = subArray[0];
                                        }
                                    }
                                }
                                else {
                                    var submap = datafield.map.substring(0, attributeStartIndex - 1);
                                    var attributeEndIndex = datafield.map.indexOf(']');
                                    var attribute = datafield.map.substring(attributeStartIndex + 1, attributeEndIndex);
                                    value = $(submap, record).attr(attribute);
                                    if (value == undefined) {
                                        value = $(record).attr(attribute);
                                    }

                                    if (value == undefined) value = '';
                                }
                                if (value == '') {
                                    value = $(record).attr(datafield.map);
                                    if (value == undefined) value = '';
                                }
                            }
                        }
                        // searches by both selectors when necessary.
                        if (value == '') {
                            value = $(datafield.name, record);
                            if (value.length == 1) value = value.text();
                            else {
                                var subArray = new Array();
                                for (var f = 0; f < value.length; f++) {
                                    subArray.push($(value[f]).text());
                                }
                                value = subArray;
                                if (multiLevel && subArray.length > 0) {
                                    value = subArray[0];
                                }
                            }

                            if (value == '') {
                                value = $(record).attr(datafield.name);
                                if (value == undefined) value = '';
                            }
                            if (value == '') {
                                if (record.nodeName && record.nodeName == datafield.name && record.firstChild) {
                                    value = $(record.firstChild).text();
                                }
                            }
                        }

                        var originalvalue = value;
                        value = this.getvaluebytype(value, datafield);
                        if (datafield.displayname != undefined) {
                            datarow[datafield.displayname] = value;
                        }
                        else {
                            datarow[datafield.name] = value;
                        }
                    }
                    if (source.recordendindex <= 0 || recordsstartindex < source.recordendindex) {
                        records[dataoffset + p] = $.extend({}, datarow);
                        records[dataoffset + p].uid = recordid;

                        this.originaldata[dataoffset + p] = $.extend({}, records[i]);
                        p++;
                    }
                }
            }

            if (source.hierarchy && source.hierarchy.root) {
                for (var i = recordsstartindex; i < length; i++) {
                    var record = xmldata[i];
                    var dataRecord = records[i];

                    if ($(record).parent().length > 0) {
                        var recordid = this.getid(source.id, $(record).parents(source.hierarchy.record + ":first" ));
                        dataRecord.parentuid = recordid;
                    }
                    else {
                        dataRecord.parentuid = null;
                    }
                }
            }

            this.records = records;
            this.cachedrecords = this.records;
        },

        loadtext: function (data, source) {
            if (data == null) {
                return;
            }

            var rowDelimiter = source.rowDelimiter || this.rowDelimiter || '\n';
            var rows = data.split(rowDelimiter);
            var length = rows.length;

            this.totalrecords = this.virtualmode ? (source.totalrecords || length) : length;
            this.records = new Array();
            this.originaldata = new Array();

            var records = this.records;
            var recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;

            this.recordids = new Array();

            if (source.loadallrecords) {
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var dataoffset = 0;
            if (this.virtualmode) {
                recordsstartindex = !this.pageable ? source.recordstartindex : this.pagesize * this.pagenum;
                dataoffset = recordsstartindex;
                recordsstartindex = 0;
                length = this.totalrecords;
            }

            var datafieldslength = source.datafields.length;
            var columnDelimiter = source.columnDelimiter || this.columnDelimiter;
            if (!columnDelimiter)
                columnDelimiter = (source.datatype === 'tab' || source.datatype === 'tsv') ? '\t' : ',';

            for (var i = recordsstartindex; i < length; i++) {
                var record = rows[i];
                var recordid = null;
                if (!this.recordids[recordid]) {
                    if (source.id == null) {
                        recordid = i;
                        this.recordids[recordid] = record;
                    }

                    var datarow = {};
                    var columns = rows[i].split(columnDelimiter);

                    for (var j = 0; j < datafieldslength; j++) {
                        if (j >= columns.length)
                            continue;
                        var datafield = source.datafields[j];

                        var value = columns[j];
                        if (datafield.map && $.isFunction(datafield.map)) {
                            value = datafield.map(record);
                        }

                        if (datafield.type) {
                            value = this.getvaluebytype(value, datafield);
                        }

                        var key = datafield.map || datafield.name || j.toString();
                        datarow[key] = value;
                        if (source.id != null) {
                            if (source.id === datafield.name) {
                                recordid = value;
                                this.recordids[recordid] = record;
                            }
                        }
                    }
                    if (recordid == null) {
                        recordid = i;
                    }

                    records[dataoffset + i] = $.extend({}, datarow);
                    records[dataoffset + i].uid = recordid;

                    this.originaldata[dataoffset + i] = $.extend({}, records[i]);
                }
            }
            this.records = records;
            this.cachedrecords = this.records;
        },

        getvaluebytype: function (value, datafield) {
            var originalvalue = value;
            if (value == null) return value;
            if ($.isArray(value) && datafield.type != "array") {
                for (var t = 0; t < value.length; t++) {
                    value[t] = this.getvaluebytype(value[t], datafield);
                }
                return value;
            }

            if (datafield.type == 'date') {
                if (value == "NaN") {
                    value = "";
                }
                else {
                    var tmpvalue = new Date(value);

                    if (typeof value == 'string') {
                        if (datafield.format) {
                            var newtmpvalue = $.jqx.dataFormat.parsedate(value, datafield.format);
                            if (newtmpvalue != null) {
                                tmpvalue = newtmpvalue;
                            }
                        }
                    }

                    if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                        if ($.jqx.dataFormat) {
                            value = $.jqx.dataFormat.tryparsedate(value);
                        }
                        else value = tmpvalue;
                    }
                    else {
                        value = tmpvalue;
                    }

                    if (value == null) {
                        value = originalvalue;
                    }
                }
            }
            else if (datafield.type == 'float' || datafield.type == 'number' || datafield.type == 'decimal') {
                if (value == "NaN") value = "";
                else {
                    var value = parseFloat(value);
                    if (isNaN(value)) {
                        value = originalvalue;
                    }
                }
            }
            else if (datafield.type == 'int' || datafield.type == 'integer') {
                var value = parseInt(value);
                if (isNaN(value)) {
                    value = originalvalue;
                }
            }
            else if (datafield.type == 'bool' || datafield.type == 'boolean') {
                if (value != null) {
                    if (value.toLowerCase != undefined) {
                        if (value.toLowerCase() == 'false') {
                            value = false;
                        }
                        else if (value.toLowerCase() == 'true') {
                            value = true;
                        }
                    }
                }

                if (value == 1) {
                    value = true;
                }
                else if (value == 0 && value !== "") {
                    value = false;
                }
                else value = '';
            }

            return value;
        }
    }

    $.jqx.dataFormat = {};

    $.extend($.jqx.dataFormat, {
        regexTrim: /^\s+|\s+$/g,
        regexInfinity: /^[+-]?infinity$/i,
        regexHex: /^0x[a-f0-9]+$/i,
        regexParseFloat: /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/,
        toString: Object.prototype.toString,

        isBoolean: function (value) {
            return typeof value === 'boolean';
        },

        isObject: function (value) {
            return (value && (typeof value === 'object' || $.isFunction(value))) || false;
        },

        isDate: function (value) {
            return value instanceof Date;
        },

        arrayIndexOf: function (array, item) {
            if (array.indexOf) {
                return array.indexOf(item);
            }
            for (var i = 0, length = array.length; i < length; i++) {
                if (array[i] === item) {
                    return i;
                }
            }
            return -1;
        },

        isString: function (value) {
            return typeof value === 'string';
        },

        isNumber: function (value) {
            return typeof value === 'number' && isFinite(value);
        },

        isNull: function (value) {
            return value === null;
        },

        isUndefined: function (value) {
            return typeof value === 'undefined';
        },

        isValue: function (value) {
            return (this.isObject(value) || this.isString(value) || this.isNumber(value) || this.isBoolean(value));
        },

        isEmpty: function (value) {
            if (!this.isString(value) && this.isValue(value)) {
                return false;
            } else if (!this.isValue(value)) {
                return true;
            }
            value = $.trim(value).replace(/\&nbsp\;/ig, '').replace(/\&#160\;/ig, '');
            return value === "";
        },

        startsWith: function (value, pattern) {
            return value.indexOf(pattern) === 0;
        },

        endsWith: function (value, pattern) {
            return value.substr(value.length - pattern.length) === pattern;
        },

        trim: function (value) {
            return (value + "").replace(this.regexTrim, "");
        },

        isArray: function (obj) {
            return this.toString.call(obj) === "[object Array]";
        },

        defaultcalendar: function () {
            var calendar = {
                // separator of parts of a date (e.g. '/' in 11/05/1955)
                '/': "/",
                // separator of parts of a time (e.g. ':' in 05:44 PM)
                ':': ":",
                // the first day of the week (0 = Sunday, 1 = Monday, etc)
                firstDay: 0,
                days: {
                    // full day names
                    names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                    // abbreviated day names
                    namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                    // shortest day names
                    namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
                },
                months: {
                    // full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
                    names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
                    // abbreviated month names
                    namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]
                },
                // AM and PM designators in one of these forms:
                // The usual view, and the upper and lower case versions
                //      [standard,lowercase,uppercase]
                // The culture does not use AM or PM (likely all standard date formats use 24 hour time)
                //      null
                AM: ["AM", "am", "AM"],
                PM: ["PM", "pm", "PM"],
                eras: [
                // eras in reverse chronological order.
                // name: the name of the era in this culture (e.g. A.D., C.E.)
                // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
                // offset: offset in years from gregorian calendar
                    {"name": "A.D.", "start": null, "offset": 0 }
                ],
                twoDigitYearMax: 2029,
                patterns: {
                    // short date pattern
                    d: "M/d/yyyy",
                    // long date pattern
                    D: "dddd, MMMM dd, yyyy",
                    // short time pattern
                    t: "h:mm tt",
                    // long time pattern
                    T: "h:mm:ss tt",
                    // long date, short time pattern
                    f: "dddd, MMMM dd, yyyy h:mm tt",
                    // long date, long time pattern
                    F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                    // month/day pattern
                    M: "MMMM dd",
                    // month/year pattern
                    Y: "yyyy MMMM",
                    // S is a sortable format that does not vary by culture
                    S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss",
                    // formatting of dates in MySQL DataBases
                    ISO: "yyyy-MM-dd hh:mm:ss",
                    ISO2: "yyyy-MM-dd HH:mm:ss",
                    d1: "dd.MM.yyyy",
                    d2: "dd-MM-yyyy",
                    zone1: "yyyy-MM-ddTHH:mm:ss-HH:mm",
                    zone2: "yyyy-MM-ddTHH:mm:ss+HH:mm",
                    custom: "yyyy-MM-ddTHH:mm:ss.fff",
                    custom2: "yyyy-MM-dd HH:mm:ss.fff"
                },
                percentsymbol: "%",
                currencysymbol: "$",
                currencysymbolposition: "before",
                decimalseparator: '.',
                thousandsseparator: ','
            }
            return calendar;
        },

        expandFormat: function (calendar, format) {
            // expands unspecified or single character date formats into the full pattern.
            format = format || "F";
            var pattern,
                patterns = calendar.patterns,
                len = format.length;
            if (len === 1) {
                pattern = patterns[format];
                if (!pattern) {
                    throw "Invalid date format string '" + format + "'.";
                }
                format = pattern;
            }
            else if (len === 2 && format.charAt(0) === "%") {
                // %X escape format -- intended as a custom format string that is only one character, not a built-in format.
                format = format.charAt(1);
            }
            return format;
        },

        getEra: function (date, eras) {
            if (!eras) return 0;
            if (typeof date === 'string') {
                return 0;
            }

            var start, ticks = date.getTime();
            for (var i = 0, l = eras.length; i < l; i++) {
                start = eras[i].start;
                if (start === null || ticks >= start) {
                    return i;
                }
            }
            return 0;
        },

        toUpper: function (value) {
            // 'he-IL' has non-breaking space in weekday names.
            return value.split("\u00A0").join(' ').toUpperCase();
        },

        toUpperArray: function (arr) {
            var results = [];
            for (var i = 0, l = arr.length; i < l; i++) {
                results[i] = this.toUpper(arr[i]);
            }
            return results;
        },

        getEraYear: function (date, cal, era, sortable) {
            var year = date.getFullYear();
            if (!sortable && cal.eras) {
                // convert normal gregorian year to era-shifted gregorian
                // year by subtracting the era offset
                year -= cal.eras[era].offset;
            }
            return year;
        },

        toUpper: function(value)
        {
            if (value) {
                return value.toUpperCase();
            }
            return "";
        },

        getDayIndex: function (cal, value, abbr) {
            var ret,
                days = cal.days,
                upperDays = cal._upperDays;
            if (!upperDays) {
                cal._upperDays = upperDays = [
                    this.toUpperArray(days.names),
                    this.toUpperArray(days.namesAbbr),
                    this.toUpperArray(days.namesShort)
                ];
            }
            value = value.toUpperCase();
            if (abbr) {
                ret = this.arrayIndexOf(upperDays[1], value);
                if (ret === -1) {
                    ret = this.arrayIndexOf(upperDays[2], value);
                }
            }
            else {
                ret = this.arrayIndexOf(upperDays[0], value);
            }
            return ret;
        },

        getMonthIndex: function (cal, value, abbr) {
            var months = cal.months,
                monthsGen = cal.monthsGenitive || cal.months,
                upperMonths = cal._upperMonths,
                upperMonthsGen = cal._upperMonthsGen;
            if (!upperMonths) {
                cal._upperMonths = upperMonths = [
                    this.toUpperArray(months.names),
                    this.toUpperArray(months.namesAbbr)
                ];
                cal._upperMonthsGen = upperMonthsGen = [
                    this.toUpperArray(monthsGen.names),
                    this.toUpperArray(monthsGen.namesAbbr)
                ];
            }
            value = this.toUpper(value);
            var i = this.arrayIndexOf(abbr ? upperMonths[1] : upperMonths[0], value);
            if (i < 0) {
                i = this.arrayIndexOf(abbr ? upperMonthsGen[1] : upperMonthsGen[0], value);
            }
            return i;
        },

        appendPreOrPostMatch: function (preMatch, strings) {
            // appends pre- and post- token match strings while removing escaped characters.
            // Returns a single quote count which is used to determine if the token occurs
            // in a string literal.
            var quoteCount = 0,
                escaped = false;
            for (var i = 0, il = preMatch.length; i < il; i++) {
                var c = preMatch.charAt(i);
                switch (c) {
                    case '\'':
                        if (escaped) {
                            strings.push("'");
                        }
                        else {
                            quoteCount++;
                        }
                        escaped = false;
                        break;
                    case '\\':
                        if (escaped) {
                            strings.push("\\");
                        }
                        escaped = !escaped;
                        break;
                    default:
                        strings.push(c);
                        escaped = false;
                        break;
                }
            }
            return quoteCount;
        },

        getTokenRegExp: function () {
            // regular expression for matching date and time tokens in format strings.
            return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
        },

        formatlink: function (value, format) {
            var target = '';
            if (format && format.target) { target = 'target=' + format.target; }
            if (target != '') {
                return "<a " + target + " href=\"" + value + "\">" + value + "</a>";
            }
            return "<a href=\"" + value + "\">" + value + "</a>";
        },

        formatemail: function (value) {
            return "<a href=\"mailto:" + value + "\">" + value + "</a>";
        },

        formatNumber: function (value, format, calendar)
        {
            return this.formatnumber(value, format, calendar);
        },

        formatnumber: function (value, format, calendar) {
            if (calendar == undefined || calendar == null || calendar == "") {
                calendar = this.defaultcalendar();
            }

            if (format === "" || format === null) {
                return value;
            }

            if (!this.isNumber(value)) {
                value *= 1;
            }
            var precision;
            if (format.length > 1) precision = parseInt(format.slice(1), 10);

            var options = {}
            var current = format.charAt(0).toUpperCase();

            options.thousandsSeparator = calendar.thousandsseparator;
            options.decimalSeparator = calendar.decimalseparator;
            switch (current) {
                case "D":
                case "d":
                case "F":
                case "f":
                    options.decimalPlaces = precision;
                    break;
                case "N":
                case "n":
                    options.decimalPlaces = 0;
                    break;
                case "C":
                case "c":
                    options.decimalPlaces = precision;
                    if (calendar.currencysymbolposition == "before") {
                        options.prefix = calendar.currencysymbol;
                    }
                    else {
                        options.suffix = calendar.currencysymbol;
                    }
                    break;
                case "P":
                case "p":
                    options.suffix = calendar.percentsymbol;
                    options.decimalPlaces = precision;
                    break;
                default:
                    throw "Bad number format specifier: " + current;
            }

            if (this.isNumber(value)) {
                var negative = (value < 0);
                var output = value + "";
                var decimalseparator = (options.decimalSeparator) ? options.decimalSeparator : ".";
                var decimalindex;
                if (this.isNumber(options.decimalPlaces)) {
                    // Round to the correct decimal place
                    var decimalplaces = options.decimalPlaces;
                    var decimal = Math.pow(10, decimalplaces);
                    output = (value * decimal).toFixed(0) / decimal + "";
                    decimalindex = output.lastIndexOf(".");
                    if (decimalplaces > 0) {
                        // Add the decimal separator
                        if (decimalindex < 0) {
                              output += decimalseparator;
                            decimalindex = output.length - 1;
                        }
                        // Replace the "."
                        else if (decimalseparator !== ".") {
                            output = output.replace(".", decimalseparator);
                        }
                        // Add missing zeros
                        while ((output.length - 1 - decimalindex) < decimalplaces) {
                            output += "0";
                        }
                    }
                }
                if (options.thousandsSeparator) {
                    var groupseparator = options.thousandsSeparator;
                    decimalindex = output.lastIndexOf(decimalseparator);
                    decimalindex = (decimalindex > -1) ? decimalindex : output.length;
                    var newoutput = output.substring(decimalindex);
                    var nCount = -1;
                    for (var i = decimalindex; i > 0; i--) {
                        nCount++;
                        if ((nCount % 3 === 0) && (i !== decimalindex) && (!negative || (i > 1))) {
                            newoutput = groupseparator + newoutput;
                        }
                        newoutput = output.charAt(i - 1) + newoutput;
                    }
                    output = newoutput;
                }
                // Prepend prefix
                output = (options.prefix) ? options.prefix + output : output;
                // Append suffix
                output = (options.suffix) ? output + options.suffix : output;
                return output;

            } else {
                return value;
            }
        },

        tryparsedate: function (value, calendar) {
            if (calendar == undefined || calendar == null) {
                calendar = this.defaultcalendar();
            }
            var me = this;
            if (value == "")
                return null;

            if (value != null && !value.substring) {
                value = value.toString();
            }

            if (value != null && value.substring(0, 6) == "/Date(") {
                var jsonDateRE = /^\/Date\((-?\d+)(\+|-)?(\d+)?\)\/$/;

                var date = new Date(+value.replace(/\/Date\((\d+)\)\//, '$1'));
                if (date == "Invalid Date") {
                    var m = value.match(/^\/Date\((\d+)([-+]\d\d)(\d\d)\)\/$/);
                    var date = null;
                    if (m)
                        date = new Date(1 * m[1] + 3600000 * m[2] + 60000 * m[3]);
                }
                if (date == null || date == "Invalid Date" || isNaN(date)) {
                    var arr = jsonDateRE.exec(value);
                    if (arr) {
                        // 0 - complete results; 1 - ticks; 2 - sign; 3 - minutes
                        var result = new Date(parseInt(arr[1]));
                        if (arr[2]) {
                            var mins = parseInt(arr[3]);
                            if (arr[2] === "-") {
                                mins = -mins;
                            }
                            var current = result.getUTCMinutes();
                            result.setUTCMinutes(current - mins);
                        }
                        if (!isNaN(result.valueOf())) {
                            return result;
                        }
                    }
                }

                return date;
            }

            patterns = calendar.patterns;
            for (prop in patterns) {
                date = me.parsedate(value, patterns[prop], calendar);
                if (date) {
                    if (prop == "ISO") {
                        var tmpDate = me.parsedate(value, patterns["ISO2"], calendar);
                        if (tmpDate) return tmpDate;
                    }
                    return date;
                }
            }

            if (value != null) {
                var tmpDate = null;
                var dateParts = [':', '/', '-'];
                var canParse = true;
                for (var part = 0; part < dateParts.length; part++) {
                    if (value.indexOf(dateParts[part]) != -1) {
                        canParse = false;
                    }
                }

                if (canParse) {
                    var number = new Number(value);
                    if (!isNaN(number)) {
                        return new Date(number);
                    }
                }
            }

            return null;
        },

        getparseregexp: function (cal, format) {
            // converts a format string into a regular expression with groups that
            // can be used to extract date fields from a date string.
            // check for a cached parse regex.
            var re = cal._parseRegExp;
            if (!re) {
                cal._parseRegExp = re = {};
            }
            else {
                var reFormat = re[format];
                if (reFormat) {
                    return reFormat;
                }
            }

            // expand single digit formats, then escape regular expression characters.
            var expFormat = this.expandFormat(cal, format).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1"),
                regexp = ["^"],
                groups = [],
                index = 0,
                quoteCount = 0,
                tokenRegExp = this.getTokenRegExp(),
                match;

            // iterate through each date token found.
            while ((match = tokenRegExp.exec(expFormat)) !== null) {
                var preMatch = expFormat.slice(index, match.index);
                index = tokenRegExp.lastIndex;

                // don't replace any matches that occur inside a string literal.
                quoteCount += this.appendPreOrPostMatch(preMatch, regexp);
                if (quoteCount % 2) {
                    regexp.push(match[0]);
                    continue;
                }

                // add a regex group for the token.
                var m = match[0],
                    len = m.length,
                    add;
                switch (m) {
                    case 'dddd': case 'ddd':
                    case 'MMMM': case 'MMM':
                    case 'gg': case 'g':
                        add = "(\\D+)";
                        break;
                    case 'tt': case 't':
                        add = "(\\D*)";
                        break;
                    case 'yyyy':
                    case 'fff':
                    case 'ff':
                    case 'f':
                        add = "(\\d{" + len + "})";
                        break;
                    case 'dd': case 'd':
                    case 'MM': case 'M':
                    case 'yy': case 'y':
                    case 'HH': case 'H':
                    case 'hh': case 'h':
                    case 'mm': case 'm':
                    case 'ss': case 's':
                        add = "(\\d\\d?)";
                        break;
                    case 'zzz':
                        add = "([+-]?\\d\\d?:\\d{2})";
                        break;
                    case 'zz': case 'z':
                        add = "([+-]?\\d\\d?)";
                        break;
                    case '/':
                        add = "(\\" + cal["/"] + ")";
                        break;
                    default:
                        throw "Invalid date format pattern '" + m + "'.";
                        break;
                }
                if (add) {
                    regexp.push(add);
                }
                groups.push(match[0]);
            }
            this.appendPreOrPostMatch(expFormat.slice(index), regexp);
            regexp.push("$");

            // allow whitespace to differ when matching formats.
            var regexpStr = regexp.join('').replace(/\s+/g, "\\s+"),
                parseRegExp = { 'regExp': regexpStr, 'groups': groups };

            // cache the regex for this format.
            return re[format] = parseRegExp;
        },

        outOfRange: function (value, low, high) {
            return value < low || value > high;
        },

        expandYear: function (cal, year) {
            // expands 2-digit year into 4 digits.
            var now = new Date(),
        era = this.getEra(now);
            if (year < 100) {
                var twoDigitYearMax = cal.twoDigitYearMax;
                twoDigitYearMax = typeof twoDigitYearMax === 'string' ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
                var curr = this.getEraYear(now, cal, era);
                year += curr - (curr % 100);
                if (year > twoDigitYearMax) {
                    year -= 100;
                }
            }
            return year;
        },

        parsedate: function (value, format, calendar) {
            if (calendar == undefined || calendar == null) {
                calendar = this.defaultcalendar();
            }
            // try to parse the date string by matching against the format string
            // while using the specified culture for date field names.
            value = this.trim(value);
            var cal = calendar,
            // convert date formats into regular expressions with groupings.
            // use the regexp to determine the input format and extract the date fields.
                parseInfo = this.getparseregexp(cal, format),
                match = new RegExp(parseInfo.regExp).exec(value);
            if (match === null) {
                return null;
            }
            // found a date format that matches the input.
            var groups = parseInfo.groups,
                era = null, year = null, month = null, date = null, weekDay = null,
                hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
                pmHour = false;
            // iterate the format groups to extract and set the date fields.
            for (var j = 0, jl = groups.length; j < jl; j++) {
                var matchGroup = match[j + 1];
                if (matchGroup) {
                    var current = groups[j],
                        clength = current.length,
                        matchInt = parseInt(matchGroup, 10);
                    switch (current) {
                        case 'dd': case 'd':
                            // Day of month.
                            date = matchInt;
                            // check that date is generally in valid range, also checking overflow below.
                            if (this.outOfRange(date, 1, 31)) return null;
                            break;
                        case 'MMM':
                        case 'MMMM':
                            month = this.getMonthIndex(cal, matchGroup, clength === 3);
                            if (this.outOfRange(month, 0, 11)) return null;
                            break;
                        case 'M': case 'MM':
                            // Month.
                            month = matchInt - 1;
                            if (this.outOfRange(month, 0, 11)) return null;
                            break;
                        case 'y': case 'yy':
                        case 'yyyy':
                            year = clength < 4 ? this.expandYear(cal, matchInt) : matchInt;
                            if (this.outOfRange(year, 0, 9999)) return null;
                            break;
                        case 'h': case 'hh':
                            // Hours (12-hour clock).
                            hour = matchInt;
                            if (hour === 12) hour = 0;
                            if (this.outOfRange(hour, 0, 11)) return null;
                            break;
                        case 'H': case 'HH':
                            // Hours (24-hour clock).
                            hour = matchInt;
                            if (this.outOfRange(hour, 0, 23)) return null;
                            break;
                        case 'm': case 'mm':
                            // Minutes.
                            min = matchInt;
                            if (this.outOfRange(min, 0, 59)) return null;
                            break;
                        case 's': case 'ss':
                            // Seconds.
                            sec = matchInt;
                            if (this.outOfRange(sec, 0, 59)) return null;
                            break;
                        case 'tt': case 't':
                            // AM/PM designator.
                            // see if it is standard, upper, or lower case PM. If not, ensure it is at least one of
                            // the AM tokens. If not, fail the parse for this format.
                            pmHour = cal.PM && (matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2]);
                            if (!pmHour && (!cal.AM || (matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2]))) return null;
                            break;
                        case 'f':
                            // Deciseconds.
                        case 'ff':
                            // Centiseconds.
                        case 'fff':
                            // Milliseconds.
                            msec = matchInt * Math.pow(10, 3 - clength);
                            if (this.outOfRange(msec, 0, 999)) return null;
                            break;
                        case 'ddd':
                            // Day of week.
                        case 'dddd':
                            // Day of week.
                            weekDay = this.getDayIndex(cal, matchGroup, clength === 3);
                            if (this.outOfRange(weekDay, 0, 6)) return null;
                            break;
                        case 'zzz':
                            // Time zone offset in +/- hours:min.
                            var offsets = matchGroup.split(/:/);
                            if (offsets.length !== 2) return null;
                            hourOffset = parseInt(offsets[0], 10);
                            if (this.outOfRange(hourOffset, -12, 13)) return null;
                            var minOffset = parseInt(offsets[1], 10);
                            if (this.outOfRange(minOffset, 0, 59)) return null;
                            tzMinOffset = (hourOffset * 60) + (startsWith(matchGroup, '-') ? -minOffset : minOffset);
                            break;
                        case 'z': case 'zz':
                            // Time zone offset in +/- hours.
                            hourOffset = matchInt;
                            if (this.outOfRange(hourOffset, -12, 13)) return null;
                            tzMinOffset = hourOffset * 60;
                            break;
                        case 'g': case 'gg':
                            var eraName = matchGroup;
                            if (!eraName || !cal.eras) return null;
                            eraName = trim(eraName.toLowerCase());
                            for (var i = 0, l = cal.eras.length; i < l; i++) {
                                if (eraName === cal.eras[i].name.toLowerCase()) {
                                    era = i;
                                    break;
                                }
                            }
                            // could not find an era with that name
                            if (era === null) return null;
                            break;
                    }
                }
            }
            var result = new Date(), defaultYear, convert = cal.convert;
            defaultYear = result.getFullYear();
            if (year === null) {
                year = defaultYear;
            }
            else if (cal.eras) {
                // year must be shifted to normal gregorian year
                // but not if year was not specified, its already normal gregorian
                // per the main if clause above.
                year += cal.eras[(era || 0)].offset;
            }
            // set default day and month to 1 and January, so if unspecified, these are the defaults
            // instead of the current day/month.
            if (month === null) {
                month = 0;
            }
            if (date === null) {
                date = 1;
            }
            // now have year, month, and date, but in the culture's calendar.
            // convert to gregorian if necessary
            if (convert) {
                result = convert.toGregorian(year, month, date);
                // conversion failed, must be an invalid match
                if (result === null) return null;
            }
            else {
                // have to set year, month and date together to avoid overflow based on current date.
                result.setFullYear(year, month, date);
                // check to see if date overflowed for specified month (only checked 1-31 above).
                if (result.getDate() !== date) return null;
                // invalid day of week.
                if (weekDay !== null && result.getDay() !== weekDay) {
                    return null;
                }
            }
            // if pm designator token was found make sure the hours fit the 24-hour clock.
            if (pmHour && hour < 12) {
                hour += 12;
            }
            result.setHours(hour, min, sec, msec);
            if (tzMinOffset !== null) {
                // adjust timezone to utc before applying local offset.
                var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
                // Safari limits hours and minutes to the range of -127 to 127.  We need to use setHours
                // to ensure both these fields will not exceed this range.  adjustedMin will range
                // somewhere between -1440 and 1500, so we only need to split this into hours.
                result.setHours(result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60);
            }
            return result;
        },

        cleardatescache: function () {
            this.datescache = new Array();
        },

        formatDate: function (value, format, calendar)
        {
            return this.formatdate(value, format, calendar);
        },

        formatdate: function (value, format, calendar) {
            if (calendar == undefined || calendar == null) {
                calendar = this.defaultcalendar();
            }

            if (typeof value === 'string') {
                return value;
            }

            var lookupkey = value.toString() + "_" + format;
            if (this.datescache && this.datescache[lookupkey]) {
                return this.datescache[lookupkey];
            }

            if (!format || !format.length || format === 'i') {
                var ret;
                ret = this.formatDate(value, calendar.patterns.F, culture);
                return ret;
            }

            var eras = calendar.eras,
            sortable = format === "s";
            format = this.expandFormat(calendar, format);

            // Start with an empty string
            ret = [];
            var hour,
            zeros = ['0', '00', '000'],
            foundDay,
            checkedDay,
            dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,
            quoteCount = 0,
            tokenRegExp = this.getTokenRegExp(),
            converted;

            function padZeros(num, c) {
                var r, s = num + '';
                if (c > 1 && s.length < c) {
                    r = (zeros[c - 2] + s);
                    return r.substr(r.length - c, c);
                }
                else {
                    r = s;
                }
                return r;
            }

            function hasDay() {
                if (foundDay || checkedDay) {
                    return foundDay;
                }
                foundDay = dayPartRegExp.test(format);
                checkedDay = true;
                return foundDay;
            }

            function getPart(date, part) {
                if (converted) {
                    return converted[part];
                }
                if (date.getMonth != undefined) {
                    switch (part) {
                        case 0: return date.getFullYear();
                        case 1: return date.getMonth();
                        case 2: return date.getDate();
                    }
                }
            }

            for (; ; ) {
                // Save the current index
                var index = tokenRegExp.lastIndex,
                // Look for the next pattern
                ar = tokenRegExp.exec(format);

                // Append the text before the pattern (or the end of the string if not found)
                var preMatch = format.slice(index, ar ? ar.index : format.length);
                quoteCount += this.appendPreOrPostMatch(preMatch, ret);

                if (!ar) {
                    break;
                }

                // do not replace any matches that occur inside a string literal.
                if (quoteCount % 2) {
                    ret.push(ar[0]);
                    continue;
                }

                var current = ar[0],
                clength = current.length;

                switch (current) {
                    case "ddd":
                        //Day of the week, as a three-letter abbreviation
                    case "dddd":
                        // Day of the week, using the full name
                        var names = (clength === 3) ? calendar.days.namesAbbr : calendar.days.names;
                        ret.push(names[value.getDay()]);
                        break;
                    case "d":
                        // Day of month, without leading zero for single-digit days
                    case "dd":
                        // Day of month, with leading zero for single-digit days
                        foundDay = true;
                        ret.push(padZeros(getPart(value, 2), clength));
                        break;
                    case "MMM":
                        // Month, as a three-letter abbreviation
                    case "MMMM":
                        // Month, using the full name
                        var part = getPart(value, 1);
                        ret.push(calendar.months[clength === 3 ? "namesAbbr" : "names"][part]);
                        break;
                    case "M":
                        // Month, as digits, with no leading zero for single-digit months
                    case "MM":
                        // Month, as digits, with leading zero for single-digit months
                        ret.push(padZeros(getPart(value, 1) + 1, clength));
                        break;
                    case "y":
                        // Year, as two digits, but with no leading zero for years less than 10
                    case "yy":
                        // Year, as two digits, with leading zero for years less than 10
                    case "yyyy":
                        // Year represented by four full digits
                        part = this.getEraYear(value, calendar, this.getEra(value, eras), sortable);
                        if (clength < 4) {
                            part = part % 100;
                        }
                        ret.push(padZeros(part, clength));
                        break;
                    case "h":
                        // Hours with no leading zero for single-digit hours, using 12-hour clock
                    case "hh":
                        // Hours with leading zero for single-digit hours, using 12-hour clock
                        hour = value.getHours() % 12;
                        if (hour === 0) hour = 12;
                        ret.push(padZeros(hour, clength));
                        break;
                    case "H":
                        // Hours with no leading zero for single-digit hours, using 24-hour clock
                    case "HH":
                        // Hours with leading zero for single-digit hours, using 24-hour clock
                        ret.push(padZeros(value.getHours(), clength));
                        break;
                    case "m":
                        // Minutes with no leading zero  for single-digit minutes
                    case "mm":
                        // Minutes with leading zero  for single-digit minutes
                        ret.push(padZeros(value.getMinutes(), clength));
                        break;
                    case "s":
                        // Seconds with no leading zero for single-digit seconds
                    case "ss":
                        // Seconds with leading zero for single-digit seconds
                        ret.push(padZeros(value.getSeconds(), clength));
                        break;
                    case "t":
                        // One character am/pm indicator ("a" or "p")
                    case "tt":
                        // Multicharacter am/pm indicator
                        part = value.getHours() < 12 ? (calendar.AM ? calendar.AM[0] : " ") : (calendar.PM ? calendar.PM[0] : " ");
                        ret.push(clength === 1 ? part.charAt(0) : part);
                        break;
                    case "f":
                        // Deciseconds
                    case "ff":
                        // Centiseconds
                    case "fff":
                        // Milliseconds
                        ret.push(padZeros(value.getMilliseconds(), 3).substr(0, clength));
                        break;
                    case "z":
                        // Time zone offset, no leading zero
                    case "zz":
                        // Time zone offset with leading zero
                        hour = value.getTimezoneOffset() / 60;
                        ret.push((hour <= 0 ? '+' : '-') + padZeros(Math.floor(Math.abs(hour)), clength));
                        break;
                    case "zzz":
                        // Time zone offset with leading zero
                        hour = value.getTimezoneOffset() / 60;
                        ret.push((hour <= 0 ? '+' : '-') + padZeros(Math.floor(Math.abs(hour)), 2) +
                        // Hard coded ":" separator, rather than using calendar.TimeSeparator
                        // Repeated here for consistency, plus ":" was already assumed in date parsing.
                    ":" + padZeros(Math.abs(value.getTimezoneOffset() % 60), 2));
                        break;
                    case "g":
                    case "gg":
                        if (calendar.eras) {
                            ret.push(calendar.eras[this.getEra(value, eras)].name);
                        }
                        break;
                    case "/":
                        ret.push(calendar["/"]);
                        break;
                    default:
                        throw "Invalid date format pattern '" + current + "'.";
                        break;
                }
            }

            var result = ret.join('');

            if (!this.datescache) {
                this.datescache = new Array();
            }

            this.datescache[lookupkey] = result;
            return result;
        }
    });

    // AJAX
    $.jqx.data = {};
    var
        ajaxLocParts,
        ajaxLocation,

        rhash = /#.*$/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
        rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        rquery = /\?/,
        rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
        rts = /([?&])_=[^&]*/,
        rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
        core_rspace = /\s+/,
        _load = jQuery.fn.load,
        prefilters = {},
        transports = {},
        allTypes = ["*/"] + ["*"];

    try {
        ajaxLocation = location.href;
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }

    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

    function addToPrefiltersOrTransports(structure) {

        return function (dataTypeExpression, func) {

            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            var dataType, list, placeBefore,
                dataTypes = dataTypeExpression.toLowerCase().split(core_rspace),
                i = 0,
                length = dataTypes.length;

            if (jQuery.isFunction(func)) {
                for (; i < length; i++) {
                    dataType = dataTypes[i];
                    placeBefore = /^\+/.test(dataType);
                    if (placeBefore) {
                        dataType = dataType.substr(1) || "*";
                    }
                    list = structure[dataType] = structure[dataType] || [];
                    list[placeBefore ? "unshift" : "push"](func);
                }
            }
        };
    }

    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR,
            dataType /* internal */, inspected /* internal */) {

        dataType = dataType || options.dataTypes[0];
        inspected = inspected || {};

        inspected[dataType] = true;

        var selection,
            list = structure[dataType],
            i = 0,
            length = list ? list.length : 0,
            executeOnly = (structure === prefilters);

        for (; i < length && (executeOnly || !selection) ; i++) {
            selection = list[i](options, originalOptions, jqXHR);
            if (typeof selection === "string") {
                if (!executeOnly || inspected[selection]) {
                    selection = undefined;
                } else {
                    options.dataTypes.unshift(selection);
                    selection = inspectPrefiltersOrTransports(
                            structure, options, originalOptions, jqXHR, selection, inspected);
                }
            }
        }
        if ((executeOnly || !selection) && !inspected["*"]) {
            selection = inspectPrefiltersOrTransports(
                    structure, options, originalOptions, jqXHR, "*", inspected);
        }
        return selection;
    }

    function ajaxExtend(target, src) {
        var key, deep,
            flatOptions = $.jqx.data.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
    }

    $.extend($.jqx.data, {
        ajaxSetup: function (target, settings) {
            if (settings) {
                ajaxExtend(target, $.jqx.data.ajaxSettings);
            } else {
                settings = target;
                target = $.jqx.data.ajaxSettings;
            }
            ajaxExtend(target, settings);
            return target;
        },

        ajaxSettings: {
            url: ajaxLocation,
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            type: "GET",
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            processData: true,
            async: true,
          
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                text: "text/plain",
                json: "application/json, text/javascript",
                "*": allTypes
            },

            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },

            responseFields: {
                xml: "responseXML",
                text: "responseText"
            },

            converters: {
                "* text": window.String,
                "text html": true,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },

            flatOptions: {
                context: true,
                url: true
            }
        },

        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),

        ajax: function (url, options) {

            if (typeof url === "object") {
                options = url;
                url = undefined;
            }

            options = options || {};

            var ifModifiedKey,
                responseHeadersString,
                responseHeaders,
                transport,
                timeoutTimer,
                parts,
                fireGlobals,
                i,
                s = $.jqx.data.ajaxSetup({}, options),
                callbackContext = s.context || s,
                globalEventContext = callbackContext !== s &&
                    (callbackContext.nodeType || callbackContext instanceof jQuery) ?
                            jQuery(callbackContext) : jQuery.event,
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),
                statusCode = s.statusCode || {},
                requestHeaders = {},
                requestHeadersNames = {},
                state = 0,
                strAbort = "canceled",
                jqXHR = {
                    readyState: 0,
                    setRequestHeader: function (name, value) {
                        if (!state) {
                            var lname = name.toLowerCase();
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },
                    getAllResponseHeaders: function () {
                        return state === 2 ? responseHeadersString : null;
                    },
                    getResponseHeader: function (key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while ((match = rheaders.exec(responseHeadersString))) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match === undefined ? null : match;
                    },

                    overrideMimeType: function (type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },

                    abort: function (statusText) {
                        statusText = statusText || strAbort;
                        if (transport) {
                            transport.abort(statusText);
                        }
                        done(0, statusText);
                        return this;
                    }
                };

            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;

                if (state === 2) {
                    return;
                }

                state = 2;
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }

                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;

                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }

                if (status >= 200 && status < 300 || status === 304) {

                    if (s.ifModified) {

                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[ifModifiedKey] = modified;
                        }
                        modified = jqXHR.getResponseHeader("Etag");
                        if (modified) {
                            jQuery.etag[ifModifiedKey] = modified;
                        }
                    }

                    if (status === 304) {
                        statusText = "notmodified";
                        isSuccess = true;
                    } else {

                        isSuccess = ajaxConvert(s, response);
                        statusText = isSuccess.state;
                        success = isSuccess.data;
                        error = isSuccess.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (!statusText || status) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }

                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }

                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                    globalEventContext.trigger("ajax" + (isSuccess ? "Success" : "Error"),
                            [jqXHR, s, isSuccess ? success : error]);
                }

                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }

            deferred.promise(jqXHR);
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            jqXHR.complete = completeDeferred.add;

            jqXHR.statusCode = function (map) {
                if (map) {
                    var tmp;
                    if (state < 2) {
                        for (tmp in map) {
                            statusCode[tmp] = [statusCode[tmp], map[tmp]];
                        }
                    } else {
                        tmp = map[jqXHR.status];
                        jqXHR.always(tmp);
                    }
                }
                return this;
            };

            s.url = ((url || s.url) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().split(core_rspace);

            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts &&
                    (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] ||
                        (parts[3] || (parts[1] === "http:" ? 80 : 443)) !=
                            (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443)))
                );
            }

            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }

            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

            if (state === 2) {
                return jqXHR;
            }

            fireGlobals = s.global;
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);

            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }

            if (!s.hasContent) {
                if (s.data) {
                    s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
                    delete s.data;
                }

                ifModifiedKey = s.url;

                if (s.cache === false) {

                    var ts = jQuery.now(),
                        ret = s.url.replace(rts, "$1_=" + ts);

                    s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
                }
            }

            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }

            if (s.ifModified) {
                ifModifiedKey = ifModifiedKey || s.url;
                if (jQuery.lastModified[ifModifiedKey]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[ifModifiedKey]);
                }
                if (jQuery.etag[ifModifiedKey]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[ifModifiedKey]);
                }
            }

            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
                    s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
                    s.accepts["*"]
            );

            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }

            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                return jqXHR.abort();

            }

            strAbort = "abort";

            for (i in { success: 1, error: 1, complete: 1 }) {
                jqXHR[i](s[i]);
            }

            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function () {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }

                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) {
                        done(-1, e);
                    } else {
                        throw e;
                    }
                }
            }

            return jqXHR;
        },

        active: 0,

        lastModified: {},
        etag: {}

    });

    function ajaxHandleResponses(s, jqXHR, responses) {

        var ct, type, finalDataType, firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes,
            responseFields = s.responseFields;

        for (type in responseFields) {
            if (type in responses) {
                jqXHR[responseFields[type]] = responses[type];
            }
        }

        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("content-type");
            }
        }

        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }

        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }

        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }

    function ajaxConvert(s, response) {
        var conv, conv2, current, tmp,
            dataTypes = s.dataTypes.slice(),
            prev = dataTypes[0],
            converters = {},
            i = 0;

        if (s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
        }

        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }

        for (; (current = dataTypes[++i]) ;) {
            if (current !== "*") {
                if (prev !== "*" && prev !== current) {
                    conv = converters[prev + " " + current] || converters["* " + current];

                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {
                                conv = converters[prev + " " + tmp[0]] ||
                                    converters["* " + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];

                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.splice(i--, 0, current);
                                    }

                                    break;
                                }
                            }
                        }
                    }

                    if (conv !== true) {
                        if (conv && s["throws"]) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                            }
                        }
                    }
                }

                prev = current;
            }
        }

        return { state: "success", data: response };
    }
    var oldCallbacks = [],
        rquestion = /\?/,
        rjsonp = /(=)\?(?=&|$)|\?\?/,
        nonce = jQuery.now();

    $.jqx.data.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
            this[callback] = true;
            return callback;
        }
    });

    $.jqx.data.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

        var callbackName, overwritten, responseContainer,
            data = s.data,
            url = s.url,
            hasCallback = s.jsonp !== false,
            replaceInUrl = hasCallback && rjsonp.test(url),
            replaceInData = hasCallback && !replaceInUrl && typeof data === "string" &&
                !(s.contentType || "").indexOf("application/x-www-form-urlencoded") &&
                rjsonp.test(data);

        if (s.dataTypes[0] === "jsonp" || replaceInUrl || replaceInData) {

            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
                s.jsonpCallback() :
                s.jsonpCallback;
            overwritten = window[callbackName];

            if (replaceInUrl) {
                s.url = url.replace(rjsonp, "$1" + callbackName);
            } else if (replaceInData) {
                s.data = data.replace(rjsonp, "$1" + callbackName);
            } else if (hasCallback) {
                s.url += (rquestion.test(url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }

            s.converters["script json"] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };

            s.dataTypes[0] = "json";

            window[callbackName] = function () {
                responseContainer = arguments;
            };

            jqXHR.always(function () {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    oldCallbacks.push(callbackName);
                }

                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }

                responseContainer = overwritten = undefined;
            });

            return "script";
        }
    });

    $.jqx.data.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /javascript|ecmascript/
        },
        converters: {
            "text script": function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });

    $.jqx.data.ajaxPrefilter("script", function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });

    $.jqx.data.ajaxTransport("script", function (s) {
        if (s.crossDomain) {
            var script,
                head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;

            return {

                send: function (_, callback) {

                    script = document.createElement("script");

                    script.async = "async";

                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }

                    script.src = s.url;

                    script.onload = script.onreadystatechange = function (_, isAbort) {

                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {

                            script.onload = script.onreadystatechange = null;

                            if (head && script.parentNode) {
                                head.removeChild(script);
                            }

                            script = undefined;

                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },

                abort: function () {
                    if (script) {
                        script.onload(0, 1);
                    }
                }
            };
        }
    });
    var xhrCallbacks,
        xhrOnUnloadAbort = window.ActiveXObject ? function () {
            for (var key in xhrCallbacks) {
                xhrCallbacks[key](0, 1);
            }
        } : false,
        xhrId = 0;

    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) { }
    }

    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) { }
    }

    $.jqx.data.ajaxSettings.xhr = window.ActiveXObject ?
        function () {
            return !this.isLocal && createStandardXHR() || createActiveXHR();
        } :
        createStandardXHR;

    (function (xhr) {
        jQuery.extend(jQuery.support, {
            ajax: !!xhr,
            cors: !!xhr && ("withCredentials" in xhr)
        });
    })($.jqx.data.ajaxSettings.xhr());

    if (jQuery.support.ajax) {

        $.jqx.data.ajaxTransport(function (s) {
            if (!s.crossDomain || jQuery.support.cors) {

                var callback;

                return {
                    send: function (headers, complete) {

                        var handle, i,
                            xhr = s.xhr();

                        if (s.username) {
                            xhr.open(s.type, s.url, s.async, s.username, s.password);
                        } else {
                            xhr.open(s.type, s.url, s.async);
                        }

                        if (s.xhrFields) {
                            for (i in s.xhrFields) {
                                xhr[i] = s.xhrFields[i];
                            }
                        }

                        if (s.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(s.mimeType);
                        }


                        if (!s.crossDomain && !headers["X-Requested-With"]) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }

                        try {
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i]);
                            }
                        } catch (_) { }

                        xhr.send((s.hasContent && s.data) || null);

                        callback = function (_, isAbort) {

                            var status,
                                statusText,
                                responseHeaders,
                                responses,
                                xml;
                            try {

                                if (callback && (isAbort || xhr.readyState === 4)) {
                                    callback = undefined;
                                    if (handle) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if (xhrOnUnloadAbort) {
                                            delete xhrCallbacks[handle];
                                        }
                                    }

                                    if (isAbort) {
                                        if (xhr.readyState !== 4) {
                                            xhr.abort();
                                        }
                                    } else {
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();
                                        responses = {};
                                        xml = xhr.responseXML;

                                        if (xml && xml.documentElement /* #4958 */) {
                                            responses.xml = xml;
                                        }

                                        try {
                                            responses.text = xhr.responseText;
                                        } catch (e) {
                                        }

                                        try {
                                            statusText = xhr.statusText;
                                        } catch (e) {
                                            statusText = "";
                                        }

                                        if (!status && s.isLocal && !s.crossDomain) {
                                            status = responses.text ? 200 : 404;
                                        } else if (status === 1223) {
                                            status = 204;
                                        }
                                    }
                                }
                            } catch (firefoxAccessException) {
                                if (!isAbort) {
                                    complete(-1, firefoxAccessException);
                                }
                            }

                            if (responses) {
                                complete(status, statusText, responses, responseHeaders);
                            }
                        };

                        if (!s.async) {
                            callback();
                        } else if (xhr.readyState === 4) {
                            setTimeout(callback, 0);
                        } else {
                            handle = ++xhrId;
                            if (xhrOnUnloadAbort) {
                                if (!xhrCallbacks) {
                                    xhrCallbacks = {};
                                    jQuery(window).unload(xhrOnUnloadAbort);
                                }
                                xhrCallbacks[handle] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },

                    abort: function () {
                        if (callback) {
                            callback(0, 1);
                        }
                    }
                };
            }
        });
    }
    $.jqx.filter = function () {
        this.operator = 'and';
        var and_operator = 0;
        var or_operator = 1;
        var stringcomparisonoperators = ['EMPTY', 'NOT_EMPTY', 'CONTAINS', 'CONTAINS_CASE_SENSITIVE',
        'DOES_NOT_CONTAIN', 'DOES_NOT_CONTAIN_CASE_SENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_SENSITIVE',
        'ENDS_WITH', 'ENDS_WITH_CASE_SENSITIVE', 'EQUAL', 'EQUAL_CASE_SENSITIVE', 'NULL', 'NOT_NULL'];
        var numericcomparisonoperators = ['EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'];
        var datecomparisonoperators = ['EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'];
        var booleancomparisonoperators = ['EQUAL', 'NOT_EQUAL'];

        var filters = new Array();
        var comparisonoperators = new Array();

        this.evaluate = function (value) {
            var result = true;
            for (var i = 0; i < filters.length; i++) {
                var currentResult = filters[i].evaluate(value);
                if (i == 0) {
                    result = currentResult;
                }
                else {
                    if (comparisonoperators[i] == or_operator || comparisonoperators[i] == "or")
                        result = result || currentResult;
                    else
                        result = result && currentResult;
                }
            }

            return result;
        }

        this.getfilterscount = function () {
            return filters.length;
        }

        this.setoperatorsbyfiltertype = function (type, array) {
            switch (type) {
                case "numericfilter":
                    numericcomparisonoperators = array;
                    break;
                case "stringfilter":
                    stringcomparisonoperators = array;
                    break;
                case "datefilter":
                    datecomparisonoperators = array;
                    break;
                case "booleanfilter":
                    booleancomparisonoperators = array;
                    break;
            }
        }

        this.getoperatorsbyfiltertype = function (type) {
            var array = new Array();
            switch (type) {
                case "numericfilter":
                    array = numericcomparisonoperators.slice(0);
                    break;
                case "stringfilter":
                    array = stringcomparisonoperators.slice(0);
                    break;
                case "datefilter":
                    array = datecomparisonoperators.slice(0);
                    break;
                case "booleanfilter":
                    array = booleancomparisonoperators.slice(0);
                    break;
            }
            return array;
        }

        var generatefilterkey = function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            return (S4() + "-" + S4() + "-" + S4());
        }

        this.createfilter = function (filtertype, filtervalue, filtercomparisonoperator, customfilter, formatstring, localization) {
            if (filtertype == null || filtertype == undefined)
                return null;

            switch (filtertype) {
                case 'numericfilter':
                    return new numericfilter(filtervalue, filtercomparisonoperator.toUpperCase());
                case 'stringfilter':
                    return new stringfilter(filtervalue, filtercomparisonoperator.toUpperCase());
                case 'datefilter':
                    return new datefilter(filtervalue, filtercomparisonoperator.toUpperCase(), formatstring, localization);
                case 'booleanfilter':
                    return new booleanfilter(filtervalue, filtercomparisonoperator.toUpperCase());
                case 'custom':
                    return new filter(filtervalue, filtercomparisonoperator.toUpperCase(), customfilter);
            }

            throw new Error("jqxGrid: There is no such filter type. The available filter types are: 'numericfilter', 'stringfilter', 'datefilter' and 'booleanfilter'");
            return null;
        }

        this.getfilters = function () {
            var filtersarray = new Array();
            for (var i = 0; i < filters.length; i++) {
                var filter = { value: filters[i].filtervalue, condition: filters[i].comparisonoperator, operator: comparisonoperators[i], type: filters[i].type };
                filtersarray[i] = filter;
            }
            return filtersarray;
        }

        this.addfilter = function (comparisonoperator, filter) {
            filters[filters.length] = filter;
            filter.key = generatefilterkey();
            comparisonoperators[comparisonoperators.length] = comparisonoperator;
        }

        this.removefilter = function (filter) {
            for (var i = 0; i < filters.length; i++) {
                if (filters[i].key == filter.key) {
                    filters.splice(i, 1);
                    comparisonoperators.splice(i, 1);
                    break;
                }
            }
        }

        this.getoperatorat = function (index) {
            if (index == undefined || index == null)
                return null;

            if (index < 0 || index > filters.length)
                return null;

            return comparisonoperators[index];
        }

        this.setoperatorat = function (index, comparisonoperator) {
            if (index == undefined || index == null)
                return null;

            if (index < 0 || index > filters.length)
                return null;

            comparisonoperators[comparisonoperator] = comparisonoperator;
        }

        this.getfilterat = function (index) {
            if (index == undefined || index == null)
                return null;

            if (index < 0 || index > filters.length)
                return null;

            return filters[index];
        }

        this.setfilterat = function (index, filter) {
            if (index == undefined || index == null)
                return null;

            if (index < 0 || index > filters.length)
                return null;

            filter.key = generatefilterkey();
            filters[index] = filter;
        }

        this.clear = function () {
            filters = new Array();
            comparisonoperators = new Array();
        }

        var stringfilter = function (filtervalue, comparisonoperator) {
            this.filtervalue = filtervalue;
            this.comparisonoperator = comparisonoperator;
            this.type = 'stringfilter';
            this.evaluate = function (value) {
                var filtervalue = this.filtervalue;
                var comparisonoperator = this.comparisonoperator;
                if (value == null || value == undefined || value == "") {
                    if (comparisonoperator == 'NULL')
                        return true;

                    return false;
                }

                var val = "";
                try {
                    val = value.toString();
                }
                catch (error) {
                    return true;
                }

                var compare = function (val, filtervalue) {
                    switch (comparisonoperator) {
                        case 'EQUAL':
                            return $.jqx.string.equalsIgnoreCase(val, filtervalue);
                        case 'EQUAL_CASE_SENSITIVE':
                            return $.jqx.string.equals(val, filtervalue);
                        case 'NOT_EQUAL':
                            return !$.jqx.string.equalsIgnoreCase(val, filtervalue);
                        case 'NOT_EQUAL_CASE_SENSITIVE':
                            return !$.jqx.string.equals(val, filtervalue);
                        case 'CONTAINS':
                            return $.jqx.string.containsIgnoreCase(val, filtervalue);
                        case 'CONTAINS_CASE_SENSITIVE':
                            return $.jqx.string.contains(val, filtervalue);
                        case 'DOES_NOT_CONTAIN':
                            return !$.jqx.string.containsIgnoreCase(val, filtervalue);
                        case 'DOES_NOT_CONTAIN_CASE_SENSITIVE':
                            return !$.jqx.string.contains(val, filtervalue);
                        case 'EMPTY':
                            return val == '';
                        case 'NOT_EMPTY':
                            return val != '';
                        case 'NOT_NULL':
                            return val != null;
                        case 'STARTS_WITH':
                            return $.jqx.string.startsWithIgnoreCase(val, filtervalue);
                        case 'ENDS_WITH':
                            return $.jqx.string.endsWithIgnoreCase(val, filtervalue);
                        case 'ENDS_WITH_CASE_SENSITIVE':
                            return $.jqx.string.endsWith(val, filtervalue);
                        case 'STARTS_WITH_CASE_SENSITIVE':
                            return $.jqx.string.startsWith(val, filtervalue);
                        default:
                            return false;
                    }
                }

                var filterValues = new Array();
                if (filtervalue && filtervalue.indexOf)
                    if(filtervalue.indexOf("|") >= 0 || filtervalue.indexOf(" AND ") >= 0 || filtervalue.indexOf(" OR ") >= 0 || filtervalue.indexOf(" and ") >= 0 || filtervalue.indexOf(" or ") >= 0) {
                    var result = compare(val, filtervalue);
                    if (result) {
                        return result;
                    }

                    var andFilters = filtervalue.indexOf(" AND ") >= 0 ? filtervalue.split(" AND ") : new Array();
                    var orFilters = filtervalue.indexOf(" OR ") >= 0 ? filtervalue.split(" OR ") : new Array();
                    var andLowerCaseFilters = filtervalue.indexOf(" and ") >= 0 ? filtervalue.split(" and ") : new Array();
                    var orLowerCaseFilters = filtervalue.indexOf(" or ") >= 0 ? filtervalue.split(" or ") : new Array();
                    var delimiterFilters = filtervalue.indexOf("|") >= 0 ? filtervalue.split("|") : new Array();
                    if (delimiterFilters.length > 0) {
                        for (var i = 0; i < delimiterFilters.length; i++) {
                            delimiterFilters[i] = $.trim(delimiterFilters[i]);
                        }
                    }
                    var commaFilters = filtervalue.indexOf(" ") >= 0 ? filtervalue.split(" ") : new Array();
                    if (commaFilters.length > 0) {
                        for (var i = 0; i < commaFilters.length; i++) {
                            commaFilters[i] = $.trim(commaFilters[i]);
                        }
                    }

                    andFilters = andFilters.concat(commaFilters);
                    andFilters = andFilters.concat(andLowerCaseFilters);
                    orFilters = orFilters.concat(delimiterFilters);
                    orFilters = orFilters.concat(orLowerCaseFilters);

                    if (andFilters.length > 0) {
                        for (var i = 0; i < andFilters.length; i++) {
                            if (!andFilters[i].indexOf(" OR ") >= 0) {
                                filterValues.push(andFilters[i]);
                            }
                        }
                    }
                    if (orFilters.length > 0) {
                        for (var i = 0; i < orFilters.length; i++) {
                            if (!orFilters[i].indexOf(" AND ") >= 0) {
                                filterValues.push(orFilters[i]);
                            }
                        }
                    }

                    var filterresult = undefined;
                    for (var j = 0; j < filterValues.length; j++) {
                        var value = filterValues[j];
                        var result = compare(val, value);
                        var filteroperator = j < andFilters.length ? "and" : "or";
                        if (filterresult == undefined) {
                            filterresult = result;
                        }
                        else {
                            if (filteroperator == 'or') {
                                filterresult = filterresult || result;
                            }
                            else {
                                filterresult = filterresult && result;
                            }
                        }
                    }
                    return filterresult;
                }
         
                return compare(val, filtervalue);
            }
        }

        var booleanfilter = function (filtervalue, comparisonoperator) {
            this.filtervalue = filtervalue;
            this.comparisonoperator = comparisonoperator;
            this.type = 'booleanfilter';
            this.evaluate = function (value) {
                var filtervalue = this.filtervalue;
                var comparisonoperator = this.comparisonoperator;
                if (value == null || value == undefined) {
                    if (comparisonoperator == 'NULL')
                        return true;

                    return false;
                }

                var val = value;

                switch (comparisonoperator) {
                    case 'EQUAL':
                        return val == filtervalue || val.toString() == filtervalue.toString();
                    case 'NOT_EQUAL':
                        return val != filtervalue && val.toString() != filtervalue.toString();
                    default:
                        return false;
                }
            }
        }

        var numericfilter = function (filtervalue, comparisonoperator) {
            this.filtervalue = filtervalue;
            this.comparisonoperator = comparisonoperator;
            this.type = 'numericfilter';
            this.evaluate = function (value) {
                var filtervalue = this.filtervalue;
                var comparisonoperator = this.comparisonoperator;
                if (value === null || value === undefined || value === "") {
                    if (comparisonoperator == 'NOT_NULL')
                        return false;

                    if (comparisonoperator == 'NULL')
                        return true;
                    else
                        return false;
                }
                else {
                    if (comparisonoperator == 'NULL')
                        return false;

                    if (comparisonoperator == 'NOT_NULL')
                        return true;
                }

                var val = value;

                try {
                    val = parseFloat(val);
                }
                catch (error) {
                    if (value.toString() != "")
                        return false;
                }

                var compare = function (val, filtervalue) {
                    switch (comparisonoperator) {
                        case 'EQUAL':
                            return val == filtervalue;
                        case 'NOT_EQUAL':
                            return val != filtervalue;
                        case 'GREATER_THAN':
                            return val > filtervalue;
                        case 'GREATER_THAN_OR_EQUAL':
                            return val >= filtervalue;
                        case 'LESS_THAN':
                            return val < filtervalue;
                        case 'LESS_THAN_OR_EQUAL':
                            return val <= filtervalue;
                        case 'STARTS_WITH':
                            return $.jqx.string.startsWithIgnoreCase(val.toString(), filtervalue.toString());
                        case 'ENDS_WITH':
                            return $.jqx.string.endsWithIgnoreCase(val.toString(), filtervalue.toString());
                        case 'ENDS_WITH_CASE_SENSITIVE':
                            return $.jqx.string.endsWith(val.toString(), filtervalue.toString());
                        case 'STARTS_WITH_CASE_SENSITIVE':
                            return $.jqx.string.startsWith(val.toString(), filtervalue.toString());
                        case 'CONTAINS':
                            return $.jqx.string.containsIgnoreCase(val.toString(), filtervalue.toString());
                        case 'CONTAINS_CASE_SENSITIVE':
                            return $.jqx.string.contains(val.toString(), filtervalue.toString());
                        case 'DOES_NOT_CONTAIN':
                            return !$.jqx.string.containsIgnoreCase(val.toString(), filtervalue.toString());
                        case 'DOES_NOT_CONTAIN_CASE_SENSITIVE':
                            return !$.jqx.string.contains(val.toString(), filtervalue.toString());
                        default:
                            return true;
                    }
                }

                var filterValues = new Array();

                if (filtervalue && filtervalue.indexOf)
                    if(filtervalue.indexOf("|") >= 0  || filtervalue.indexOf(" AND ") >= 0 || filtervalue.indexOf(" OR ") >= 0 || filtervalue.indexOf(" and ") >= 0 || filtervalue.indexOf(" or ") >= 0) {
                    var result = compare(val, filtervalue);
                    if (result) {
                        return result;
                    }
                    filtervalue = filtervalue.toString();
                    var andFilters = filtervalue.indexOf(" AND ") >= 0 ? filtervalue.split(" AND ") : new Array();
                    var orFilters = filtervalue.indexOf(" OR ") >= 0 ? filtervalue.split(" OR ") : new Array();
                    var andLowerCaseFilters = filtervalue.indexOf(" and ") >= 0 ? filtervalue.split(" and ") : new Array();
                    var orLowerCaseFilters = filtervalue.indexOf(" or ") >= 0 ? filtervalue.split(" or ") : new Array();
                    andFilters = andFilters.concat(andLowerCaseFilters);
                    orFilters = orFilters.concat(orLowerCaseFilters);
                    var delimiterFilters = filtervalue.indexOf("|") >= 0 ? filtervalue.split("|") : new Array();
                    if (delimiterFilters.length > 0) {
                        for (var i = 0; i < delimiterFilters.length; i++) {
                            delimiterFilters[i] = $.trim(delimiterFilters[i]);
                        }
                    }
                    orFilters = orFilters.concat(delimiterFilters);

                    if (andFilters.length > 0) {
                        for (var i = 0; i < andFilters.length; i++) {
                            if (!andFilters[i].indexOf(" OR ") >= 0) {
                                filterValues.push(andFilters[i]);
                            }
                        }
                    }
                    if (orFilters.length > 0) {
                        for (var i = 0; i < orFilters.length; i++) {
                            if (!orFilters[i].indexOf(" AND ") >= 0) {
                                filterValues.push(orFilters[i]);
                            }
                        }
                    }

                    var filterresult = undefined;
                    for (var j = 0; j < filterValues.length; j++) {
                        var value = filterValues[j];

                        if (value && value.indexOf && value.indexOf("..") >= 0) {
                            var values = value.toString().split("..");
                            if (values.length == 2) {
                                result = val >= values[0] && val <= values[1];
                            }
                        }
                        else {
                            var result = compare(val, value);
                        }
                        var filteroperator = j < andFilters.length ? "and" : "or";
                        if (filterresult == undefined) {
                            filterresult = result;
                        }
                        else {
                            if (filteroperator == 'or') {
                                filterresult = filterresult || result;
                            }
                            else {
                                filterresult = filterresult && result;
                            }
                        }
                    }
                    return filterresult;
                }
                if (filtervalue && filtervalue.indexOf && filtervalue.indexOf("..") >= 0) {
                    filterValues = filtervalue.toString().split("..");
                    if (filterValues.length == 2) {
                        return val >= filterValues[0] && val <= filterValues[1];
                    }
                }
                return compare(val, filtervalue);             
            }
        }

        var datefilter = function (filtervalue, comparisonoperator, formatstring, localization) {
            this.filtervalue = filtervalue;
            this.type = 'datefilter';

            if (formatstring != undefined && localization != undefined) {
                var parsedDate = $.jqx.dataFormat.parsedate(filtervalue, formatstring, localization);
                if (parsedDate != null) {
                    this.filterdate = parsedDate;
                }
                else {
                    var result = $.jqx.dataFormat.tryparsedate(filtervalue, localization);
                    if (result != null) this.filterdate = result;
                }

            }
            else {
                var tmpvalue = new Date(filtervalue);
                if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                    this.filterdate = $.jqx.dataFormat.tryparsedate(filtervalue);
                }
                else {
                    this.filterdate = tmpvalue;
                }
            }
            if (!this.filterdate) {
                var tmpvalue = new Date(filtervalue);
                if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                    this.filterdate = $.jqx.dataFormat.tryparsedate(filtervalue);
                }
                else {
                    this.filterdate = tmpvalue;
                }
            }

            this.comparisonoperator = comparisonoperator;
            this.evaluate = function (value) {
                var filtervalue = this.filtervalue;
                var comparisonoperator = this.comparisonoperator;
                if (value == null || value == undefined || value == "") {
                    if (comparisonoperator == 'NOT_NULL')
                        return false;

                    if (comparisonoperator == 'NULL')
                        return true;
                    else
                        return false;
                }
                else {
                    if (comparisonoperator == 'NULL')
                        return false;

                    if (comparisonoperator == 'NOT_NULL')
                        return true;
                }

                var val = new Date();
                val.setFullYear(1900, 0, 1);
                val.setHours(12, 0, 0, 0);
                try {
                    var tmpvalue = new Date(value);

                    if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                        value = $.jqx.dataFormat.tryparsedate(value);
                    }
                    else {
                        value = tmpvalue;
                    }

                    val = value;

                    var compareTimePart = false;
                    if (formatstring != undefined && localization != undefined) {
                        if (formatstring.indexOf('t') >= 0 || formatstring.indexOf('T') >= 0 || formatstring.indexOf(':') >= 0 || formatstring.indexOf('f') >= 0) {
                            compareTimePart = true;
                            if (filtervalue && filtervalue.toString().indexOf(':') == -1) {
                                var result = $.jqx.dataFormat.tryparsedate(filtervalue.toString() + ":00", localization);
                                if (result != null) this.filterdate = result;
                            }
                        }
                    }
                    if (!compareTimePart) {
                        val.setHours(0);
                        val.setMinutes(0);
                        val.setSeconds(0);
                    }
                }
                catch (error) {
                    if (value.toString() != "")
                        return false;
                }

                if (this.filterdate != null) {
                    filtervalue = this.filterdate;
                }
                else {
                    if (filtervalue.indexOf) {
                        if (filtervalue.indexOf(':') != -1 || !isNaN(parseInt(filtervalue))) {
                            var tmpFilter = new Date(val);
                            tmpFilter.setHours(12, 0, 0, 0);
                            var timeStrings = filtervalue.split(':');
                            for (var i = 0; i < timeStrings.length; i++) {
                                if (i == 0) {
                                    tmpFilter.setHours(timeStrings[i]);
                                }
                                if (i == 1) {
                                    tmpFilter.setMinutes(timeStrings[i]);
                                }
                                if (i == 2) {
                                    tmpFilter.setSeconds(timeStrings[i]);
                                }
                            }
                            filtervalue = tmpFilter;
                        }
                    }
                }
                if (compareTimePart) {
                    if (filtervalue && filtervalue.setFullYear) {
                        if (val && val.getFullYear) {
                            if (formatstring.indexOf('d') == -1 && formatstring.indexOf('M') == -1 && formatstring.indexOf('y') == -1) {
                                filtervalue.setFullYear(val.getFullYear(), val.getMonth(), val.getDate());
                            }
                        }
                    }
                }


                var compare = function (val, filtervalue) {
                    if (val == null) val = "";
                    switch (comparisonoperator) {
                        case 'EQUAL':
                            return val.toString() == filtervalue.toString();
                        case 'NOT_EQUAL':
                            return val.toString() != filtervalue.toString();
                        case 'GREATER_THAN':
                            return val > filtervalue;
                        case 'GREATER_THAN_OR_EQUAL':
                            return val >= filtervalue;
                        case 'LESS_THAN':
                            return val < filtervalue;
                        case 'LESS_THAN_OR_EQUAL':
                            return val <= filtervalue;
                        case 'STARTS_WITH':
                            return $.jqx.string.startsWithIgnoreCase(val.toString(), filtervalue.toString());
                        case 'ENDS_WITH':
                            return $.jqx.string.endsWithIgnoreCase(val.toString(), filtervalue.toString());
                        case 'ENDS_WITH_CASE_SENSITIVE':
                            return $.jqx.string.endsWith(val.toString(), filtervalue.toString());
                        case 'STARTS_WITH_CASE_SENSITIVE':
                            return $.jqx.string.startsWith(val.toString(), filtervalue.toString());
                        case 'CONTAINS':
                            return $.jqx.string.containsIgnoreCase(val.toString(), filtervalue.toString());
                        case 'CONTAINS_CASE_SENSITIVE':
                            return $.jqx.string.contains(val.toString(), filtervalue.toString());
                        case 'DOES_NOT_CONTAIN':
                            return !$.jqx.string.containsIgnoreCase(val.toString(), filtervalue.toString());
                        case 'DOES_NOT_CONTAIN_CASE_SENSITIVE':
                            return !$.jqx.string.contains(val.toString(), filtervalue.toString());
                        default:
                            return true;
                    }
                }
                var filterValues = new Array();
                if (filtervalue && filtervalue.indexOf)
                    if (filtervalue.indexOf("|") >= 0 || filtervalue.indexOf(" AND ") >= 0 || filtervalue.indexOf(" OR ") >= 0 || filtervalue.indexOf(" and ") >= 0 || filtervalue.indexOf(" or ") >= 0) {
                    var result = compare(val, filtervalue);
                    if (result) {
                        return result;
                    }
                    var andFilters = filtervalue.indexOf(" AND ") >= 0 ? filtervalue.split(" AND ") : new Array();
                    var orFilters = filtervalue.indexOf(" OR ") >= 0 ? filtervalue.split(" OR ") : new Array();
                    var andLowerCaseFilters = filtervalue.indexOf(" and ") >= 0 ? filtervalue.split(" and ") : new Array();
                    var orLowerCaseFilters = filtervalue.indexOf(" or ") >= 0 ? filtervalue.split(" or ") : new Array();
                    andFilters = andFilters.concat(andLowerCaseFilters);
                    orFilters = orFilters.concat(orLowerCaseFilters);
                    var delimiterFilters = filtervalue.indexOf("|") >= 0 ? filtervalue.split("|") : new Array();
                    if (delimiterFilters.length > 0) {
                        for (var i = 0; i < delimiterFilters.length; i++) {
                            delimiterFilters[i] = $.trim(delimiterFilters[i]);
                        }
                    }
                    orFilters = orFilters.concat(delimiterFilters);

                    if (andFilters.length > 0) {
                        for (var i = 0; i < andFilters.length; i++) {
                            if (!andFilters[i].indexOf(" OR ") >= 0) {
                                filterValues.push(andFilters[i]);
                            }
                        }
                    }
                    if (orFilters.length > 0) {
                        for (var i = 0; i < orFilters.length; i++) {
                            if (!orFilters[i].indexOf(" AND ") >= 0) {
                                filterValues.push(orFilters[i]);
                            }
                        }
                    }

                    var filterresult = undefined;
                    for (var j = 0; j < filterValues.length; j++) {
                        var value = filterValues[j];
                        if (value && value.indexOf && value.indexOf("..") >= 0) {
                            var values = value.toString().split("..");
                            if (values.length == 2) {
                                result = val >= values[0] && val <= values[1];
                            }
                        }
                        else {
                            var result = compare(val, value);
                        }
                        var filteroperator = j < andFilters.length ? "and" : "or";
                        if (filterresult == undefined) {
                            filterresult = result;
                        }
                        else {
                            if (filteroperator == 'or') {
                                filterresult = filterresult || result;
                            }
                            else {
                                filterresult = filterresult && result;
                            }
                        }
                    }
                    return filterresult;
                }
                if (filtervalue && filtervalue.indexOf && filtervalue.indexOf("..") >= 0) {
                    filterValues = filtervalue.toString().split("..");
                    if (filterValues.length == 2) {
                        return val >= filterValues[0] && val <= filterValues[1];
                    }
                }
                return compare(val, filtervalue);
            }
        }

        var filter = function (filtervalue, comparisonoperator, customfilter) {
            this.filtervalue = filtervalue;
            this.comparisonoperator = comparisonoperator;
            this.evaluate = function (value, comparisonoperator) {
                return customfilter(this.filtervalue, value, this.comparisonoperator);
            }
        }
    };
})(jQuery);
/*
 * file from "src\jqxscrollbar.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
$.jqx.jqxWidget("jqxScrollBar", "", {});

$.extend($.jqx._jqxScrollBar.prototype, {

        defineInstance: function () {
            // Type: Number
            // Default: null
            // Sets the scrollbar height.
            this.height = null;
            // Type: Number
            // Default: null
            // Sets the scrollbar width.
            this.width = null;
            // Type: Number
            // Default: false. This means that the scrollbar is horizontally oriented by default.
            // Sets the scrollbar orientation.
            this.vertical = false;
            // Type: Number
            // Default: 0
            // Sets the minimum scroll value.
            this.min = 0;
            // Type: Number
            // Default: 0
            // Sets the maximum scroll value.
            this.max = 1000;
            // Type: Number
            // Default: 0
            // Sets the scroll value. The value can be between min and max.
            this.value = this.min;
            // Type: Number
            // Default: 0
            // Sets the scroll step when any arrow button is clicked.
            this.step = 10;
            // Type: Number
            // Default: 0
            // Sets the scroll step when the user clicks on the empty scroll space between arrow button and thumb.
            this.largestep = 50;
            // Type: Number
            // Default: 10
            // sets the thumb's minimum size.
            this.thumbMinSize = 10;
            // Type: Number
            // Default: 0
            // sets the thumb's size.
            this.thumbSize = 0;
            // Type: Number or 'auto'
            // Default: 'auto'
            // sets the thumb's drag step.
            this.thumbStep = 'auto';
            // Type: String
            // Default: 'all'
            // sets the rounded corners string.
            this.roundedCorners = 'all';
            // Type: Boolean
            // Default: true
            // Sets whether the scroll buttons are visible.
            this.showButtons = true;
            // Type: Boolean
            // Default: false
            // Sets whether the scrollbar is disabled or not.
            this.disabled = false;
            // Sets whether the scrollbar is on touch device.
            this.touchMode = 'auto';
            this.touchModeStyle = 'auto';
            this.thumbTouchSize = 0;
            // disable jquery trigger function. It is very slow if you call it on mouse move. This could improve performance.
            this._triggervaluechanged = true;
            this.rtl = false;
            this.areaDownCapture = false;
            this.areaUpCapture = false;
            this._initialLayout = false;
        },

        createInstance: function (args) {
            this.render();
        }, // createInstance

        render: function () {
            this._mouseup = new Date();
            var self = this;
            var html = "<div id='jqxScrollOuterWrap' style='width:100%; height: 100%; align:left; border: 0px; valign:top; position: relative;'>" +
                "<div id='jqxScrollWrap' style='width:100%; height: 100%; left: 0px; top: 0px; align:left; valign:top; position: absolute;'>" +
                "<div id='jqxScrollBtnUp' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>" +
                "<div id='jqxScrollAreaUp' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>" +
                "<div id='jqxScrollThumb' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>" +
                "<div id='jqxScrollAreaDown' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>" +
                "<div id='jqxScrollBtnDown' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>" +
                "</div>" +
                "</div>";

            if ($.jqx.utilities && $.jqx.utilities.scrollBarButtonsVisibility == "hidden") {
                this.showButtons = false;
            }

            if (self.WinJS) {
                MSApp.execUnsafeLocalFunction(function () {
                    self.host.html(html);
                });
            }
            else {
                this.element.innerHTML = html;
            }

            if (this.width != undefined && parseInt(this.width) > 0) {
                this.host.width(parseInt(this.width));
            }

            if (this.height != undefined && parseInt(this.height) > 0) {
                this.host.height(parseInt(this.height));
            }
            this.isPercentage = false;
            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                this.host.width(this.width);
                this.isPercentage = true;
            }

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                this.host.height(this.height);
                this.isPercentage = true;
            }
            if (this.isPercentage) {
                var that = this;
                $.jqx.utilities.resize(this.host, function () {
                    that._arrange();
                }, false);
            }
            this.thumbCapture = false;
            this.scrollOuterWrap = $(this.element.firstChild);
            this.scrollWrap = $(this.scrollOuterWrap[0].firstChild);
            this.btnUp = $(this.scrollWrap[0].firstChild);
            this.areaUp = $(this.btnUp[0].nextSibling);
            this.btnThumb = $(this.areaUp[0].nextSibling);
            this.arrowUp = $('<div></div>');
            this.arrowUp.appendTo(this.btnUp);
            this.areaDown = $(this.btnThumb[0].nextSibling);
            this.btnDown = $(this.areaDown[0].nextSibling);
            this.arrowDown = $('<div></div>');
            this.arrowDown.appendTo(this.btnDown);

            var elID = this.element.id;
            this.btnUp[0].id = "jqxScrollBtnUp" + elID;
            this.btnDown[0].id = "jqxScrollBtnDown" + elID;
            this.btnThumb[0].id = "jqxScrollThumb" + elID;
            this.areaUp[0].id = "jqxScrollAreaUp" + elID;
            this.areaDown[0].id = "jqxScrollAreaDown" + elID;
            this.scrollWrap[0].id = "jqxScrollWrap" + elID;
            this.scrollOuterWrap[0].id = "jqxScrollOuterWrap" + elID;

            if (!this.host.jqxRepeatButton) {
                throw new Error('jqxScrollBar: Missing reference to jqxbuttons.js.');
                return;
            }

            this.btnUp.jqxRepeatButton({_ariaDisabled: true, overrideTheme: true, disabled: this.disabled });
            this.btnDown.jqxRepeatButton({ _ariaDisabled: true, overrideTheme: true, disabled: this.disabled });
            this.btnDownInstance = $.data(this.btnDown[0], 'jqxRepeatButton').instance;
            this.btnUpInstance = $.data(this.btnUp[0], 'jqxRepeatButton').instance;

            this.areaUp.jqxRepeatButton({_scrollAreaButton: true, _ariaDisabled: true, overrideTheme: true });
            this.areaDown.jqxRepeatButton({ _scrollAreaButton: true, _ariaDisabled: true, overrideTheme: true });
            this.btnThumb.jqxButton({ _ariaDisabled: true, overrideTheme: true, disabled: this.disabled });
            this.propertyChangeMap['value'] = function (instance, key, oldVal, value) {
                if (!(isNaN(value))) {
                    if (oldVal != value) {
                        instance.setPosition(parseFloat(value), true);
                    }
                }
            }

            this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {
                if (instance.width != undefined && parseInt(instance.width) > 0) {
                    instance.host.width(parseInt(instance.width));
                    instance._arrange();
                }
            }

            this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {
                if (instance.height != undefined && parseInt(instance.height) > 0) {
                    instance.host.height(parseInt(instance.height));
                    instance._arrange();
                }
            }

            this.propertyChangeMap['theme'] = function (instance, key, oldVal, value) {
                instance.setTheme();
            }

            this.propertyChangeMap['max'] = function (instance, key, oldVal, value) {
                if (!(isNaN(value))) {
                    if (oldVal != value) {
                        instance.max = parseInt(value);
                        if (instance.min > instance.max)
                            instance.max = instance.min + 1;

                        instance._arrange();
                        instance.setPosition(instance.value);
                    }
                }
            }

            this.propertyChangeMap['min'] = function (instance, key, oldVal, value) {
                if (!(isNaN(value))) {
                    if (oldVal != value) {
                        instance.min = parseInt(value);
                        if (instance.min > instance.max)
                            instance.max = instance.min + 1;

                        instance._arrange();
                        instance.setPosition(instance.value);
                    }
                }
            }

            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (oldVal != value) {
                    if (value) {
                        instance.host.addClass(instance.toThemeProperty('jqx-fill-state-disabled'));
                    }
                    else {
                        instance.host.removeClass(instance.toThemeProperty('jqx-fill-state-disabled'));
                    }
                    instance.btnUp.jqxRepeatButton('disabled', instance.disabled);
                    instance.btnDown.jqxRepeatButton('disabled', instance.disabled);
                    instance.btnThumb.jqxButton('disabled', instance.disabled);
                }
            }

            this.propertyChangeMap['touchMode'] = function (instance, key, oldVal, value) {
                if (oldVal != value) {
                    instance._updateTouchBehavior();
                    if (value === true) {
                        instance.showButtons = false;
                        instance.refresh();
                    }
                    else if (value === false) {
                        instance.showButtons = true;
                        instance.refresh();
                    }
                }
            }

            this.buttonUpCapture = false;
            this.buttonDownCapture = false;
            this._updateTouchBehavior();
            this.setPosition(this.value);
            this._addHandlers();
            this.setTheme();
        },

        resize: function (width, height) {
            this.width = width;
            this.height = height;
            this._arrange();
        },

        _updateTouchBehavior: function () {
            this.isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this.touchMode == true) {
                if ($.jqx.browser.msie && $.jqx.browser.version < 9) {
                    this.setTheme();
                    return;
                }

                this.isTouchDevice = true;
                $.jqx.mobile.setMobileSimulator(this.btnThumb[0]);
                this._removeHandlers();
                this._addHandlers();
                this.setTheme();
            }
            else if (this.touchMode == false) {
                this.isTouchDevice = false;
            }
        },

        _addHandlers: function () {
            var self = this;

            var touchSupport = false;
            try
            {
                if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
                    touchSupport = true;
                    this._touchSupport = true;
                }
            }
            catch(err)
            {
            }

            if (self.isTouchDevice || touchSupport) {
                this.addHandler(this.btnThumb, $.jqx.mobile.getTouchEventName('touchend'), function (event) {
                    var btnThumbPressedClass = self.vertical ? self.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : self.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');
                    var btnThumbPressedFillClass = self.toThemeProperty('jqx-fill-state-pressed');
                    self.btnThumb.removeClass(btnThumbPressedClass);
                    self.btnThumb.removeClass(btnThumbPressedFillClass);
                    if (!self.disabled) self.handlemouseup(self, event);
                    return false;
                });

                this.addHandler(this.btnThumb, $.jqx.mobile.getTouchEventName('touchstart'), function (event) {
                    if (!self.disabled) {
                        if (self.touchMode == true) {
                            event.clientX = event.originalEvent.clientX;
                            event.clientY = event.originalEvent.clientY;
                        }
                        else {
                            var e = event;
                            if (e.originalEvent.touches && e.originalEvent.touches.length) {
                                event.clientX = e.originalEvent.touches[0].clientX;
                                event.clientY = e.originalEvent.touches[0].clientY;
                            }
                            else {
                                event.clientX = event.originalEvent.clientX;
                                event.clientY = event.originalEvent.clientY;
                            }
                        }

                        self.handlemousedown(event);
                        if (event.preventDefault) {
                            event.preventDefault();
                        }
                    }
                });

                $.jqx.mobile.touchScroll(this.element, self.max, function (left, top, dx, dy, event) {
                    if (self.host.css('visibility') == 'visible') {
                        if (self.touchMode == true) {
                            event.clientX = event.originalEvent.clientX;
                            event.clientY = event.originalEvent.clientY;
                        }
                        else {
                            var e = event;
                            if (e.originalEvent.touches && e.originalEvent.touches.length) {
                                event.clientX = e.originalEvent.touches[0].clientX;
                                event.clientY = e.originalEvent.touches[0].clientY;
                            }
                            else {
                                event.clientX = event.originalEvent.clientX;
                                event.clientY = event.originalEvent.clientY;
                            }
                        }
                        var btnThumbPressedClass = self.vertical ? self.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : self.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');
                        self.btnThumb.addClass(btnThumbPressedClass);
                        self.btnThumb.addClass(self.toThemeProperty('jqx-fill-state-pressed'));
                        self.thumbCapture = true;
                        self.handlemousemove(event);
                    }
                }, self.element.id);
            }

            this.addHandler(this.btnUp, 'click', function (event) {
                var step = self.step;
                if (self.rtl && !self.vertical) {
                    step = -self.step;
                }

                if (self.buttonUpCapture && !self.isTouchDevice) {
                    if (!self.disabled) {
                        self.setPosition(self.value - step);
                    }
                }
                else if (!self.disabled && self.isTouchDevice) {
                    self.setPosition(self.value - step);
                }
            });
            this.addHandler(this.btnDown, 'click', function (event) {
                var step = self.step;
                if (self.rtl && !self.vertical) {
                    step = -self.step;
                }

                if (self.buttonDownCapture && !self.isTouchDevice) {
                    if (!self.disabled) self.setPosition(self.value + step)
                }
                else if (!self.disabled && self.isTouchDevice) self.setPosition(self.value + step);
            });

            if (!this.isTouchDevice) {
                try
                {
                    if (document.referrer != "" || window.frameElement) {
                        if (window.top != null && window.top != window.self) {
                            var parentLocation = null;
                            if (window.parent && document.referrer) {
                                parentLocation = document.referrer;
                            }

                            if (parentLocation && parentLocation.indexOf(document.location.host) != -1) {
                                var eventHandle = function (event) {
                                    if (!self.disabled) self.handlemouseup(self, event);
                                };

                                if (window.top.document.addEventListener) {
                                    window.top.document.addEventListener('mouseup', eventHandle, false);

                                } else if (window.top.document.attachEvent) {
                                    window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                                }
                            }
                        }
                    }
                }
                catch (error) {
                }

                this.addHandler(this.btnDown, 'mouseup', function (event) {
                    if (!self.btnDownInstance.base.disabled && self.buttonDownCapture) {
                        self.buttonDownCapture = false;
                        self.btnDown.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                        self.btnDown.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
                        self._removeArrowClasses('pressed', 'down');
                        self.handlemouseup(self, event);
                        var step = self.step;
                        if (self.rtl && !self.vertical) {
                            step = -self.step;
                        }
                        self.setPosition(self.value + step)
                        return false;
                    }
                });
                this.addHandler(this.btnUp, 'mouseup', function (event) {
                    if (!self.btnUpInstance.base.disabled && self.buttonUpCapture) {
                        self.buttonUpCapture = false;
                        self.btnUp.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                        self.btnUp.removeClass(self.toThemeProperty('jqx-fill-state-pressed'));
                        self._removeArrowClasses('pressed', 'up');
                        self.handlemouseup(self, event);
                        var step = self.step;
                        if (self.rtl && !self.vertical) {
                            step = -self.step;
                        }
                        self.setPosition(self.value - step)
                        return false;
                    }
                });

                this.addHandler(this.btnDown, 'mousedown', function (event) {
                    if (!self.btnDownInstance.base.disabled) {
                        self.buttonDownCapture = true;
                        self.btnDown.addClass(self.toThemeProperty('jqx-fill-state-pressed'));
                        self.btnDown.addClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                        self._addArrowClasses('pressed', 'down');
                        return false;
                    }
                });
                this.addHandler(this.btnUp, 'mousedown', function (event) {
                    if (!self.btnUpInstance.base.disabled) {
                        self.buttonUpCapture = true;
                        self.btnUp.addClass(self.toThemeProperty('jqx-fill-state-pressed'));
                        self.btnUp.addClass(self.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                        self._addArrowClasses('pressed', 'up');
                        return false;
                    }
                });
            }

            var eventName = 'click';
            if (this.isTouchDevice) {
                eventName = $.jqx.mobile.getTouchEventName('touchend');
            }

            this.addHandler(this.areaUp, eventName, function (event) {
                if (!self.disabled) {
                    var step = self.largestep;
                    if (self.rtl && !self.vertical) {
                        step = -self.largestep;
                    }

                    self.setPosition(self.value - step); return false;
                }
            });
            this.addHandler(this.areaDown, eventName, function (event) {
                if (!self.disabled) {
                    var step = self.largestep;
                    if (self.rtl && !self.vertical) {
                        step = -self.largestep;
                    }
                    self.setPosition(self.value + step);
                    return false;
                }
            });
            this.addHandler(this.areaUp, 'mousedown', function (event) { if (!self.disabled) { self.areaUpCapture = true; return false; } });
            this.addHandler(this.areaDown, 'mousedown', function (event) { if (!self.disabled) { self.areaDownCapture = true; return false; } });

            this.addHandler(this.btnThumb, 'mousedown', function (event) {
                if (!self.disabled) {
                    self.handlemousedown(event);
                }
                return false;
            });
            this.addHandler(this.btnThumb, 'dragstart', function (event) {
                return false;
            });

            this.addHandler($(document), 'mouseup.' + this.element.id, function (event) { if (!self.disabled) self.handlemouseup(self, event); });

            if (!this.isTouchDevice) {
                this.mousemoveFunc = function (event) {
                    if (!self.disabled) {
                        self.handlemousemove(event);
                    }
                }

                this.addHandler($(document), 'mousemove.' + this.element.id, this.mousemoveFunc);
                this.addHandler($(document), 'mouseleave.' + this.element.id, function (event) { if (!self.disabled) self.handlemouseleave(event); });
                this.addHandler($(document), 'mouseenter.' + this.element.id, function (event) { if (!self.disabled) self.handlemouseenter(event); });

                if (!self.disabled) {
                    this.addHandler(this.btnUp, 'mouseenter', function () {
                        if (!self.disabled && !self.btnUpInstance.base.disabled && self.touchMode != true) {
                            self.btnUp.addClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));
                            self.btnUp.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                            self._addArrowClasses('hover', 'up');
                        }});
                    this.addHandler(this.btnUp, 'mouseleave', function () {
                        if (!self.disabled && !self.btnUpInstance.base.disabled && self.touchMode != true) {
                            self.btnUp.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));
                            self.btnUp.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                            self._removeArrowClasses('hover', 'up');                       
                        }});

                    var thumbHoverClass = self.toThemeProperty('jqx-scrollbar-thumb-state-hover');
                    if (!self.vertical) {
                        thumbHoverClass = self.toThemeProperty('jqx-scrollbar-thumb-state-hover-horizontal');
                    }

                    this.addHandler(this.btnThumb, 'mouseenter', function () {
                        if (!self.disabled && self.touchMode != true) {
                            self.btnThumb.addClass(thumbHoverClass);
                            self.btnThumb.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                        }
                    });

                    this.addHandler(this.btnThumb, 'mouseleave', function () {
                        if (!self.disabled && self.touchMode != true) {
                            self.btnThumb.removeClass(thumbHoverClass);
                            self.btnThumb.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                        }
                    });

                    this.addHandler(this.btnDown, 'mouseenter', function () {
                        if (!self.disabled && !self.btnDownInstance.base.disabled && self.touchMode != true) {
                            self.btnDown.addClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));
                            self.btnDown.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                            self._addArrowClasses('hover', 'down');
                        }
                    });

                    this.addHandler(this.btnDown, 'mouseleave', function () {
                        if (!self.disabled && !self.btnDownInstance.base.disabled && self.touchMode != true) {
                            self.btnDown.removeClass(self.toThemeProperty('jqx-scrollbar-button-state-hover'));
                            self.btnDown.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                            self._removeArrowClasses('hover', 'down');
                        }
                    });
                }
            }
        },

        destroy: function () {
            var btnUp = this.btnUp;
            var btnDown = this.btnDown;
            var btnThumb = this.btnThumb;
            var elWrap = this.scrollWrap;
            var areaUp = this.areaUp;
            var areaDown = this.areaDown;

            this.arrowUp.remove();
            delete this.arrowUp;
            this.arrowDown.remove();
            delete this.arrowDown;

            areaDown.removeClass();
            areaUp.removeClass();
            btnDown.removeClass();
            btnUp.removeClass();
            btnThumb.removeClass();

            btnUp.jqxRepeatButton('destroy');
            btnDown.jqxRepeatButton('destroy');
            areaUp.jqxRepeatButton('destroy');
            areaDown.jqxRepeatButton('destroy');
            btnThumb.jqxButton('destroy');
            var vars = $.data(this.element, "jqxScrollBar");

            this._removeHandlers();
            this.btnUp = null;
            this.btnDown = null;
            this.scrollWrap = null;
            this.areaUp = null;
            this.areaDown = null;
            this.scrollOuterWrap = null;
            delete this.mousemoveFunc;
            delete this.btnDownInstance;
            delete this.btnUpInstance;
            delete this.scrollOuterWrap;
            delete this.scrollWrap;          
            delete this.btnDown;
            delete this.areaDown;
            delete this.areaUp;
            delete this.btnDown;
            delete this.btnUp;
            delete this.btnThumb;
            delete this.propertyChangeMap['value'];
            delete this.propertyChangeMap['min'];
            delete this.propertyChangeMap['max'];
            delete this.propertyChangeMap['touchMode'];
            delete this.propertyChangeMap['disabled'];
            delete this.propertyChangeMap['theme'];
            delete this.propertyChangeMap;
            if (vars) {
                delete vars.instance;
            }
            this.host.removeData();
            this.host.remove();
            delete this.host;
            delete this.set;
            delete this.get;
            delete this.call;
            delete this.element;
        },

        _removeHandlers: function () {
            this.removeHandler(this.btnUp, 'mouseenter');
            this.removeHandler(this.btnDown, 'mouseenter');
            this.removeHandler(this.btnThumb, 'mouseenter');
            this.removeHandler(this.btnUp, 'mouseleave');
            this.removeHandler(this.btnDown, 'mouseleave');
            this.removeHandler(this.btnThumb, 'mouseleave');
            this.removeHandler(this.btnUp, 'click');
            this.removeHandler(this.btnDown, 'click');
            this.removeHandler(this.btnDown, 'mouseup');
            this.removeHandler(this.btnUp, 'mouseup');
            this.removeHandler(this.btnDown, 'mousedown');
            this.removeHandler(this.btnUp, 'mousedown');
            this.removeHandler(this.areaUp, 'mousedown');
            this.removeHandler(this.areaDown, 'mousedown');
            this.removeHandler(this.areaUp, 'click');
            this.removeHandler(this.areaDown, 'click');
            this.removeHandler(this.btnThumb, 'mousedown');
            this.removeHandler(this.btnThumb, 'dragstart');
            this.removeHandler($(document), 'mouseup.' + this.element.id);
            if (!this.mousemoveFunc) {
                this.removeHandler($(document), 'mousemove.' + this.element.id);
            }
            else {
                this.removeHandler($(document), 'mousemove.' + this.element.id, this.mousemoveFunc);
            }

            this.removeHandler($(document), 'mouseleave.' + this.element.id);
            this.removeHandler($(document), 'mouseenter.' + this.element.id);
            var self = this;
        },

        _addArrowClasses: function (state, button) {
            if (state == 'pressed') state = 'selected';
            if (state != '') {
                state = '-' + state;
            }

            if (this.vertical) {
                if (button == 'up' || button == undefined) {
                    this.arrowUp.addClass(this.toThemeProperty("jqx-icon-arrow-up" + state));
                }

                if (button == 'down' || button == undefined) {
                    this.arrowDown.addClass(this.toThemeProperty("jqx-icon-arrow-down" + state));
                }
            }
            else {
                if (button == 'up' || button == undefined) {
                    this.arrowUp.addClass(this.toThemeProperty("jqx-icon-arrow-left" + state));
                }

                if (button == 'down' || button == undefined) {
                    this.arrowDown.addClass(this.toThemeProperty("jqx-icon-arrow-right" + state));
                }
            }
        },

        _removeArrowClasses: function (state, button) {
            if (state == 'pressed') state = 'selected';
            if (state != '') {
                state = '-' + state;
            }

            if (this.vertical) {
                if (button == 'up' || button == undefined) {
                    this.arrowUp.removeClass(this.toThemeProperty("jqx-icon-arrow-up" + state));
                }

                if (button == 'down' || button == undefined) {
                    this.arrowDown.removeClass(this.toThemeProperty("jqx-icon-arrow-down" + state));
                }
            }
            else {
                if (button == 'up' || button == undefined) {
                    this.arrowUp.removeClass(this.toThemeProperty("jqx-icon-arrow-left" + state));
                }

                if (button == 'down' || button == undefined) {
                    this.arrowDown.removeClass(this.toThemeProperty("jqx-icon-arrow-right" + state));
                }
            }
        },

        setTheme: function () {
            var btnUp = this.btnUp;
            var btnDown = this.btnDown;
            var btnThumb = this.btnThumb;
            var elWrap = this.scrollWrap;
            var areaUp = this.areaUp;
            var areaDown = this.areaDown;
            var arrowUp = this.arrowUp;
            var arrowDown = this.arrowDown;

            this.scrollWrap[0].className = this.toThemeProperty('jqx-reset');
            this.scrollOuterWrap[0].className = this.toThemeProperty('jqx-reset');

            var areaClassName = this.toThemeProperty('jqx-reset');
            this.areaDown[0].className = areaClassName;
            this.areaUp[0].className = areaClassName;

            var hostClass = this.toThemeProperty('jqx-scrollbar') + " " + this.toThemeProperty('jqx-widget') + " " + this.toThemeProperty('jqx-widget-content');
            this.host.addClass(hostClass);
            btnDown[0].className = this.toThemeProperty('jqx-scrollbar-button-state-normal');
            btnUp[0].className = this.toThemeProperty('jqx-scrollbar-button-state-normal');

            var thumbClass = "";
            if (this.vertical) {
                arrowUp[0].className = areaClassName + " " + this.toThemeProperty("jqx-icon-arrow-up");
                arrowDown[0].className = areaClassName + " " + this.toThemeProperty("jqx-icon-arrow-down");
                thumbClass = this.toThemeProperty('jqx-scrollbar-thumb-state-normal');
            }
            else {
                arrowUp[0].className = areaClassName + " " + this.toThemeProperty("jqx-icon-arrow-left");
                arrowDown[0].className = areaClassName + " " + this.toThemeProperty("jqx-icon-arrow-right");
                thumbClass = this.toThemeProperty('jqx-scrollbar-thumb-state-normal-horizontal');
            }
            thumbClass += " " + this.toThemeProperty('jqx-fill-state-normal');

            btnThumb[0].className = thumbClass;

            if (this.disabled) {
                elWrap.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                elWrap.removeClass(this.toThemeProperty('jqx-scrollbar-state-normal'));
            }
            else {
                elWrap.addClass(this.toThemeProperty('jqx-scrollbar-state-normal'));
                elWrap.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
            }

            if (this.roundedCorners == 'all') {
                this.host.addClass(this.toThemeProperty('jqx-rc-all'));
                if (this.vertical) {
                    var rct = $.jqx.cssroundedcorners('top');
                    rct = this.toThemeProperty(rct);
                    btnUp.addClass(rct);

                    var rcb = $.jqx.cssroundedcorners('bottom');
                    rcb = this.toThemeProperty(rcb);
                    btnDown.addClass(rcb);

                }
                else {
                    var rcl = $.jqx.cssroundedcorners('left');
                    rcl = this.toThemeProperty(rcl);
                    btnUp.addClass(rcl);

                    var rcr = $.jqx.cssroundedcorners('right');
                    rcr = this.toThemeProperty(rcr);
                    btnDown.addClass(rcr);
                }
            }
            else {
                var rc = $.jqx.cssroundedcorners(this.roundedCorners);
                rc = this.toThemeProperty(rc);
                elBtnUp.addClass(rc);
                elBtnDown.addClass(rc);
            }

            var rc = $.jqx.cssroundedcorners(this.roundedCorners);
            rc = this.toThemeProperty(rc);
            if (!btnThumb.hasClass(rc)) {
                btnThumb.addClass(rc);
            }

            if (this.isTouchDevice && this.touchModeStyle != false) {
                this.showButtons = false;
                btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-normal-touch'));
            }
        },

        // returns true, if the user is dragging the thumb or the increase or decrease button is pressed.
        isScrolling: function () {
            if (this.thumbCapture == undefined || this.buttonDownCapture == undefined || this.buttonUpCapture == undefined || this.areaDownCapture == undefined || this.areaUpCapture == undefined)
                return false;

            return this.thumbCapture || this.buttonDownCapture || this.buttonUpCapture || this.areaDownCapture || this.areaUpCapture;
        },

        handlemousedown: function (event) {
            if (this.thumbCapture == undefined || this.thumbCapture == false) {
                this.thumbCapture = true;
                var btnThumb = this.btnThumb;
                if (btnThumb != null) {
                    btnThumb.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                    if (this.vertical) {
                        btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed'));
                    }
                    else {
                        btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal'));
                    }
                }
            }

            this.dragStartX = event.clientX;
            this.dragStartY = event.clientY;
            this.dragStartValue = this.value;
        },

        toggleHover: function (event, element) {
            //element.toggleClass('jqx-fill-state-hover');
        },

        refresh: function () {
            this._arrange();
        },

        _setElementPosition: function (element, x, y) {
            if (!isNaN(x)) {
                if (parseInt(element[0].style.left) != parseInt(x)) {
                    element[0].style.left = x + 'px';
                }
            }
            if (!isNaN(y)) {
                if (parseInt(element[0].style.top) != parseInt(y)) {
                    element[0].style.top = y + 'px';
                }
            }
        },

        _setElementTopPosition: function (element, y) {
            if (!isNaN(y)) {
                element[0].style.top = y + 'px';
            }
        },

        _setElementLeftPosition: function (element, x) {
            if (!isNaN(x)) {
                element[0].style.left = x + 'px';
            }
        },

        handlemouseleave: function (event) {
            var btnUp = this.btnUp;
            var btnDown = this.btnDown;
                   
            if (this.buttonDownCapture || this.buttonUpCapture) {
                btnUp.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                btnDown.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                this._removeArrowClasses('pressed');
            }
         
            if (this.thumbCapture != true)
                return;

            var btnThumb = this.btnThumb;
            var btnThumbPressedClass = this.vertical ? this.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');
            btnThumb.removeClass(btnThumbPressedClass);
            btnThumb.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
        },

        handlemouseenter: function (event) {
            var btnUp = this.btnUp;
            var btnDown = this.btnDown;

            if (this.buttonUpCapture) {
                btnUp.addClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                btnUp.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                this._addArrowClasses('pressed', 'up');
            }

            if (this.buttonDownCapture) {
                btnDown.addClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                btnDown.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                this._addArrowClasses('pressed', 'down');
            }

            if (this.thumbCapture != true)
                return;

            var btnThumb = this.btnThumb;
            if (this.vertical) {
                btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed'));
            }
            else {
                btnThumb.addClass(this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal'));
            }
            btnThumb.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
        },

        handlemousemove: function (event) {
            var btnUp = this.btnUp;
            var btnDown = this.btnDown;
            var which = 0;

            if (btnDown == null || btnUp == null)
                return;

            if (btnUp != null && btnDown != null && this.buttonDownCapture != undefined && this.buttonUpCapture != undefined) {
                if (this.buttonDownCapture && event.which == which) {
                    btnDown.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                    btnDown.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                    this._removeArrowClasses('pressed', 'down');

                    this.buttonDownCapture = false;
                }
                else if (this.buttonUpCapture && event.which == which) {
                    btnUp.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                    btnUp.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                    this._removeArrowClasses('pressed', 'up');
                    this.buttonUpCapture = false;
                }
            }

            if (this.thumbCapture != true)
                return false;

            var btnThumb = this.btnThumb;

            if (event.which == which && !this.isTouchDevice && !this._touchSupport) {
                this.thumbCapture = false;
                this._arrange();
                var btnThumbPressedClass = this.vertical ? this.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');
                btnThumb.removeClass(btnThumbPressedClass);
                btnThumb.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                return true;
            }

            if (event.preventDefault != undefined) {
                event.preventDefault();
            }

            if (event.originalEvent != null) {
                event.originalEvent.mouseHandled = true;
            }

            if (event.stopPropagation != undefined) {
                event.stopPropagation();
            }

            var diff = 0;

            try {
                if (!this.vertical)
                    diff = event.clientX - this.dragStartX;
                else
                    diff = event.clientY - this.dragStartY;
                var btnAndThumbSize = this._btnAndThumbSize;
                if (!this._btnAndThumbSize) {
                    btnAndThumbSize = (this.vertical) ?
                    btnUp.height() + btnDown.height() + btnThumb.height() :
                    btnUp.width() + btnDown.width() + btnThumb.width();
                }

                var ratio = (this.max - this.min) / (this.scrollBarSize - btnAndThumbSize);
                if (this.thumbStep == 'auto') {
                    diff *= ratio;
                }
                else {
                    diff *= ratio;
                    if (Math.abs(this.dragStartValue + diff - this.value) >= parseInt(this.thumbStep)) {
                        var step = Math.round(parseInt(diff) / this.thumbStep) * this.thumbStep;
                        if (this.rtl && !this.vertical) {
                            this.setPosition(this.dragStartValue - step);
                        }
                        else {
                            this.setPosition(this.dragStartValue + step);
                        }
                        return false;
                    }
                    else {
                        return false;
                    }
                }

                var step = diff;
                if (this.rtl && !this.vertical) {
                    step = -diff;
                }

                this.setPosition(this.dragStartValue + step);
            }
            catch (error) {
                alert(error);
            }

            return false;
        },

        handlemouseup: function (self, event) {
            var prevent = false;
        
            if (this.thumbCapture) {
                this.thumbCapture = false;

                var btnThumb = this.btnThumb;
                var btnThumbPressedClass = this.vertical ? this.toThemeProperty('jqx-scrollbar-thumb-state-pressed') : this.toThemeProperty('jqx-scrollbar-thumb-state-pressed-horizontal');
                btnThumb.removeClass(btnThumbPressedClass);
                btnThumb.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                prevent = true;
                this._mouseup = new Date();
            }

            this.areaDownCapture = this.areaUpCapture = false;
            if (this.buttonUpCapture || this.buttonDownCapture) {
                var btnUp = this.btnUp;
                var btnDown = this.btnDown;

                this.buttonUpCapture = false;
                this.buttonDownCapture = false;
                btnUp.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                btnDown.removeClass(this.toThemeProperty('jqx-scrollbar-button-state-pressed'));
                btnUp.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                btnDown.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
                this._removeArrowClasses('pressed');

                prevent = true;
                this._mouseup = new Date();
            }

            if (prevent) {
                if (event.preventDefault != undefined) {
                    event.preventDefault();
                }

                if (event.originalEvent != null) {
                    event.originalEvent.mouseHandled = true;
                }

                if (event.stopPropagation != undefined) {
                    event.stopPropagation();
                }
            }
        },

        // sets the value.
        // @param Number. Sets the ScrollBar's value.
        setPosition: function (position, update) {
            var element = this.element;

            if (position == undefined || position == NaN)
                position = this.min;

            if (position >= this.max) {
                position = this.max;
            }

            if (position < this.min) {
                position = this.min;
            }

            if (this.value !== position || update == true) {
                if (position == this.max) {
                    var completeEvent = new jQuery.Event('complete');
                    this.host.trigger(completeEvent);
                }
                var oldvalue = this.value;
                if (this._triggervaluechanged) {
                    var event = new jQuery.Event('valuechanged');
                    event.previousValue = this.value;
                    event.currentValue = position;
                }

                this.value = position;
                this._positionelements();
                //this._arrange();

                if (this._triggervaluechanged) {
                    this.host.trigger(event);
                }

                if (this.valuechanged) {
                    this.valuechanged({ currentValue: this.value, previousvalue: oldvalue });
                }
            }

            return position;
        },

        _getThumbSize: function (scrollLen) {
            var diff = this.max - this.min;

            var size = 0;
            if (diff > 1) {
                size = (scrollLen / (diff + scrollLen) * scrollLen);
            }
            else if (diff == 1) {
                size = scrollLen;
            }

            if (this.thumbSize > 0) {
                size = this.thumbSize;
            }

            if (size < this.thumbMinSize)
                size = this.thumbMinSize;

            return Math.min(size, scrollLen);
        },

        _positionelements: function () {
            var element = this.element;
            var elAreaUp = this.areaUp;
            var elAreaDown = this.areaDown;
            var elBtnUp = this.btnUp;
            var elBtnDown = this.btnDown;
            var elThumb = this.btnThumb;
            var elWrap = this.scrollWrap;

            var height = this._height ? this._height : this.host.height();
            var width = this._width ? this._width : this.host.width();

            var btnSize = (!this.vertical) ? height : width;
            if (!this.showButtons) {
                btnSize = 0;
            }

            var scrollBarSize = (!this.vertical) ? width : height;
            this.scrollBarSize = scrollBarSize;
            var thumbSize = this._getThumbSize(scrollBarSize - 2 * btnSize);
            thumbSize = Math.round(thumbSize);

            if (thumbSize < this.thumbMinSize)
                thumbSize = this.thumbMinSize;

            if (height == NaN || height < 10)
                height = 10;

            if (width == NaN || width < 10)
                width = 10;

            btnSize += 2;
            this.btnSize = btnSize;

            var btnAndThumbSize = this._btnAndThumbSize;

            if (!this._btnAndThumbSize) {
                var btnAndThumbSize = (this.vertical) ?
                2 * this.btnSize + elThumb.outerHeight() :
                2 * this.btnSize + elThumb.outerWidth();

                btnAndThumbSize = Math.round(btnAndThumbSize);
            }

            var upAreaSize = (scrollBarSize - btnAndThumbSize) / (this.max - this.min) * (this.value - this.min);
            if (this.rtl && !this.vertical) {
                upAreaSize = (scrollBarSize - btnAndThumbSize) / (this.max - this.min) * (this.max - this.value - this.min);
            }

            upAreaSize = Math.round(upAreaSize);
            if (upAreaSize < 0) {
                upAreaSize = 0;
            }
            if (this.vertical) {
                var newDownSize = scrollBarSize - upAreaSize - btnAndThumbSize;
                if (newDownSize < 0) newDownSize = 0;
                elAreaDown[0].style.height = newDownSize + 'px';
                elAreaUp[0].style.height = upAreaSize + 'px';

                this._setElementTopPosition(elAreaUp, btnSize);
                this._setElementTopPosition(elThumb, btnSize + upAreaSize);
                this._setElementTopPosition(elAreaDown, btnSize + upAreaSize + thumbSize);
            }
            else {
                elAreaUp[0].style.width = upAreaSize + 'px';
                if (scrollBarSize - upAreaSize - btnAndThumbSize >= 0) {
                    elAreaDown[0].style.width = scrollBarSize - upAreaSize - btnAndThumbSize + 'px';
                }
                else {
                    elAreaDown[0].style.width = '0px';
                }

                this._setElementLeftPosition(elAreaUp, btnSize);
                this._setElementLeftPosition(elThumb, btnSize + upAreaSize);
                this._setElementLeftPosition(elAreaDown, 2 + btnSize + upAreaSize + thumbSize);
            }
        },

        _arrange: function () {
            if (this._initialLayout) {
                this._initialLayout = false;
                return;
            }

            var element = this.element;
            var elAreaUp = this.areaUp;
            var elAreaDown = this.areaDown;
            var elBtnUp = this.btnUp;
            var elBtnDown = this.btnDown;
            var elThumb = this.btnThumb;
            var elWrap = this.scrollWrap;

            var height = parseInt(this.element.style.height);
            var width = parseInt(this.element.style.width);
            if (this.isPercentage) {
                var height = this.host.height();
                var width = this.host.width();
            }
           
            if (isNaN(height)) height = 0;
            if (isNaN(width)) width = 0;

            this._width = width;
            this._height = height;
            var btnSize = (!this.vertical) ? height : width;
            if (!this.showButtons) {
                btnSize = 0;
            }

            elBtnUp[0].style.width = btnSize + 'px';
            elBtnUp[0].style.height = btnSize + 'px';
            elBtnDown[0].style.width = btnSize + 'px';
            elBtnDown[0].style.height = btnSize + 'px';

            if (this.vertical) {
                elWrap[0].style.width = width + 2 + 'px';
            }
            else {
                elWrap[0].style.height = height + 2 + 'px';
            }

            // position the up button
            this._setElementPosition(elBtnUp, 0, 0);

            var btnSizeAndBorder = btnSize + 2;
            // position the down button
            if (this.vertical) {
                this._setElementPosition(elBtnDown, 0, height - btnSizeAndBorder);
            }
            else {
                this._setElementPosition(elBtnDown, width - btnSizeAndBorder, 0);
            }

            var scrollBarSize = (!this.vertical) ? width : height;
            this.scrollBarSize = scrollBarSize;
            var thumbSize = this._getThumbSize(scrollBarSize - 2 * btnSize);
            thumbSize = Math.round(thumbSize);

            if (thumbSize < this.thumbMinSize)
                thumbSize = this.thumbMinSize;

            var touchStyle = false;
            if (this.isTouchDevice && this.touchModeStyle != false) {
                touchStyle = true;
            }

            if (!this.vertical) {
                elThumb[0].style.width = thumbSize + 'px';
                elThumb[0].style.height = height + 'px';
                if (touchStyle && this.thumbTouchSize !== 0) {
                    elThumb.css({ height: this.thumbTouchSize + 'px' });
                    elThumb.css('margin-top', (this.host.height() - this.thumbTouchSize) / 2);
                }
            }
            else {
                elThumb[0].style.width = width + 'px';
                elThumb[0].style.height = thumbSize + 'px';

                if (touchStyle && this.thumbTouchSize !== 0) {
                    elThumb.css({ width: this.thumbTouchSize + 'px' });
                    elThumb.css('margin-left', (this.host.width() - this.thumbTouchSize) / 2);
                }
            }

            if (height == NaN || height < 10)
                height = 10;

            if (width == NaN || width < 10)
                width = 10;

            btnSize += 2;
            this.btnSize = btnSize;

            var btnAndThumbSize = (this.vertical) ?
                2 * this.btnSize + (2 + parseInt(elThumb[0].style.height)) :
                2 * this.btnSize + (2 + parseInt(elThumb[0].style.width));

            btnAndThumbSize = Math.round(btnAndThumbSize);
            this._btnAndThumbSize = btnAndThumbSize;

            var upAreaSize = (scrollBarSize - btnAndThumbSize) / (this.max - this.min) * (this.value - this.min);
            if (this.rtl && !this.vertical) {
                upAreaSize = (scrollBarSize - btnAndThumbSize) / (this.max - this.min) * (this.max - this.value - this.min);
            }
            upAreaSize = Math.round(upAreaSize);
            if (upAreaSize === -Infinity || upAreaSize == Infinity) upAreaSize = 0;
            if (isNaN(upAreaSize)) {
                upAreaSize = 0;
            }
            if (upAreaSize < 0) {
                upAreaSize = 0;
            }

            if (this.vertical) {
                var newAreaHeight = (scrollBarSize - upAreaSize - btnAndThumbSize);
                if (newAreaHeight < 0) newAreaHeight = 0;
                elAreaDown[0].style.height = newAreaHeight + 'px';
                elAreaDown[0].style.width = width + 'px';
                elAreaUp[0].style.height = upAreaSize + 'px';
                elAreaUp[0].style.width = width + 'px';

                var hostHeight = parseInt(this.element.style.height);
                if (this.isPercentage) {
                    hostHeight = this.host.height();
                }

                elThumb[0].style.visibility = 'inherit';

                if (hostHeight - 3 * parseInt(btnSize) < 0) {
                    elThumb[0].style.visibility = 'hidden';
                }
                else if (hostHeight < btnAndThumbSize) {
                    elThumb[0].style.visibility = 'hidden';
                }
                else if (this.element.style.visibility == 'visible') {
                    elThumb[0].style.visibility = 'inherit';
                }

                this._setElementPosition(elAreaUp, 0, btnSize);
                this._setElementPosition(elThumb, 0, btnSize + upAreaSize);
                this._setElementPosition(elAreaDown, 0, btnSize + upAreaSize + thumbSize);
            }
            else {
                if (upAreaSize > 0) {
                    elAreaUp[0].style.width = upAreaSize + 'px';
                }
                if (height > 0) {
                    elAreaUp[0].style.height = height + 'px';
                }
                var newAreaWidth = (scrollBarSize - upAreaSize - btnAndThumbSize);
                if (newAreaWidth < 0) newAreaWidth = 0;

                elAreaDown[0].style.width = newAreaWidth + 'px';
                elAreaDown[0].style.height = height + 'px';

                var hostWidth = parseInt(this.element.style.width);
                if (this.isPercentage) {
                    hostWidth = this.host.width();
                }

                elThumb[0].style.visibility = 'inherit';
                if (hostWidth - 3 * parseInt(btnSize) < 0) {
                    elThumb[0].style.visibility = 'hidden';
                }
                else if (hostWidth < btnAndThumbSize) {
                    elThumb[0].style.visibility = 'hidden';
                }
                else if (this.element.style.visibility == 'visible') {
                    elThumb[0].style.visibility = 'inherit';
                }

                this._setElementPosition(elAreaUp, btnSize, 0);
                this._setElementPosition(elThumb, btnSize + upAreaSize, 0);
                this._setElementPosition(elAreaDown, 2 + btnSize + upAreaSize + thumbSize, 0);
            }
        }
    }); // jqxScrollBar
})(jQuery);


/*
 * file from "src\jqxbuttons.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/


(function ($) {
    $.jqx.cssroundedcorners = function (value) {
        var cssMap = {
            'all': 'jqx-rc-all',
            'top': 'jqx-rc-t',
            'bottom': 'jqx-rc-b',
            'left': 'jqx-rc-l',
            'right': 'jqx-rc-r',
            'top-right': 'jqx-rc-tr',
            'top-left': 'jqx-rc-tl',
            'bottom-right': 'jqx-rc-br',
            'bottom-left': 'jqx-rc-bl'
        };

        for (prop in cssMap) {
            if (!cssMap.hasOwnProperty(prop))
                continue;

            if (value == prop)
                return cssMap[prop];
        }
    }

    $.jqx.jqxWidget("jqxButton", "", {});

    $.extend($.jqx._jqxButton.prototype, {
        defineInstance: function () {
            this.cursor = 'arrow';
            // rounds the button corners.
            this.roundedCorners = 'all';
            // enables / disables the button
            this.disabled = false;
            // sets height to the button.
            this.height = null;
            // sets width to the button.
            this.width = null;
            this.overrideTheme = false;
            this.enableHover = true;
            this.enableDefault = true;
            this.enablePressed = true;
            this.rtl = false;
            this._ariaDisabled = false;
            this._scrollAreaButton = false;
            this.aria =
            {
                "aria-disabled": { name: "disabled", type: "boolean" }
            };
        },

        createInstance: function (args) {
            var self = this;
            this._setSize();

            if (!this._ariaDisabled) {
                this.host.attr('role', 'button');
            }
            if (!this.overrideTheme) {
                this.host.addClass(this.toThemeProperty($.jqx.cssroundedcorners(this.roundedCorners)));
                if (this.enableDefault) {
                    this.host.addClass(this.toThemeProperty('jqx-button'));
                }
                this.host.addClass(this.toThemeProperty('jqx-widget'));
            }

            this.isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (!this._ariaDisabled) {
                $.jqx.aria(this);
            }

            if (this.cursor != 'arrow') {
                if (!this.disabled) {
                    this.host.css({ cursor: this.cursor });
                }
                else {
                    this.host.css({ cursor: 'arrow' });
                }
            }

            var eventNames = 'mouseenter mouseleave mousedown focus blur';
            if (this._scrollAreaButton) {
                var eventNames = 'mousedown';
            }

            if (this.isTouchDevice) {
                this.addHandler(this.host, $.jqx.mobile.getTouchEventName('touchstart'), function (event) {
                    self.isPressed = true;
                    self.refresh();
                });
                this.addHandler($(document), $.jqx.mobile.getTouchEventName('touchend') + "." + this.element.id, function (event) {
                    self.isPressed = false;
                    self.refresh();
                });
            }

            this.addHandler(this.host, eventNames, function (event) {
                switch (event.type) {
                    case 'mouseenter':
                        if (!this.isTouchDevice) {
                            if (!self.disabled && self.enableHover) {
                                self.isMouseOver = true;
                                self.refresh();
                            }
                        }
                        break;
                    case 'mouseleave':
                        if (!this.isTouchDevice) {
                            if (!self.disabled && self.enableHover) {
                                self.isMouseOver = false;
                                self.refresh();
                            }
                        }
                        break;
                    case 'mousedown':
                        if (!self.disabled) {
                            self.isPressed = true;
                            self.refresh();
                        }
                        break;
                    case 'focus':
                        if (!self.disabled) {
                            self.isFocused = true;
                            self.refresh();
                        }
                        break;
                    case 'blur':
                        if (!self.disabled) {
                            self.isFocused = false;
                            self.refresh();
                        }
                        break;
                }
            });

            this.mouseupfunc = function (event) {
                if (!self.disabled) {
                    self.isPressed = false;
                    self.refresh();
                }
            }

            this.addHandler($(document), 'mouseup.button' + this.element.id, this.mouseupfunc);

            try {
                if (document.referrer != "" || window.frameElement) {
                    if (window.top != null && window.top != window.self) {
                        var parentLocation = '';
                        if (window.parent && document.referrer) {
                            parentLocation = document.referrer;
                        }

                        if (parentLocation.indexOf(document.location.host) != -1) {
                            var eventHandle = function (event) {
                                self.isPressed = false;
                                self.refresh();
                            };

                            if (window.top.document) {
                                this.addHandler($(window.top.document), 'mouseup', eventHandle);
                            }
                        }
                    }
                }
            }
            catch (error) {
            }
            
            this.propertyChangeMap['roundedCorners'] = function (instance, key, oldVal, value) {
                instance.host.removeClass(instance.toThemeProperty($.jqx.cssroundedcorners(oldVal)));
                instance.host.addClass(instance.toThemeProperty($.jqx.cssroundedcorners(value)));
            };
            this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {
                instance._setSize();
                instance.refresh();
            };
            this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {
                instance._setSize();
                instance.refresh();
            };
            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (oldVal != value) {
                    instance.host[0].disabled = value;
                    instance.host.attr('disabled', value);
                    instance.refresh();
                    if (!value) {
                        instance.host.css({ cursor: instance.cursor });
                    }
                    else {
                        instance.host.css({ cursor: 'default' });
                    }

                    $.jqx.aria(instance, "aria-disabled", instance.disabled);
                }
            };
            this.propertyChangeMap['rtl'] = function (instance, key, oldVal, value) {
                if (oldVal != value) {
                    instance.refresh();
                }
            };
            this.propertyChangeMap['theme'] = function (instance, key, oldVal, value) {
                instance.host.removeClass();

                instance.host.addClass(instance.toThemeProperty('jqx-button'));
                instance.host.addClass(instance.toThemeProperty('jqx-widget'));
                if (!instance.overrideTheme) {
                    instance.host.addClass(instance.toThemeProperty($.jqx.cssroundedcorners(instance.roundedCorners)));
                }
                instance._oldCSSCurrent = null;
                instance.refresh();
            };
            if (this.disabled) {
                this.element.disabled = true;
                this.host.attr('disabled', true);
            }
        }, // createInstance

        resize: function (width, height) {
            this.width = width;
            this.height = height;
            this._setSize();
        },

        val: function () {
            var input = this.host.find('input');
            if (input.length > 0) {
                if (arguments.length == 0 || typeof (value) == "object") {
                    return input.val();
                }
                input.val(value);
                this.refresh();
                return input.val();
            }

            if (arguments.length == 0 || typeof (value) == "object") {
                if (this.element.nodeName.toLowerCase() == "button") {
                    return $(this.element).text();
                }
                return this.element.value;
            }
            this.element.value = arguments[0];
            if (this.element.nodeName.toLowerCase() == "button") {
                $(this.element).text(arguments[0]);
            }

            this.refresh();
        },

        _setSize: function () {
            if (this.width != null && (this.width.toString().indexOf("px") != -1 || this.width.toString().indexOf("%") != -1)) {
                this.host.css('width', this.width);
            }
            else {
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.css('width', this.width);
                }
            }
            if (this.height != null && (this.height.toString().indexOf("px") != -1 || this.height.toString().indexOf("%") != -1)) {
                this.host.css('height', this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.css('height', parseInt(this.height));
            }
        },

        _removeHandlers: function () {
            this.removeHandler(this.host, 'selectstart');
            this.removeHandler(this.host, 'click');
            this.removeHandler(this.host, 'focus');
            this.removeHandler(this.host, 'blur');
            this.removeHandler(this.host, 'mouseenter');
            this.removeHandler(this.host, 'mouseleave');
            this.removeHandler(this.host, 'mousedown');
            this.removeHandler($(document), 'mouseup.button' + this.element.id, this.mouseupfunc);
            if (this.isTouchDevice) {
                this.removeHandler(this.host, $.jqx.mobile.getTouchEventName('touchstart'));
                this.removeHandler($(document), $.jqx.mobile.getTouchEventName('touchend') + "." + this.element.id);
            }
            this.mouseupfunc = null;
            delete this.mouseupfunc;
        },

        focus: function()
        {
            this.host.focus();
        },

        destroy: function () {
            this._removeHandlers();
            var vars = $.data(this.element, "jqxButton");
            if (vars) {
                delete vars.instance;
            }
            this.host.removeClass();
            this.host.removeData();
            this.host.remove();
            delete this.set;
            delete this.get;
            delete this.call;
            delete this.propertyChangeMap['roundedCorners'];
            delete this.propertyChangeMap['width'];
            delete this.propertyChangeMap['height'];
            delete this.propertyChangeMap['disabled'];
            delete this.propertyChangeMap['rtl'];
            delete this.propertyChangeMap['theme'];
            delete this.propertyChangeMap;
            delete this.element;
            delete this.host;
        },

        render: function()
        {
            this.refresh();
        },

        refresh: function () {
            if (this.overrideTheme)
                return;

            var cssFocused = this.toThemeProperty('jqx-fill-state-focus');
            var cssDisabled = this.toThemeProperty('jqx-fill-state-disabled');
            var cssNormal = this.toThemeProperty('jqx-fill-state-normal');
            if (!this.enableDefault) {
                cssNormal = "";
            }

            var cssHover = this.toThemeProperty('jqx-fill-state-hover');
            var cssPressed = this.toThemeProperty('jqx-fill-state-pressed');
            var cssPressedHover = this.toThemeProperty('jqx-fill-state-pressed');
            if (!this.enablePressed) {
                cssPressed = "";
            }
            var cssCurrent = '';
            if (!this.host) {
                return;
            }

            this.host[0].disabled = this.disabled;

            if (this.disabled) {
                cssCurrent = cssDisabled;
            }
            else {
                if (this.isMouseOver && !this.isTouchDevice) {
                    if (this.isPressed)
                        cssCurrent = cssPressedHover;
                    else
                        cssCurrent = cssHover;
                }
                else {
                    if (this.isPressed)
                        cssCurrent = cssPressed;
                    else
                        cssCurrent = cssNormal;
                }
            }

            if (this.isFocused) {
                cssCurrent += " " + cssFocused;
            }

            if (cssCurrent != this._oldCSSCurrent) {
                if (this._oldCSSCurrent) {
                    this.host.removeClass(this._oldCSSCurrent);
                }
                this.host.addClass(cssCurrent);
                this._oldCSSCurrent = cssCurrent;
            }
            if (this.rtl) {
                this.host.addClass(this.toThemeProperty('jqx-rtl'));
                this.host.css('direction', 'rtl');
            }
        }
    });

    //// LinkButton
    $.jqx.jqxWidget("jqxLinkButton", "", {});

    $.extend($.jqx._jqxLinkButton.prototype, {
        defineInstance: function () {
            // enables / disables the button
            this.disabled = false;
            // sets height to the button.
            this.height = null;
            // sets width to the button.
            this.width = null;
            this.rtl = false;
            this.href = null;
        },

        createInstance: function (args) {
            var self = this;
            this.host.onselectstart = function () { return false; };
            this.host.attr('role', 'button');

            var height = this.height || this.host.height();
            var width = this.width || this.host.width();
            this.href = this.host.attr('href');
            this.target = this.host.attr('target');
            this.content = this.host.text();
            this.element.innerHTML = "";
            this.host.append("<input type='button' class='jqx-wrapper'/>");
            var wrapElement = this.host.find('input');
            wrapElement.addClass(this.toThemeProperty('jqx-reset'));
            wrapElement.width(width);
            wrapElement.height(height);
            wrapElement.val(this.content);
            this.host.find('tr').addClass(this.toThemeProperty('jqx-reset'));
            this.host.find('td').addClass(this.toThemeProperty('jqx-reset'));
            this.host.find('tbody').addClass(this.toThemeProperty('jqx-reset'));
            this.host.css('color', 'inherit');
            this.host.addClass(this.toThemeProperty('jqx-link'));

            wrapElement.css({ width: width });
            wrapElement.css({ height: height });
            var param = args == undefined ? {} : args[0] || {};
            wrapElement.jqxButton(param);

            if (this.disabled) {
                this.host[0].disabled = true;
            }

            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                instance.host[0].disabled = value;
                instance.host.find('input').jqxButton({ disabled: value });
            }

            this.addHandler(wrapElement, 'click', function (event) {
                if (!this.disabled) {
                    self.onclick(event);
                }
                return false;
            });
        },

        onclick: function (event) {
            if (this.target != null) {
                window.open(this.href, this.target);
            }
            else {
                window.location = this.href;
            }
        }
    });
    //// End of LinkButton

    //// RepeatButton
    $.jqx.jqxWidget("jqxRepeatButton", "jqxButton", {});

    $.extend($.jqx._jqxRepeatButton.prototype, {
        defineInstance: function () {
            this.delay = 50;
        },

        createInstance: function (args) {
            var self = this;

            var isTouchDevice = $.jqx.mobile.isTouchDevice();

            var up = !isTouchDevice ? 'mouseup.' + this.base.element.id : 'touchend.' + this.base.element.id;
            var down = !isTouchDevice ? 'mousedown.' + this.base.element.id : 'touchstart.' + this.base.element.id;

            this.addHandler($(document), up, function (event) {
                if (self.timeout != null) {
                    clearTimeout(self.timeout);
                    self.timeout = null;
                    self.refresh();
                }
                if (self.timer != undefined) {
                    clearInterval(self.timer);
                    self.timer = null;
                    self.refresh();
                }
            });

            this.addHandler(this.base.host, down, function (event) {
                if (self.timer != null) {
                    clearInterval(self.timer);
                }
 
                self.timeout = setTimeout(function () {
                    clearInterval(self.timer);
                    self.timer = setInterval(function (event) { self.ontimer(event); }, self.delay);
                }, 150);
            });

            this.mousemovefunc = function (event) {
                if (!isTouchDevice) {
                    if (event.which == 0) {
                        if (self.timer != null) {
                            clearInterval(self.timer);
                            self.timer = null;
                        }
                    }
                }
            }

            this.addHandler(this.base.host, 'mousemove', this.mousemovefunc);
        },

        destroy: function()
        {
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            var up = !isTouchDevice ? 'mouseup.' + this.base.element.id : 'touchend.' + this.base.element.id;
            var down = !isTouchDevice ? 'mousedown.' + this.base.element.id : 'touchstart.' + this.base.element.id;
            this.removeHandler(this.base.host, 'mousemove', this.mousemovefunc);
            this.removeHandler(this.base.host, down);
            this.removeHandler($(document), up);
            this.timer = null;
            delete this.mousemovefunc;
            delete this.timer;
            var vars = $.data(this.base.element, "jqxRepeatButton");
            if (vars) {
                delete vars.instance;
            }
            $(this.base.element).removeData();
            this.base.destroy();
            delete this.base;

        },

        stop: function () {
            clearInterval(this.timer);
            this.timer = null;
        },

        ontimer: function (event) {
            var event = new jQuery.Event('click');
            if (this.base != null && this.base.host != null) {
                this.base.host.trigger(event);
            }
        }
    });
    //// End of RepeatButton
    //// ToggleButton
    $.jqx.jqxWidget("jqxToggleButton", "jqxButton", {});

    $.extend($.jqx._jqxToggleButton.prototype, {
        defineInstance: function () {
            this.toggled = false;
            this.aria =
            {
                "aria-checked": { name: "toggled", type: "boolean" },
                "aria-disabled": { name: "disabled", type: "boolean" }
            };
        },

        createInstance: function (args) {
            var self = this;
            this.base.overrideTheme = true;
            this.isTouchDevice = $.jqx.mobile.isTouchDevice();
            $.jqx.aria(this);

            this.propertyChangeMap['toggled'] = function (instance, key, oldVal, value) {
                instance.refresh();
            };
            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                self.base.disabled = value;
                instance.refresh();
            };

            this.addHandler(this.base.host, 'click', function (event) {
                if (!self.base.disabled) {
                    self.toggle();
                }
            });

            if (!this.isTouchDevice) {
                this.addHandler(this.base.host, 'mouseenter', function (event) {
                    if (!self.base.disabled) {
                        self.refresh();
                    }
                });

                this.addHandler(this.base.host, 'mouseleave', function (event) {
                    if (!self.base.disabled) {
                        self.refresh();
                    }
                });
            }

            this.addHandler(this.base.host, 'mousedown', function (event) {
                if (!self.base.disabled) {
                    self.refresh();
                }
            });

            this.addHandler($(document), 'mouseup', function (event) {
                if (!self.base.disabled) {
                    self.refresh();
                }
            });
        },

        _removeHandlers: function () {
            this.removeHandler(this.base.host, 'click');
            this.removeHandler(this.base.host, 'mouseenter');
            this.removeHandler(this.base.host, 'mouseleave');
            this.removeHandler(this.base.host, 'mousedown');
            this.removeHandler($(document), 'mouseup');
        },

        toggle: function () {
            this.toggled = !this.toggled;
            this.refresh();
            $.jqx.aria(this, "aria-checked", this.toggled);
        },

        unCheck: function () {
            this.toggled = false;
            this.refresh();
        },

        check: function () {
            this.toggled = true;
            this.refresh();
        },

        refresh: function () {
            var cssDisabled = this.base.toThemeProperty('jqx-fill-state-disabled');
            var cssNormal = this.base.toThemeProperty('jqx-fill-state-normal');
            var cssHover = this.base.toThemeProperty('jqx-fill-state-hover');
            var cssPressed = this.base.toThemeProperty('jqx-fill-state-pressed');
            var cssPressedHover = this.base.toThemeProperty('jqx-fill-state-pressed');
            var cssCurrent = '';
            this.base.host[0].disabled = this.base.disabled;

            if (this.base.disabled) {
                cssCurrent = cssDisabled;
            }
            else {
                if (this.base.isMouseOver && !this.isTouchDevice) {
                    if (this.base.isPressed || this.toggled)
                        cssCurrent = cssPressedHover;
                    else
                        cssCurrent = cssHover;
                }
                else {
                    if (this.base.isPressed || this.toggled)
                        cssCurrent = cssPressed;
                    else
                        cssCurrent = cssNormal;
                }
            }

            if (this.base.host.hasClass(cssDisabled) && cssDisabled != cssCurrent)
                this.base.host.removeClass(cssDisabled);

            if (this.base.host.hasClass(cssNormal) && cssNormal != cssCurrent)
                this.base.host.removeClass(cssNormal);

            if (this.base.host.hasClass(cssHover) && cssHover != cssCurrent)
                this.base.host.removeClass(cssHover);

            if (this.base.host.hasClass(cssPressed) && cssPressed != cssCurrent)
                this.base.host.removeClass(cssPressed);

            if (this.base.host.hasClass(cssPressedHover) && cssPressedHover != cssCurrent)
                this.base.host.removeClass(cssPressedHover);

            if (!this.base.host.hasClass(cssCurrent))
                this.base.host.addClass(cssCurrent);
        }
    });
    //// End of ToggleButton

})(jQuery);

/*
 * file from "src\jqxmenu.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/


(function ($) {

    $.jqx.jqxWidget("jqxMenu", "", {});

    $.extend($.jqx._jqxMenu.prototype, {
        defineInstance: function () {
            //Type: Array
            //Gets the menu's items.
            this.items = new Array();
            //Type: String.
            //Default: 'horizontal'.
            //Gets or sets the menu's display mode. 
            //Possible Values: 'horizontal', 'vertical', 'popup', 'simple'
            this.mode = 'horizontal';
            //Type: Number.
            //Default: null.
            //Sets the width.
            this.width = null;
            //Type: Number.
            //Default: null.
            //Sets the height.
            this.height = null;
            //Type: Number.
            //Default: null.
            //Sets the height.
            this.minimizeWidth = 'auto';
            //Type: String.
            //Default: easeInOutSine.
            //Gets or sets the animation's easing to one of the JQuery's supported easings.         
            this.easing = 'easeInOutSine';
            //Type: Number.
            //Default: 500.
            //Gets or sets the duration of the show animation.         
            this.animationShowDuration = 200;
            //Type: Number.
            //Default: 'fast'.
            //Gets or sets the duration of the hide animation.
            this.animationHideDuration = 200;
            // Type: Number
            // Default: 0
            // Gets or sets whether the menu is automatically closed after a period of time.
            this.autoCloseInterval = 0;
            //Type: Number.
            //Default: 500.
            //Gets or sets the delay before the start of the hide animation.
            this.animationHideDelay = 100;
            //Type: Number.
            //Default: 200.
            //Gets or sets the delay before the start of the show animation.            
            this.animationShowDelay = 100;
            //Type: Array.
            this.menuElements = new Array();
            //Type: Boolean.
            //Default: true.
            //Auto-Sizes the Menu's main items when the menu's mode is 'horizontal'.
            this.autoSizeMainItems = false;
            //Type: Boolean.
            //Default: true.
            //Automatically closes the opened popups after a click.
            this.autoCloseOnClick = true;
            //Type: Boolean.
            //Default: true.
            //Automatically closes the opened popups after mouse leave.
            this.autoCloseOnMouseLeave = true;
            //Type: Boolean.
            //Default: true.
            //Enables or disables the rounded corners.
            this.enableRoundedCorners = true;
            //Type: Boolean.
            //Default: true.
            //Enables or disables the Menu.
            this.disabled = false;
            //Type: Boolean.
            //Default: true.
            //Opens the Context Menu when the right-mouse button is pressed.
            //When this property is set to false, the Open and Close functions can be used to open and close 
            //the Context Menu.
            this.autoOpenPopup = true;
            // Type: Boolean
            // Default: true
            // enables or disables the hover state.
            this.enableHover = true;
            // Type: Boolean
            // Default: true
            // opens the top level menu items when the user hovers them.
            this.autoOpen = true;
            // Type: Boolean
            // Default: false
            // When this property is true, the menu is auto generated using all of ul and li tags inside the host.
            this.autoGenerate = true;
            // Type: Boolean
            // Default: false
            // opens an item after a click by the user.
            this.clickToOpen = false;
            // Type: Boolean
            // Default: false
            // shows the top-level item arrows in the default horizontal menu mode.
            this.showTopLevelArrows = false;
            // Sets whether the menu is on touch device.
            this.touchMode = 'auto';
            // Sets menu's source.
            this.source = null;
            this.popupZIndex = 17000;
            this.rtl = false;
            this.title = "";
            // Menu events.
            this.events =
		    [
                'shown', 'closed', 'itemclick', 'initialized'
            ];
        },

        createInstance: function (args) {
            var self = this;
            this.host.attr('role', 'menubar');
            $.jqx.utilities.resize(this.host, function () {
                self.refresh();
            }, false, this.mode != "popup");

            this.host.css('outline', 'none');

            if (this.source) {
                if (this.source != null) {
                    var html = this.loadItems(this.source);
                    this.element.innerHTML = html;
                }
            }

            this._tmpHTML = this.element.innerHTML;
            if (this.element.innerHTML.indexOf('UL')) {
                var innerElement = this.host.find('ul:first');
                if (innerElement.length > 0) {
                    this._createMenu(innerElement[0]);
                }
            }

            this.host.data('autoclose', {});

            this._render();
            this.setSize();
            if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                this.host.attr('hideFocus', true);
            }
        },

        focus: function()
        {
            try
            {
                this.host.focus();
            }
            catch (error) {
            }
        },

        loadItems: function (items, subMenuWidth) {
            if (items == null) {
                return;
            }
            if (items.length == 0) return "";

            var self = this;
            this.items = new Array();
            var html = '<ul>';
            if (subMenuWidth) {
                html = '<ul style="width:' + subMenuWidth + ';">';
            }

            $.map(items, function (item) {
                if (item == undefined)
                    return null;

                html += self._parseItem(item);
            });

            html += '</ul>';
            return html;
        },

        _parseItem: function (item) {
            var html = "";

            if (item == undefined)
                return null;

            var label = item.label;
            if (!item.label && item.html) {
                label = item.html;
            }
            if (!label) {
                label = "Item";
            }

            if (typeof item === 'string') {
                label = item;
            }

            var selected = false;
            if (item.selected != undefined && item.selected) {
                selected = true;
            }

            var disabled = false;
            if (item.disabled != undefined && item.disabled) {
                disabled = true;
            }

            html += '<li';

            if (disabled) {
                html += ' item-disabled="true" ';
            }

            if (item.label && !item.html) {
                html += ' item-label="' + label + '" ';
            }

            if (item.value != null) {
                html += ' item-value="' + item.value + '" ';
            }

            if (item.id != undefined) {
                html += ' id="' + item.id + '" ';
            }

            html += '>' + label;

            if (item.items) {
                if (item.subMenuWidth) {
                    html += this.loadItems(item.items, item.subMenuWidth);
                }
                else {
                    html += this.loadItems(item.items);
                }
            }

            html += '</li>';
            return html;
        },

        setSize: function () {
            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                this.host.width(this.width);
            }
            else if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };
            if (this.height === null) {
                this.host.height('auto');
            }
                
            var me = this;
            if (this.minimizeWidth != null) {
                var windowWidth = $(window).width();

                if (!$.jqx.response) {
                    var isDesktop = false;
                    if (navigator.userAgent.match(/Windows|Linux|MacOS/)) {
                        var isWP = navigator.userAgent.indexOf('Windows Phone') >= 0 || navigator.userAgent.indexOf('WPDesktop') >= 0 || navigator.userAgent.indexOf('IEMobile') >= 0 || navigator.userAgent.indexOf('ZuneWP7') >= 0;
                        if (!isWP) {
                            isDesktop = true;
                        }
                    }

                    var w = this.minimizeWidth;
                    if (isDesktop && this.minimizeWidth == 'auto') {
                        return;
                    }
                }

                if (this.minimizeWidth == 'auto' && $.jqx.response) {
                    var response = new $.jqx.response();
                    if (response.device.type == "Phone" || response.device.type == "Tablet") {
                        if (!this.minimized) {
                            this.minimize();
                        }
                    }
                }
                else {
                    if ((windowWidth < w) && !this.minimized) {
                        this.minimize();
                    }
                    else if (this.minimized && windowWidth >= w) {
                        this.restore()
                    }
                }
            }
        },

        minimize: function()
        {
            if (this.minimized) return;
            var me = this;
            this.host.addClass(this.toThemeProperty('jqx-menu-minimized'));
            this.minimized = true;
            this._tmpMode = this.mode;
            this.mode = "simple";
            var wrapper = this.host.closest('div.jqx-menu-wrapper');
            wrapper.remove();
            $("#menuWrapper" + this.element.id).remove();
            $.each(this.items, function () {
                var item = this;
                var $menuElement = $(item.element);
                var $submenu = $(item.subMenuElement);
                var $popupElement = $submenu.closest('div.jqx-menu-popup');
                $popupElement.remove();
            });

            if (this.source) {
                var html = this.loadItems(this.source);
                this.element.innerHTML = html;
            }
            else {
                this.element.innerHTML = this._tmpHTML;
                if (this.element.innerHTML.indexOf('UL')) {
                    var innerElement = this.host.find('ul:first');
                    if (innerElement.length > 0) {
                        this._createMenu(innerElement[0]);
                    }
                }
            }

            this._render();
            var ul = this.host.find('ul:first');
            ul.wrap('<div class="jqx-menu-wrapper" style="z-index:' + this.popupZIndex + '; padding: 0px; display: none; margin: 0px; height: auto; width: auto; position: absolute; top: 0; left: 0; display: block; visibility: visible;"></div>')
            var wrapper = ul.closest('div.jqx-menu-wrapper');
            wrapper[0].id = "menuWrapper" + this.element.id;
            wrapper.detach();
            wrapper.appendTo($(document.body));
            wrapper.addClass(this.toThemeProperty('jqx-widget'));
            wrapper.addClass(this.toThemeProperty('jqx-menu'));
            wrapper.addClass(this.toThemeProperty('jqx-menu-minimized'));
            wrapper.addClass(this.toThemeProperty('jqx-widget-header'));

            ul.children().hide();
            wrapper.hide();
            wrapper.find('ul').addClass(this.toThemeProperty('jqx-menu-ul-minimized'));
            this.minimizedItem = $("<div></div>");
            this.minimizedItem.addClass(this.toThemeProperty('jqx-item'));
            this.minimizedItem.addClass(this.toThemeProperty('jqx-menu-item-top'));
           
            this.minimizedItem.addClass(this.toThemeProperty('jqx-menu-minimized-button'));
            this.minimizedItem.prependTo(this.host);

            this.titleElement = $("<div>" + this.title + "</div>");
            this.titleElement.addClass(this.toThemeProperty('jqx-item'));
            this.titleElement.addClass(this.toThemeProperty('jqx-menu-title'));
            this.titleElement.prependTo(this.host);
            $("<div style='clear:both;'></div>").insertAfter(this.minimizedItem);
            me.minimizedHidden = true;
            var hideMenu = function (e) {
                me.minimizedHidden = true;
                me.minimizedItem.show();
                var fromRight = false;
                if (me.minimizedItem.css('float') == 'right') {
                    fromRight = true;
                }

                wrapper.animate({
                    left: !fromRight ? -wrapper.outerWidth() : me.host.coord().left + me.host.width() + wrapper.width(),
                    opacity: 0
                }, me.animationHideDuration, function () {
                    wrapper.find('ul:first').children().hide();
                    wrapper.hide();
                });
            }

            var toggleMenu = function (e) {
                if (me.minimizedHidden) {
                    wrapper.find('ul:first').children().show();
                    me.minimizedHidden = false;
                    wrapper.show();
                    wrapper.css('opacity', 0);
                    wrapper.css('left', -wrapper.outerWidth());
                    var fromRight = false;
                    var wrapperWidth = wrapper.width();
                    if (me.minimizedItem.css('float') == 'right') {
                        wrapper.css('left', me.host.coord().left + me.host.width() + wrapperWidth);
                        fromRight = true;
                    }
                    wrapper.css('top', me.host.coord().top + me.host.height());
                    wrapper.animate({
                        left: !fromRight ? me.host.coord().left : me.host.coord().left + me.host.width() - wrapperWidth,
                        opacity: 0.95
                    }, me.animationShowDuration, function () {
                    });
                }
                else {
                    hideMenu(e);
                }
                me._raiseEvent('2', { item: me.minimizedItem[0], event: e });
                me.setSize();
            }
            this.addHandler($(window), 'orientationchange.jqxmenu' + this.element.id, function (e) {
                setTimeout(function () {
                    if (!me.minimizedHidden) {
                        var wrapperWidth = wrapper.width();
                        var fromRight = false;
                        var wrapperWidth = wrapper.width();
                        if (me.minimizedItem.css('float') == 'right') {
                            fromRight = true;
                        }
                        wrapper.css('top', me.host.coord().top + me.host.height());
                        wrapper.css({
                            left: !fromRight ? me.host.coord().left : me.host.coord().left + me.host.width() - wrapperWidth
                        });
                    }
                }, 25);
            });

            this.addHandler(this.minimizedItem, 'click', function (e) {
                toggleMenu(e);
            });
        },

        restore: function()
        {
            if (!this.minimized) return;

            this.host.find('ul').removeClass(this.toThemeProperty('jqx-menu-ul-minimized'));
            this.host.removeClass(this.toThemeProperty('jqx-menu-minimized'));

            this.minimized = false;
            this.mode = this._tmpMode;
            if (this.minimizedItem)
                this.minimizedItem.remove();

            var wrapper = $("#menuWrapper" + this.element.id);
            wrapper.remove(); 

            if (this.source) {
                var html = this.loadItems(this.source);
                this.element.innerHTML = html;
            }
            else {
                this.element.innerHTML = this._tmpHTML;
                if (this.element.innerHTML.indexOf('UL')) {
                    var innerElement = this.host.find('ul:first');
                    if (innerElement.length > 0) {
                        this._createMenu(innerElement[0]);
                    }
                }
            }
            this.setSize();
            this._render();
        },

        isTouchDevice: function () {
            if (this._isTouchDevice != undefined) return this._isTouchDevice;
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this.touchMode == true) {
                isTouchDevice = true;
            }
            else if (this.touchMode == false) {
                isTouchDevice = false;
            }
            if (isTouchDevice) {
                this.host.addClass(this.toThemeProperty('jqx-touch'));
                $(".jqx-menu-item").addClass(this.toThemeProperty('jqx-touch'));
            }
            this._isTouchDevice = isTouchDevice;
            return isTouchDevice;
        },

        refresh: function (initialRefresh) {
            if (!initialRefresh) {
                this.setSize();
            }
        },

        resize: function (width, height) {
            this.width = width;
            this.height = height;
            this.refresh();
        },

        _closeAll: function (e) {
            var me = e != null ? e.data : this;
            var items = me.items;
            $.each(items, function () {
                var item = this;
                if (item.hasItems == true) {
                    if (item.isOpen) {
                        me._closeItem(me, item);
                    }
                }
            });

            if (me.mode == 'popup') {
                if (e != null) {
                    var rightclick = me._isRightClick(e);
                    if (!rightclick) {
                        me.close();
                    }
                }
            }
        },

        // @param id
        // closes a menu item by id.
        closeItem: function (id) {
            if (id == null)
                return false;
            var theId = id;
            var element = document.getElementById(theId);
            var me = this;

            $.each(me.items, function () {
                var item = this;
                if (item.isOpen == true && item.element == element) {
                    me._closeItem(me, item);
                    if (item.parentId) {
                        me.closeItem(item.parentId);
                    }
                }
            });

            return true;
        },

        // @param id
        // opens a menu item by id.
        openItem: function (id) {
            if (id == null)
                return false;

            var theId = id;
            var element = document.getElementById(theId);
            var me = this;
            $.each(me.items, function () {
                var item = this;
                if (item.isOpen == false && item.element == element) {
                    me._openItem(me, item);
                    if (item.parentId) {
                        me.openItem(item.parentId);
                    }
                }
            });

            return true;
        },

        _getClosedSubMenuOffset: function (item) {
            var $submenu = $(item.subMenuElement);
            var top = -$submenu.outerHeight();
            var left = -$submenu.outerWidth();
            var isTopItem = item.level == 0 && this.mode == 'horizontal';
            if (isTopItem) {
                left = 0;
            }
            else {
                top = 0;
            }

            switch (item['openVerticalDirection']) {
                case 'up':
                case 'center':
                    top = $submenu.outerHeight();
                    break;
            }

            switch (item['openHorizontalDirection']) {
                case this._getDir('left'):
                    if (isTopItem) {
                        left = 0;
                    }
                    else {
                        left = $submenu.outerWidth();
                    }
                    break;
                case 'center':
                    if (isTopItem) {
                        left = 0;
                    }
                    else {
                        left = $submenu.outerWidth();
                    }
                    break;
            }
            return { left: left, top: top };
        },

        
        _closeItem: function (me, item, subs, force) {
            if (me == null || item == null)
                return false;

            var $submenu = $(item.subMenuElement);
          
            var isTopItem = item.level == 0 && this.mode == 'horizontal';
            var subMenuOffset = this._getClosedSubMenuOffset(item);
            var top = subMenuOffset.top;
            var left = subMenuOffset.left;

            var $menuElement = $(item.element);
            var $popupElement = $submenu.closest('div.jqx-menu-popup');
            if ($popupElement != null) {
                var delay = me.animationHideDelay;
                if (force == true) {
                    //     clearTimeout($submenu.data('timer').hide);
                    delay = 0;
                }

                if ($submenu.data('timer').show != null) {
                    clearTimeout($submenu.data('timer').show);
                    $submenu.data('timer').show = null;
                }

                var hideFunc = function () {
                    item.isOpen = false;

                    if (isTopItem) {
                        $submenu.stop().animate({ top: top }, me.animationHideDuration, function () {
                            $(item.element).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                            $(item.element).removeClass(me.toThemeProperty('jqx-menu-item-top-selected'));

                            $(item.element).removeClass(me.toThemeProperty('jqx-rc-b-expanded'));
                            $popupElement.removeClass(me.toThemeProperty('jqx-rc-t-expanded'));
                            var $arrowSpan = $(item.arrow);
                            if ($arrowSpan.length > 0 && me.showTopLevelArrows) {
                                $arrowSpan.removeClass();
                                if (item.openVerticalDirection == 'down') {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down'));
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-down'));
                                }
                                else {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up'));
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-up'));
                                }
                            }
                            $.jqx.aria($(item.element), 'aria-expanded', false);

                            $popupElement.css({ display: 'none' });
                            if (me.animationHideDuration == 0) {
                                $submenu.css({ top: top });
                            }
                            me._raiseEvent('1', item);
                        })
                    }
                    else {
                        if (!$.jqx.browser.msie) {
                            //       $popupElement.stop().animate({ opacity: 0 }, me.animationHideDuration, function () {
                            //         });
                        }

                        $submenu.stop().animate({ left: left }, me.animationHideDuration, function () {
                            if (me.animationHideDuration == 0) {
                                $submenu.css({ left: left });
                            }

                            if (item.level > 0) {
                                $(item.element).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                                $(item.element).removeClass(me.toThemeProperty('jqx-menu-item-selected'));
                                var $arrowSpan = $(item.arrow);
                                if ($arrowSpan.length > 0) {
                                    $arrowSpan.removeClass();
                                    if (item.openHorizontalDirection != 'left') {
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right')));
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));
                                    }
                                    else {
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('left')));
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('left')));
                                    }
                                }
                            }
                            else {
                                $(item.element).removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                                $(item.element).removeClass(me.toThemeProperty('jqx-menu-item-top-selected'));
                                var $arrowSpan = $(item.arrow);
                                if ($arrowSpan.length > 0) {
                                    $arrowSpan.removeClass();
                                    if (item.openHorizontalDirection != 'left') {
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-top-' + me._getDir('right')));
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));
                                    }
                                    else {
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-top-' + me._getDir('left')));
                                        $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('left')));
                                    }
                                }
                            }
                            $.jqx.aria($(item.element), 'aria-expanded', false);
                            $popupElement.css({ display: 'none' })
                            me._raiseEvent('1', item);
                        })
                    }
                }

                if (delay > 0) {
                    $submenu.data('timer').hide = setTimeout(function () {
                        hideFunc();
                    }, delay);
                }
                else {
                    hideFunc();
                }

                if (subs != undefined && subs) {
                    var children = $submenu.children();// find('.' + me.toThemeProperty('jqx-menu-item'));
                    $.each(children, function () {
                        if (me.menuElements[this.id] && me.menuElements[this.id].isOpen) {
                            var $submenu = $(me.menuElements[this.id].subMenuElement);
                            me._closeItem(me, me.menuElements[this.id], true, true);
                        }
                    });
                }
            }
        },

        // @param id
        // @param array.
        // get menu item's sub items.
        getSubItems: function (id, array) {
            if (id == null)
                return false;

            var me = this;
            var subItems = new Array();
            if (array != null) {
                $.extend(subItems, array);
            }

            var theId = id;
            var item = this.menuElements[theId];
            var $submenu = $(item.subMenuElement);
            var children = $submenu.find('.jqx-menu-item');
            $.each(children, function () {
                subItems[this.id] = me.menuElements[this.id];
                var innerArray = me.getSubItems(this.id, subItems);
                $.extend(subItems, innerArray);
            });

            return subItems;
        },

        // disables a menu item.
        // @param id
        // @param Boolean
        disable: function (id, disable) {
            if (id == null)
                return;
            var theId = id;
            var me = this;
            if (this.menuElements[theId]) {
                var item = this.menuElements[theId];
                item.disabled = disable;
                var $element = $(item.element);
                item.element.disabled = disable;
                $.each($element.children(), function () {
                    this.disabled = disable;
                });

                if (disable) {
                    $element.addClass(me.toThemeProperty('jqx-menu-item-disabled'));
                    $element.addClass(me.toThemeProperty('jqx-fill-state-disabled'));
                }
                else {
                    $element.removeClass(me.toThemeProperty('jqx-menu-item-disabled'));
                    $element.removeClass(me.toThemeProperty('jqx-fill-state-disabled'));
                }
            }
        },

        _setItemProperty: function (id, propertyname, value) {
            if (id == null)
                return;

            var theId = id;
            var me = this;

            if (this.menuElements[theId]) {
                var item = this.menuElements[theId];
                if (item[propertyname]) {
                    item[propertyname] = value;
                }
            }
        },

        // sets the open direction of an item.
        // @param id
        // @param String
        // @param String
        setItemOpenDirection: function (id, horizontal, vertical) {
            if (id == null)
                return;
            var theId = id;
            var me = this;
            var ie7 = $.jqx.browser.msie && $.jqx.browser.version < 8;

            if (this.menuElements[theId]) {
                var item = this.menuElements[theId];
                if (horizontal != null) {
                    item['openHorizontalDirection'] = horizontal;
                    if (item.hasItems && item.level > 0) {
                        var $element = $(item.element);
                        if ($element != undefined) {
                            var $arrowSpan = $(item.arrow);
                            if (item.arrow == null) {
                                $arrowSpan = $('<span id="arrow' + $element[0].id + '"></span>');
                                if (!ie7) {
                                    $arrowSpan.prependTo($element);
                                }
                                else {
                                    $arrowSpan.appendTo($element);
                                }
                                item.arrow = $arrowSpan[0];
                            }
                            $arrowSpan.removeClass();
                            if (item.openHorizontalDirection == 'left') {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('left')));
                                $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('left')));
                            }
                            else {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right')));
                                $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));
                            }
                            $arrowSpan.css('visibility', 'visible');

                            if (!ie7) {
                                $arrowSpan.css('display', 'block');
                                $arrowSpan.css('float', 'right');
                            }
                            else {
                                $arrowSpan.css('display', 'inline-block');
                                $arrowSpan.css('float', 'none');
                            }
                        }
                    }
                }
                if (vertical != null) {
                    item['openVerticalDirection'] = vertical;
                    var $arrowSpan = $(item.arrow);
                    var $element = $(item.element);
                    if (!me.showTopLevelArrows) {
                        return;
                    }

                    if ($element != undefined) {
                        if (item.arrow == null) {
                            $arrowSpan = $('<span id="arrow' + $element[0].id + '"></span>');
                            if (!ie7) {
                                $arrowSpan.prependTo($element);
                            }
                            else {
                                $arrowSpan.appendTo($element);
                            }
                            item.arrow = $arrowSpan[0];
                        }
                        $arrowSpan.removeClass();
                        if (item.openVerticalDirection == 'down') {
                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down'));
                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-down'));
                        }
                        else {
                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up'));
                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-up'));
                        }
                        $arrowSpan.css('visibility', 'visible');
                        if (!ie7) {
                            $arrowSpan.css('display', 'block');
                            $arrowSpan.css('float', 'right');
                        }
                        else {
                            $arrowSpan.css('display', 'inline-block');
                            $arrowSpan.css('float', 'none');

                        }
                    }
                }
            }
        },

        
        _getSiblings: function (item) {
            var siblings = new Array();
            var index = 0;
            for (i = 0; i < this.items.length; i++) {
                if (this.items[i] == item)
                    continue;

                if (this.items[i].parentId == item.parentId && this.items[i].hasItems) {
                    siblings[index++] = this.items[i];
                }
            }
            return siblings;
        },

        
        _openItem: function (me, item, zIndex) {
            if (me == null || item == null)
                return false;

            if (item.isOpen)
                return false;

            if (item.disabled)
                return false;

            if (me.disabled)
                return false;
            var zIndx = me.popupZIndex;
            if (zIndex != undefined) {
                zIndx = zIndex;
            }

            var hideDuration = me.animationHideDuration;
            me.animationHideDuration = 0;
            me._closeItem(me, item, true, true);
            me.animationHideDuration = hideDuration;

            this.host.focus();

            var popupElementoffset = [5, 5];
            var $submenu = $(item.subMenuElement);
            if ($submenu != null) {
                $submenu.stop();
            }
            // stop hiding process.
            if ($submenu.data('timer').hide != null) {
                clearTimeout($submenu.data('timer').hide);
                //      $submenu.data('timer').hide = null;
            }
            var $popupElement = $submenu.closest('div.jqx-menu-popup');
            var $menuElement = $(item.element);
            var offset = item.level == 0 ? this._getOffset(item.element) : $menuElement.position()

            if (item.level > 0 && this.hasTransform) {
                var topTransform = parseInt($menuElement.coord().top) - parseInt(this._getOffset(item.element).top);
                offset.top += topTransform;
            }

            if (item.level == 0 && this.mode == 'popup') {
                offset = $menuElement.coord();
            }

            var isTopItem = item.level == 0 && this.mode == 'horizontal';

            var menuItemLeftOffset = isTopItem ? offset.left : this.menuElements[item.parentId] != null && this.menuElements[item.parentId].subMenuElement != null ? parseInt($($(this.menuElements[item.parentId].subMenuElement).closest('div.jqx-menu-popup')).outerWidth()) - popupElementoffset[0]
            : parseInt($submenu.outerWidth());

            $popupElement.css({ visibility: 'visible', display: 'block', left: menuItemLeftOffset, top: isTopItem ? offset.top + $menuElement.outerHeight() : offset.top, zIndex: zIndx })
            $submenu.css('display', 'block');

            if (this.mode != 'horizontal' && item.level == 0) {
                var hostOffset = this._getOffset(this.element)
                $popupElement.css('left', -1 + hostOffset.left + this.host.outerWidth());

                //          $popupElement.css('left', -2 + offset.left + this.host.width() - popupElementoffset[0]);
                $submenu.css('left', -$submenu.outerWidth());
            }
            else {
                var subMenuOffset = this._getClosedSubMenuOffset(item);
                $submenu.css('left', subMenuOffset.left);
                $submenu.css('top', subMenuOffset.top);
            }

            $popupElement.css({ height: parseInt($submenu.outerHeight()) + parseInt(popupElementoffset[1]) + 'px' });

            var top = 0;
            var left = 0;

            switch (item['openVerticalDirection']) {
                case 'up':
                    if (isTopItem) {
                        $submenu.css('top', $submenu.outerHeight());
                        top = popupElementoffset[1];
                        var paddingBottom = parseInt($submenu.parent().css('padding-bottom'));
                        if (isNaN(paddingBottom)) paddingBottom = 0;
                        if (paddingBottom > 0) {
                            $popupElement.addClass(this.toThemeProperty('jqx-menu-popup-clear'));
                        }

                        $submenu.css('top', $submenu.outerHeight() - paddingBottom);
                        $popupElement.css({ display: 'block', top: offset.top - $popupElement.outerHeight(), zIndex: zIndx })
                    }
                    else {
                        top = popupElementoffset[1];
                        $submenu.css('top', $submenu.outerHeight());
                        $popupElement.css({ display: 'block', top: offset.top - $popupElement.outerHeight() + popupElementoffset[1] + $menuElement.outerHeight(), zIndex: zIndx })
                    }
                    break;
                case 'center':
                    if (isTopItem) {
                        $submenu.css('top', 0);
                        $popupElement.css({ display: 'block', top: offset.top - $popupElement.outerHeight() / 2 + popupElementoffset[1], zIndex: zIndx })
                    }
                    else {
                        $submenu.css('top', 0);
                        $popupElement.css({ display: 'block', top: offset.top + $menuElement.outerHeight() / 2 - $popupElement.outerHeight() / 2 + popupElementoffset[1], zIndex: zIndx })
                    }

                    break;
            }

            switch (item['openHorizontalDirection']) {
                case this._getDir('left'):
                    if (isTopItem) {
                        $popupElement.css({ left: offset.left - ($popupElement.outerWidth() - $menuElement.outerWidth() - popupElementoffset[0]) });
                    }
                    else {
                        left = 0;
                        $submenu.css('left', $popupElement.outerWidth());
                        $popupElement.css({ left: offset.left - ($popupElement.outerWidth()) + 2*item.level });
                    }
                    break;
                case 'center':
                    if (isTopItem) {
                        $popupElement.css({ left: offset.left - ($popupElement.outerWidth() / 2 - $menuElement.outerWidth() / 2 - popupElementoffset[0] / 2) });
                    }
                    else {
                        $popupElement.css({ left: offset.left - ($popupElement.outerWidth() / 2 - $menuElement.outerWidth() / 2 - popupElementoffset[0] / 2) });
                        $submenu.css('left', $popupElement.outerWidth());
                    }
                    break;
            }

            if (isTopItem) {
                if (parseInt($submenu.css('top')) == top) {
                    item.isOpen = true;
                    return;
                }
            }
            else if (parseInt($submenu.css('left')) == left) {
                item.isOpen == true;
                return;
            }

            $.each(me._getSiblings(item), function () {
                me._closeItem(me, this, true, true);
            });
            var hideDelay = $.data(me.element, 'animationHideDelay');
            me.animationHideDelay = hideDelay;


            if (this.autoCloseInterval > 0) {
                if (this.host.data('autoclose') != null && this.host.data('autoclose').close != null) {
                    clearTimeout(this.host.data('autoclose').close);
                }

                if (this.host.data('autoclose') != null) {
                    this.host.data('autoclose').close = setTimeout(function () {
                        me._closeAll();
                    }, this.autoCloseInterval);
                }
            }

            $submenu.data('timer').show = setTimeout(function () {
                if ($popupElement != null) {
                    if (isTopItem) {
                        $submenu.stop();
                        $submenu.css('left', left);
                        if (!$.jqx.browser.msie) {
                            //      $popupElement.css('opacity', 0.0);
                        }

                        $menuElement.addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                        $menuElement.addClass(me.toThemeProperty('jqx-menu-item-top-selected'));
                        if (item.openVerticalDirection == "down") {
                            $(item.element).addClass(me.toThemeProperty('jqx-rc-b-expanded'));
                            $popupElement.addClass(me.toThemeProperty('jqx-rc-t-expanded'));
                        }
                        else {
                            $(item.element).addClass(me.toThemeProperty('jqx-rc-t-expanded'));
                            $popupElement.addClass(me.toThemeProperty('jqx-rc-b-expanded'));
                        }

                        var $arrowSpan = $(item.arrow);
                        if ($arrowSpan.length > 0 && me.showTopLevelArrows) {
                            $arrowSpan.removeClass();
                            if (item.openVerticalDirection == 'down') {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down-selected'));
                                $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-down'));
                            }
                            else {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up-selected'));
                                $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-up'));
                            }
                        }

                        if (me.animationShowDuration == 0) {
                            $submenu.css({ top: top });
                            item.isOpen = true;
                            me._raiseEvent('0', item);
                            $.jqx.aria($(item.element), 'aria-expanded', true);
                        }
                        else {
                            $submenu.animate({ top: top }, me.animationShowDuration, me.easing,
                            function () {
                                item.isOpen = true;
                                $.jqx.aria($(item.element), 'aria-expanded', true);
                                me._raiseEvent('0', item);
                            }) //animate submenu into view
                        }
                    }
                    else {
                        $submenu.stop();
                        $submenu.css('top', top);
                        if (!$.jqx.browser.msie) {
                            //     $popupElement.css('opacity', 0.0);
                        }

                        if (item.level > 0) {
                            $menuElement.addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                            $menuElement.addClass(me.toThemeProperty('jqx-menu-item-selected'));
                            var $arrowSpan = $(item.arrow);
                            if ($arrowSpan.length > 0) {
                                $arrowSpan.removeClass();
                                if (item.openHorizontalDirection != 'left') {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right') + '-selected'));
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));
                                }
                                else {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('left') + '-selected'));
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('left')));
                                }
                            }
                        }
                        else {
                            $menuElement.addClass(me.toThemeProperty('jqx-fill-state-pressed'));
                            $menuElement.addClass(me.toThemeProperty('jqx-menu-item-top-selected'));
                            var $arrowSpan = $(item.arrow);
                            if ($arrowSpan.length > 0) {
                                $arrowSpan.removeClass();
                                if (item.openHorizontalDirection != 'left') {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right') + '-selected'));
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));
                                }
                                else {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('left') + '-selected'));
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('left')));
                                }
                            }
                        }
                        if (!$.jqx.browser.msie) {
                            //      $popupElement.animate({ opacity: 1 }, 2 * me.animationShowDuration, me.easing,
                            //   function () {

                            // })
                        }
                        if (me.animationShowDuration == 0) {
                            $submenu.css({ left: left });
                            me._raiseEvent('0', item);
                            item.isOpen = true;
                            $.jqx.aria($(item.element), 'aria-expanded', true);
                        }
                        else {
                            $submenu.animate({ left: left }, me.animationShowDuration, me.easing, function () {
                                me._raiseEvent('0', item);
                                item.isOpen = true;
                                $.jqx.aria($(item.element), 'aria-expanded', true);
                            }) //animate submenu into view
                        }
                    }
                }
            }, this.animationShowDelay);
        },

        _getDir: function(dir)
        {
            switch (dir) {
                case 'left':
                    return !this.rtl ? 'left' : 'right';
                case 'right':
                    return this.rtl ? 'left' : 'right';
            }
            return 'left';
        },

        
        _applyOrientation: function (mode, oldmode) {
            var me = this;
            var maxHeight = 0;
            this.host.removeClass(me.toThemeProperty('jqx-menu-horizontal'));
            this.host.removeClass(me.toThemeProperty('jqx-menu-vertical'));
            this.host.removeClass(me.toThemeProperty('jqx-menu'));
            this.host.removeClass(me.toThemeProperty('jqx-widget'));
            this.host.addClass(me.toThemeProperty('jqx-widget'));
            this.host.addClass(me.toThemeProperty('jqx-menu'));

            if (mode != undefined && oldmode != undefined && oldmode == 'popup') {
                if (this.host.parent().length > 0 && this.host.parent().parent().length > 0 && this.host.parent().parent()[0] == document.body) {
                    var oldHost = $.data(document.body, 'jqxMenuOldHost' + this.element.id);
                    if (oldHost != null) {
                        var $popupElementparent = this.host.closest('div.jqx-menu-wrapper')
                        $popupElementparent.remove();
                        $popupElementparent.appendTo(oldHost);
                        this.host.css('display', 'block');
                        this.host.css('visibility', 'visible');
                        $popupElementparent.css('display', 'block');
                        $popupElementparent.css('visibility', 'visible');
                    }
                }
            }
            else if (mode == undefined && oldmode == undefined) {
                $.data(document.body, 'jqxMenuOldHost' + this.element.id, this.host.parent()[0]);
            }

            if (this.autoOpenPopup) {
                if (this.mode == 'popup') {
                    this.addHandler($(document),'contextmenu.' + this.element.id, function (e) {
                        return false;
                    });

                    this.addHandler($(document), 'mousedown.menu' + this.element.id, function(event)
                    {
                        me._openContextMenu(event);
                    });
                }
                else {
                    this.removeHandler($(document), 'contextmenu.' + this.element.id);
                    this.removeHandler($(document), 'mousedown.menu' + this.element.id);
                }
            }
            else {
                this.removeHandler($(document), 'contextmenu.' + this.element.id);
                this.removeHandler($(document), 'mousedown.menu' + this.element.id);
            }

            if (this.rtl) {
                this.host.addClass(this.toThemeProperty('jqx-rtl'));
            }

            switch (this.mode) {
                case 'horizontal':
                    this.host.addClass(me.toThemeProperty('jqx-widget-header'));
                    this.host.addClass(me.toThemeProperty('jqx-menu-horizontal'));

                    $.each(this.items, function () {
                        var item = this;
                        $element = $(item.element);

                        var $arrowSpan = $(item.arrow);
                        $arrowSpan.removeClass();

                        if (item.hasItems && item.level > 0) {
                            var $arrowSpan = $('<span style="border: none; background-color: transparent;" id="arrow' + $element[0].id + '"></span>');
                            $arrowSpan.prependTo($element);
                            $arrowSpan.css('float', me._getDir('right'));
                            $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right')));
                            $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));
                            item.arrow = $arrowSpan[0];
                        }

                        if (item.level == 0) {
                            $(item.element).css('float', me._getDir('left'));
                            if (!item.ignoretheme && item.hasItems && me.showTopLevelArrows) {
                                var $arrowSpan = $('<span style="border: none; background-color: transparent;" id="arrow' + $element[0].id + '"></span>');
                                var ie7 = $.jqx.browser.msie && $.jqx.browser.version < 8;

                                if (item.arrow == null) {
                                    if (!ie7) {
                                        $arrowSpan.prependTo($element);
                                    }
                                    else {
                                        $arrowSpan.appendTo($element);
                                    }
                                } else {
                                    $arrowSpan = $(item.arrow);
                                }
                                if (item.openVerticalDirection == 'down') {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-down'));
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-down'));
                                }
                                else {
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-up'));
                                    $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-up'));
                                }

                                $arrowSpan.css('visibility', 'visible');

                                if (!ie7) {
                                    $arrowSpan.css('display', 'block');
                                    $arrowSpan.css('float', 'right');
                                }
                                else {
                                    $arrowSpan.css('display', 'inline-block');
                                }

                                item.arrow = $arrowSpan[0];
                            }
                            else if (!item.ignoretheme && item.hasItems && !me.showTopLevelArrows) {
                                if (item.arrow != null) {
                                    var $arrowSpan = $(item.arrow);
                                    $arrowSpan.remove();
                                    item.arrow = null;
                                }
                            }
                            maxHeight = Math.max(maxHeight, $element.height());
                        }
                    });
                    break;
                case 'vertical':
                case 'popup':
                case 'simple':
                    this.host.addClass(me.toThemeProperty('jqx-menu-vertical'));

                    $.each(this.items, function () {
                        var item = this;
                        $element = $(item.element);
                        if (item.hasItems && !item.ignoretheme) {
                            if (item.arrow) {
                                $(item.arrow).remove();
                            }
                            if (me.mode == 'simple') return true;

                            var $arrowSpan = $('<span style="border: none; background-color: transparent;" id="arrow' + $element[0].id + '"></span>');

                            $arrowSpan.prependTo($element);
                            $arrowSpan.css('float', 'right');

                            if (item.level == 0) {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-top-' + me._getDir('right')));
                                $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));
                            }
                            else {
                                $arrowSpan.addClass(me.toThemeProperty('jqx-menu-item-arrow-' + me._getDir('right')));
                                $arrowSpan.addClass(me.toThemeProperty('jqx-icon-arrow-' + me._getDir('right')));
                            }
                            item.arrow = $arrowSpan[0];
                        }
                        $element.css('float', 'none');
                    });

                    if (this.mode == 'popup') {
                        this.host.addClass(me.toThemeProperty('jqx-widget-content'));
                        this.host.wrap('<div class="jqx-menu-wrapper" style="z-index:' + this.popupZIndex + '; border: none; background-color: transparent; padding: 0px; margin: 0px; position: absolute; top: 0; left: 0; display: block; visibility: visible;"></div>')
                        var $popupElementparent = this.host.closest('div.jqx-menu-wrapper')
                        this.host.addClass(me.toThemeProperty('jqx-popup'));
                        $popupElementparent[0].id = "menuWrapper" + this.element.id;
                        $popupElementparent.appendTo($(document.body));
                    }
                    else {
                        this.host.addClass(me.toThemeProperty('jqx-widget-header'));
                    }

                    if (this.mode == 'popup') {
                        var height = this.host.height();
                        this.host.css('position', 'absolute');
                        this.host.css('top', '0');
                        this.host.css('left', '0');
                        if (this.mode != "simple") {
                            this.host.height(height);
                            this.host.css('display', 'none');
                        }
                    }
                    break;
            }
            var isTouchDevice = this.isTouchDevice();
            if (this.autoCloseOnClick) {
                this.removeHandler($(document), 'mousedown.menu' + this.element.id, me._closeAfterClick);
                this.addHandler($(document), 'mousedown.menu' + this.element.id, me._closeAfterClick, me);
                if (isTouchDevice) {
                    this.removeHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.menu' + this.element.id, me._closeAfterClick, me);
                    this.addHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.menu' + this.element.id, me._closeAfterClick, me);
                }
            }
        },

        _getBodyOffset: function () {
            var top = 0;
            var left = 0;
            if ($('body').css('border-top-width') != '0px') {
                top = parseInt($('body').css('border-top-width'));
                if (isNaN(top)) top = 0;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt($('body').css('border-left-width'));
                if (isNaN(left)) left = 0;
            }
            return { left: left, top: top };
        },

        _getOffset: function (object) {
     //       var scrollTop = $(window).scrollTop();
     //       var scrollLeft = $(window).scrollLeft();
            var isSafari = $.jqx.mobile.isSafariMobileBrowser();

            var offset = $(object).coord(true);
            var top = offset.top;
            var left = offset.left;

            if ($('body').css('border-top-width') != '0px') {
                top = parseInt(top) + this._getBodyOffset().top;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt(left) + this._getBodyOffset().left;
            }

            var windowsPhone = $.jqx.mobile.isWindowsPhone();
            if (this.hasTransform || (isSafari != null && isSafari) || windowsPhone) {
                var point = { left: $.jqx.mobile.getLeftPos(object), top: $.jqx.mobile.getTopPos(object) };
                return point;
            }
            else return { left: left, top: top };
        },

        _isRightClick: function (e) {
            var rightclick;
            if (!e) var e = window.event;
            if (e.which) rightclick = (e.which == 3);
            else if (e.button) rightclick = (e.button == 2);
            return rightclick;
        },

        _openContextMenu: function (e) {
            var me = this;
            var rightclick = me._isRightClick(e);

            if (rightclick) {
                me.open(parseInt(e.clientX) + 5, parseInt(e.clientY) + 5);
            }
        },

        // closes a context menu.
        close: function () {
            var me = this;
            var opened = $.data(this.element, 'contextMenuOpened' + this.element.id);
            if (opened) {
                var host = this.host;
                $.each(me.items, function () {
                    var item = this;
                    if (item.hasItems) {
                        me._closeItem(me, item);
                    }
                });

                $.each(me.items, function () {
                    var item = this;
                    if (item.isOpen == true) {
                        $submenu = $(item.subMenuElement);
                        var $popupElement = $submenu.closest('div.jqx-menu-popup')
                        $popupElement.hide(this.animationHideDuration);

                    }
                });

                this.host.hide(this.animationHideDuration);
                $.data(me.element, 'contextMenuOpened' + this.element.id, false);
                me._raiseEvent('1', me);
            }
        },

        // @param String. Horizontal offset
        // @param String. Vertical Offset
        // opens a context menu.
        open: function (left, top) {
            if (this.mode == 'popup') {
                var duration = 0;
                if (this.host.css('display') == 'block') {
                    this.close();
                    duration = this.animationHideDuration;
                }

                var me = this;

                if (left == undefined || left == null) left = 0;
                if (top == undefined || top == null) top = 0;

                setTimeout(function () {
                    me.host.show(me.animationShowDuration);
                    me.host.css('visibility', 'visible');
                    $.data(me.element, 'contextMenuOpened' + me.element.id, true);
                    me._raiseEvent('0', me);
                    me.host.css('z-index', 9999);

                    if (left != undefined && top != undefined) {
                        me.host.css({ 'left': left, 'top': top });
                    }
                }, duration);
            }
        },

        _renderHover: function ($menuElement, item, isTouchDevice) {
            var me = this;
            if (!item.ignoretheme) {
                this.addHandler($menuElement, 'mouseenter', function () {
                    if (!item.disabled && !item.separator && me.enableHover && !me.disabled) {
                        if (item.level > 0) {
                            $menuElement.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                            $menuElement.addClass(me.toThemeProperty('jqx-menu-item-hover'));
                        }
                        else {
                            $menuElement.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                            $menuElement.addClass(me.toThemeProperty('jqx-menu-item-top-hover'));
                        }
                    }
                });
                this.addHandler($menuElement, 'mouseleave', function () {            
                if (!item.disabled && !item.separator && me.enableHover && !me.disabled) {
                    if (item.level > 0) {
                        $menuElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                        $menuElement.removeClass(me.toThemeProperty('jqx-menu-item-hover'));
                    }
                    else {
                        $menuElement.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                        $menuElement.removeClass(me.toThemeProperty('jqx-menu-item-top-hover'));
                    }
                }
            });
            }            
        },

        _closeAfterClick: function (event) {
            var me = event != null ? event.data : this;
            var matches = false;
            if (me.autoCloseOnClick) {
                $.each($(event.target).parents(), function () {
                    if (this.className.indexOf) {
                        if (this.className.indexOf('jqx-menu') != -1) {
                            matches = true;
                            return false;
                        }
                    }
                });

                if (!matches) {
                    event.data = me;
                    me._closeAll(event);
                }
            }
        },

        _autoSizeHorizontalMenuItems: function () {
            var me = this;
            if (me.autoSizeMainItems && this.mode == "horizontal") {
                var maxHeight = this.maxHeight;
                if (parseInt(maxHeight) > parseInt(this.host.height())) {
                    maxHeight = parseInt(this.host.height());
                }
                maxHeight = parseInt(this.host.height());

                // align vertically the items.
                $.each(this.items, function () {
                    var item = this;
                    $element = $(item.element);
                    if (item.level == 0 && maxHeight > 0) {
                        var childrenHeight = $element.children().length > 0 ? parseInt($element.children().height()) : $element.height();
                        // vertically align content.
                        var $ul = me.host.find('ul:first');
                        var paddingOffset = parseInt($ul.css('padding-top'));
                        var marginOffset = parseInt($ul.css('margin-top'));
                        //   var borderOffset = parseInt(me.host.css('border-top-width'));
                        var height = maxHeight - 2 * (marginOffset + paddingOffset);
                        var newPadding = parseInt(height) / 2 - childrenHeight / 2;
                        var topPadding = parseInt(newPadding);
                        var bottomPadding = parseInt(newPadding);
                        $element.css('padding-top', topPadding);
                        $element.css('padding-bottom', bottomPadding);

                        if (parseInt($element.outerHeight()) > height) {
                            var offset = 1;
                            $element.css('padding-top', topPadding - offset);
                            topPadding = topPadding - offset;
                        }
                    }
                });
            }
            $.each(this.items, function () {
                var item = this;
                $element = $(item.element);
                if (item.hasItems && item.level > 0) {
                    if (item.arrow)
                    {
                        var $arrowSpan = $(item.arrow);
                        var height = $(item.element).height();
                        if (height > 15) {
                            $arrowSpan.css('margin-top', (height - 15) / 2);
                        }
                    }
                }
            });
        },

        _render: function (mode, oldMode) {
            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this.host.addClass(this.toThemeProperty('jqx-menu-disabled'));
            }
            var zIndex = this.popupZIndex;
            var popupElementoffset = [5, 5];
            var me = this;
            $.data(me.element, 'animationHideDelay', me.animationHideDelay);
            var isTouchDevice = this.isTouchDevice();

            var WP = isTouchDevice && ($.jqx.mobile.isWindowsPhone() || navigator.userAgent.indexOf('Touch') >= 0);
            var WPTablet = false;
            if (navigator.platform.toLowerCase().indexOf('win') != -1) {
                if (navigator.userAgent.indexOf('Windows Phone') >= 0 || navigator.userAgent.indexOf('WPDesktop') >= 0 || navigator.userAgent.indexOf('IEMobile') >= 0 || navigator.userAgent.indexOf('ZuneWP7') >= 0) {
                    this.touchDevice = true;
                 }
                else {
                    if (navigator.userAgent.indexOf('Touch') >= 0) {
                        var supported = ('MSPointerDown' in window);
                        if (supported || $.jqx.mobile.isWindowsPhone() || navigator.userAgent.indexOf('ARM') >= 0) {
                            WPTablet = true;
                            WP = true;
                            me.clickToOpen = true;
                            me.autoCloseOnClick = false;
                            me.enableHover = false;
                        }
                    }
                }
            }
            $.data(document.body, 'menuel', this);

            this.hasTransform = $.jqx.utilities.hasTransform(this.host);

            this._applyOrientation(mode, oldMode);

            if (me.enableRoundedCorners) {
                this.host.addClass(me.toThemeProperty('jqx-rc-all'));
            }

            $.each(this.items, function () {
                var item = this;
                var $menuElement = $(item.element);
                $menuElement.attr('role', 'menuitem');
                if (me.enableRoundedCorners) {
                    $menuElement.addClass(me.toThemeProperty('jqx-rc-all'));
                }

                me.removeHandler($menuElement, 'click');
                me.addHandler($menuElement, 'click', function (e) {
                    if (item.disabled)
                        return;

                    if (me.disabled)
                        return;

                    me._raiseEvent('2', { item: item.element, event: e });

                    if (!me.autoOpen) {
                        if (item.level > 0) {
                            if (me.autoCloseOnClick && !isTouchDevice && !me.clickToOpen) {
                                e.data = me;
                                me._closeAll(e);
                            }
                        }
                    }
                    else if (me.autoCloseOnClick && !isTouchDevice && !me.clickToOpen) {
                        if (item.closeOnClick) {
                            e.data = me;
                            me._closeAll(e);
                        }
                    }
                    if (isTouchDevice && me.autoCloseOnClick) {
                        e.data = me;
                        if (!item.hasItems) {
                            me._closeAll(e);
                        }
                    }

                    if (e.target.tagName != 'A' && e.target.tagName != 'a') {
                        var anchor = item.anchor != null ? $(item.anchor) : null;

                        if (anchor != null && anchor.length > 0) {
                            var href = anchor.attr('href');
                            var target = anchor.attr('target');
                            if (href != null) {
                                if (target != null) {
                                    window.open(href, target);
                                }
                                else {
                                    window.location = href;
                                }
                            }
                        }
                    }
                });

                me.removeHandler($menuElement, 'mouseenter');
                me.removeHandler($menuElement, 'mouseleave');

                if (!WP && me.mode != 'simple') {
                    me._renderHover($menuElement, item, isTouchDevice);
                }
                if (item.subMenuElement != null) {
                    var $submenu = $(item.subMenuElement);
                    if (me.mode == 'simple') {
                        $submenu.show();
                        return true;
                    }
                    $submenu.wrap('<div class="jqx-menu-popup ' + me.toThemeProperty('jqx-menu-popup') + '" style="border: none; background-color: transparent; z-index:' + zIndex + '; padding: 0px; margin: 0px; position: absolute; top: 0; left: 0; display: block; visibility: hidden;"><div style="background-color: transparent; border: none; position:absolute; overflow:hidden; left: 0; top: 0; right: 0; width: 100%; height: 100%;"></div></div>')
                    $submenu.css({ overflow: 'hidden', position: 'absolute', left: 0, display: 'inherit', top: -$submenu.outerHeight() })
                    $submenu.data('timer', {});
                    if (item.level > 0) {
                        $submenu.css('left', -$submenu.outerWidth());
                    }
                    else if (me.mode == 'horizontal') {
                        $submenu.css('left', 0);
                    }

                    zIndex++;
                    var $popupElement = $(item.subMenuElement).closest('div.jqx-menu-popup').css({ width: parseInt($(item.subMenuElement).outerWidth()) + parseInt(popupElementoffset[0]) + 'px', height: parseInt($(item.subMenuElement).outerHeight()) + parseInt(popupElementoffset[1]) + 'px' })
                    var $popupElementparent = $menuElement.closest('div.jqx-menu-popup')

                    if ($popupElementparent.length > 0) {
                        var oldsubleftmargin = $submenu.css('margin-left');
                        var oldsubrightmargin = $submenu.css('margin-right');
                        var oldsubleftpadding = $submenu.css('padding-left');
                        var oldsubrightpadding = $submenu.css('padding-right');

                        $popupElement.appendTo($popupElementparent)

                        $submenu.css('margin-left', oldsubleftmargin);
                        $submenu.css('margin-right', oldsubrightmargin);
                        $submenu.css('padding-left', oldsubleftpadding);
                        $submenu.css('padding-right', oldsubrightpadding);
                    }
                    else {
                        var oldsubleftmargin = $submenu.css('margin-left');
                        var oldsubrightmargin = $submenu.css('margin-right');
                        var oldsubleftpadding = $submenu.css('padding-left');
                        var oldsubrightpadding = $submenu.css('padding-right');

                        $popupElement.appendTo($(document.body));
                        $submenu.css('margin-left', oldsubleftmargin);
                        $submenu.css('margin-right', oldsubrightmargin);
                        $submenu.css('padding-left', oldsubleftpadding);
                        $submenu.css('padding-right', oldsubrightpadding);
                    }

                    if (!me.clickToOpen) {
                        if (isTouchDevice || WP) {
                            me.removeHandler($menuElement, $.jqx.mobile.getTouchEventName('touchstart'));
                            me.addHandler($menuElement, $.jqx.mobile.getTouchEventName('touchstart'), function (event) {
                                clearTimeout($submenu.data('timer').hide)
                                if ($submenu != null) {
                                    $submenu.stop();
                                }

                                if (item.level == 0 && !item.isOpen && me.mode != "popup") {
                                    event.data = me;
                                    me._closeAll(event);
                                }

                                if (!item.isOpen) {
                                    me._openItem(me, item);
                                }
                                else {
                                    me._closeItem(me, item, true);
                                }
                                return false;
                            });
                        }

                        if (!WP) {
                            me.addHandler($menuElement, 'mouseenter', function () {
                                if (me.autoOpen || (item.level > 0 && !me.autoOpen)) {
                                    clearTimeout($submenu.data('timer').hide)
                                }

                                if (item.parentId && item.parentId != 0) {
                                    if (me.menuElements[item.parentId]) {
                                        var openedStateOfParent = me.menuElements[item.parentId].isOpen;
                                        if (!openedStateOfParent) {
                                            return;
                                        }
                                    }
                                }

                                if (me.autoOpen || (item.level > 0 && !me.autoOpen)) {
                                    me._openItem(me, item);
                                }
                                return false;
                            });

                            me.addHandler($menuElement, 'mousedown', function () {
                                if (!me.autoOpen && item.level == 0) {
                                    clearTimeout($submenu.data('timer').hide)
                                    if ($submenu != null) {
                                        $submenu.stop();
                                    }

                                    if (!item.isOpen) {
                                        me._openItem(me, item);
                                    }
                                    else {
                                        me._closeItem(me, item, true);
                                    }
                                }
                            });

                            me.addHandler($menuElement, 'mouseleave', function (event) {
                                if (me.autoCloseOnMouseLeave) {
                                    clearTimeout($submenu.data('timer').hide)
                                    var $subMenu = $(item.subMenuElement);
                                    var position = { left: parseInt(event.pageX), top: parseInt(event.pageY) };
                                    var subMenuBounds = {
                                        left: parseInt($subMenu.coord().left), top: parseInt($subMenu.coord().top),
                                        width: parseInt($subMenu.outerWidth()), height: parseInt($subMenu.outerHeight())
                                    };

                                    var closeItem = true;
                                    if (subMenuBounds.left - 5 <= position.left && position.left <= subMenuBounds.left + subMenuBounds.width + 5) {
                                        if (subMenuBounds.top <= position.top && position.top <= subMenuBounds.top + subMenuBounds.height) {
                                            closeItem = false;
                                        }
                                    }

                                    if (closeItem) {
                                        me._closeItem(me, item, true);
                                    }
                                }
                            });

                            me.removeHandler($popupElement, 'mouseenter');
                            me.addHandler($popupElement, 'mouseenter', function () {
                                clearTimeout($submenu.data('timer').hide)
                            });

                            me.removeHandler($popupElement, 'mouseleave');
                            me.addHandler($popupElement, 'mouseleave', function (e) {
                                if (me.autoCloseOnMouseLeave) {
                                    clearTimeout($submenu.data('timer').hide)
                                    clearTimeout($submenu.data('timer').show);
                                    if ($submenu != null) {
                                        $submenu.stop();
                                    }
                                    me._closeItem(me, item, true);
                                }
                            });
                        }
                    }
                    else {
                        me.removeHandler($menuElement, 'mousedown');
                        me.addHandler($menuElement, 'mousedown', function (event) {

                            clearTimeout($submenu.data('timer').hide)
                            if ($submenu != null) {
                                $submenu.stop();
                            }

                            if (item.level == 0 && !item.isOpen) {
                                event.data = me;
                                me._closeAll(event);
                            }

                            if (!item.isOpen) {
                                me._openItem(me, item);
                            }
                            else {
                                me._closeItem(me, item, true);
                            }
                        });
                    }
                }
            });

            if (this.mode == "simple") {
                this._renderSimpleMode()
            }

            this._autoSizeHorizontalMenuItems();
            this._raiseEvent('3', this);
        },

        _renderSimpleMode: function()
        {
            this.host.show();
        },

        createID: function () {
            var id = Math.random() + '';
            id = id.replace('.', '');
            id = '99' + id;
            id = id / 1;
            while (this.items[id]) {
                id = Math.random() + '';
                id = id.replace('.', '');
                id = id / 1;
            }
            return 'menuItem' + id;
        },

        _createMenu: function (uiObject, refresh) {
            if (uiObject == null)
                return;

            if (refresh == undefined) {
                refresh = true;
            }
            if (refresh == null) {
                refresh = true;
            }

            var self = this;
            var liTags = $(uiObject).find('li');
            var k = 0;
            for (var index = 0; index < liTags.length; index++) {
                var listItem = liTags[index];
                var $listItem = $(listItem);

                if (listItem.className.indexOf('jqx-menu') == -1 && this.autoGenerate == false)
                    continue;

                var id = listItem.id;
                if (!id) {
                    id = this.createID();
                }

                if (refresh) {
                    listItem.id = id;
                    this.items[k] = new $.jqx._jqxMenu.jqxMenuItem();
                    this.menuElements[id] = this.items[k];
                }

                k += 1;
                var parentId = 0;
                var me = this;
                var children = $listItem.children();
                children.each(function () {
                    if (!refresh) {
                        this.className = "";

                        if (me.autoGenerate) {
                            $(me.items[k - 1].subMenuElement)[0].className = "";
                            if (!me.minimized) {
                                $(me.items[k - 1].subMenuElement).addClass(me.toThemeProperty('jqx-widget-content'));
                            }
                            $(me.items[k - 1].subMenuElement).addClass(me.toThemeProperty('jqx-menu-dropdown'));
                            $(me.items[k - 1].subMenuElement).addClass(me.toThemeProperty('jqx-popup'));
                        }
                    }

                    if (this.className.indexOf('jqx-menu-dropdown') != -1) {
                        if (refresh) {
                            me.items[k - 1].subMenuElement = this;
                        }
                        return false;
                    }
                    else if (me.autoGenerate && (this.tagName == 'ul' || this.tagName == 'UL')) {
                        if (refresh) {
                            me.items[k - 1].subMenuElement = this;
                        }
                        this.className = "";
                        if (!me.minimized) {
                            $(this).addClass(me.toThemeProperty('jqx-widget-content'));
                        }
                        $(this).addClass(me.toThemeProperty('jqx-menu-dropdown'));
                        $(this).addClass(me.toThemeProperty('jqx-popup'));
                        $(this).attr('role', 'menu');
                        if (me.rtl) {
                            $(this).addClass(me.toThemeProperty('jqx-rc-l'));
                        }
                        else {
                            $(this).addClass(me.toThemeProperty('jqx-rc-r'));
                        }
                        $(this).addClass(me.toThemeProperty('jqx-rc-b'));

                        return false;
                    }
                });

                var parents = $listItem.parents();
                parents.each(function () {
                    if (this.className.indexOf('jqx-menu-item') != -1) {
                        parentId = this.id;
                        return false;
                    }
                    else if (me.autoGenerate && (this.tagName == 'li' || this.tagName == 'LI')) {
                        parentId = this.id;
                        return false;
                    }

                });

                var separator = false;
                var type = listItem.getAttribute('type');
                var ignoretheme = listItem.getAttribute('ignoretheme') || listItem.getAttribute('data-ignoretheme');

                if (ignoretheme) {
                    if (ignoretheme == 'true' || ignoretheme == true) {
                        ignoretheme = true;
                    }
                }
                else ignoretheme = false;

                if (!type) {
                    type = listItem.type;
                }
                else {
                    if (type == 'separator') {
                        var separator = true;
                    }
                }

                if (!separator) {
                    if (parentId) {
                        type = 'sub';
                    }
                    else type = 'top';
                }

                var menuItem = this.items[k - 1];
                if (refresh) {
                    menuItem.id = id;
                    menuItem.parentId = parentId;
                    menuItem.type = type;
                    menuItem.separator = separator;
                    menuItem.element = liTags[index];
                    var anchor = $listItem.children('a');
                    menuItem.level = $listItem.parents('li').length;
                    menuItem.anchor = anchor.length > 0 ? anchor : null;
                }
                menuItem.ignoretheme = ignoretheme;

                var parentItem = this.menuElements[parentId];
                if (parentItem != null) {
                    if (parentItem.ignoretheme) {
                        menuItem.ignoretheme = parentItem.ignoretheme;
                        ignoretheme = parentItem.ignoretheme;
                    }
                }

                if (this.autoGenerate) {
                    if (type == 'separator') {
                        $listItem.removeClass();
                        $listItem.addClass(this.toThemeProperty('jqx-menu-item-separator'));
                        $listItem.attr('role', 'separator');
                    }
                    else {
                        if (!ignoretheme) {
                            $listItem[0].className = "";
                            if (this.rtl) {
                                $listItem.addClass(this.toThemeProperty('jqx-rtl'));
                            }
                            if (menuItem.level > 0 && !me.minimized) {
                                $listItem.addClass(this.toThemeProperty('jqx-item'));
                                $listItem.addClass(this.toThemeProperty('jqx-menu-item'));
                            }
                            else {
                                $listItem.addClass(this.toThemeProperty('jqx-item'));
                                $listItem.addClass(this.toThemeProperty('jqx-menu-item-top'));
                            }
                        }
                    }
                }

                if (refresh && !ignoretheme) {
                    menuItem.hasItems = $listItem.find('li').length > 0;
                    if (menuItem.hasItems) {
                        if (menuItem.element) {
                            $.jqx.aria($(menuItem.element), "aria-haspopup", true);
                            if (!menuItem.subMenuElement.id) menuItem.subMenuElement.id = $.jqx.utilities.createId();
                            $.jqx.aria($(menuItem.element), "aria-owns", menuItem.subMenuElement.id);
                        }
                    }
                }
            }
        },

        destroy: function () {
            $.jqx.utilities.resize(this.host, null, true);
            var wrapper = this.host.closest('div.jqx-menu-wrapper');
            wrapper.remove();
            $("#menuWrapper" + this.element.id).remove();
            var me = this;
            this.removeHandler($(document), 'mousedown.menu' + this.element.id, me._closeAfterClick);
            this.removeHandler($(document), 'mouseup.menu' + this.element.id, me._closeAfterClick);
            $.data(document.body, 'jqxMenuOldHost' + this.element.id, null);
            if (this.isTouchDevice()) {
                this.removeHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.menu' + this.element.id, this._closeAfterClick, this);
            }

            if ($(window).off) {
                $(window).off('resize.menu' + me.element.id);
            }
            $.each(this.items, function () {
                var item = this;
                var $menuElement = $(item.element);
                me.removeHandler($menuElement, 'click');
                me.removeHandler($menuElement, 'selectstart');
                me.removeHandler($menuElement, 'mouseenter');
                me.removeHandler($menuElement, 'mouseleave');
                me.removeHandler($menuElement, 'mousedown');
                me.removeHandler($menuElement, 'mouseleave');
                var $submenu = $(item.subMenuElement);
                var $popupElement = $submenu.closest('div.jqx-menu-popup');
                $popupElement.remove();
                delete this.subMenuElement;
                delete this.element;
            });
            $.data(document.body, 'menuel', null);
            delete this.menuElements;
            this.items = new Array();
            delete this.items;
            var vars = $.data(this.element, "jqxMenu");
            if (vars) {
                delete vars.instance;
            }

            this.host.removeClass();
            this.host.remove();
            delete this.host;
            delete this.element;
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            args = arg;
            args.owner = this;

            var event = new jQuery.Event(evt);
            if (id == '2') {
                args = arg.item;
                args.owner = this;
                $.extend(event, arg.event);
                event.type = 'itemclick';
            }

            event.owner = this;
            event.args = args;
            var result = this.host.trigger(event);
            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == "disabled") {
                if (object.disabled) {
                    object.host.addClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    object.host.addClass(self.toThemeProperty('jqx-menu-disabled'));
                }
                else {
                    object.host.removeClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    object.host.removeClass(self.toThemeProperty('jqx-menu-disabled'));
                }
            }

            if (value == oldvalue)
                return;

            if (key == 'touchMode') {
                this._isTouchDevice = null;
                object._render(value, oldvalue);
            }

            if (key == 'source') {
                if (object.source != null) {
                    var html = object.loadItems(object.source);
                    object.element.innerHTML = html;
                    var innerElement = object.host.find('ul:first');
                    if (innerElement.length > 0) {
                        object.refresh();
                        object._createMenu(innerElement[0]);
                        object._render();
                    }
                }
            }

            if (key == 'autoCloseOnClick') {
                if (value == false) {
                    object.removeHandler($(document), 'mousedown.menu' + this.element.id, object._closeAll);
                }
                else {
                    object.addHandler($(document), 'mousedown.menu' + this.element.id, object, object._closeAll);
                }
            }
            else if (key == 'mode' || key == 'width' || key == 'height' || key == 'showTopLevelArrows') {
                object.refresh();

                if (key == 'mode') {
                    object._render(value, oldvalue);
                }
                else object._applyOrientation();
            }
            else if (key == 'theme') {
                $.jqx.utilities.setTheme(oldvalue, value, object.host);
            }
        }
    });
})(jQuery);

(function ($) {
    $.jqx._jqxMenu.jqxMenuItem = function(id, parentId, type) {
        var menuItem =
        {
            // gets the id.
    	    id: id,
            // gets the parent id.
            parentId: parentId,
            // gets the parent item instance.
            parentItem: null,
            // gets the anchor element.
            anchor: null,
            // gets the type
            type: type,
            // gets whether the item is disabled.
            disabled: false,
            // gets the item's level.
            level: 0,
            // gets a value whether the item is opened.
            isOpen: false,
            // has sub elements.
            hasItems: false,
            // li element
            element: null,
            subMenuElement: null,
            // arrow element.
            arrow: null,
            // left, right, center
            openHorizontalDirection: 'right',
            // up, down, center
            openVerticalDirection: 'down',
            closeOnClick: true
         }
        return menuItem;
    }; // 
})(jQuery);

/*
 * file from "src\jqxlistbox.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/


(function ($) {

    $.jqx.jqxWidget("jqxListBox", "", {});

    $.extend($.jqx._jqxListBox.prototype, {
        defineInstance: function () {
            // Type: Boolean
            // Default: true    
            // enables/disables the listbox.
            this.disabled = false;
            // gets or sets the listbox width.
            this.width = null;
            // gets or sets the listbox height.
            this.height = null;
            // Represents the collection of list items.
            this.items = new Array();
            // Type: Boolean
            // Default: false
            // enables/disables the multiple selection.
            this.multiple = false;
            // Gets or sets the selected index.
            this.selectedIndex = -1;
            // Gets the selected item indexes.
            this.selectedIndexes = new Array();
            // Type: Object
            // Default: null
            // data source.
            this.source = null;
            // Type: Number
            // Default: 15
            // gets or sets the scrollbars size.
            this.scrollBarSize = $.jqx.utilities.scrollBarSize;
            // Type: Boolean
            // Default: true
            // enables/disables the hover state.
            this.enableHover = true;
            // Type: Boolean
            // Default: true
            // enables/disables the selection.
            this.enableSelection = true;
            // gets the visible items. // this property is internal for the listbox.
            this.visualItems = new Array();
            // gets the groups. // this property is internal for the listbox.
            this.groups = new Array();
            // Type: Boolean
            // Default: true
            // gets or sets whether the items width should be equal to the listbox's width.
            this.equalItemsWidth = true;
            // gets or sets the height of the ListBox Items. When the itemHeight == - 1, each item's height is equal to its desired height.
            this.itemHeight = -1;
            // this property is internal for the listbox.
            this.visibleItems = new Array();
            // Type: String
            // Default: Group
            // represents the text of the empty group. This is displayed only when the items are not loaded from html select element.
            this.emptyGroupText = 'Group';
            // Type: Boolean
            // Default: false
            // Gets or sets whether the listbox should display a checkbox next to each item.
            this.checkboxes = false;
            // Type: Boolean
            // Default: false
            // Gets or sets whether the listbox checkboxes have three states - checked, unchecked and indeterminate.           
            this.hasThreeStates = false;
            // Type: Boolean
            // Default: false
            // Gets or sets whether the listbox's height is equal to the sum of its items height          
            this.autoHeight = false;
            this.autoItemsHeight = false;
            // represents the listbox's events.    
            // Type: Boolean
            // Default: true
            // Gets or sets whether the listbox items are with rounded corners.         
            this.roundedcorners = true;
            this.touchMode = 'auto';
            this.displayMember = "";
            this.valueMember = "";
            // Type: String
            // Default: startswithignorecase
            // Possible Values: 'none, 'contains', 'containsignorecase', 'equals', 'equalsignorecase', 'startswithignorecase', 'startswith', 'endswithignorecase', 'endswith'
            this.searchMode = 'startswithignorecase';
            this.incrementalSearch = true;
            this.incrementalSearchDelay = 1000;
            this.incrementalSearchKeyDownDelay = 300;
            this.allowDrag = false;
            this.allowDrop = true;
            // Possible values: 'none, 'default', 'copy'
            this.dropAction = 'default';
            this.touchModeStyle = 'auto';
            this.keyboardNavigation = true;
            this.enableMouseWheel = true;
            this.multipleextended = false;
            this.emptyString = "null";
            this.rtl = false;
            this.rendered = null;
            this.renderer = null;
            this.dragStart = null;
            this.dragEnd = null;
            this.ready = null;
            this._checkForHiddenParent = true;
            this.aria =
            {
                "aria-disabled": { name: "disabled", type: "boolean" }
            };
            this.events =
            [
            // triggered when the user selects an item.
                'select',
            // triggered when the user unselects an item.
                'unselect',
            // triggered when the selection is changed.
                'change',
            // triggered when the user checks or unchecks an item. 
                'checkChange',
            // triggered when the user drags an item. 
               'dragStart',
            // triggered when the user drops an item. 
               'dragEnd',
            // triggered when the binding is completed.
               'bindingComplete'
            ];
        },

        createInstance: function (args) {
            if ($.jqx.utilities.scrollBarSize != 15) {
                this.scrollBarSize = $.jqx.utilities.scrollBarSize;
            }
            if (this.width == null) this.width = 200;
            if (this.height == null) this.height = 200;
            this.render();
            var that = this;
            $.jqx.utilities.resize(this.host, function () {
                that._updateSize();
            }, false, this._checkForHiddenParent);
        },

        resize: function (width, height) {
            this.width = width;
            this.height = height;
            this._updateSize();
        },

        render: function () {
            this.element.innerHTML = "";
            var self = this;

            var className = this.element.className;

            className += " " + this.toThemeProperty("jqx-listbox");
            className += " " + this.toThemeProperty("jqx-reset");
            className += " " + this.toThemeProperty("jqx-rc-all");
            className += " " + this.toThemeProperty("jqx-widget");
            className += " " + this.toThemeProperty("jqx-widget-content");

            this.element.className = className;

            var isPercentage = false;

            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                this.host.width(this.width);
                isPercentage = true;
            }
            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                this.host.height(this.height);
                if (this.host.height() == 0) {
                    this.host.height(200);
                }
                isPercentage = true;
            }
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.element.style.width = parseInt(this.width) + 'px';
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.element.style.height = parseInt(this.height) + 'px';
            };

            if (this.multiple || this.multipleextended || this.checkboxes) {
                $.jqx.aria(this, "aria-multiselectable", true);
            }
            else {
                $.jqx.aria(this, "aria-multiselectable", false);
            }

            var listBoxStructure = $("<div style='-webkit-appearance: none; background: transparent; outline: none; width:100%; height: 100%; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'>" +
                "<div style='-webkit-appearance: none; border: none; background: transparent; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; align:left; left: 0px; top: 0px; valign:top; position: relative;'>" +
                "<div id='listBoxContent' style='-webkit-appearance: none; border: none; background: transparent; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='verticalScrollBar" + this.element.id + "' style='visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='horizontalScrollBar" + this.element.id + "' style='visibility: inherit; align:left; valign:top; left: 0px; top: 0px; position: absolute;'/>" +
                "<div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; border: none; position: absolute;'/>" +
                "</div>" +
                "</div>");
            if (this._checkForHiddenParent) {
                this._addInput();
                if (!this.host.attr('tabIndex')) {
                    this.host.attr('tabIndex', 1);
                }
            }

            this.host.attr('role', 'listbox');

            this.host.append(listBoxStructure);
            var verticalScrollBar = this.host.find("#verticalScrollBar" + this.element.id);
            if (!this.host.jqxButton) {
                throw new Error('jqxListBox: Missing reference to jqxbuttons.js.');
                return;
            }
            if (!verticalScrollBar.jqxScrollBar) {
                throw new Error('jqxListBox: Missing reference to jqxscrollbar.js.');
                return;
            }

            var largestep = parseInt(this.host.height()) / 2;
            if (largestep == 0) largestep = 10;

            this.vScrollBar = verticalScrollBar.jqxScrollBar({ _initialLayout: true, 'vertical': true, rtl: this.rtl, theme: this.theme, touchMode: this.touchMode, largestep: largestep });
            var horizontalScrollBar = this.host.find("#horizontalScrollBar" + this.element.id);
            this.hScrollBar = horizontalScrollBar.jqxScrollBar({ _initialLayout: true, 'vertical': false, rtl: this.rtl, touchMode: this.touchMode, theme: this.theme });

            this.content = this.host.find("#listBoxContent");
            this.content[0].id = 'listBoxContent' + this.element.id;
            this.bottomRight = this.host.find("#bottomRight").addClass(this.toThemeProperty('jqx-listbox-bottomright')).addClass(this.toThemeProperty('jqx-scrollbar-state-normal'));
            this.bottomRight[0].id = "bottomRight" + this.element.id;
            this.vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            this.hScrollInstance = $.data(this.hScrollBar[0], 'jqxScrollBar').instance;
            if (this.isTouchDevice()) {
                if (!($.jqx.browser.msie && $.jqx.browser.version < 9)) {
                    var overlayContent = $("<div class='overlay' style='z-index: 99; -webkit-appearance: none; border: none; background: black; opacity: 0.01; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>");
                    this.content.parent().append(overlayContent);
                    this.overlayContent = this.host.find('.overlay');
                }
            }
            this._updateTouchScrolling();

            this.host.addClass('jqx-disableselect');
            if (this.host.jqxDragDrop) {
                jqxListBoxDragDrop();
            }
        },

        _highlight: function (label, searchstring) {
            var query = searchstring.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
            return label.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
                return '<b>' + match + '</b>'
            });
        },

        _addInput: function () {
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            else {
                this.host.attr('name', "");
            }

            this.input = $("<input type='hidden'/>");
            this.host.append(this.input);
            this.input.attr('name', name);
        },

        _updateTouchScrolling: function () {
            var self = this;
            if (this.isTouchDevice()) {
                self.enableHover = false;
                var element = this.overlayContent ? this.overlayContent : this.content;

                this.removeHandler($(element), $.jqx.mobile.getTouchEventName('touchstart') + '.touchScroll');
                this.removeHandler($(element), $.jqx.mobile.getTouchEventName('touchmove') + '.touchScroll');
                this.removeHandler($(element), $.jqx.mobile.getTouchEventName('touchend') + '.touchScroll');
                this.removeHandler($(element), 'touchcancel.touchScroll');

                $.jqx.mobile.touchScroll(element, self.vScrollInstance.max, function (left, top) {
                    if (self.vScrollBar.css('visibility') != 'hidden') {
                        var oldValue = self.vScrollInstance.value;
                        self.vScrollInstance.setPosition(oldValue + top);
                        self._lastScroll = new Date();
                    }
                    if (self.hScrollBar.css('visibility') != 'hidden') {
                        var oldValue = self.hScrollInstance.value;
                        self.hScrollInstance.setPosition(oldValue + left);
                        self._lastScroll = new Date();
                    }
                }, this.element.id, this.hScrollBar, this.vScrollBar);

                if (self.vScrollBar.css('visibility') != 'visible' && self.hScrollBar.css('visibility') != 'visible') {
                    $.jqx.mobile.setTouchScroll(false, this.element.id);
                }
                else {
                    $.jqx.mobile.setTouchScroll(true, this.element.id);
                }
                this._arrange();
            }
        },

        isTouchDevice: function () {
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            if (this.touchMode == true) {
                if (this.touchDevice)
                    return true;

                if ($.jqx.browser.msie && $.jqx.browser.version < 9)
                    return false;

                this.touchDevice = true;
                isTouchDevice = true;
                $.jqx.mobile.setMobileSimulator(this.element);
            }
            else if (this.touchMode == false) {
                isTouchDevice = false;
            }
            if (isTouchDevice && this.touchModeStyle != false) {
                this.scrollBarSize = $.jqx.utilities.touchScrollBarSize;
            }
            if (isTouchDevice) {
                this.host.addClass(this.toThemeProperty('jqx-touch'));
            }

            return isTouchDevice;
        },

        beginUpdate: function () {
            this.updatingListBox = true;
        },

        endUpdate: function () {
            this.updatingListBox = false;
            this._addItems();
            this._renderItems();
        },

        beginUpdateLayout: function () {
            this.updating = true;
        },

        resumeUpdateLayout: function () {
            this.updating = false;
            this.vScrollInstance.value = 0;
            this._render(false);
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == "renderer") {
                object._cachedItemHtml = new Array();
                object.refresh();
            }

            if (key == "itemHeight") {
                object.refresh();
            }

            if (key == 'source' || key == 'checkboxes') {
                if (value == null && oldvalue && oldvalue.unbindBindingUpdate) {
                    oldvalue.unbindBindingUpdate(object.element.id);
                    oldvalue.unbindDownloadComplete(object.element.id);
                }

                object.clearSelection();
                object.refresh();
            }

            if (key == 'scrollBarSize' || key == 'equalItemsWidth') {
                if (value != oldvalue) {
                    object._updatescrollbars();
                }
            }

            if (key == 'disabled') {
                object._renderItems();
                object.vScrollBar.jqxScrollBar({ disabled: value });
                object.hScrollBar.jqxScrollBar({ disabled: value });
            }

            if (key == "touchMode" || key == "rtl") {
                object._removeHandlers();
                object.vScrollBar.jqxScrollBar({ touchMode: value });
                object.hScrollBar.jqxScrollBar({ touchMode: value });
                if (key == "touchMode") {
                    if (!($.jqx.browser.msie && $.jqx.browser.version < 9)) {
                        var overlayContent = $("<div class='overlay' style='z-index: 99; -webkit-appearance: none; border: none; background: black; opacity: 0.01; outline: none; border: none; padding: 0px; overflow: hidden; margin: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div>");
                        object.content.parent().append(overlayContent);
                        object.overlayContent = object.host.find('.overlay');
                    }
                }
                object._updateTouchScrolling();
                object._addHandlers();
                object._render(false);
            }

            if (!this.updating) {
                if (key == "width" || key == "height") {
                    object._updateSize();
                }
            }

            if (key == 'theme') {
                if (oldvalue != value) {
                    object.hScrollBar.jqxScrollBar({ theme: object.theme });
                    object.vScrollBar.jqxScrollBar({ theme: object.theme });
                    object.host.removeClass();
                    object.host.addClass(object.toThemeProperty("jqx-listbox"));
                    object.host.addClass(object.toThemeProperty("jqx-widget"));
                    object.host.addClass(object.toThemeProperty("jqx-widget-content"));
                    object.host.addClass(object.toThemeProperty("jqx-reset"));
                    object.host.addClass(object.toThemeProperty("jqx-rc-all"));
                    object.refresh();
                }
            }

            if (key == 'selectedIndex') {
                object.clearSelection();
                object.selectIndex(value, true);
            }

            if (key == "displayMember" || key == "valueMember") {
                if (oldvalue != value) {
                    var oldSelectedIndex = object.selectedIndex;
                    object.refresh();
                    object.selectedIndex = oldSelectedIndex;
                    object.selectedIndexes[oldSelectedIndex] = oldSelectedIndex;
                }
                object._renderItems();
            }

            if (key == 'autoHeight') {
                if (oldvalue != value) {
                    object._render(false);
                }
                else {
                    object._updatescrollbars();
                    object._renderItems();
                }
            }
            if (object._checkForHiddenParent && $.jqx.isHidden(object.host)) {
                $.jqx.utilities.resize(this.host, function () {
                    object._updateSize();
                }, false, object._checkForHiddenParent);
            }
        },

        loadFromSelect: function (id) {
            if (id == null)
                return;

            var searchElementId = '#' + id;
            var selectElement = $(searchElementId);
            if (selectElement.length > 0) {
                var options = selectElement.find('option');
                var groups = selectElement.find('optgroup');
                var index = 0;
                var selectedOption = -1;
                var optionItems = new Array();

                $.each(options, function () {
                    var hasGroup = groups.find(this).length > 0;
                    var group = null;

                    if (this.text != this.value && (this.label == null || this.label == '')) {
                        this.label = this.text;
                    }

                    var item = { disabled: this.disabled, value: this.value, label: this.label, title: this.title, originalItem: this };

                    var ie7 = $.jqx.browser.msie && $.jqx.browser.version < 8;
                    if (ie7) {
                        if (item.value == '' && this.text != null && this.text.length > 0) {
                            item.value = this.text;
                        }
                    }

                    if (hasGroup) {
                        group = groups.find(this).parent()[0].label;
                        item.group = group;
                    }

                    if (this.selected) selectedOption = index;
                    optionItems[index] = item;
                    index++;
                });

                this.source = optionItems;
                this.fromSelect = true;
                this.clearSelection();
                this.selectedIndex = selectedOption;
                this.selectedIndexes[this.selectedIndex] = this.selectedIndex;
                this.refresh();
            }
        },

        invalidate: function () {
            this._cachedItemHtml = [];
            this._renderItems();
            this.virtualSize = null;
            this._updateSize();
        },

        refresh: function (initialRefresh) {
            var me = this;
            if (this.vScrollBar == undefined) {
                return;
            }
            this._cachedItemHtml = [];
            this.visibleItems = new Array();
            var selectInitialItem = function (initialRefresh) {
                if (initialRefresh == true) {
                    if (me.selectedIndex != -1) {
                        var tmpIndex = me.selectedIndex;
                        me.selectedIndex = -1;
                        me._stopEvents = true;
                        me.selectIndex(tmpIndex, false, true);
                        if (me.selectedIndex == -1) {
                            me.selectedIndex = tmpIndex;
                        }
                        me._stopEvents = false;
                    }
                }
            }
            if (this.itemswrapper != null) {
                this.itemswrapper.remove();
                this.itemswrapper = null;
            }
            if ($.jqx.dataAdapter && this.source != null && this.source._source) {
                this.databind(this.source);
                selectInitialItem(initialRefresh);
                return;
            }
            this.items = this.loadItems(this.source);
            this._raiseEvent('6');

            this._render(false, initialRefresh == true);
            selectInitialItem(initialRefresh);
        },

        _render: function (ensurevisible, initialRefresh) {
            this._addItems();
            this._renderItems();
            this.vScrollInstance.setPosition(0);
            this._cachedItemHtml = new Array();
            if (ensurevisible == undefined || ensurevisible) {
                if (this.items != undefined && this.items != null) {
                    if (this.selectedIndex >= 0 && this.selectedIndex < this.items.length) {
                        this.selectIndex(this.selectedIndex, true, true, true);
                    }
                }
            }

            if (this.allowDrag && this._enableDragDrop) {
                this._enableDragDrop();
                if (this.isTouchDevice()) {
                    this._removeHandlers();
                    if (this.overlayContent) {
                        this.overlayContent.remove();
                        this.overlayContent = null;
                    }
                    this._updateTouchScrolling();
                    this._addHandlers();
                    return;
                }
            }
            this._updateTouchScrolling();
            if (this.rendered) {
                this.rendered();
            }
            if (this.ready) {
                this.ready();
            }
        },

        _hitTest: function (hitLeft, hitTop) {
            var top = parseInt(this.vScrollInstance.value);
            var firstIndex = this._searchFirstVisibleIndex(hitTop + top, this.renderedVisibleItems)
            if (this.renderedVisibleItems[firstIndex] != undefined && this.renderedVisibleItems[firstIndex].isGroup)
                return null;

            if (this.renderedVisibleItems.length > 0) {
                var lastItem = this.renderedVisibleItems[this.renderedVisibleItems.length - 1];
                if (lastItem.height + lastItem.top < hitTop + top) {
                    return null;
                }
            }

            firstIndex = this._searchFirstVisibleIndex(hitTop + top)
            return this.visibleItems[firstIndex];

            return null;
        },

        _searchFirstVisibleIndex: function (value, collection) {
            if (value == undefined) {
                value = parseInt(this.vScrollInstance.value);
            }
            var min = 0;
            if (collection == undefined || collection == null) {
                collection = this.visibleItems;
            }

            var max = collection.length;
            while (min <= max) {
                mid = parseInt((min + max) / 2)
                var item = collection[mid];
                if (item == undefined)
                    break;

                if (item.initialTop > value && item.initialTop + item.height > value) {
                    max = mid - 1;
                } else if (item.initialTop < value && item.initialTop + item.height <= value) {
                    min = mid + 1;
                } else {
                    return mid;
                    break;
                }
            }

            return 0;
        },

        _renderItems: function () {
            if (this.items == undefined || this.items.length == 0) {
                this.visibleItems = new Array();
                return;
            }

            if (this.updatingListBox == true)
                return;

            var touchDevice = this.isTouchDevice();
            var vScrollInstance = this.vScrollInstance;
            var hScrollInstance = this.hScrollInstance;
            var top = parseInt(vScrollInstance.value);
            var left = parseInt(hScrollInstance.value);
            if (this.rtl) {
                if (this.hScrollBar[0].style.visibility != 'hidden') {
                    left = hScrollInstance.max - left;
                }
            }

            var itemsLength = this.items.length;
            var hostWidth = this.host.width();
            var contentWidth = parseInt(this.content[0].style.width);
            var width = contentWidth + parseInt(hScrollInstance.max);
            var vScrollBarWidth = parseInt(this.vScrollBar[0].style.width) + 2;
            if (this.vScrollBar[0].style.visibility == 'hidden') {
                vScrollBarWidth = 0;
            }

            if (this.hScrollBar[0].style.visibility != 'visible') {
                width = contentWidth;
            }
            var virtualItemsCount = this._getVirtualItemsCount();
            var renderCollection = new Array();
            var y = 0;
            var hostHeight = parseInt(this.element.style.height) + 2;
            if (this.element.style.height.indexOf('%') != -1) {
                hostHeight = this.host.outerHeight();
            }

            if (isNaN(hostHeight)) {
                hostHeight = 0;
            }
            var maxWidth = 0;
            var visibleIndex = 0;
            var renderIndex = 0;

            if (vScrollInstance.value == 0 || this.visibleItems.length == 0) {
                for (var indx = 0; indx < this.items.length; indx++) {
                    var item = this.items[indx];
                    if (item.visible) {
                        item.top = -top;
                        item.initialTop = -top;
                        if (!item.isGroup && item.visible) {
                            this.visibleItems[visibleIndex++] = item;
                            item.visibleIndex = visibleIndex - 1;
                        }

                        this.renderedVisibleItems[renderIndex++] = item;

                        item.left = -left;
                        var bottom = item.top + item.height;
                        if (bottom >= 0 && item.top - item.height <= hostHeight) {
                            renderCollection[y++] = { index: indx, item: item };
                        }

                        top -= item.height;
                    }
                }
            }
            var firstIndex = top > 0 ? this._searchFirstVisibleIndex(this.vScrollInstance.value, this.renderedVisibleItems) : 0;
            var initialHeight = 0;
            y = 0;
            var scrollValue = this.vScrollInstance.value;
            var iterations = 0;
            while (initialHeight < 100 + hostHeight) {
                var item = this.renderedVisibleItems[firstIndex];
                if (item == undefined)
                    break;
                if (item.visible) {
                    item.left = -left;
                    var bottom = item.top + item.height - scrollValue;
                    if (bottom >= 0 && item.initialTop - scrollValue - item.height <= 2 * hostHeight) {
                        renderCollection[y++] = { index: firstIndex, item: item };
                    }
                }

                firstIndex++;
                if (item.visible) {
                    initialHeight += item.initialTop - scrollValue + item.height - initialHeight;
                }
                iterations++;
                if (iterations > this.items.length - 1)
                    break;
            }

            var listItemNormalClass = this.toThemeProperty('jqx-listitem-state-normal') + ' ' + this.toThemeProperty('jqx-item');
            var listItemGroupClass = this.toThemeProperty('jqx-listitem-state-group');
            var listItemDisabledClass = this.toThemeProperty('jqx-listitem-state-disabled') + ' ' + this.toThemeProperty('jqx-fill-state-disabled');
            var middle = 0;
            var me = this;
            for (var indx = 0; indx < this.visualItems.length; indx++) {
                var itemElement = this.visualItems[indx];
                var hideItem = function () {
                    var spanElement = itemElement[0].firstChild; // itemElement.find('#spanElement');
                    if (me.checkboxes) {
                        spanElement = itemElement[0].lastChild;
                    }

                    if (spanElement != null) {
                        spanElement.style.visibility = 'hidden';
                        spanElement.className = "";
                    }

                    if (me.checkboxes) {
                        var checkbox = itemElement.find('.chkbox');
                        checkbox.css({ 'visibility': 'hidden' });
                    }
                }

                if (indx < renderCollection.length) {
                    var item = renderCollection[indx].item;
                    if (item.initialTop - scrollValue >= hostHeight) {
                        hideItem();
                        continue;
                    }

                    var spanElement = $(itemElement[0].firstChild); // itemElement.find('#spanElement');
                    if (this.checkboxes) {
                        spanElement = $(itemElement[0].lastChild);
                    }

                    if (spanElement.length == 0)
                        continue;

                    if (spanElement[0] == null) continue;
                    spanElement[0].className = "";
                    spanElement[0].style.display = "block";
                    spanElement[0].style.visibility = "inherit";
                    var classNameBuilder = "";
                    //                    spanElement.css({ 'display': 'block', 'visibility': 'inherit' });

                    if (!item.isGroup && !this.selectedIndexes[item.index] >= 0) {
                        classNameBuilder = listItemNormalClass;
                        //spanElement.addClass(listItemNormalClass);
                    }
                    else {
                        classNameBuilder = listItemGroupClass;
                        //spanElement.addClass(listItemGroupClass);
                    }

                    if (item.disabled || this.disabled) {
                        classNameBuilder += " " + listItemDisabledClass;
                        //spanElement.addClass(listItemDisabledClass);
                    }

                    if (this.roundedcorners) {
                        classNameBuilder += " " + this.toThemeProperty('jqx-rc-all');
                        //spanElement.addClass(this.toThemeProperty('jqx-rc-all'));
                    }
                    if (touchDevice) {
                        classNameBuilder += " " + this.toThemeProperty('jqx-listitem-state-normal-touch');
                    }

                    spanElement[0].className = classNameBuilder;

                    if (this.renderer) {
                        if (!item.key) item.key = this.generatekey();
                        if (!this._cachedItemHtml) this._cachedItemHtml = new Array();
                        if (this._cachedItemHtml[item.key]) {
                            if (spanElement[0].innerHTML != this._cachedItemHtml[item.key]) {
                                spanElement[0].innerHTML = this._cachedItemHtml[item.key];
                            }
                        }
                        else {
                            var html = this.renderer(item.index, item.label, item.value);
                            spanElement[0].innerHTML = html;
                            this._cachedItemHtml[item.key] = spanElement[0].innerHTML;
                        }

                    }
                    else {
                        if (this.itemHeight !== -1) {
                            var paddingAndBorder = 2 + 2*parseInt(spanElement.css('padding-top'));
                            spanElement[0].style.lineHeight = (item.height - paddingAndBorder) + 'px';
                            spanElement.css('vertical-align', 'middle');
                        }

                        if (item.html != null && item.html.toString().length > 0) {
                            spanElement[0].innerHTML = item.html;
                        }
                        else if (item.label != null || item.value != null) {
                            if (item.label != null) {
                                if (spanElement[0].innerHTML !== item.label) {
                                    spanElement[0].innerHTML = item.label;
                                }
                                if ($.trim(item.label) == "") {
                                    spanElement[0].innerHTML = this.emptyString;
                                    if (this.emptyString == "") {
                                        spanElement[0].style.height = (item.height - 8) + 'px';
                                    }
                                }
                                if (!this.incrementalSearch && !item.disabled) {
                                    if (this.searchString != undefined && this.searchString != "") {
                                        spanElement[0].innerHTML = this._highlight(item.label, this.searchString);
                                    }
                                }
                            }
                            else if (item.label === null) {
                                spanElement[0].innerHTML = this.emptyString;
                                if (this.emptyString == "") {
                                    spanElement[0].style.height = (item.height - 8) + 'px';
                                }
                            }
                            else {
                                if (spanElement[0].innerHTML !== item.value) {
                                    spanElement[0].innerHTML = item.value;
                                }
                                else if (item.label == "") {
                                    spanElement[0].innerHTML = " ";
                                }
                            }
                        }
                        else if (item.label == "" || item.label == null) {
                            spanElement[0].innerHTML = "";
                            spanElement[0].style.height = (item.height - 8) + 'px';
                        }
                    }

                    itemElement[0].style.left = item.left + 'px';
                    itemElement[0].style.top = item.initialTop - scrollValue + 'px';

                    item.element = spanElement[0];
                    //  $.data(spanElement[0], 'item', item);
                    if (item.title) {
                        spanElement[0].title = item.title;
                    }

                    if (this.equalItemsWidth && !item.isGroup) {
                        if (maxWidth == 0) {
                            var itemWidth = parseInt(width);
                            var diff = parseInt(spanElement.outerWidth()) - parseInt(spanElement.width());
                            itemWidth -= diff;
                            var borderSize = 1;
                            if (borderSize != null) {
                                borderSize = parseInt(borderSize);
                            }
                            else borderSize = 0;
                            itemWidth -= 2 * borderSize;
                            maxWidth = itemWidth;
                            if (this.checkboxes && this.hScrollBar[0].style.visibility == 'hidden') {
                                maxWidth -= 18;
                            }
                        }
                        if (contentWidth > this.virtualSize.width) {
                            spanElement[0].style.width = maxWidth + 'px';
                            item.width = maxWidth;
                        }
                        else {
                            spanElement[0].style.width = -4 + this.virtualSize.width + 'px';
                            item.width = this.virtualSize.width - 4;
                        }
                    }
                    else {
                        if (spanElement.width() < this.host.width()) {
                            spanElement.width(this.host.width() - 2);
                        }
                    }

                    if (this.rtl) {
                        spanElement[0].style.textAlign = 'right';
                    }

                    if (this.autoItemsHeight) {
                        spanElement[0].style.whiteSpace = 'normal';
                        spanElement.width(maxWidth);
                        item.width = maxWidth;
                    }
                    middle = 0;
                    if (this.checkboxes && !item.isGroup) {
                        if (middle == 0) {
                            middle = (item.height - 16) / 2;
                            middle++;
                        }
                        var checkbox = $(itemElement.children()[0]);
                        checkbox[0].item = item;

                        if (!this.rtl) {
                            if (spanElement[0].style.left != '18px') {
                                spanElement[0].style.left = '18px';
                            }
                        }
                        else {
                            if (spanElement[0].style.left != '0px') {
                                spanElement[0].style.left = '0px';
                            }
                        }
                        if (this.rtl) {
                            checkbox.css('left', 8 + item.width + 'px');
                        }
                        checkbox[0].style.top = middle + 'px';
                        checkbox[0].style.display = 'block';
                        checkbox[0].style.visibility = 'inherit';
                        var checked = item.checked;
                        var checkClass = item.checked ? " " + this.toThemeProperty("jqx-checkbox-check-checked") : "";
                        if (checked) {
                            checkbox[0].firstChild.firstChild.firstChild.className = checkClass;
                        }
                        else if (checked === false) {
                            checkbox[0].firstChild.firstChild.firstChild.className = "";
                        }
                        else if (checked === null) {
                            checkbox[0].firstChild.firstChild.firstChild.className = this.toThemeProperty("jqx-checkbox-check-indeterminate");
                        }

                        if ($.jqx.ariaEnabled) {
                            if (checked) {
                                itemElement[0].setAttribute('aria-selected', true);
                            }
                            else {
                                itemElement[0].removeAttribute('aria-selected');
                            }
                        }
                       
                    }
                    else if (this.checkboxes) {
                        var checkbox = $(itemElement.children()[0]);
                        checkbox.css({ 'display': 'none', 'visibility': 'inherit' });
                    }

                    if (this.selectedIndexes[item.visibleIndex] >= 0 && !item.disabled) {
                        spanElement.addClass(this.toThemeProperty('jqx-listitem-state-selected'));
                        spanElement.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                        if ($.jqx.ariaEnabled) {
                            itemElement[0].setAttribute('aria-selected', true);
                            this._activeElement = itemElement[0];
                        }
                    }
                    else if (!this.checkboxes) {
                        if ($.jqx.ariaEnabled) {
                            itemElement[0].removeAttribute('aria-selected');
                        }
                    }
                }
                else {
                    hideItem();
                }
            }
        },

        generatekey: function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
        },

        _calculateVirtualSize: function () {
            var width = 0;
            var height = 2;
            var currentItem = 0;
            var spanElement = $("<span></span>");
            if (this.equalItemsWidth) {
                spanElement.css('float', 'left');
            }
            var itemsPerPage = 0;
            var hostHeight = this.host.outerHeight();

            $(document.body).append(spanElement);
            var length = this.items.length;
            var w = this.host.width();
            if (this.autoItemsHeight) {
                w -= 10;
                if (this.vScrollBar.css('visibility') != 'hidden') w -= 20;
            }

            if (this.autoItemsHeight || this.renderer || this.groups.length > 1 || (length > 0 && this.items[0].html != null && this.items[0].html != "")) {
                for (var currentItem = 0; currentItem < length; currentItem++) {
                    var item = this.items[currentItem];

                    if (item.isGroup && (item.label == '' && item.html == '')) {
                        continue;
                    }

                    if (!item.visible)
                        continue;

                    var className = "";

                    if (!item.isGroup) {
                        className += this.toThemeProperty('jqx-listitem-state-normal jqx-rc-all');
                    }
                    else {
                        className += this.toThemeProperty('jqx-listitem-state-group jqx-rc-all');
                    }
                    className += " " + this.toThemeProperty('jqx-fill-state-normal');
                    if (this.isTouchDevice()) {
                        className += " " + this.toThemeProperty('jqx-touch');
                    }
                    spanElement[0].className = className;
                    if (this.autoItemsHeight) {
                        spanElement[0].style.whiteSpace = 'normal';
                        var checkWidth = this.checkboxes ? -20 : 0;
                        spanElement[0].style.width = (checkWidth + w) + 'px';
                    }

                    if (this.renderer) {
                        var html = this.renderer(item.index, item.label, item.value);
                        spanElement[0].innerHTML = html;
                    }
                    else {
                        if (item.html != null && item.html.toString().length > 0) {
                            spanElement[0].innerHTML = item.html;
                        }
                        else if (item.label != null || item.value != null) {
                            if (item.label != null) {
                                spanElement[0].innerHTML = item.label;
                                if (item.label == "") spanElement[0].innerHTML = "Empty";
                            }
                            else spanElement[0].innerHTML = item.value;
                        }
                    }

                    var spanHeight = spanElement.outerHeight();
                    var spanWidth = spanElement.outerWidth();

                    if (this.itemHeight > -1) {
                        spanHeight = this.itemHeight;
                    }

                    item.height = spanHeight;
                    item.width = spanWidth;
                    height += spanHeight;
                    width = Math.max(width, spanWidth);

                    if (height <= hostHeight) {
                        itemsPerPage++;
                    }
                }
            }
            else {
                var height = 0;
                var elementHeight = 0;
                var maxText = "";
                var maxTextLength = 0;
                var oldMaxTextLength = 0;
                var firstvisibleitem = -1;
                for (var currentItem = 0; currentItem < length; currentItem++) {
                    var item = this.items[currentItem];

                    if (item.isGroup && (item.label == '' && item.html == '')) {
                        continue;
                    }

                    if (!item.visible)
                        continue;
                    firstvisibleitem++;
                    var className = "";
                    if (firstvisibleitem == 0) {
                        className += this.toThemeProperty('jqx-listitem-state-normal jqx-rc-all');
                        className += " " + this.toThemeProperty('jqx-fill-state-normal');
                        className += " " + this.toThemeProperty('jqx-widget');
                        className += " " + this.toThemeProperty('jqx-listbox');
                        className += " " + this.toThemeProperty('jqx-widget-content');

                        if (this.isTouchDevice()) {
                            className += " " + this.toThemeProperty('jqx-touch');
                            className += " " + this.toThemeProperty('jqx-listitem-state-normal-touch');
                        }
                        spanElement[0].className = className;
                        if (this.autoItemsHeight) {
                            spanElement[0].style.whiteSpace = 'normal';
                            var checkWidth = this.checkboxes ? -20 : 0;
                            spanElement[0].style.width = (checkWidth + w) + 'px';
                        }

                        if (item.html == null || (item.label == "" || item.label == null)) {
                            spanElement[0].innerHTML = "Item";
                        }
                        else {
                            if (item.html != null && item.html.toString().length > 0) {
                                spanElement[0].innerHTML = item.html;
                            }
                            else if (item.label != null || item.value != null) {
                                if (item.label != null) {
                                    if (item.label.toString().match(new RegExp("\\w")) != null || item.label.toString().match(new RegExp("\\d")) != null) {
                                        spanElement[0].innerHTML = item.label;
                                    }
                                    else {
                                        spanElement[0].innerHTML = "Item";
                                    }
                                }
                                else spanElement[0].innerHTML = item.value;
                            }
                        }

                        var spanHeight = 1+spanElement.outerHeight();

                        if (this.itemHeight > -1) {
                            spanHeight = this.itemHeight;
                        }
                        elementHeight = spanHeight;
                    }

                    if (maxTextLength != undefined) {
                        oldMaxTextLength = maxTextLength;
                    }

                    if (item.html != null && item.html.toString().length > 0) {
                        maxTextLength = Math.max(maxTextLength, item.html.toString().length);
                        if (oldMaxTextLength != maxTextLength) {
                            maxText = item.html;
                        }
                    }
                    else if (item.label != null) {
                        maxTextLength = Math.max(maxTextLength, item.label.length);
                        if (oldMaxTextLength != maxTextLength) {
                            maxText = item.label;
                        }
                    }
                    else if (item.value != null) {
                        maxTextLength = Math.max(maxTextLength, item.value.length);
                        if (oldMaxTextLength != maxTextLength) {
                            maxText = item.value;
                        }
                    }

                    item.height = elementHeight;
                    height += elementHeight;

                    if (height <= hostHeight) {
                        itemsPerPage++;
                    }
                }
                spanElement[0].innerHTML = maxText;
                width = spanElement.outerWidth();
            }

            height += 2;
            if (itemsPerPage < 10) itemsPerPage = 10;

            spanElement.remove();
            return { width: width, height: height, itemsPerPage: itemsPerPage };
        },

        _getVirtualItemsCount: function () {
            if (this.virtualItemsCount == 0) {
                var virtualItemsCount = parseInt(this.host.height()) / 5;
                if (virtualItemsCount > this.items.length) {
                    virtualItemsCount = this.items.length;
                }
                return virtualItemsCount;
            }
            else return this.virtualItemsCount;
        },

        _addItems: function (refreshUIItems) {
            if (this.updatingListBox == true)
                return;

            if (this.items == undefined || this.items.length == 0) {
                this.virtualSize = { width: 0, height: 0, itemsPerPage: 0 };
                this._updatescrollbars();
                this.renderedVisibleItems = new Array();
                if (this.itemswrapper) {
                    this.itemswrapper.children().remove();
                }
                return;
            }

            if (refreshUIItems == false) {
                var virtualSize = this._calculateVirtualSize();
                var virtualItemsCount = virtualSize.itemsPerPage * 2;
                if (this.autoHeight) {
                    virtualItemsCount = this.items.length;
                }

                this.virtualItemsCount = Math.min(virtualItemsCount, this.items.length);
                var me = this;
                var virtualWidth = virtualSize.width;
                this.virtualSize = virtualSize;
                this._updatescrollbars();
                return;
            }
            var self = this;
            var top = 0;
            this.visibleItems = new Array();
            this.renderedVisibleItems = new Array();
            this._removeHandlers();
            if (this.allowDrag && this._enableDragDrop) {
                this.itemswrapper = null;
            }
            if (this.itemswrapper == null) {
                this.content[0].innerHTML = '';
                this.itemswrapper = $('<div style="outline: 0 none; overflow:hidden; width:100%; position: relative;"></div>');
                this.itemswrapper.height(2 * this.host.height());
                this.content.append(this.itemswrapper);
            }

            var virtualSize = this._calculateVirtualSize();
            var virtualItemsCount = virtualSize.itemsPerPage * 2;
            if (this.autoHeight) {
                virtualItemsCount = this.items.length;
            }

            this.virtualItemsCount = Math.min(virtualItemsCount, this.items.length);
            var me = this;
            var virtualWidth = virtualSize.width;
            this.virtualSize = virtualSize;
            this.itemswrapper.width(Math.max(this.host.width(), 17 + virtualSize.width));
            var startIndex = 0;

            var html = "";
            for (var virtualItemIndex = startIndex; virtualItemIndex < this.virtualItemsCount; virtualItemIndex++) {
                var item = this.items[virtualItemIndex];
                var id = 'listitem' + virtualItemIndex + this.element.id;
                html += "<div role='option' id='" + id + "' class='jqx-listitem-element'>";
                if (this.checkboxes) {
                    html += '<div style="background-color: transparent; padding: 0; margin: 0; position: absolute; float: left; width: 16px; height: 16px;" class="chkbox">';
                    var checkBoxContent = '<div class="' + this.toThemeProperty("jqx-checkbox-default") + ' ' + this.toThemeProperty("jqx-fill-state-normal") + ' ' + this.toThemeProperty("jqx-rc-all") + '"><div style="cursor: pointer; width: 13px; height: 13px;">';
                    var checkClass = item.checked ? " " + this.toThemeProperty("jqx-checkbox-check-checked") : "";
                    checkBoxContent += '<span style="width: 13px; height: 13px;" class="checkBoxCheck'+checkClass+'"></span>';
                    checkBoxContent += '</div></div>';
                    html += checkBoxContent;
                    html += '</div>';
                }
                html += "<span style='-ms-touch-action: none;'></span></div>"
            }

            if (self.WinJS) {
                this.itemswrapper.html(html);
            }
            else {
                this.itemswrapper[0].innerHTML = html;
            }

            var children = this.itemswrapper.children();
            for (var virtualItemIndex = startIndex; virtualItemIndex < this.virtualItemsCount; virtualItemIndex++) {
                var item = this.items[virtualItemIndex];
                var itemElement = $(children[virtualItemIndex]);

                if (this.allowDrag && this._enableDragDrop) {
                    itemElement.addClass('draggable');
                }

                if (this.checkboxes) {
                    var checkbox = $(itemElement.children()[0]);
                    itemElement.css('float', 'left');
                    var spanElement = $(itemElement[0].firstChild);
                    spanElement.css('float', 'left');
                }

                itemElement[0].style.height = item.height + 'px';
                itemElement[0].style.top = top + 'px';

                top += item.height;
                this.visualItems[virtualItemIndex] = itemElement;
            };

            this._addHandlers();

            this._updatescrollbars();

            if (this.autoItemsHeight) {
                var virtualSize = this._calculateVirtualSize();
                var virtualItemsCount = virtualSize.itemsPerPage * 2;
                if (this.autoHeight) {
                    virtualItemsCount = this.items.length;
                }

                this.virtualItemsCount = Math.min(virtualItemsCount, this.items.length);
                var me = this;
                var virtualWidth = virtualSize.width;
                this.virtualSize = virtualSize;
                this._updatescrollbars();
            }

            if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                this.host.attr('hideFocus', true);
                this.host.find('div').attr('hideFocus', true);
            }
        },

        _updatescrollbars: function () {
            if (!this.virtualSize) {
                return;
            }
            var virtualHeight = this.virtualSize.height;
            var virtualWidth = this.virtualSize.width;
            var vScrollInstance = this.vScrollInstance;
            var hScrollInstance = this.hScrollInstance;
            this._arrange(false);
            var hasChange = false;
            var outerWidth = this.host.outerWidth();
            var outerHeight = this.host.outerHeight();
            if (virtualHeight > outerHeight) {
                var hScrollOffset = 0; //parseInt(this.hScrollBar.height());
                if (virtualWidth > outerWidth) {
                    hScrollOffset = this.hScrollBar.outerHeight() + 2;
                }

                var oldmax = vScrollInstance.max;
                vScrollInstance.max = 2 + parseInt(virtualHeight) + hScrollOffset - parseInt(outerHeight-2);
                if (this.vScrollBar[0].style.visibility != 'inherit') {
                    this.vScrollBar[0].style.visibility = 'inherit';
                    hasChange = true;
                }
                if (oldmax != vScrollInstance.max) {
                    vScrollInstance._arrange();
                }
            }
            else {
                if (this.vScrollBar[0].style.visibility != 'hidden') {
                    this.vScrollBar[0].style.visibility = 'hidden';
                    hasChange = true;
                    vScrollInstance.setPosition(0);
                }
            }

            var scrollOffset = 0;
            if (this.vScrollBar[0].style.visibility != 'hidden') {
                scrollOffset = this.scrollBarSize + 6;
            }

            var checkboxes = this.checkboxes ? 20 : 0;

            if (this.autoItemsHeight) {
                this.hScrollBar[0].style.visibility = 'hidden';
            }
            else {
                if (virtualWidth >= outerWidth - scrollOffset - checkboxes) {
                    var changedMax = hScrollInstance.max;
                    if (this.vScrollBar[0].style.visibility == 'inherit') {
                        hScrollInstance.max = checkboxes + scrollOffset + parseInt(virtualWidth) - this.host.width() + 4;
                    }
                    else {
                        hScrollInstance.max = checkboxes + parseInt(virtualWidth) - this.host.width() + 6;
                    }

                    if (this.hScrollBar[0].style.visibility != 'inherit') {
                        this.hScrollBar[0].style.visibility = 'inherit';
                        hasChange = true;
                    }
                    if (changedMax != hScrollInstance.max) {
                        hScrollInstance._arrange();
                    }
                    if (this.vScrollBar[0].style.visibility == 'inherit') {
                        vScrollInstance.max = 2 + parseInt(virtualHeight) + this.hScrollBar.outerHeight() + 2 - parseInt(this.host.height());
                    }
                }
                else {
                    if (this.hScrollBar[0].style.visibility != 'hidden') {
                        this.hScrollBar[0].style.visibility = 'hidden';
                        hasChange = true;
                    }
                }
            }

            hScrollInstance.setPosition(0);

            if (hasChange) {
                this._arrange();
            }

            if (this.itemswrapper) {
                this.itemswrapper[0].style.width = Math.max(0, Math.max(outerWidth - 2, 17 + virtualWidth)) + 'px';
                this.itemswrapper[0].style.height = Math.max(0, 2 * outerHeight) + 'px';
            }

            var isTouchDevice = this.isTouchDevice();
            if (isTouchDevice) {
                if (this.vScrollBar.css('visibility') != 'visible' && this.hScrollBar.css('visibility') != 'visible') {
                    $.jqx.mobile.setTouchScroll(false, this.element.id);
                }
                else {
                    $.jqx.mobile.setTouchScroll(true, this.element.id);
                }
            }
        },

        clear: function () {
            this.source = null;
            this.clearSelection();
            this.refresh();
        },

        // clears the selection.
        clearSelection: function (render) {
            for (var indx = 0; indx < this.selectedIndexes.length; indx++) {
                if (this.selectedIndexes[indx] && this.selectedIndexes[indx] != -1) {
                    this._raiseEvent('1', { index: indx, type: 'api', item: this.getVisibleItem(indx), originalEvent: null });
                }

                this.selectedIndexes[indx] = -1;
            }
            this.selectedIndex = -1;
            if (render != false) {
                this._renderItems();
            }
        },

        // unselects item by index.
        unselectIndex: function (index, render) {
            if (isNaN(index))
                return;

            this.selectedIndexes[index] = -1;
            var hasIndexes = false;
            for (var indx = 0; indx < this.selectedIndexes.length; indx++) {
                var index = this.selectedIndexes[indx];
                if (index != -1 && index != undefined) {
                    hasIndexes = true;
                }
            }
            if (!hasIndexes) {
                this.selectedValue = null;
                this.selectedIndex = -1;
            }

            if (render == undefined || render == true) {
                this._renderItems();
                this._raiseEvent('1', { index: index, type: 'api', item: this.getVisibleItem(index), originalEvent: null });
            }
            this._updateInputSelection();

            this._raiseEvent('2', { index: index, type:'api', item: this.getItem(index) });
        },

        // gets item's instance.
        getItem: function (index) {
            if (index == -1 || isNaN(index) || typeof (index) === "string") {
                if (index === -1) {
                    return null;
                }
                return this.getItemByValue(index);
            }

            var result = null;
            var item = $.each(this.items, function () {
                if (this.index == index) {
                    result = this;
                    return false;
                }
            });

            return result;
        },

        getVisibleItem: function (index) {
            if (index == -1 || isNaN(index) || typeof (index) === "string") {
                if (index === -1) {
                    return null;
                }
                return this.getItemByValue(index);
            }
            return this.visibleItems[index];
        },

        getVisibleItems: function () {
            return this.visibleItems;
        },

        // checks a specific item by its index.
        checkIndex: function (index, render, raiseEvent) {
            if (!this.checkboxes) {
                return;
            }

            if (isNaN(index))
                return;

            if (index < 0 || index >= this.visibleItems.length)
                return;

            if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {
                return;
            }

            if (this.disabled)
                return;

            var item = this.getItem(index);
            if (this.groups.length > 0) {
                var item = this.getVisibleItem(index);
            }
            if (item != null) {
                var checkbox = $(item.checkBoxElement);
                item.checked = true;
                if (render == undefined || render == true) {
                    this._updateCheckedItems();
                }
            }

            if (raiseEvent == undefined || raiseEvent == true) {
                this._raiseEvent(3, { label: item.label, value: item.value, checked: true, item: item });
            }
        },

        getCheckedItems: function () {
            if (!this.checkboxes) {
                return null;
            }

            var checkedItems = new Array();
            if (this.items == undefined) return;

            $.each(this.items, function () {
                if (this.checked) {
                    checkedItems[checkedItems.length] = this;
                }
            });
            return checkedItems;
        },

        checkAll: function (raiseEvents) {
            if (!this.checkboxes) {
                return;
            }

            if (this.disabled)
                return;

            var me = this;
            $.each(this.items, function () {
                var item = this;
                if (raiseEvents !== false && item.checked !== true) {
                     me._raiseEvent(3, { label: item.label, value: item.value, checked: true, item: item });
                }
                this.checked = true;
            });

            this._updateCheckedItems();
        },

        uncheckAll: function (raiseEvents) {
            if (!this.checkboxes) {
                return;
            }

            if (this.disabled)
                return;

            var me = this;
            $.each(this.items, function () {
                var item = this;
                if (raiseEvents !== false && item.checked !== false) {
                    this.checked = false;
                    me._raiseEvent(3, { label: item.label, value: item.value, checked: false, item: item });
                }
                this.checked = false;
            });

            this._updateCheckedItems();
        },

        // unchecks a specific item by its index.
        uncheckIndex: function (index, render, raiseEvent) {
            if (!this.checkboxes) {
                return;
            }

            if (isNaN(index))
                return;

            if (index < 0 || index >= this.visibleItems.length)
                return;

            if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {
                return;
            }

            if (this.disabled)
                return;

            var item = this.getItem(index);
            if (this.groups.length > 0) {
                var item = this.getVisibleItem(index);
            }
            if (item != null) {
                var checkbox = $(item.checkBoxElement);
                item.checked = false;
                if (render == undefined || render == true) {
                    this._updateCheckedItems();
                }
            }
            if (raiseEvent == undefined || raiseEvent == true) {
                this._raiseEvent(3, { label: item.label, value: item.value, checked: false, item: item });
            }
        },

        // sets a specific item's checked property to null.
        indeterminateIndex: function (index, render, raiseEvent) {
            if (!this.checkboxes) {
                return;
            }

            if (isNaN(index))
                return;

            if (index < 0 || index >= this.visibleItems.length)
                return;

            if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {
                return;
            }

            if (this.disabled)
                return;

            var item = this.getItem(index);
            if (this.groups.length > 0) {
                var item = this.getVisibleItem(index);
            }
            if (item != null) {
                var checkbox = $(item.checkBoxElement);
                item.checked = null;
                if (render == undefined || render == true) {
                    this._updateCheckedItems();
                }
            }
            if (raiseEvent == undefined || raiseEvent == true) {
                this._raiseEvent(3, { checked: null });
            }
        },

        // gets the selected index.
        getSelectedIndex: function () {
            return this.selectedIndex;
        },

        // gets all selected items.
        getSelectedItems: function () {
            var items = this.getVisibleItems();
            var selectedIndexes = this.selectedIndexes;
            var selectedItems = [];
            // get selected items.
            for (var index in selectedIndexes) {
                if (selectedIndexes[index] != -1) {
                    selectedItems[selectedItems.length] = items[index];
                }
            }

            return selectedItems;
        },

        // gets the selected item.
        getSelectedItem: function () {
            return this.getItem(this.selectedIndex);
        },

        _updateCheckedItems: function () {
            var selectedIndex = this.selectedIndex;
            this.clearSelection(false);
            var items = this.getCheckedItems();
            this.selectedIndex = selectedIndex;

            this._renderItems();
            var selectedElement = $.data(this.element, 'hoveredItem');
            if (selectedElement != null) {
                $(selectedElement).addClass(this.toThemeProperty('jqx-listitem-state-hover'));
                $(selectedElement).addClass(this.toThemeProperty('jqx-fill-state-hover'));
            }

            this._updateInputSelection();
        },

        getItemByValue: function (value) {
            if (this.visibleItems == null) {
                return;
            }

            if (this.itemsByValue)
                return this.itemsByValue[$.trim(value).split(" ").join("")];

            var items = this.visibleItems;

            for (var i = 0; i < items.length; i++) {
                if (items[i].value == value) {
                    return items[i];
                    break;
                }
            }
        },

        checkItem: function (item) {
            if (item != null) {
                var newItem = this._getItemByParam(item);
                return this.checkIndex(newItem.index, true);
            }
            return false;
        },

        uncheckItem: function (item) {
            if (item != null) {
                var newItem = this._getItemByParam(item);
                return this.uncheckIndex(newItem.index, true);
            }
            return false;
        },

        indeterminateItem: function (item) {
            if (item != null) {
                var newItem = this._getItemByParam(item);
                return this.indeterminateIndex(newItem.index, true);
            }
            return false;
        },

        val: function (value) {
            if (this.input && arguments.length == 0) {
                return this.input.val();
            }

            var item = this.getItemByValue(value);
            if (item != null) {
                this.selectItem(item);
            }

            if (this.input) {
                return this.input.val();
            }
        },

        selectItem: function (item) {
            if (item != null) {
                if (item.index == undefined) {
                    var newItem = this.getItemByValue(item);
                    if (newItem) item = newItem;
                }
                return this.selectIndex(item.visibleIndex, true);
            }
            return false;
        },

        unselectItem: function (item) {
            if (item != null) {
                if (item.index == undefined) {
                    var newItem = this.getItemByValue(item);
                    if (newItem) item = newItem;
                }
                return this.unselectIndex(item.visibleIndex, true);
            }
            return false;
        },

        // selects an item.
        selectIndex: function (index, ensureVisible, render, forceSelect, type, originalEvent) {
            if (isNaN(index))
                return;

            if (index < -1 || index >= this.visibleItems.length)
                return;

            if (this.visibleItems[index] != null && this.visibleItems[index].disabled) {
                return;
            }

            if (this.disabled)
                return;

            if (!this.multiple && !this.multipleextended && this.selectedIndex == index && !forceSelect) {
                if (this.visibleItems && this.items && this.visibleItems.length != this.items.length) {
                    newItem = this.getVisibleItem(index);
                    if (newItem) {
                        this.selectedValue = newItem.value;
                    }
                }
                return;
            }
            if (this.checkboxes) {
                this._updateCheckedItems();
                return;
            }

            this.focused = true;
            var newSelection = false;
            if (this.selectedIndex != index) newSelection = true;
            var oldIndex = this.selectedIndex;
            if (this.selectedIndex == index && !this.multiple) {
                oldIndex = -1;
            }

            if (type == undefined) {
                type = 'none';
            }

            var newItem = this.getItem(index);
            var oldItem = this.getItem(oldIndex);
            if (this.visibleItems && this.items && this.visibleItems.length != this.items.length) {
                newItem = this.getVisibleItem(index);
                oldItem = this.getVisibleItem(oldIndex);
            }

            if (forceSelect != undefined && forceSelect) {
                this._raiseEvent('1', { index: oldIndex, type: type, item: oldItem, originalEvent: originalEvent });
                this.selectedIndex = index;
                this.selectedIndexes[oldIndex] = -1;
                this.selectedIndexes[index] = index;
                if (newItem) {
                    this.selectedValue = newItem.value;
                }
                this._raiseEvent('0', { index: index, type: type, item: newItem, originalEvent: originalEvent });
            }
            else {
                var me = this;
                var singleSelect = function (index, oldIndex, type, oldItem, newItem, originalEvent) {
                    me._raiseEvent('1', { index: oldIndex, type: type, item: oldItem, originalEvent: originalEvent });
                    me.selectedIndex = index;
                    me.selectedIndexes[oldIndex] = -1;
                    oldIndex = index;
                    me.selectedIndexes[index] = index;
                    me._raiseEvent('0', { index: index, type: type, item: newItem, originalEvent: originalEvent });
                }
                var multipleSelect = function (index, oldIndex, type, oldItem, newItem, originalEvent) {
                    if (me.selectedIndexes[index] == undefined || me.selectedIndexes[index] == -1) {
                        me.selectedIndexes[index] = index;
                        me.selectedIndex = index;
                        me._raiseEvent('0', { index: index, type: type, item: newItem, originalEvent: originalEvent });
                    }
                    else {
                        oldIndex = me.selectedIndexes[index];
                        oldItem = me.getVisibleItem(oldIndex);
                        me.selectedIndexes[index] = -1;
                        me.selectedIndex = -1;
                        me._raiseEvent('1', { index: oldIndex, type: type, item: oldItem, originalEvent: originalEvent });
                    }
                }

                if (this.multipleextended) {
                    if (!this._shiftKey && !this._ctrlKey) {
                        if (type != 'keyboard' && type != 'mouse') {
                            multipleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);
                            me._clickedIndex = index;
                        }
                        else {
                            this.clearSelection(false);
                            me._clickedIndex = index;
                            singleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);
                        }
                    }
                    else if (this._ctrlKey) {
                        if (type == 'keyboard') {
                            this.clearSelection(false);
                            me._clickedIndex = index;
                        }
                        multipleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);
                    }
                    else if (this._shiftKey) {
                        if (me._clickedIndex == undefined) me._clickedIndex = oldIndex;
                        var min = Math.min(me._clickedIndex, index);
                        var max = Math.max(me._clickedIndex, index);
                        this.clearSelection(false);
                        for (var i = min; i <= max; i++) {
                            me.selectedIndexes[i] = i;
                            me._raiseEvent('0', { index: i, type: type, item: this.getVisibleItem(i), originalEvent: originalEvent });
                        }
                        if (type != 'keyboard') {
                            me.selectedIndex = me._clickedIndex;
                        }
                        else {
                            me.selectedIndex = index;
                        }
                    }
                }
                else if (this.multiple) {
                    multipleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);
                }
                else {
                    if (newItem) {
                        this.selectedValue = newItem.value;
                    }
                    singleSelect(index, oldIndex, type, oldItem, newItem, originalEvent);
                }
            }

            if (render == undefined || render == true) {
                this._renderItems();
            }

            if (ensureVisible != undefined && ensureVisible != null && ensureVisible == true) {
                this.ensureVisible(index);
            }

            this._raiseEvent('2', { index: index, item: newItem, oldItem: oldItem, type: type });
            this._updateInputSelection();
            return newSelection;
        },

        _updateInputSelection: function () {
            if (this.input) {
                if (this.selectedIndex == -1) {
                    this.input.val("");
                }
                else {
                    if (this.items) {
                        if (this.items[this.selectedIndex] != undefined) {
                            this.input.val(this.items[this.selectedIndex].value);
                        }
                    }
                }
                if (this.multiple || this.multipleextended || this.checkboxes) {
                    var items = !this.checkboxes ? this.getSelectedItems() : this.getCheckedItems();
                    var str = "";
                    if (items) {
                        for (var i = 0; i < items.length; i++) {
                            if (undefined != items[i]) {
                                if (i == items.length - 1) {
                                    str += items[i].value;
                                }
                                else {
                                    str += items[i].value + ",";
                                }
                            }
                        }
                        this.input.val(str);
                    }
                }
            }
        },

        // checks whether an item is in the visible view.
        isIndexInView: function (index) {
            if (isNaN(index)) {
                return false;
            }

            if (!this.items)
                return false;

            if (index < 0 || index >= this.items.length) {
                return false;
            }

            var scrollValue = this.vScrollInstance.value;
            var item = this.visibleItems[index];
            if (item == undefined)
                return true;

            var itemTop = item.initialTop;
            var itemHeight = item.height;

            if (itemTop - scrollValue < 0 || itemTop - scrollValue + itemHeight >= this.host.outerHeight()) {
                return false;
            }

            return true;
        },

        //[optimize]
        _itemsInPage: function () {
            var itemsCount = 0;
            var me = this;

            if (this.items) {
                $.each(this.items, function () {
                    if ((this.initialTop + this.height) >= me.content.height()) {
                        return false;
                    }
                    itemsCount++;
                });
            }
            return itemsCount;
        },

        _firstItemIndex: function () {
            if (this.visibleItems != null) {
                if (this.visibleItems[0]) {
                    if (this.visibleItems[0].isGroup) {
                        return this._nextItemIndex(0);
                    }
                    else return 0;
                }
                else return 0;
            }

            return -1;
        },

        _lastItemIndex: function () {
            if (this.visibleItems != null) {
                if (this.visibleItems[this.visibleItems.length - 1]) {
                    if (this.visibleItems[this.visibleItems.length - 1].isGroup) {
                        return this._prevItemIndex(this.visibleItems.length - 1);
                    }
                    else return this.visibleItems.length - 1;
                }
                else return this.visibleItems.length - 1;
            }

            return -1;
        },

        _nextItemIndex: function (index) {
            for (indx = index + 1; indx < this.visibleItems.length; indx++) {
                if (this.visibleItems[indx]) {
                    if (!this.visibleItems[indx].disabled && !this.visibleItems[indx].isGroup) {
                        return indx;
                    }
                }
            }

            return -1;
        },

        _prevItemIndex: function (index) {
            for (indx = index - 1; indx >= 0; indx--) {
                if (this.visibleItems[indx]) {
                    if (!this.visibleItems[indx].disabled && !this.visibleItems[indx].isGroup) {
                        return indx;
                    }
                }
            }

            return -1;
        },

        // get all matches of a searched value.
        _getMatches: function (value, startindex) {
            if (value == undefined || value.length == 0)
                return -1;

            if (startindex == undefined) startindex = 0;

            var items = this.getItems();
            var me = this;
            var index = -1;
            var newItemsIndex = 0;

            $.each(items, function (i) {
                var itemValue = '';
                if (!this.isGroup) {
                    if (this.label) {
                        itemValue = this.label.toString();
                    }
                    else if (this.value) {
                        itemValue = this.value.toString();
                    }
                    else if (this.title) {
                        itemValue = this.title.toString();
                    }
                    else itemValue = 'jqxItem';

                    var mathes = false;
                    switch (me.searchMode) {
                        case 'containsignorecase':
                            mathes = $.jqx.string.containsIgnoreCase(itemValue, value);
                            break;
                        case 'contains':
                            mathes = $.jqx.string.contains(itemValue, value);
                            break;
                        case 'equals':
                            mathes = $.jqx.string.equals(itemValue, value);
                            break;
                        case 'equalsignorecase':
                            mathes = $.jqx.string.equalsIgnoreCase(itemValue, value);
                            break;
                        case 'startswith':
                            mathes = $.jqx.string.startsWith(itemValue, value);
                            break;
                        case 'startswithignorecase':
                            mathes = $.jqx.string.startsWithIgnoreCase(itemValue, value);
                            break;
                        case 'endswith':
                            mathes = $.jqx.string.endsWith(itemValue, value);
                            break;
                        case 'endswithignorecase':
                            mathes = $.jqx.string.endsWithIgnoreCase(itemValue, value);
                            break;
                    }

                    if (mathes && this.visibleIndex >= startindex) {
                        index = this.visibleIndex;
                        return false;
                    }
                }
            });

            return index;
        },

        // gets all items that match to a search value.
        findItems: function (value) {
            var items = this.getItems();
            var me = this;
            var index = 0;
            var matchItems = new Array();

            $.each(items, function (i) {
                var itemValue = '';
                if (!this.isGroup) {
                    if (this.label) {
                        itemValue = this.label;
                    }
                    else if (this.value) {
                        itemValue = this.value;
                    }
                    else if (this.title) {
                        itemValue = this.title;
                    }
                    else itemValue = 'jqxItem';

                    var mathes = false;
                    switch (me.searchMode) {
                        case 'containsignorecase':
                            mathes = $.jqx.string.containsIgnoreCase(itemValue, value);
                            break;
                        case 'contains':
                            mathes = $.jqx.string.contains(itemValue, value);
                            break;
                        case 'equals':
                            mathes = $.jqx.string.equals(itemValue, value);
                            break;
                        case 'equalsignorecase':
                            mathes = $.jqx.string.equalsIgnoreCase(itemValue, value);
                            break;
                        case 'startswith':
                            mathes = $.jqx.string.startsWith(itemValue, value);
                            break;
                        case 'startswithignorecase':
                            mathes = $.jqx.string.startsWithIgnoreCase(itemValue, value);
                            break;
                        case 'endswith':
                            mathes = $.jqx.string.endsWith(itemValue, value);
                            break;
                        case 'endswithignorecase':
                            mathes = $.jqx.string.endsWithIgnoreCase(itemValue, value);
                            break;
                    }

                    if (mathes) {
                        matchItems[index++] = this;
                    }
                }
            });

            return matchItems;
        },

        _handleKeyDown: function (event) {
            var key = event.keyCode;
            var self = this;
            var index = self.selectedIndex;
            var selectedIndex = self.selectedIndex;
            var newSelection = false;

            if (!this.keyboardNavigation || !this.enableSelection)
                return;

            var doClear = function () {
                if (self.multiple) {
                    self.clearSelection(false);
                }
            }

            if (event.altKey) key = -1;
            if (self.incrementalSearch) {
                var matchindex = -1;
                if (!self._searchString) {
                    self._searchString = "";
                }

                if ((key == 8 || key == 46) && self._searchString.length >= 1) {
                    self._searchString = self._searchString.substr(0, self._searchString.length - 1);
                }

                var letter = String.fromCharCode(key);

                var isDigit = (!isNaN(parseInt(letter)));
                var toReturn = false;
                if ((key >= 65 && key <= 97) || isDigit || key == 8 || key == 32 || key == 46) {
                    if (!event.shiftKey) {
                        letter = letter.toLocaleLowerCase();
                    }

                    var startIndex = 1 + self.selectedIndex;
                    if (key != 8 && key != 32 && key != 46) {
                        if (self._searchString.length > 0 && self._searchString.substr(0, 1) == letter) {
                            startIndex = 1 + self.selectedIndex;
                        }
                        else {
                            self._searchString += letter;
                        }
                    }

                    if (key == 32) {
                        self._searchString += " ";
                    }

                    var matches = this._getMatches(self._searchString, startIndex);
                    matchindex = matches;
                    if (matchindex == self._lastMatchIndex || matchindex == -1) {
                        var matches = this._getMatches(self._searchString, 0);
                        matchindex = matches;
                    }
                    self._lastMatchIndex = matchindex;

                    if (matchindex >= 0) {
                        var toSelect = function () {
                            doClear();
                            self.selectIndex(matchindex, false, false, false, 'keyboard', event);
                            var isInView = self.isIndexInView(matchindex);
                            if (!isInView) {
                                self.ensureVisible(matchindex);
                            }
                            else {
                                self._renderItems();
                            }
                        }
                        if (self._toSelectTimer) clearTimeout(self._toSelectTimer);
                        self._toSelectTimer = setTimeout(function () {
                            toSelect();
                        }, self.incrementalSearchKeyDownDelay);
                    }
                    toReturn = true;
                }

                if (self._searchTimer != undefined) {
                    clearTimeout(self._searchTimer);
                }

                if (key == 27 || key == 13) {
                    self._searchString = "";
                }

                self._searchTimer = setTimeout(function () {
                    self._searchString = "";
                    self._renderItems();
                }, self.incrementalSearchDelay);
                if (matchindex >= 0) {
                    return;
                }
                if (toReturn)
                    return false;
            }

            if (this.checkboxes)
                return true;

            if (key == 33) {
                var itemsInPage = self._itemsInPage();
                if (self.selectedIndex - itemsInPage >= 0) {
                    doClear();
                    self.selectIndex(selectedIndex - itemsInPage, false, false, false, 'keyboard', event);
                }
                else {
                    doClear();
                    self.selectIndex(self._firstItemIndex(), false, false, false, 'keyboard', event);
                }
                self._searchString = "";
            }

            if (key == 32 && this.checkboxes) {
                var checkItem = this.getItem(index);
                if (checkItem != null) {
                    self._updateItemCheck(checkItem, index);
                    event.preventDefault();
                }
                self._searchString = "";
            }

            if (key == 36) {
                doClear();
                self.selectIndex(self._firstItemIndex(), false, false, false, 'keyboard', event);
                self._searchString = "";
            }

            if (key == 35) {
                doClear();
                self.selectIndex(self._lastItemIndex(), false, false, false, 'keyboard', event);
                self._searchString = "";
            }

            if (key == 34) {
                var itemsInPage = self._itemsInPage();
                if (self.selectedIndex + itemsInPage < self.visibleItems.length) {
                    doClear();
                    self.selectIndex(selectedIndex + itemsInPage, false, false, false, 'keyboard', event);
                }
                else {
                    doClear();
                    self.selectIndex(self._lastItemIndex(), false, false, false, 'keyboard', event);
                }
                self._searchString = "";
            }

            if (key == 38) {
                self._searchString = "";
                if (self.selectedIndex > 0) {
                    var newIndex = self._prevItemIndex(self.selectedIndex);
                    if (newIndex != self.selectedIndex && newIndex != -1) {
                        doClear();
                        self.selectIndex(newIndex, false, false, false, 'keyboard', event);
                    }
                    else return true;
                }
                else return false;
            }
            else if (key == 40) {
                self._searchString = "";
                if (self.selectedIndex + 1 < self.visibleItems.length) {
                    var newIndex = self._nextItemIndex(self.selectedIndex);
                    if (newIndex != self.selectedIndex && newIndex != -1) {
                        doClear();
                        self.selectIndex(newIndex, false, false, false, 'keyboard', event);
                    }
                    else return true;
                }
                else return false;
            }

            if (key == 35 || key == 36 || key == 38 || key == 40 || key == 34 || key == 33) {
                var isInView = self.isIndexInView(self.selectedIndex);
                if (!isInView) {
                    self.ensureVisible(self.selectedIndex);
                }
                else {
                    self._renderItems();
                }

                return false;
            }

            return true;
        },

        _updateItemCheck: function (checkItem, index) {
            if (checkItem.checked == true) {
                checkItem.checked = (checkItem.hasThreeStates && this.hasThreeStates) ? null : false;
            }
            else {
                checkItem.checked = checkItem.checked != null;
            }

            switch (checkItem.checked) {
                case true:
                    this.checkIndex(index);
                    break;
                case false:
                    this.uncheckIndex(index);
                    break;
                default:
                    this.indeterminateIndex(index);
                    break;
            }
        },

        // performs mouse wheel.
        wheel: function (event, self) {
            if (self.autoHeight || !self.enableMouseWheel) {
                event.returnValue = true;
                return true;
            }

            if (self.disabled) return true;

            var delta = 0;
            if (!event) /* For IE. */
                event = window.event;

            if (event.originalEvent && event.originalEvent.wheelDelta) {
                event.wheelDelta = event.originalEvent.wheelDelta;
            }

            if (event.wheelDelta) { /* IE/Opera. */
                delta = event.wheelDelta / 120;
            } else if (event.detail) { /** Mozilla case. */
                delta = -event.detail / 3;
            }
            if (delta) {
                var result = self._handleDelta(delta);
                if (result) {
                    if (event.preventDefault)
                        event.preventDefault();

                    if (event.originalEvent != null) {
                        event.originalEvent.mouseHandled = true;
                    }

                    if (event.stopPropagation != undefined) {
                        event.stopPropagation();
                    }
                }

                if (result) {
                    result = false;
                    event.returnValue = result;
                    return result;
                }
                else {
                    return false;
                }
            }

            if (event.preventDefault)
                event.preventDefault();
            event.returnValue = false;
        },

        _handleDelta: function (delta) {
            var oldvalue = this.vScrollInstance.value;
            if (delta < 0) {
                this.scrollDown();
            }
            else this.scrollUp();
            var newvalue = this.vScrollInstance.value;
            if (oldvalue != newvalue) {
                return true;
            }

            return false;
        },

        focus: function () {
            try {
                this.focused = true;
                this.host.focus();
                var me = this;
                setTimeout(function () {
                    me.host.focus();
                }, 10);
            }
            catch (error) {
            }
        },

        _removeHandlers: function () {
            var self = this;
            this.removeHandler($(document), 'keydown.listbox' + this.element.id);
            this.removeHandler($(document), 'keyup.listbox' + this.element.id);
            this.removeHandler(this.vScrollBar, 'valuechanged');
            this.removeHandler(this.hScrollBar, 'valuechanged');
            if (this._mousewheelfunc) {
                this.removeHandler(this.host, 'mousewheel', this._mousewheelfunc);
            }
            else {
                this.removeHandler(this.host, 'mousewheel');
            }

            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this.content, 'mouseleave');
            this.removeHandler(this.content, 'focus');
            this.removeHandler(this.content, 'blur');
            this.removeHandler(this.host, 'focus');
            this.removeHandler(this.host, 'blur');
            this.removeHandler(this.content, 'mouseenter');
            this.removeHandler(this.content, 'mouseup');
            this.removeHandler(this.content, 'mousedown');
            this.removeHandler(this.content, 'touchend');

            if (this._mousemovefunc) {
                this.removeHandler(this.content, 'mousemove', this._mousemovefunc);
            }
            else {
                this.removeHandler(this.content, 'mousemove');
            }
            this.removeHandler(this.content, 'selectstart');
            if (this.overlayContent) {
                this.removeHandler(this.overlayContent, $.jqx.mobile.getTouchEventName('touchend'));
            }
        },

        _updateSize: function()
        {
            if (!this.virtualSize) {
                this._oldheight = null;
                this.virtualSize = this._calculateVirtualSize();
            }

            var self = this;
            self._arrange();
            if (self.host.height() != self._oldheight || self.host.width() != self._oldwidth) {
                var changedWidth = self.host.width() != self._oldwidth;

                if (self.autoItemsHeight) {
                    self._render(false);
                }
                else {
                    if (self.items) {
                        if (self.items.length > 0 && self.virtualItemsCount * self.items[0].height < self._oldheight-2) {
                            self._render(false);
                        }
                        else {
                            var _oldScrollValue = self.vScrollInstance.value;
                            self._updatescrollbars();
                            self._renderItems();
                            if (_oldScrollValue < self.vScrollInstance.max) {
                                self.vScrollInstance.setPosition(_oldScrollValue);
                            }
                            else {
                                self.vScrollInstance.setPosition(self.vScrollInstance.max);
                            }
                        }
                    }
                }
                self._oldwidth = self.host.width();
                self._oldheight = self.host.height();
            }
        },

        _addHandlers: function () {
            var self = this;
            this.focused = false;
            var animating = false;
            var prevValue = 0;
            var object = null;
            var prevValue = 0;
            var newValue = 0;
            var lastScroll = new Date();
            var isTouchDevice = this.isTouchDevice();
 
            this.addHandler(this.vScrollBar, 'valuechanged', function (event) {
                if ($.jqx.browser.msie && $.jqx.browser.version > 9) {
                    setTimeout(function () {
                        self._renderItems();
                    }, 1);
                }
                else self._renderItems();
            });

            this.addHandler(this.hScrollBar, 'valuechanged', function () {
                self._renderItems();
            });

            if (this._mousewheelfunc) {
                this.removeHandler(this.host, 'mousewheel', this._mousewheelfunc);
            }

            this._mousewheelfunc = function (event) {
                self.wheel(event, self);
            };
            this.addHandler(this.host, 'mousewheel', this._mousewheelfunc);

            this.addHandler($(document), 'keydown.listbox' + this.element.id, function (event) {
                self._ctrlKey = event.ctrlKey;
                self._shiftKey = event.shiftKey;
            });
            this.addHandler($(document), 'keyup.listbox' + this.element.id, function (event) {
                self._ctrlKey = event.ctrlKey;
                self._shiftKey = event.shiftKey;
            });

            this.addHandler(this.host, 'keydown', function (event) {
                return self._handleKeyDown(event);
            });

            this.addHandler(this.content, 'mouseleave', function (event) {
                self.focused = false;
                var hoveredItem = $.data(self.element, 'hoveredItem');
                if (hoveredItem != null) {
                    $(hoveredItem).removeClass(self.toThemeProperty('jqx-listitem-state-hover'));
                    $(hoveredItem).removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                    $.data(self.element, 'hoveredItem', null);
                }
            });

            this.addHandler(this.content, 'focus', function (event) {
                if (!self.disabled) {
                    self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));
                    self.focused = true;
                }
            });

            this.addHandler(this.content, 'blur', function (event) {
                self.focused = false;
                self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));
            });

            this.addHandler(this.host, 'focus', function (event) {
                if (!self.disabled) {
                    self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));
                    self.focused = true;
                }
            });

            this.addHandler(this.host, 'blur', function (event) {
                if ($.jqx.browser.msie && $.jqx.browser.version < 9 && self.focused) {
                    return;
                }

                self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));
                self.focused = false;
            });

            this.addHandler(this.content, 'mouseenter', function (event) {
                self.focused = true;
            });
            var hasTransform = $.jqx.utilities.hasTransform(this.host);

            if (this.enableSelection) {
                var isTouch = self.isTouchDevice() && this.touchMode !== true;
                var eventName = !isTouch ? 'mousedown' : 'touchend';

                if (this.overlayContent) {
                    this.addHandler(this.overlayContent, $.jqx.mobile.getTouchEventName('touchend'), function (event) {
                        if (!self.enableSelection) {
                            return true;
                        }

                        if (isTouch) {
                            self._newScroll = new Date();
                            if (self._newScroll - self._lastScroll < 500) {
                                return true;
                            }
                        }

                        var touches = $.jqx.mobile.getTouches(event);
                        var touch = touches[0];
                        if (touch != undefined) {
                            var selfOffset = self.host.offset();
                            var left = parseInt(touch.pageX);
                            var top = parseInt(touch.pageY);
                            if (self.touchMode == true) {
                                left = parseInt(touch._pageX);
                                top = parseInt(touch._pageY);
                            }
                            left = left - selfOffset.left;
                            top = top - selfOffset.top;
                            var item = self._hitTest(left, top);
                            if (item != null && !item.isGroup) {
                                self._newScroll = new Date();
                                if (self._newScroll - self._lastScroll < 500) {
                                    return false;
                                }
                                if (self.checkboxes) {
                                    self._updateItemCheck(item, item.visibleIndex);
                                    return;
                                }


                                if (item.html.indexOf('href') != -1) {
                                    setTimeout(function () {
                                        self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);
                                        self.content.trigger('click');
                                        return false;
                                    }, 100);
                                }
                                else {
                                    self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);
                                    self.content.trigger('click');
                                    return false;
                                }
                            }
                        }
                    });
                }
                else {
                    this.addHandler(this.content, eventName, function (event) {
                        if (!self.enableSelection) {
                            return true;
                        }

                        if (isTouch) {
                            self._newScroll = new Date();
                            if (self._newScroll - self._lastScroll < 500) {
                                return false;
                            }
                        }

                        self.focused = true;
                        if (!self.isTouchDevice()) {
                            self.host.focus();
                        }
                        if (event.target.id != ('listBoxContent' + self.element.id) && self.itemswrapper[0] != event.target) {
                            var target = event.target;
                            var targetOffset = $(target).offset();
                            var selfOffset = self.host.offset();
                            if (hasTransform) {
                                var left = $.jqx.mobile.getLeftPos(target);
                                var top = $.jqx.mobile.getTopPos(target);
                                targetOffset.left = left; targetOffset.top = top;

                                left = $.jqx.mobile.getLeftPos(self.element);
                                top = $.jqx.mobile.getTopPos(self.element);
                                selfOffset.left = left; selfOffset.top = top;
                            }

                            var y = parseInt(targetOffset.top) - parseInt(selfOffset.top);
                            var x = parseInt(targetOffset.left) - parseInt(selfOffset.left);
                            var item = self._hitTest(x, y);
                            if (item != null && !item.isGroup) {
                                var doSelection = function (item, event) {
                                    if (!self._shiftKey)
                                        self._clickedIndex = item.visibleIndex;
                                    if (!self.checkboxes) {
                                        self.selectIndex(item.visibleIndex, false, true, false, 'mouse', event);
                                    } else {
                                        self.selectedIndex = item.visibleIndex;
                                        x = 20 + event.pageX - targetOffset.left;
                                        if (self.rtl) {
                                            var hscroll = self.hScrollBar.css('visibility') != 'hidden' ? self.hScrollInstance.max : self.host.width();
                                            if (x <= self.host.width() - 20) {
                                                self._updateItemCheck(item, item.visibleIndex);
                                            }
                                        }
                                        else {
                                            if (x + self.hScrollInstance.value >= 20) {
                                                self._updateItemCheck(item, item.visibleIndex);
                                            }
                                        }
                                    }
                                }

                                if (!item.disabled) {
                                    if (item.html.indexOf('href') != -1) {
                                        setTimeout(function () {
                                            doSelection(item, event);
                                        }, 100);
                                    }
                                    else {
                                        doSelection(item, event);
                                    }
                                }
                            }
                            if (eventName == 'mousedown') {
                                var rightclick = false;
                                if (event.which) rightclick = (event.which == 3);
                                else if (event.button) rightclick = (event.button == 2);
                                if (rightclick) return true;
                                return false;
                            }
                        }

                        return true;
                    });
                }

                this.addHandler(this.content, 'mouseup', function (event) {
                    self.vScrollInstance.handlemouseup(self, event);
                });

                if ($.jqx.browser.msie) {
                    this.addHandler(this.content, 'selectstart', function (event) {
                        return false;
                    });
                }
            }
            // hover behavior.
            var isTouchDevice = this.isTouchDevice();
            if (this.enableHover && !isTouchDevice) {
                this._mousemovefunc = function (event) {
                    if (isTouchDevice)
                        return true;

                    if (!self.enableHover)
                        return true;

                    var which = $.jqx.browser.msie == true && $.jqx.browser.version < 9 ? 0 : 1;
                    if (event.target == null)
                        return true;

                    if (self.disabled)
                        return true;

                    self.focused = true;
                    var scrolling = self.vScrollInstance.isScrolling();
                    if (!scrolling && event.target.id != ('listBoxContent' + self.element.id)) {
                        if (self.itemswrapper[0] != event.target) {
                            var target = event.target;
                            var targetOffset = $(target).offset();
                            var selfOffset = self.host.offset();
                            if (hasTransform) {
                                var left = $.jqx.mobile.getLeftPos(target);
                                var top = $.jqx.mobile.getTopPos(target);
                                targetOffset.left = left; targetOffset.top = top;

                                left = $.jqx.mobile.getLeftPos(self.element);
                                top = $.jqx.mobile.getTopPos(self.element);
                                selfOffset.left = left; selfOffset.top = top;
                            }
                            var y = parseInt(targetOffset.top) - parseInt(selfOffset.top);
                            var x = parseInt(targetOffset.left) - parseInt(selfOffset.left);
                            var item = self._hitTest(x, y);
                            if (item != null && !item.isGroup && !item.disabled) {
                                var selectedElement = $.data(self.element, 'hoveredItem');
                                if (selectedElement != null) {
                                    $(selectedElement).removeClass(self.toThemeProperty('jqx-listitem-state-hover'));
                                    $(selectedElement).removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                                }

                                $.data(self.element, 'hoveredItem', item.element);
                                var $element = $(item.element);
                                $element.addClass(self.toThemeProperty('jqx-listitem-state-hover'));
                                $element.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                            }
                        }
                    }
                };

                this.addHandler(this.content, 'mousemove', this._mousemovefunc);
            }
        },

        _arrange: function (arrangeScrollbars) {
            if (arrangeScrollbars == undefined) arrangeScrollbars = true;

            var width = null;
            var height = null;
            var me = this;
            var _setHostHeight = function (height) {
                height = me.host.height();
                if (height == 0) {
                    height = 200;
                    me.host.height(height);
                }
                return height;
            }

            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                width = this.width;
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    width = this.width;
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                height = this.height;
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                height = this.height;
            };

            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                this.host.css("width", this.width);
                width = this.host.width();
            }
            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                this.host.css("height", this.height);
                height = _setHostHeight(height);
            }

            if (width != null) {
                width = parseInt(width);
                if (parseInt(this.element.style.width) != parseInt(this.width)) {
                    this.host.width(this.width);
                }
            }

            if (!this.autoHeight) {
                if (height != null) {
                    height = parseInt(height);
                    if (parseInt(this.element.style.height) != parseInt(this.height)) {
                        this.host.height(this.height);
                        _setHostHeight(height);
                    }
                }
            }
            else {
                if (this.virtualSize) {
                    if (this.hScrollBar.css('visibility') != 'hidden') {
                        this.host.height(this.virtualSize.height + parseInt(this.scrollBarSize) + 3);
                        this.height = this.virtualSize.height + parseInt(this.scrollBarSize) + 3;
                        height = this.height;
                    }
                    else {
                        this.host.height(this.virtualSize.height);
                        this.height = this.virtualSize.height;
                        height = this.virtualSize.height;
                    }
                }
            }

            // scrollbar Size.
            var scrollSize = this.scrollBarSize;
            if (isNaN(scrollSize)) {
                scrollSize = parseInt(scrollSize);
                if (isNaN(scrollSize)) {
                    scrollSize = '17px';
                }
                else scrollSize = scrollSize + 'px';
            }

            scrollSize = parseInt(scrollSize);
            var scrollOffset = 4;
            var bottomSizeOffset = 2;
            var rightSizeOffset = 0;
            // right scroll offset. 
            if (this.vScrollBar) {
                if (this.vScrollBar[0].style.visibility != 'hidden') {
                    rightSizeOffset = scrollSize + scrollOffset;
                }
                else {
                    this.vScrollInstance.setPosition(0);
                }
            }
            else return;

            if (this.hScrollBar) {
                // bottom scroll offset.
                if (this.hScrollBar[0].style.visibility != 'hidden') {
                    bottomSizeOffset = scrollSize + scrollOffset;
                }
                else {
                    this.hScrollInstance.setPosition(0);
                }
            }
            else return;

            if (this.autoItemsHeight) {
                this.hScrollBar[0].style.visibility = 'hidden';
                bottomSizeOffset = 0;
            }

            if (height == null) height = 0;
            var hScrollTop = parseInt(height) - scrollOffset - scrollSize;
            if (hScrollTop < 0) hScrollTop = 0;

            if (parseInt(this.hScrollBar[0].style.height) != scrollSize) {
                if (parseInt(scrollSize) < 0) {
                    scrollSize = 0;
                }

                this.hScrollBar[0].style.height = parseInt(scrollSize) + 'px';
            }

            if (this.hScrollBar[0].style.top != hScrollTop + 'px') {
                this.hScrollBar[0].style.top = hScrollTop + 'px';
                this.hScrollBar[0].style.left = '0px';
            }

            var hscrollwidth = width - scrollSize - scrollOffset;
            if (hscrollwidth < 0) hscrollwidth = 0;
            var hScrollWidth =  hscrollwidth + 'px';

            if (this.hScrollBar[0].style.width != hScrollWidth) {
                this.hScrollBar[0].style.width = hScrollWidth;
            }

            if (rightSizeOffset == 0) {
                if (width >= 2) {
                    this.hScrollBar[0].style.width = parseInt(width - 2) + 'px';
                }
            }

            if (scrollSize != parseInt(this.vScrollBar[0].style.width)) {
                this.vScrollBar[0].style.width = parseInt(scrollSize) + 'px';
            }
            if ((parseInt(height) - bottomSizeOffset) != parseInt(this.vScrollBar[0].style.height)) {
                var scrollHeight = parseInt(height) - bottomSizeOffset;
                if (scrollHeight < 0) scrollHeight = 0;
                this.vScrollBar[0].style.height =  scrollHeight + 'px';
            }

            if (width == null) width = 0;
            var vScrollLeft = parseInt(width) - parseInt(scrollSize) - scrollOffset + 'px'; ;
            if (vScrollLeft != this.vScrollBar[0].style.left) {
                if (parseInt(vScrollLeft) >= 0) {
                    this.vScrollBar[0].style.left = vScrollLeft;
                }
                this.vScrollBar[0].style.top = '0px';
            }

            var vScrollInstance = this.vScrollInstance;
            vScrollInstance.disabled = this.disabled;
            if (arrangeScrollbars) {
                vScrollInstance._arrange();
            }

            var hScrollInstance = this.hScrollInstance;
            hScrollInstance.disabled = this.disabled;
            if (arrangeScrollbars) {
                hScrollInstance._arrange();
            }

            if ((this.vScrollBar[0].style.visibility != 'hidden') && (this.hScrollBar[0].style.visibility != 'hidden')) {
                this.bottomRight[0].style.visibility = 'inherit';
                this.bottomRight[0].style.left = 1 + parseInt(this.vScrollBar[0].style.left) + 'px';
                this.bottomRight[0].style.top = 1 + parseInt(this.hScrollBar[0].style.top) + 'px';
                if (this.rtl) {
                    this.bottomRight.css({ left: 0 });
                }
                this.bottomRight[0].style.width = parseInt(scrollSize) + 3 + 'px';
                this.bottomRight[0].style.height = parseInt(scrollSize) + 3 + 'px';
            }
            else {
                this.bottomRight[0].style.visibility = 'hidden';
            }

            if (parseInt(this.content[0].style.width) != (parseInt(width) - rightSizeOffset)) {
                var w = parseInt(width) - rightSizeOffset;
                if (w < 0) w = 0;
                this.content[0].style.width = w + 'px';
            }

            if (this.rtl) {
                this.vScrollBar.css({ left: 0 + 'px', top: '0px' });
                this.hScrollBar.css({ left: this.vScrollBar.width() + 2 + 'px' });
                if (this.vScrollBar[0].style.visibility != 'hidden') {
                    this.content.css('margin-left', 4 + this.vScrollBar.width());
                }
                else {
                    this.content.css('margin-left', 0);
                    this.hScrollBar.css({ left: '0px' });
                }
            }

            if (parseInt(this.content[0].style.height) != (parseInt(height) - bottomSizeOffset)) {
                var h = parseInt(height) - bottomSizeOffset;
                if (h < 0) h = 0;
                this.content[0].style.height = h + 'px';
            }
            if (this.overlayContent) {
                this.overlayContent.width(parseInt(width) - rightSizeOffset);
                this.overlayContent.height(parseInt(height) - bottomSizeOffset);
            }
        },

        // scrolls to a list box item.
        ensureVisible: function (index) {
            if (isNaN(index)) {
                var item = this.getItemByValue(index);
                if (item) {
                    index = item.index;
                }
            }

            var isInView = this.isIndexInView(index);
            if (!isInView) {
                if (index < 0)
                    return;
                if (this.autoHeight) {
                    var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
                    vScrollInstance.setPosition(0);
                }
                else {
                    for (indx = 0; indx < this.visibleItems.length; indx++) {
                        var item = this.visibleItems[indx];
                        if (item.visibleIndex == index && !item.isGroup) {
                            var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
                            var value = vScrollInstance.value;
                            var hScrollVisible = this.hScrollBar.css('visibility') === 'hidden';
                            var hScrollOffset = hScrollVisible ? 0 : this.scrollBarSize + 4;
                            if (item.initialTop < value) {
                                vScrollInstance.setPosition(item.initialTop);
                            }
                            else if (item.initialTop + item.height > value + this.host.height()) {
                                vScrollInstance.setPosition(item.initialTop + item.height + 2 - this.host.height() + hScrollOffset);
                            }

                            break;
                        }
                    }
                }
            }

            this._renderItems();
        },

        scrollTo: function(left, top)
        {
            if (this.vScrollBar.css('visibility') != 'hidden') {
                this.vScrollInstance.setPosition(top);
            }
            if (this.hScrollBar.css('visibility') != 'hidden') {
                this.hScrollInstance.setPosition(left);
            }
        },

        // scrolls down.
        scrollDown: function () {
            if (this.vScrollBar.css('visibility') == 'hidden')
                return false;

            var vScrollInstance = this.vScrollInstance;
            if (vScrollInstance.value + vScrollInstance.largestep <= vScrollInstance.max) {
                vScrollInstance.setPosition(vScrollInstance.value + vScrollInstance.largestep);
                return true;
            }
            else {
                vScrollInstance.setPosition(vScrollInstance.max);
                return true;
            }

            return false;
        },

        // scrolls up.
        scrollUp: function () {
            if (this.vScrollBar.css('visibility') == 'hidden')
                return false;

            var vScrollInstance = this.vScrollInstance;
            if (vScrollInstance.value - vScrollInstance.largestep >= vScrollInstance.min) {
                vScrollInstance.setPosition(vScrollInstance.value - vScrollInstance.largestep);
                return true;
            }
            else {
                if (vScrollInstance.value != vScrollInstance.min) {
                    vScrollInstance.setPosition(vScrollInstance.min);
                    return true;
                }
            }
            return false;
        },

        databind: function (source) {
            this.records = new Array();
            var isdataadapter = source._source ? true : false;
            var dataadapter = new $.jqx.dataAdapter(source,
                {
                    autoBind: false
                }
            );

            if (isdataadapter) {
                dataadapter = source;
                source = source._source;
            }

            var initadapter = function (me) {
                if (source.type != undefined) {
                    dataadapter._options.type = source.type;
                }
                if (source.formatdata != undefined) {
                    dataadapter._options.formatData = source.formatdata;
                }
                if (source.contenttype != undefined) {
                    dataadapter._options.contentType = source.contenttype;
                }
                if (source.async != undefined) {
                    dataadapter._options.async = source.async;
                }
            }

            var updatefromadapter = function (me, type) {
                var getItem = function (record) {
                    if (typeof record === 'string') {
                        var label = record;
                        var value = record;
                    }
                    else {
                        var value = record[me.valueMember];
                        var label = record[me.displayMember];
                    }
                    var listBoxItem = new $.jqx._jqxListBox.item();
                    listBoxItem.label = label;
                    listBoxItem.value = value;
                    listBoxItem.html = "";
                    listBoxItem.visible = true;
                    listBoxItem.originalItem = record;
                    listBoxItem.group = '';
                    listBoxItem.groupHtml = '';
                    listBoxItem.disabled = false;
                    listBoxItem.hasThreeStates = true;
                    return listBoxItem;
                }

                if (type != undefined) {
                    var dataItem = dataadapter._changedrecords[0];
                    if (dataItem) {
                        $.each(dataadapter._changedrecords, function () {
                            var index = this.index;
                            var item = this.record;
                            if (type != 'remove') {
                                var mapItem = getItem(item);
                            }

                            switch (type) {
                                case "update":
                                    me.updateAt(mapItem, index);
                                    break;
                                case "add":
                                    me.insertAt(mapItem, index);
                                    break;
                                case "remove":
                                    me.removeAt(index);
                                    break;
                            }
                        });
                        return;
                    }
                }

                me.records = dataadapter.records;
                var recordslength = me.records.length;
                me.items = new Array();
                me.itemsByValue = new Array();
                for (var i = 0; i < recordslength; i++) {
                    var record = me.records[i];
                    var listBoxItem = getItem(record);
                    listBoxItem.index = i;
                    me.items[i] = listBoxItem;

                    var key = listBoxItem.value;
                    if (listBoxItem.value == "" || listBoxItem.value == null) key = i;
                    me.itemsByValue[$.trim(key).split(" ").join("")] = listBoxItem;
                }
                me._render();
                me._raiseEvent('6');
            }

            initadapter(this);

            var me = this;
            switch (source.datatype) {
                case "local":
                case "array":
                default:
                    if (source.localdata != null) {
                        dataadapter.unbindBindingUpdate(this.element.id);
                        dataadapter.dataBind();
                        updatefromadapter(this);
                        dataadapter.bindBindingUpdate(this.element.id, function (updatetype) {
                            updatefromadapter(me, updatetype);
                        });
                    }
                    break;
                case "json":
                case "jsonp":
                case "xml":
                case "xhtml":
                case "script":
                case "text":
                case "csv":
                case "tab":
                    {
                        if (source.localdata != null) {
                            dataadapter.unbindBindingUpdate(this.element.id);
                            dataadapter.dataBind();
                            updatefromadapter(this);
                            dataadapter.bindBindingUpdate(this.element.id, function () {
                                updatefromadapter(me);
                            });
                            return;
                        }

                        var postdata = {};
                        if (dataadapter._options.data) {
                            $.extend(dataadapter._options.data, postdata);
                        }
                        else {
                            if (source.data) {
                                $.extend(postdata, source.data);
                            }
                            dataadapter._options.data = postdata;
                        }
                        var updateFunc = function () {
                            updatefromadapter(me);
                        }

                        dataadapter.unbindDownloadComplete(me.element.id);
                        dataadapter.bindDownloadComplete(me.element.id, updateFunc);

                        dataadapter.dataBind();
                    }
            }
        },

        loadItems: function (items) {
            if (items == null) {
                this.groups = new Array();
                this.items = new Array();
                this.visualItems = new Array();
                return;
            }

            var self = this;
            var index = 0;
            var length = 0;
            var itemIndex = 0;
            this.groups = new Array();
            this.items = new Array();
            this.visualItems = new Array();
            var listItems = new Array();
            this.itemsByValue = new Array();

            $.map(items, function (item) {
                if (item == undefined)
                    return null;

                var listBoxItem = new $.jqx._jqxListBox.item();
                var group = item.group;
                var groupHtml = item.groupHtml;
                var title = item.title;

                if (title == null || title == undefined) {
                    title = '';
                }

                if (group == null || group == undefined) {
                    group = '';
                }

                if (groupHtml == null || groupHtml == undefined) {
                    groupHtml = '';
                }

                if (!self.groups[group]) {
                    self.groups[group] = { items: new Array(), index: -1, caption: group, captionHtml: groupHtml };
                    index++;

                    var groupID = index + 'jqxGroup';
                    self.groups[groupID] = self.groups[group];
                    length++;
                    self.groups.length = length;
                }

                var uniqueGroup = self.groups[group];
                uniqueGroup.index++;
                uniqueGroup.items[uniqueGroup.index] = listBoxItem;

                if (typeof item === "string") {
                    listBoxItem.label = item;
                    listBoxItem.value = item;
                }
                else if (item.label == null && item.value == null && item.html == null && item.group == null && item.groupHtml == null) {
                    listBoxItem.label = item.toString();
                    listBoxItem.value = item.toString();
                }
                else {
                    listBoxItem.label = item.label || item.value;
                    listBoxItem.value = item.value || item.label;
                }
              
                if (typeof item != "string") {
                    if (self.displayMember != "") {
                        if (item[self.displayMember] != undefined) {
                            listBoxItem.label = item[self.displayMember];
                        }
                    }

                    if (self.valueMember != "") {
                        listBoxItem.value = item[self.valueMember];
                    }
                }

                listBoxItem.hasThreeStates = item.hasThreeStates != undefined ? item.hasThreeStates : true;
                listBoxItem.originalItem = item;
                listBoxItem.title = title;
                listBoxItem.html = item.html || '';
                if (item.html && item.html != '') {
                    //     listBoxItem.label = listBoxItem.value = item.html;
                    if (title && title != '') {
                        //           listBoxItem.label = listBoxItem.value = title;
                    }
                }

                listBoxItem.group = group;
                listBoxItem.checked = item.checked || false;
                listBoxItem.groupHtml = item.groupHtml || '';
                listBoxItem.disabled = item.disabled || false;
                listBoxItem.visible = item.visible != undefined ? item.visible : true;
                listBoxItem.index = itemIndex;
                listItems[itemIndex] = listBoxItem;
                itemIndex++;
                return listBoxItem;
            });

            var itemsArray = new Array();
            var uniqueItemIndex = 0;

            if (this.fromSelect == undefined || this.fromSelect == false) {
                for (var indx = 0; indx < length; indx++) {
                    var index = indx + 1;
                    var groupID = index + 'jqxGroup';
                    var group = this.groups[groupID];
                    if (group == undefined || group == null)
                        break;

                    if (indx == 0 && group.caption == '' && group.captionHtml == '' && length <= 1) {
                        for (var i = 0; i < group.items.length; i++) {
                            var key = group.items[i].value;
                            if (group.items[i].value == "" || group.items[i].value == null) key = i;
                            this.itemsByValue[$.trim(key).split(" ").join("")] = group.items[i];
                        }
                        return group.items;
                    }
                    else {
                        var listBoxItem = new $.jqx._jqxListBox.item();
                        listBoxItem.isGroup = true;
                        listBoxItem.label = group.caption;
                        if (group.caption == '' && group.captionHtml == '') {
                            group.caption = this.emptyGroupText;
                            listBoxItem.label = group.caption;
                        }

                        listBoxItem.html = group.captionHtml;
                        itemsArray[uniqueItemIndex] = listBoxItem;
                 
                        uniqueItemIndex++;
                    }

                    for (var j = 0; j < group.items.length; j++) {
                        itemsArray[uniqueItemIndex] = group.items[j];
                        var key = group.items[j].value;
                        if (group.items[j].value == "" || group.items[j].value == null) key = uniqueItemIndex;
                        self.itemsByValue[$.trim(key).split(" ").join("")] = group.items[j];

                        uniqueItemIndex++;
                   
                    }
                }
            }
            else {
                var uniqueItemIndex = 0;
                var checkedGroups = new Array();

                $.each(listItems, function () {
                    if (!checkedGroups[this.group]) {
                        if (this.group != '') {
                            var listBoxItem = new $.jqx._jqxListBox.item();
                            listBoxItem.isGroup = true;
                            listBoxItem.label = this.group;
                            itemsArray[uniqueItemIndex] = listBoxItem;
                            uniqueItemIndex++;
                            checkedGroups[this.group] = true;
                        }
                    }

                    itemsArray[uniqueItemIndex] = this;
                    var key = this.value;
                    if (this.value == "" || this.value == null) key = uniqueItemIndex - 1;
                    self.itemsByValue[$.trim(key).split(" ").join("")] = this;

                    uniqueItemIndex++;
                });
            }

            return itemsArray;
        },

        _mapItem: function (item) {
            var listBoxItem = new $.jqx._jqxListBox.item();
            if (this.displayMember) {
                if (item.label == undefined) {
                    item.label = item[this.displayMember];
                }
                if (item.value == undefined) {
                    item.value = item[this.valueMember];
                }
            }

            if (typeof item === "string") {
                listBoxItem.label = item;
                listBoxItem.value = item;
            }
            else if (typeof item === 'number') {
                listBoxItem.label = item.toString();
                listBoxItem.value = item.toString();
            }
            else {
                listBoxItem.label = item.label || item.value;
                listBoxItem.value = item.value || item.label;
            }
            if (listBoxItem.label == undefined && listBoxItem.value == undefined && listBoxItem.html == undefined) {
                listBoxItem.label = listBoxItem.value = item;
            }

            listBoxItem.html = item.html || '';
            listBoxItem.group = item.group || '';
            listBoxItem.title = item.title || '';
            listBoxItem.groupHtml = item.groupHtml || '';
            listBoxItem.disabled = item.disabled || false;
            listBoxItem.visible = item.visible || true;
            return listBoxItem;
        },

        // adds a new item.
        addItem: function (item) {
            return this.insertAt(item, this.items ? this.items.length : 0);
        },

        _getItemByParam: function(item)
        {
            if (item != null) {
                if (item.index == undefined) {
                    var newItem = this.getItemByValue(item);
                    if (newItem) item = newItem;
                }
            }
            return item;
        },

        insertItem: function(item, index)
        {
            var newItem = this._getItemByParam(item);
            return this.insertAt(newItem, index);
        },

        updateItem: function(item, oldItem)
        {
            var oldItemIndx = this._getItemByParam(oldItem);
            if (oldItemIndx && oldItemIndx.index != undefined) {
                return this.updateAt(item, oldItemIndx.index);
            }
            return false;
        },

        updateAt: function (item, index) {
            if (item != null) {
                var listBoxItem = this._mapItem(item);
                this.itemsByValue[$.trim(listBoxItem.value).split(" ").join("")] = this.items[index];

                this.items[index].value = listBoxItem.value;
                this.items[index].label = listBoxItem.label;
                this.items[index].html = listBoxItem.html;
                this.items[index].disabled = listBoxItem.disabled;

            }
            this._cachedItemHtml = [];
            this._renderItems();
            if (this.rendered) {
                this.rendered();
            }
        },

        // inserts an item at a specific position.
        insertAt: function (item, index) {
            if (item == null)
                return false;

            this._cachedItemHtml = [];
            if (this.items == undefined || this.items.length == 0) {
                this.source = new Array();
                this.refresh();
                var listBoxItem = this._mapItem(item);
                listBoxItem.index = 0;
                this.items[this.items.length] = listBoxItem;
                this._addItems(true);
                this._renderItems();
                if (this.rendered) {
                    this.rendered();
                }
                if (this.allowDrag && this._enableDragDrop) {
                    this._enableDragDrop();
                }
                var key = listBoxItem.value;
                if (listBoxItem.value == "" || listBoxItem.value == null) key = index;
                this.itemsByValue[$.trim(key).split(" ").join("")] = listBoxItem;

                return false;
            }

            var listBoxItem = this._mapItem(item);
            if (index == -1 || index == undefined || index == null || index >= this.items.length) {
                listBoxItem.index = this.items.length;
                this.items[this.items.length] = listBoxItem;
            }
            else {
                var itemsArray = new Array();
                var currentItemIndex = 0;
                var inserted = false;
                var visualItemIndex = 0;
                for (var itemIndex = 0; itemIndex < this.items.length; itemIndex++) {
                    if (this.items[itemIndex].isGroup == false) {
                        if (visualItemIndex >= index && !inserted) {
                            itemsArray[currentItemIndex++] = listBoxItem;
                            listBoxItem.index = index;
                            visualItemIndex++;
                            inserted = true;
                        }
                    }

                    itemsArray[currentItemIndex] = this.items[itemIndex];
                    if (!this.items[itemIndex].isGroup) {
                        itemsArray[currentItemIndex].index = visualItemIndex;
                        visualItemIndex++;
                    }
                    currentItemIndex++;
                }

                this.items = itemsArray;
            }
            var key = listBoxItem.value;
            if (listBoxItem.value == "" || listBoxItem.value == null) key = index;
            this.itemsByValue[$.trim(key).split(" ").join("")] = listBoxItem;

            this.visibleItems = new Array();
            this.renderedVisibleItems = new Array();
            var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            var value = vScrollInstance.value;
            vScrollInstance.setPosition(0);
            if ((this.allowDrag && this._enableDragDrop) || (this.virtualSize && this.virtualSize.height < 10 + this.host.height())) {
                this._addItems(true);
            }
            else {
                this._addItems(false);
            }
            this._renderItems();
            if (this.allowDrag && this._enableDragDrop) {
                this._enableDragDrop();
            }
            vScrollInstance.setPosition(value);
            if (this.rendered) {
                this.rendered();
            }
            return true;
        },

        // removes an item from a specific position.
        removeAt: function (index) {
            if (index < 0 || index > this.items.length - 1)
                return false;
            if (index == undefined)
                return false;

            var itemHeight = this.items[index].height;
            var key = this.items[index].value;
            if (key == "" || key == null) key = index;
            this.itemsByValue[$.trim(key).split(" ").join("")] = null;

            this.items.splice(index, 1);
            var itemsArray = new Array();
            var currentItemIndex = 0;
            var inserted = false;
            var visualItemIndex = 0;
            for (var itemIndex = 0; itemIndex < this.items.length; itemIndex++) {
                itemsArray[currentItemIndex] = this.items[itemIndex];
                if (!this.items[itemIndex].isGroup) {
                    itemsArray[currentItemIndex].index = visualItemIndex;
                    visualItemIndex++;
                }
                currentItemIndex++;
            }

            this.items = itemsArray;

            var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            var vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            var value = vScrollInstance.value;
            vScrollInstance.setPosition(0);

            this.visibleItems = new Array();
            this.renderedVisibleItems = new Array();
            if (this.items.length > 0) {
                if (this.virtualSize) {
                    this.virtualSize.height -= itemHeight;
                    var virtualItemsCount = this.virtualSize.itemsPerPage * 2;
                    if (this.autoHeight) {
                        virtualItemsCount = this.items.length;
                    }

                    this.virtualItemsCount = Math.min(virtualItemsCount, this.items.length);
                }

                this._updatescrollbars();
            }
            else {
                this._addItems();
            }
            this._renderItems();
            if (this.allowDrag && this._enableDragDrop) {
                this._enableDragDrop();
            }
            if (this.vScrollBar.css('visibility') != 'hidden') {
                vScrollInstance.setPosition(value);
            }
            else {
                vScrollInstance.setPosition(0);
            }
            this.itemsByValue = new Array();
            for (var i = 0; i < this.items.length; i++) {         
                var key = this.items[i].value;
                if (this.items[i].value == "" || this.items[i].value == null) key = i;
                this.itemsByValue[$.trim(key).split(" ").join("")] = this.items[i];
            }
            if (this.rendered) {
                this.rendered();
            }

            return true;
        },

        removeItem: function (item) {
            var newItem = this._getItemByParam(item);
            this.removeAt(newItem.index);
        },

        // gets all items.
        getItems: function () {
            return this.items;
        },

        disableItem: function (item) {
            var newItem = this._getItemByParam(item);
            this.disableAt(newItem.index);
        },

        enableItem: function (item) {
            var newItem = this._getItemByParam(item);
            this.enableAt(newItem.index);
        },

        // disables an item at position.
        disableAt: function (index) {
            if (!this.items)
                return false;

            if (index < 0 || index > this.items.length - 1)
                return false;

            this.items[index].disabled = true;
            this._renderItems();
            return true;
        },

        // enables an item at position.
        enableAt: function (index) {
            if (!this.items)
                return false;

            if (index < 0 || index > this.items.length - 1)
                return false;

            this.items[index].disabled = false;
            this._renderItems();
            return true;
        },

        destroy: function () {
            if (this.source && this.source.unbindBindingUpdate) {
                this.source.unbindBindingUpdate(this.element.id);
            }

            this._removeHandlers();
            this.vScrollBar.jqxScrollBar('destroy');
            this.hScrollBar.jqxScrollBar('destroy');
            this.vScrollBar.remove();
            this.hScrollBar.remove();
            this.content.remove();
            $.jqx.utilities.resize(this.host, null, true);

            var vars = $.data(this.element, "jqxListBox");
            delete this.hScrollInstance;
            delete this.vScrollInstance;
            delete this.vScrollBar;
            delete this.hScrollBar;
            delete this.content;
            delete this.bottomRight;
            delete this.itemswrapper;
            delete this.visualItems;
            delete this.visibleItems;
            delete this.items;
            delete this.groups;
            delete this.renderedVisibleItems;
            delete this._mousewheelfunc;
            delete this._mousemovefunc;
            delete this._cachedItemHtml;
            delete this.itemsByValue;
            delete this._activeElement;
            delete this.source;
            delete this.events;
      
            if (this.input) {
                this.input.remove();
                delete this.input;
            }
            if (vars) {
                delete vars.instance;
            }
            this.host.removeData();
            this.host.removeClass();
            this.host.remove();
            this.element = null;
            delete this.element;
            this.host = null;
            delete this.set;
            delete this.get;
            delete this.call;
            delete this.host;
        },

        _raiseEvent: function (id, arg) {
            if (this._stopEvents == true)
                return true;

            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            args = arg;
            args.owner = this;
            this._updateInputSelection();
            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;
            if (this.host != null) {
                var result = this.host.trigger(event);
            }
            return result;
        }
    })
})(jQuery);

(function ($) {
    $.jqx._jqxListBox.item = function () {
        var result =
        {
            group: '',
            groupHtml: '',
            selected: false,
            isGroup: false,
            highlighted: false,
            value: null,
            label: '',
            html: null,
            visible: true,
            disabled: false,
            element: null,
            width: null,
            height: null,
            initialTop: null,
            top: null,
            left: null,
            title: '',
            index: -1,
            checkBoxElement: null,
            originalItem: null,
            checked: false,
            visibleIndex: -1
        }
        return result;
    }
})(jQuery);
/*
 * file from "src\jqxdropdownlist.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {

    $.jqx.jqxWidget("jqxDropDownList", "", {});

    $.extend($.jqx._jqxDropDownList.prototype, {
        defineInstance: function () {
            // enables/disables the dropdownlist.
            this.disabled = false;
            // gets or sets the listbox width.
            this.width = null;
            // gets or sets the listbox height.
            this.height = null;
            // Represents the collection of list items.
            this.items = new Array();
            // Gets or sets the selected index.
            this.selectedIndex = -1;
            // data source.
            this.source = null;
            // gets or sets the scrollbars size.
            this.scrollBarSize = 15;
            // gets or sets the scrollbars size.
            this.arrowSize = 19;
            // enables/disables the hover state.
            this.enableHover = true;
            // enables/disables the selection.
            this.enableSelection = true;
            // gets the visible items. // this property is internal for the dropdownlist.
            this.visualItems = new Array();
            // gets the groups. // this property is internal for the dropdownlist.
            this.groups = new Array();
            // gets or sets whether the items width should be equal to the dropdownlist's width.
            this.equalItemsWidth = true;
            // gets or sets the height of the ListBox Items. When the itemHeight == - 1, each item's height is equal to its desired height.
            this.itemHeight = -1;
            // represents the dropdownlist's events.
            this.visibleItems = new Array();
            // emptry group's text.
            this.emptyGroupText = 'Group';
            this.checkboxes = false;
            // Type: Number
            // Default: 100
            // Showing Popup Animation's delay.
            if (this.openDelay == undefined) {
                this.openDelay = 250;
            }
            // Type: Number
            // Default: 200
            // Hiding Popup Animation's delay.
            if (this.closeDelay == undefined) {
                this.closeDelay = 300;
            }
            // default, none
            // Type: String.
            // enables or disables the animation.
            this.animationType = 'default';
            this.autoOpen = false;
            // Type: String
            // Default: auto ( the drop down takes the dropdownlist's width.)
            // Sets the popup's width.
            this.dropDownWidth = 'auto';
            // Type: String
            // Default: 200px ( the height is 200px )
            // Sets the popup's height.
            this.dropDownHeight = '200px';
            // Type: Boolean
            // Default: false
            // Sets the popup's height to be equal to the items summary height;            
            this.autoDropDownHeight = false;
            this.keyboardSelection = true;

            // Type: Boolean
            // Default: false
            // Enables or disables the browser detection.
            this.enableBrowserBoundsDetection = false;
            this.dropDownHorizontalAlignment = 'left';
            this.displayMember = "";
            this.valueMember = "";
            this.searchMode = 'startswithignorecase';
            this.incrementalSearch = true;
            this.incrementalSearchDelay = 700;
            this.renderer = null;
            this.placeHolder = "Please Choose:";
            this.promptText = "Please Choose:";
            this.emptyString = "";
            this.rtl = false;
            this.selectionRenderer = null;
            this.listBox = null;
            this.popupZIndex = 9999999999999;
            this.renderMode = "default";
            this.touchMode = "auto";
            this._checkForHiddenParent = true;
            this.aria =
            {
                "aria-disabled": { name: "disabled", type: "boolean" }
            };
            this.events =
	   	    [
            // occurs when the dropdownlist is opened.
		      'open',
            // occurs when the dropdownlist is closed.
              'close',
            // occurs when an item is selected.
              'select',
            // occurs when an item is unselected.
              'unselect',
            // occurs when the selection is changed.
              'change',
            // triggered when the user checks or unchecks an item. 
              'checkChange',
            // triggered when the binding operation is completed.
              'bindingComplete'
           ];
        },

        createInstance: function (args) {
            this.render();
        },

        render: function () {
            if (!this.width) this.width = 200;
            if (!this.height) this.height = 25;
            this.element.innerHTML = "";
            this.isanimating = false;
            this.id = this.element.id || $.jqx.utilities.createId();
            this.host.attr('role', 'combobox');
            $.jqx.aria(this, "aria-autocomplete", "both");
            $.jqx.aria(this, "aria-readonly", false);

            var comboStructure = $("<div tabIndex=0 style='background-color: transparent; -webkit-appearance: none; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; border: 0px; position: relative;'>" +
                "<div id='dropdownlistWrapper' style='outline: none; background-color: transparent; border: none; float: left; width:100%; height: 100%; position: relative;'>" +
                "<div id='dropdownlistContent' style='outline: none; background-color: transparent; border: none; float: left; position: relative;'/>" +
                "<div id='dropdownlistArrow' style='background-color: transparent; border: none; float: right; position: relative;'><div></div></div>" +
                "</div>" +
                "</div>");
            this._addInput();

            if ($.jqx._jqxListBox == null || $.jqx._jqxListBox == undefined) {
                throw new Error("jqxDropDownList: Missing reference to jqxlistbox.js.");
            }
            var me = this;

            this.touch = $.jqx.mobile.isTouchDevice();
            this.comboStructure = comboStructure;
            this.host.append(comboStructure);

            this.dropdownlistWrapper = this.host.find('#dropdownlistWrapper');
            this.dropdownlistArrow = this.host.find('#dropdownlistArrow');
            this.arrow = $(this.dropdownlistArrow.children()[0]);
            this.dropdownlistContent = this.host.find('#dropdownlistContent');
            this.dropdownlistContent.addClass(this.toThemeProperty('jqx-dropdownlist-content'));
            this.dropdownlistWrapper.addClass(this.toThemeProperty('jqx-disableselect'));
            if (this.rtl) {
                this.dropdownlistContent.addClass(this.toThemeProperty('jqx-rtl'));
                this.dropdownlistContent.addClass(this.toThemeProperty('jqx-dropdownlist-content-rtl'));
            }
            this.addHandler(this.dropdownlistWrapper, 'selectstart', function () { return false; });
            this.dropdownlistWrapper[0].id = "dropdownlistWrapper" + this.element.id;
            this.dropdownlistArrow[0].id = "dropdownlistArrow" + this.element.id;
            this.dropdownlistContent[0].id = "dropdownlistContent" + this.element.id;
            if (this.promptText != "Please Choose:") this.placeHolder = this.promptText;
            var hostClassName = this.toThemeProperty('jqx-widget') + " " + this.toThemeProperty('jqx-dropdownlist-state-normal') + " " + this.toThemeProperty('jqx-rc-all') + " " + this.toThemeProperty('jqx-fill-state-normal');
            this.element.className += " " + hostClassName;
            this._firstDiv = this.host.find('div:first');

            try {
                var listBoxID = 'listBox' + this.id;
                var oldContainer = $($.find('#' + listBoxID));
                if (oldContainer.length > 0) {
                    oldContainer.remove();
                }
                $.jqx.aria(this, "aria-owns", listBoxID);
                $.jqx.aria(this, "aria-haspopup", true);

                var container = $("<div style='overflow: hidden; background-color: transparent; border: none; position: absolute;' id='listBox" + this.id + "'><div id='innerListBox" + this.id + "'></div></div>");
                container.hide();

                container.appendTo(document.body);
                this.container = container;
                this.listBoxContainer = $($.find('#innerListBox' + this.id));

                var width = this.width;
                if (this.dropDownWidth != 'auto') {
                    width = this.dropDownWidth;
                }
                if (width == null) {
                    width = this.host.width();
                    if (width == 0) width = this.dropDownWidth;
                }

                if (this.dropDownHeight == null) {
                    this.dropDownHeight = 200;
                }
                var me = this;
                this.container.width(parseInt(width) + 25);
                this.container.height(parseInt(this.dropDownHeight) + 25);
                this.addHandler(this.listBoxContainer, 'bindingComplete', function (event) {
                    me._raiseEvent('6');
                });

                this.listBoxContainer.jqxListBox({_checkForHiddenParent: false,
                    touchMode: this.touchMode, checkboxes: this.checkboxes, rtl: this.rtl, emptyString: this.emptyString, itemHeight: this.itemHeight, width: width, searchMode: this.searchMode, incrementalSearch: this.incrementalSearch, incrementalSearchDelay: this.incrementalSearchDelay, displayMember: this.displayMember, valueMember: this.valueMember, height: this.dropDownHeight, autoHeight: this.autoDropDownHeight, scrollBarSize: this.scrollBarSize, selectedIndex: this.selectedIndex, source: this.source, theme: this.theme,
                    rendered: function () {
                        if (me.selectedIndex != me.listBoxContainer.jqxListBox('selectedIndex')) {
                            me.listBox = $.data(me.listBoxContainer[0], "jqxListBox").instance;
                            me.listBoxContainer.jqxListBox({ selectedIndex: me.selectedIndex });
                            me.renderSelection('mouse');
                        } else {
                            me.renderSelection('mouse');
                        }
                    }, renderer: this.renderer
                });
                this.listBoxContainer.css({ position: 'absolute', zIndex: this.popupZIndex, top: 0, left: 0 });
                this.listBox = $.data(this.listBoxContainer[0], "jqxListBox").instance;
                this.listBox.enableSelection = this.enableSelection;
                this.listBox.enableHover = this.enableHover;
                this.listBox.equalItemsWidth = this.equalItemsWidth;
                this.listBox.selectIndex(this.selectedIndex);
                this.listBox._arrange();
                this.listBoxContainer.addClass(this.toThemeProperty('jqx-popup'));
                if ($.jqx.browser.msie) {
                    this.listBoxContainer.addClass(this.toThemeProperty('jqx-noshadow'));
                }

                this.addHandler(this.listBoxContainer, 'unselect', function (event) {
                    me._raiseEvent('3', { index: event.args.index, type: event.args.type, item: event.args.item });
                });

                this.addHandler(this.listBoxContainer, 'change', function (event) {
                    me._raiseEvent('4', { index: event.args.index, type: event.args.type, item: event.args.item });
                });

                if (this.animationType == 'none') {
                    this.container.css('display', 'none');
                }
                else {
                    this.container.hide();
                }
            }
            catch (e) {

            }

            var self = this;
            this.propertyChangeMap['disabled'] = function (instance, key, oldVal, value) {
                if (value) {
                    instance.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-disabled'));
                    instance.host.addClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    instance.dropdownlistContent.addClass(self.toThemeProperty('jqx-dropdownlist-content-disabled'));
                }
                else {
                    instance.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-disabled'));
                    instance.host.removeClass(self.toThemeProperty('jqx-fill-state-disabled'));
                    instance.dropdownlistContent.removeClass(self.toThemeProperty('jqx-dropdownlist-content-disabled'));
                }
                $.jqx.aria(instance, "aria-disabled", instance.disabled);
            }

            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-dropdownlist-state-disabled'));
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
                this.dropdownlistContent.addClass(this.toThemeProperty('jqx-dropdownlist-content-disabled'));
            }

            this.arrow.addClass(this.toThemeProperty('jqx-icon-arrow-down'));
            this.arrow.addClass(this.toThemeProperty('jqx-icon'));

            if (this.renderMode === "simple") {
                this.arrow.remove();
                this.host.removeClass(this.toThemeProperty('jqx-fill-state-normal'));
                this.host.removeClass(this.toThemeProperty('jqx-rc-all'));
            }

            this._updateHandlers();
            this._setSize();
            this._arrange();
            if (this.listBox) {
                this.renderSelection();
            }

            // fix for IE7
            if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                if (this.host.parents('.jqx-window').length > 0) {
                    var zIndex = this.host.parents('.jqx-window').css('z-index');
                    container.css('z-index', zIndex + 10);
                    this.listBoxContainer.css('z-index', zIndex + 10);
                }
            }
        },

        resize: function(width, height)
        {
            this.width = width;
            this.height = height;
            this._setSize();
            this._arrange();
        },

        val: function (value) {
            if (!this.dropdownlistContent) return "";
            if (this.input && arguments.length == 0) {
                return this.input.val();
            }

            var item = this.getItemByValue(value);
            if (item != null) {
                this.selectItem(item);
            }

            if (this.input) {
                return this.input.val();
            }
        },

        focus: function () {
            try
            {
                var me = this;
                var doFocus = function () {
                    me.host.focus();
                    if (me._firstDiv) {
                        me._firstDiv.focus();
                    }
                }
                doFocus();
                setTimeout(function () {
                    doFocus();
                }, 10);
            }
            catch (error) {
            }
        },

        _addInput: function () {
            var name = this.host.attr('name');
            if (!name) name = this.element.id;
            this.input = $("<input type='hidden'/>");
            this.host.append(this.input);
            this.input.attr('name', name);
        },

        getItems: function () {
            if (!this.listBox) {
                return new Array();
            }

            return this.listBox.items;
        },

        getVisibleItems: function () {
            return this.listBox.getVisibleItems();
        },

        _setSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };

            var isPercentage = false;
            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                isPercentage = true;
                this.host.width(this.width);
            }

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                isPercentage = true;
                this.host.height(this.height);
            }

            var me = this;
            var resizeFunc = function () {
                me._arrange();
                if (me.dropDownWidth == 'auto') {
                    var width = me.host.width();
                    me.listBoxContainer.jqxListBox({ width: width });
                    me.container.width(parseInt(width) + 25);
                }
            }

            if (isPercentage) {
                var width = this.host.width();
                if (this.dropDownWidth != 'auto') {
                    width = this.dropDownWidth;
                }
                this.listBoxContainer.jqxListBox({ width: width });
                this.container.width(parseInt(width) + 25);
            }
            $.jqx.utilities.resize(this.host, function () {
                resizeFunc();
            }, false, this._checkForHiddenParent);
        },

        // returns true when the listbox is opened, otherwise returns false.
        isOpened: function () {
            var me = this;
            var openedListBox = $.data(document.body, "openedJQXListBox" + this.id);
            if (openedListBox != null && openedListBox == me.listBoxContainer) {
                return true;
            }

            return false;
        },

        _updateHandlers: function () {
            var self = this;
            var hovered = false;
            this.removeHandlers();
            if (!this.touch) {
                this.addHandler(this.host, 'mouseenter', function () {
                    if (!self.disabled && self.enableHover && self.renderMode !== 'simple') {
                        hovered = true;
                        self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-hover'));
                        self.arrow.addClass(self.toThemeProperty('jqx-icon-arrow-down-hover'));
                        self.host.addClass(self.toThemeProperty('jqx-fill-state-hover'));
                    }
                });

                this.addHandler(this.host, 'mouseleave', function () {
                    if (!self.disabled && self.enableHover && self.renderMode !== 'simple') {
                        self.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-hover'));
                        self.host.removeClass(self.toThemeProperty('jqx-fill-state-hover'));
                        self.arrow.removeClass(self.toThemeProperty('jqx-icon-arrow-down-hover'));
                        hovered = false;
                    }
                });
            }

            if (this.host.parents()) {
                this.addHandler(this.host.parents(), 'scroll.dropdownlist' + this.element.id, function (event) {
                    var opened = self.isOpened();
                    if (opened) {
                        self.close();
                    }
                });
            }

            var eventName = 'mousedown';
            if (this.touch) eventName = $.jqx.mobile.getTouchEventName('touchstart');
            this.addHandler(this.dropdownlistWrapper, eventName,
            function (event) {
                if (!self.disabled) {
                    var isOpen = self.container.css('display') == 'block';
                    if (!self.isanimating) {
                        if (isOpen) {
                            self.hideListBox();
                            return false;
                        }
                        else {
                            self.showListBox();
                        }
                    }
                }
            });

            if (self.autoOpen) {
                this.addHandler(this.host, 'mouseenter', function () {
                    var isOpened = self.isOpened();
                    if (!isOpened && self.autoOpen) {
                        self.open();
                        self.host.focus();
                    }
                });

                $(document).on('mousemove.' + self.id, function (event) {
                    var isOpened = self.isOpened();
                    if (isOpened && self.autoOpen) {
                        var offset = self.host.coord();
                        var top = offset.top;
                        var left = offset.left;
                        var popupOffset = self.container.coord();
                        var popupLeft = popupOffset.left;
                        var popupTop = popupOffset.top;

                        canClose = true;

                        if (event.pageY >= top && event.pageY <= top + self.host.height()) {
                            if (event.pageX >= left && event.pageX < left + self.host.width())
                                canClose = false;
                        }
                        if (event.pageY >= popupTop && event.pageY <= popupTop + self.container.height()) {
                            if (event.pageX >= popupLeft && event.pageX < popupLeft + self.container.width())
                                canClose = false;
                        }

                        if (canClose) {
                            self.close();
                        }
                    }
                });
            }

            if (this.touch) {
                this.addHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.' + this.id, self.closeOpenedListBox, { me: this, listbox: this.listBox, id: this.id });
            }
            else this.addHandler($(document), 'mousedown.' + this.id, self.closeOpenedListBox, { me: this, listbox: this.listBox, id: this.id });

            this.addHandler(this.host, 'keydown', function (event) {
                var isOpen = self.container.css('display') == 'block';

                if (self.host.css('display') == 'none') {
                    return true;
                }

                if (event.keyCode == '13' || event.keyCode == '9') {
                    if (!self.isanimating) {
                        if (isOpen) {
                            self.renderSelection();
                            if (event.keyCode == '13') {
                                self._firstDiv.focus();
                            }
                            self.hideListBox();
                            if (!self.keyboardSelection) {
                                self._raiseEvent('2', { index: self.selectedIndex, type: 'keyboard', item: self.getItem(self.selectedIndex) });
                            }
                        }
                        if (isOpen && event.keyCode != '9') {
                            return false;
                        }
                        return true;
                    }
                }

                if (event.keyCode == 115) {
                    if (!self.isanimating) {
                        if (!self.isOpened()) {
                            self.showListBox();
                        }
                        else if (self.isOpened()) {
                            self.hideListBox();
                        }
                    }
                    return false;
                }

                if (event.altKey) {
                    if (self.host.css('display') == 'block') {
                        if (event.keyCode == 38) {
                            if (self.isOpened()) {
                                self.hideListBox();
                                return true;
                            }
                        }
                        else if (event.keyCode == 40) {
                            if (!self.isOpened()) {
                                self.showListBox();
                                return true;
                            }
                        }
                    }
                }

                if (event.keyCode == '27') {
                    if (!self.ishiding) {
                        self.hideListBox();
                        if (self.tempSelectedIndex != undefined) {
                            self.selectIndex(self.tempSelectedIndex);
                        }
                        return true;
                    }
                }

                if (!self.disabled) {
                    return self.listBox._handleKeyDown(event);
                }
            });
            this.addHandler(this.listBoxContainer, 'checkChange', function (event) {
                self.renderSelection();
                self._updateInputSelection();
                self._raiseEvent(5, { label: event.args.label, value: event.args.value, checked: event.args.checked, item: event.args.item });
            });

            this.addHandler(this.listBoxContainer, 'select', function (event) {
                if (!self.disabled) {
                    if (event.args.type == 'keyboard' && !self.isOpened()) {
                        self.renderSelection();
                    }

                    if (event.args.type != 'keyboard' || self.keyboardSelection) {
                        self.renderSelection();
                        self._raiseEvent('2', { index: event.args.index, type: event.args.type, item: event.args.item, originalEvent: event.args.originalEvent });
                        if (event.args.type == 'mouse') {
                            if (!self.checkboxes) {
                                self.hideListBox();
                                if (self._firstDiv) {
                                    self._firstDiv.focus();
                                }
                            }
                        }
                    }
                }
            });
            if (this.listBox) {
                if (this.listBox.content) {
                    this.addHandler(this.listBox.content, 'click', function (event) {
                        if (!self.disabled) {
                            if (self.listBox.itemswrapper && event.target === self.listBox.itemswrapper[0])
                                return true;

                            self.renderSelection('mouse');
                            if (!self.touch) {
                                if (!self.ishiding) {
                                    if (!self.checkboxes) {
                                        self.hideListBox();
                                        if (self._firstDiv) {
                                            self._firstDiv.focus();
                                        }
                                    }
                                }
                            }
                            if (!self.keyboardSelection) {
                                if (self._oldSelectedInd == undefined) self._oldSelectedIndx = self.selectedIndex;

                                if (self.selectedIndex != self._oldSelectedIndx) {
                                    self._raiseEvent('2', { index: self.selectedIndex, type: 'keyboard', item: self.getItem(self.selectedIndex) });
                                    self._oldSelectedIndx = self.selectedIndex;
                                }
                            }
                        }
                    });
                }
            }

            this.addHandler(this.host, 'focus', function (event) {
                if (self.renderMode !== 'simple') {
                    self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));
                    self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));
                }
            });
            this.addHandler(this.host, 'blur', function () {
                if (self.renderMode !== 'simple') {
                    self.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));
                    self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));
                }
            });
            this.addHandler(this._firstDiv, 'focus', function (event) {
                if (self.renderMode !== 'simple') {
                    self.host.addClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));
                    self.host.addClass(self.toThemeProperty('jqx-fill-state-focus'));
                }
            });
            this.addHandler(this._firstDiv, 'blur', function () {
                if (self.renderMode !== 'simple') {
                    self.host.removeClass(self.toThemeProperty('jqx-dropdownlist-state-focus'));
                    self.host.removeClass(self.toThemeProperty('jqx-fill-state-focus'));
                }
            });
        },

        removeHandlers: function () {
            var self = this;
            var eventName = 'mousedown';
            if (this.touch) eventName = $.jqx.mobile.getTouchEventName('touchstart');
            this.removeHandler(this.dropdownlistWrapper, eventName);
            if (this.listBox) {
                if (this.listBox.content) {
                    this.removeHandler(this.listBox.content, 'click');
                }
            }

            this.removeHandler(this.host, 'loadContent');
            this.removeHandler(this.listBoxContainer, 'checkChange');
            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this.host, 'focus');
            this.removeHandler(this.host, 'blur');
            this.removeHandler(this._firstDiv, 'focus');
            this.removeHandler(this._firstDiv, 'blur');
            this.removeHandler(this.host, 'mouseenter');
            this.removeHandler(this.host, 'mouseleave');
            this.removeHandler($(document), 'mousemove.' + self.id);
        },

        // gets an item by index.
        getItem: function (index) {
            var item = this.listBox.getItem(index);
            return item;
        },

        getItemByValue: function (value) {
            var item = this.listBox.getItemByValue(value);
            return item;
        },

        selectItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.selectItem(item);
                this.selectedIndex = this.listBox.selectedIndex;
                this.renderSelection('mouse');
            }
        },

        unselectItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.unselectItem(item);
                this.renderSelection('mouse');
            }
        },

        checkItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.checkItem(item);
            }
        },

        uncheckItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.uncheckItem(item);
            }
        },

        indeteterminateItem: function (item) {
            if (this.listBox != undefined) {
                this.listBox.indeteterminateItem(item);
            }
        },


        // renders the selection.
        renderSelection: function () {
            if (this.listBox == null)
                return;

            if (this.height && this.height.toString().indexOf('%') != -1) {
                this._arrange();
            }

            var item = this.listBox.visibleItems[this.listBox.selectedIndex];
            var me = this;
            if (this.checkboxes) {
                var checkedItems = this.getCheckedItems();
                if (checkedItems != null && checkedItems.length > 0) {
                    item = checkedItems[0];
                }
                else item = null;
            }

            if (item == null) {
                var spanElement = $('<span style="color: inherit; border: none; background-color: transparent;"></span>');
                spanElement.appendTo($(document.body));
                spanElement.addClass(this.toThemeProperty('jqx-widget'));
                spanElement.addClass(this.toThemeProperty('jqx-listitem-state-normal'));
                spanElement.addClass(this.toThemeProperty('jqx-item'));

                $.jqx.utilities.html(spanElement, this.placeHolder);
                var topPadding = this.dropdownlistContent.css('padding-top');
                var bottomPadding = this.dropdownlistContent.css('padding-bottom');
                spanElement.css('padding-top', topPadding);
                spanElement.css('padding-bottom', bottomPadding);
                var spanHeight = spanElement.outerHeight();
                spanElement.remove();
                spanElement.removeClass();
                $.jqx.utilities.html(this.dropdownlistContent, spanElement);
                var height = this.host.height();
                if (this.height != null && this.height != undefined) {
                    if (this.height.toString().indexOf('%') === -1) {
                        height = parseInt(this.height);
                    }
                }

                var top = parseInt((parseInt(height) - parseInt(spanHeight)) / 2);

                if (top > 0) {
                    this.dropdownlistContent.css('margin-top', top + 'px');
                    this.dropdownlistContent.css('margin-bottom', top + 'px');
                }
                if (this.selectionRenderer) {
                    $.jqx.utilities.html(this.dropdownlistContent, this.selectionRenderer());
                    this._updateInputSelection();
                }
                this.selectedIndex = this.listBox.selectedIndex;
                if (this.width === "auto") {
                    this._arrange();
                }
                return;
            }

            this.selectedIndex = this.listBox.selectedIndex;
            var spanElement = $('<span style="color: inherit; border: none; background-color: transparent;"></span>');
            spanElement.appendTo($(document.body));
            spanElement.addClass(this.toThemeProperty('jqx-widget'));
            spanElement.addClass(this.toThemeProperty('jqx-listitem-state-normal'));
            spanElement.addClass(this.toThemeProperty('jqx-item'));

            var emptyItem = false;
            try {
                if (item.html != undefined && item.html != null && item.html.toString().length > 0) {
                    $.jqx.utilities.html(spanElement, item.html);
                }
                else if (item.label != undefined && item.label != null && item.label.toString().length > 0) {
                    $.jqx.utilities.html(spanElement, item.label);
                }
                else if (item.label === null || item.label === "") {
                    emptyItem = true;
                    $.jqx.utilities.html(spanElement, "");
                }
                else if (item.value != undefined && item.value != null && item.value.toString().length > 0) {
                    $.jqx.utilities.html(spanElement, item.value);

                }
                else if (item.title != undefined && item.title != null && item.title.toString().length > 0) {
                    $.jqx.utilities.html(spanElement, item.title);
                }
                else if (item.label == "" || item.label == null) {
                    emptyItem = true;
                    $.jqx.utilities.html(spanElement, "");
                }
            }
            catch (error) {
                var errorMessage = error;
            }

            var topPadding = this.dropdownlistContent.css('padding-top');
            var bottomPadding = this.dropdownlistContent.css('padding-bottom');

            spanElement.css('padding-top', topPadding);
            spanElement.css('padding-bottom', bottomPadding);

            var spanHeight = spanElement.outerHeight();
            if (spanHeight === 0) {
                spanHeight = 16;
            }

            if ((item.label == "" || item.label == null) && emptyItem) {
                $.jqx.utilities.html(spanElement, "");
            }
            var notPercentageWidth = this.width && this.width.toString().indexOf('%') <= 0;
              
            spanElement.remove();
            spanElement.removeClass();
            if (this.selectionRenderer) {
               $.jqx.utilities.html(this.dropdownlistContent, this.selectionRenderer(spanElement, item.index, item.label, item.value));
            }
            else {
                if (this.checkboxes) {
                    var items = this.getCheckedItems();
                    var str = "";
                    for (var i = 0; i < items.length; i++) {
                        if (i == items.length - 1) {
                            str += items[i].label;
                        }
                        else {
                            str += items[i].label + ",";
                        }
                    }
                    spanElement.text(str);
                    if (notPercentageWidth) {
                        spanElement.css('max-width', this.host.width() - 30);
                    }
                    spanElement.css('overflow', 'hidden');
                    spanElement.css('display', 'block');
                    if (!this.rtl) {
                        if (notPercentageWidth) {
                            spanElement.css('width', this.host.width() - 30);
                        }
                    }
                    spanElement.css('text-overflow', 'ellipsis');
                    spanElement.css('padding-bottom', 1+parseInt(bottomPadding));

                    this.dropdownlistContent.html(spanElement);
                }
                else {
                    if (this.width && this.width !== 'auto') {
                        if (notPercentageWidth) {
                            if (!this.rtl) {
                                spanElement.css('max-width', this.host.width() - 10);
                            }
                        }

                        spanElement.css('overflow', 'hidden');
                        spanElement.css('display', 'block');
                        spanElement.css('padding-bottom', 1 + parseInt(bottomPadding));
                        if (!this.rtl) {
                            if (notPercentageWidth) {
                                spanElement.css('width', this.host.width() - 10);
                            }
                        }
                        spanElement.css('text-overflow', 'ellipsis');
                    }

                    this.dropdownlistContent.html(spanElement);
                }
            }

            var height = this.host.height();
            if (this.height != null && this.height != undefined) {
                if (this.height.toString().indexOf('%') === -1) {
                    height = parseInt(this.height);
                }
            }

            var top = parseInt((parseInt(height) - parseInt(spanHeight)) / 2);

            if (top > 0) {
                this.dropdownlistContent.css('margin-top', top + 'px');
                this.dropdownlistContent.css('margin-bottom', top + 'px');
            }
            if (this.dropdownlistContent && this.input) {
                this._updateInputSelection();
            }
            if (this.listBox && this.listBox._activeElement) {
                $.jqx.aria(this, "aria-activedescendant", this.listBox._activeElement.id);
            }
            if (this.width === "auto") {
                this._arrange();
            }
        },

        _updateInputSelection: function () {
            if (this.input) {
                if (this.selectedIndex == -1) {
                    this.input.val("");
                }
                else {
                    var selectedItem = this.getSelectedItem();
                    if (selectedItem != null) {
                        this.input.val(selectedItem.value);
                    }
                    else {
                        this.input.val(this.dropdownlistContent.text());
                    }
                }
                if (this.checkboxes) {
                    var items = this.getCheckedItems();
                    var str = "";
                    if (items != null) {
                        for (var i = 0; i < items.length; i++) {
                            var value = items[i].value;
                            if (value == undefined) continue;
                            if (i == items.length - 1) {
                                str += value;
                            }
                            else {
                                str += value + ",";
                            }
                        }
                    }
                    this.input.val(str);
                }
            }
        },

        setContent: function (content) {
            $.jqx.utilities.html(this.dropdownlistContent, content);
            this._updateInputSelection();
        },

        dataBind: function () {
            this.listBoxContainer.jqxListBox({ source: this.source });
            this.renderSelection('mouse');
            if (this.source == null) {
                this.clearSelection();
            }
        },

        clear: function () {
            this.listBoxContainer.jqxListBox({ source: null });
            this.clearSelection();
        },

        // clears the selection.
        clearSelection: function (render) {
            this.selectedIndex = -1;
            this._updateInputSelection();
            this.listBox.clearSelection();
            this.renderSelection();
            $.jqx.utilities.html(this.dropdownlistContent, this.placeHolder);
        },

        // unselects an item at specific index.
        // @param Number
        unselectIndex: function (index, render) {
            if (isNaN(index))
                return;

            this.listBox.unselectIndex(index, render);
            this.renderSelection();
        },

        // selects an item at specific index.
        // @param Number
        selectIndex: function (index, ensureVisible, render, forceSelect) {
            this.listBox.selectIndex(index, ensureVisible, render, forceSelect, 'api');
        },

        // gets the selected index.
        getSelectedIndex: function () {
            return this.selectedIndex;
        },

        // gets the selected item.
        getSelectedItem: function () {
            return this.getItem(this.selectedIndex);
        },

        getCheckedItems: function () {
            return this.listBox.getCheckedItems();
        },

        checkIndex: function (index) {
            this.listBox.checkIndex(index);
        },

        uncheckIndex: function (index) {
            this.listBox.uncheckIndex(index);
        },

        indeterminateIndex: function (index) {
            this.listBox.indeterminateIndex(index);
        },
        checkAll: function () {
            this.listBox.checkAll();
        },

        uncheckAll: function () {
            this.listBox.uncheckAll();
        },

        addItem: function (item) {
            return this.listBox.addItem(item);
        },
        
        insertAt: function (item, index) {
            if (item == null)
                return false;

            return this.listBox.insertAt(item, index);
        },

        removeAt: function (index) {
            var result = this.listBox.removeAt(index);
            this.renderSelection('mouse');
            return result;
        },

        removeItem: function (item) {
            var result = this.listBox.removeItem(item);
            this.renderSelection('mouse');
            return result;
        },

        updateItem: function (item, oldItem) {
            var result = this.listBox.updateItem(item, oldItem);
            this.renderSelection('mouse');
            return result;
        },

        updateAt: function (item, index) {
            var result = this.listBox.updateAt(item, index);
            this.renderSelection('mouse');
            return result;
        },

        ensureVisible: function (index) {
            return this.listBox.ensureVisible(index);
        },

        disableAt: function (index) {
            return this.listBox.disableAt(index);
        },

        enableAt: function (index) {
            return this.listBox.enableAt(index);
        },

        disableItem: function (item) {
            return this.listBox.disableItem(item);
        },

        enableItem: function (item) {
            return this.listBox.enableItem(item);
        },

        _findPos: function (obj) {
            while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
                obj = obj['nextSibling'];
            }
            var position = $(obj).coord(true);
            return [position.left, position.top];
        },

        testOffset: function (element, offset, inputHeight) {
            var dpWidth = element.outerWidth();
            var dpHeight = element.outerHeight();
            var viewWidth = $(window).width() + $(window).scrollLeft();
            var viewHeight = $(window).height() + $(window).scrollTop();

            if (offset.left + dpWidth > viewWidth) {
                if (dpWidth > this.host.width()) {
                    var hostLeft = this.host.coord().left;
                    var hOffset = dpWidth - this.host.width();
                    offset.left = hostLeft - hOffset + 2;
                }
            }
            if (offset.left < 0) {
                offset.left = parseInt(this.host.coord().left) + 'px'
            }

            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
                Math.abs(dpHeight + inputHeight + 22) : 0);

            return offset;
        },

        open: function () {
            this.showListBox();
        },

        close: function () {
            this.hideListBox();
        },

        _getBodyOffset: function () {
            var top = 0;
            var left = 0;
            if ($('body').css('border-top-width') != '0px') {
                top = parseInt($('body').css('border-top-width'));
                if (isNaN(top)) top = 0;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt($('body').css('border-left-width'));
                if (isNaN(left)) left = 0;
            }
            return { left: left, top: top };
        },

        // shows the listbox.
        showListBox: function () {
            $.jqx.aria(this, "aria-expanded", true);

            if (this.dropDownWidth == 'auto' && this.width != null && this.width.indexOf && (this.width.indexOf('%') != -1 || this.width.indexOf('auto') != -1)) {
                if (this.listBox.host.width() != this.host.width()) {
                    var width = this.host.width();
                    this.listBoxContainer.jqxListBox({ width: width });
                    this.container.width(parseInt(width) + 25);
                }
            }

            var self = this;
            var listBox = this.listBoxContainer;
            var listBoxInstance = this.listBox;
            var scrollPosition = $(window).scrollTop();
            var scrollLeftPosition = $(window).scrollLeft();
            var top = parseInt(this._findPos(this.host[0])[1]) + parseInt(this.host.outerHeight()) - 1 + 'px';
            //var left = parseInt(Math.round(this.host.coord(true).left)) + 'px';
            var left, leftPos = parseInt(Math.round(this.host.coord(true).left));
            left = leftPos + 'px';

            var isMobileBrowser = $.jqx.mobile.isSafariMobileBrowser() || $.jqx.mobile.isWindowsPhone();

            if (this.listBox == null)
                return;
         
            var hasTransform = $.jqx.utilities.hasTransform(this.host);
            this.ishiding = false;
            if (!this.keyboardSelection) {
                this.listBox.selectIndex(this.selectedIndex);
                this.listBox.ensureVisible(this.selectedIndex);
            }

            this.tempSelectedIndex = this.selectedIndex;

            if (this.autoDropDownHeight) {
                this.container.height(this.listBoxContainer.height() + 25);
            }

            if (hasTransform || (isMobileBrowser != null && isMobileBrowser)) {
                left = $.jqx.mobile.getLeftPos(this.element);
                top = $.jqx.mobile.getTopPos(this.element) + parseInt(this.host.outerHeight());
                if ($('body').css('border-top-width') != '0px') {
                    top = parseInt(top) - this._getBodyOffset().top + 'px';
                }
                if ($('body').css('border-left-width') != '0px') {
                    left = parseInt(left) - this._getBodyOffset().left + 'px';
                }
            }

            listBox.stop();
            if (this.renderMode !== 'simple') {
                this.host.addClass(this.toThemeProperty('jqx-dropdownlist-state-selected'));
                this.host.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
                this.arrow.addClass(this.toThemeProperty('jqx-icon-arrow-down-selected'));
            }

            this.container.css('left', left);
            this.container.css('top', top);
            listBoxInstance._arrange();

            var closeAfterSelection = true;
            var positionChanged = false;

            if (this.dropDownHorizontalAlignment == 'right' || this.rtl) {
                var containerWidth = this.container.outerWidth();
                var containerLeftOffset = Math.abs(containerWidth - this.host.width());

                if (containerWidth > this.host.width()) {
                    this.container.css('left', 25 + parseInt(Math.round(leftPos)) - containerLeftOffset + "px");
                }
                else this.container.css('left', 25 + parseInt(Math.round(leftPos)) + containerLeftOffset + "px");
            }

            if (this.enableBrowserBoundsDetection) {
                var newOffset = this.testOffset(listBox, { left: parseInt(this.container.css('left')), top: parseInt(top) }, parseInt(this.host.outerHeight()));
                if (parseInt(this.container.css('top')) != newOffset.top) {
                    positionChanged = true;
                    listBox.css('top', 23);
                    listBox.addClass(this.toThemeProperty('jqx-popup-up'));
                }
                else listBox.css('top', 0);

                this.container.css('top', newOffset.top);
                if (parseInt(this.container.css('left')) != newOffset.left) {
                    this.container.css('left', newOffset.left);
                }
            }

            if (this.animationType == 'none') {
                this.container.css('display', 'block');
                $.data(document.body, "openedJQXListBoxParent", self);
                $.data(document.body, "openedJQXListBox" + this.id, listBox);
                listBox.css('margin-top', 0);
                listBox.css('opacity', 1);
            }
            else {
                this.container.css('display', 'block');
                self.isanimating = true;
                if (this.animationType == 'fade') {
                    listBox.css('margin-top', 0);
                    listBox.css('opacity', 0);
                    listBox.animate({ 'opacity': 1 }, this.openDelay, function () {
                        $.data(document.body, "openedJQXListBoxParent", self);
                        $.data(document.body, "openedJQXListBox" + self.id, listBox);
                        self.ishiding = false;
                        self.isanimating = false;
                    });
                }
                else {
                    listBox.css('opacity', 1);
                    var height = listBox.outerHeight();
                    if (positionChanged) {
                        listBox.css('margin-top', height);
                    }
                    else {
                        listBox.css('margin-top', -height);
                    }

                    listBox.animate({ 'margin-top': 0 }, this.openDelay, function () {
                        $.data(document.body, "openedJQXListBoxParent", self);
                        $.data(document.body, "openedJQXListBox" + self.id, listBox);
                        self.ishiding = false;
                        self.isanimating = false;
                    });
                }
            }
            if (!positionChanged) {
                this.host.addClass(this.toThemeProperty('jqx-rc-b-expanded'));
                listBox.addClass(this.toThemeProperty('jqx-rc-t-expanded'));
            }
            else {
                this.host.addClass(this.toThemeProperty('jqx-rc-t-expanded'));
                listBox.addClass(this.toThemeProperty('jqx-rc-b-expanded'));
            }
            if (this.renderMode !== 'simple') {
                listBox.addClass(this.toThemeProperty('jqx-fill-state-focus'));
                this.host.addClass(this.toThemeProperty('jqx-dropdownlist-state-focus'));
                this.host.addClass(this.toThemeProperty('jqx-fill-state-focus'));
            }

        //    this.host.focus();
        //    setTimeout(function () {
        //        self.host.focus();
        //    });

            listBoxInstance._renderItems();
            this._raiseEvent('0', listBoxInstance);
        },

        // hides the listbox.
        hideListBox: function () {
            $.jqx.aria(this, "aria-expanded", false);

            var listBox = this.listBoxContainer;
            var listBoxInstance = this.listBox;
            var container = this.container;
            var me = this;
            $.data(document.body, "openedJQXListBox" + this.id, null);
            if (this.animationType == 'none') {
                this.container.css('display', 'none');
            }
            else {
                if (!me.ishiding) {
                    listBox.stop();
                    var height = listBox.outerHeight();
                    listBox.css('margin-top', 0);
                    me.isanimating = true;

                    var animationValue = -height;
                    if (parseInt(this.container.coord().top) < parseInt(this.host.coord().top)) {
                        animationValue = height;
                    }

                    if (this.animationType == 'fade') {
                        listBox.css({ 'opacity': 1 });
                        listBox.animate({ 'opacity': 0 }, this.closeDelay, function () {
                            container.css('display', 'none');
                            me.isanimating = false;
                            me.ishiding = false;
                        });
                    }
                    else {
                        listBox.animate({ 'margin-top': animationValue }, this.closeDelay, function () {
                            container.css('display', 'none');
                            me.isanimating = false;
                            me.ishiding = false;
                        });
                    }
                }
            }

            this.ishiding = true;
            this.host.removeClass(this.toThemeProperty('jqx-dropdownlist-state-selected'));
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this.arrow.removeClass(this.toThemeProperty('jqx-icon-arrow-down-selected'));

            this.host.removeClass(this.toThemeProperty('jqx-rc-b-expanded'));
            listBox.removeClass(this.toThemeProperty('jqx-rc-t-expanded'));
            this.host.removeClass(this.toThemeProperty('jqx-rc-t-expanded'));
            listBox.removeClass(this.toThemeProperty('jqx-rc-b-expanded'));
            listBox.removeClass(this.toThemeProperty('jqx-fill-state-focus'));
      
            this._raiseEvent('1', listBoxInstance);
        },

        /* Close popup if clicked elsewhere. */
        closeOpenedListBox: function (event) {
            var self = event.data.me;
            var $target = $(event.target);
            var openedListBox = event.data.listbox;
            if (openedListBox == null)
                return true;

            if ($(event.target).ischildof(event.data.me.host)) {
                return true;
            }

            if (!self.isOpened()) {
                return true;
            }

            var dropdownlistInstance = self;

            var isListBox = false;
            $.each($target.parents(), function () {
                if (this.className != 'undefined') {
                    if (this.className.indexOf) {
                        if (this.className.indexOf('jqx-listbox') != -1) {
                            isListBox = true;
                            return false;
                        }
                        if (this.className.indexOf('jqx-dropdownlist') != -1) {
                            if (self.element.id == this.id) {
                                isListBox = true;
                            }
                            return false;
                        }
                    }
                }
            });

            if (openedListBox != null && !isListBox && self.isOpened()) {
                self.hideListBox();
            }

            return true;
        },

        loadFromSelect: function (id) {
            this.listBox.loadFromSelect(id);
        },

        refresh: function (initialRefresh) {
            if (initialRefresh !== true) {
                this._setSize();
                this._arrange();
                if (this.listBox) {
                    this.renderSelection();
                }
            }
        },

        _arrange: function () {
            var width = parseInt(this.host.width());
            var height = parseInt(this.host.height());
            var arrowHeight = this.arrowSize;
            var arrowWidth = this.arrowSize;
            var rightOffset = 3;
            var contentWidth = width - arrowWidth - 2 * rightOffset;
            if (contentWidth > 0 && this.width !== "auto") {
                this.dropdownlistContent.width(contentWidth + 'px');
            }
            if (this.width === "auto") {
                this.dropdownlistContent.css('width', 'auto');
                width = this.dropdownlistContent.width() + arrowWidth + 2 * rightOffset;
                this.host.width(width);
            }
            this.dropdownlistContent.height(height);
            this.dropdownlistContent.css('left', 0);
            this.dropdownlistContent.css('top', 0);

            this.dropdownlistArrow.width(arrowWidth);
            this.dropdownlistArrow.height(height);

            if (this.rtl) {
                this.dropdownlistArrow.css('float', 'left');
                this.dropdownlistContent.css('float', 'right');
            }
        },

        destroy: function () {
            $.jqx.utilities.resize(this.host, null, true);
            this.removeHandler(this.listBoxContainer, 'select');
            this.removeHandler(this.listBoxContainer, 'unselect');
            this.removeHandler(this.listBoxContainer, 'change');
            this.removeHandler(this.dropdownlistWrapper, 'selectstart');
            this.removeHandler(this.dropdownlistWrapper, 'mousedown');
            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this.listBoxContainer, 'select');
            this.removeHandler(this.listBox.content, 'click');
            this.removeHandler(this.listBoxContainer, 'bindingComplete');
      
            if (this.host.parents()) {
                this.removeHandler(this.host.parents(), 'scroll.dropdownlist' + this.element.id);
            }

            this.removeHandlers();

            this.listBoxContainer.jqxListBox('destroy');
            this.listBoxContainer.remove();
            this.host.removeClass();
            this.removeHandler($(document), 'mousedown.' + this.id, this.closeOpenedListBox);
            if (this.touch) {
                this.removeHandler($(document), $.jqx.mobile.getTouchEventName('touchstart') + '.' + this.id);
            }

            this.dropdownlistArrow.remove();
            delete this.dropdownlistArrow;
            delete this.dropdownlistWrapper;
            delete this.listBoxContainer;
            delete this.input;
            delete this.arrow;
            delete this.dropdownlistContent;
            delete this.listBox;
            delete this._firstDiv;
            this.container.remove();
            delete this.container;
            var vars = $.data(this.element, "jqxDropDownList");
            if (vars) {
                delete vars.instance;
            }
            this.host.removeData();
            this.host.remove();
            delete this.comboStructure;
            delete this.host;
            delete this.set;
            delete this.get;
            delete this.call;
            delete this.element;
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            var evt = this.events[id];
            args = arg;
            args.owner = this;

            var event = new jQuery.Event(evt);
            event.owner = this;
            if (id == 2 || id == 3 || id == 4 || id == 5) {
                event.args = arg;
            }

            var result = this.host.trigger(event);
            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (object.isInitialized == undefined || object.isInitialized == false)
                return;

            if (key == "enableSelection") {
                object.listBoxContainer.jqxListBox({ enableSelection: value });
            }
            if (key == "enableHover") {
                object.listBoxContainer.jqxListBox({ enableHover: value });
            }

            if (key == 'autoOpen') {
                object._updateHandlers();
            }
            if (key == 'emptyString') {
                object.listBox.emptyString = object.emptyString;
            }
            if (key == "itemHeight") {
                object.listBoxContainer.jqxListBox({ itemHeight: value });
            }

            if (key == "renderer") {
                object.listBoxContainer.jqxListBox({ renderer: value });
            }

            if (key == "rtl") {
                if (value) {
                    object.dropdownlistArrow.css('float', 'left');
                    object.dropdownlistContent.css('float', 'right');
                }
                else {
                    object.dropdownlistArrow.css('float', 'right');
                    object.dropdownlistContent.css('float', 'left');
                }
                object.listBoxContainer.jqxListBox({ rtl: object.rtl });
            }
            if (key == 'source') {
                object.listBoxContainer.jqxListBox({ source: object.source });
                object.listBox.selectedIndex = -1;
                object.listBox.selectIndex(this.selectedIndex);
                object.renderSelection();
                if (value == null) {
                    object.clear();
                }
            }

            if (key == "displayMember" || key == "valueMember") {
                object.listBoxContainer.jqxListBox({ displayMember: object.displayMember, valueMember: object.valueMember });
                object.renderSelection();
            }
            if (key == "placeHolder") {
                object.renderSelection();
            }

            if (key == 'theme' && value != null) {
                object.listBoxContainer.jqxListBox({ theme: value });
                object.listBoxContainer.addClass(object.toThemeProperty('jqx-popup'));
                if ($.jqx.browser.msie) {
                    object.listBoxContainer.addClass(object.toThemeProperty('jqx-noshadow'));
                }
                object.dropdownlistContent.removeClass();
                object.dropdownlistContent.addClass(object.toThemeProperty('jqx-dropdownlist-content'));
                object.dropdownlistWrapper.removeClass();
                object.dropdownlistWrapper.addClass(object.toThemeProperty('jqx-disableselect'));
                object.host.removeClass();
                object.host.addClass(object.toThemeProperty('jqx-fill-state-normal'));
                object.host.addClass(object.toThemeProperty('jqx-dropdownlist-state-normal'));
                object.host.addClass(object.toThemeProperty('jqx-rc-all'));
                object.host.addClass(object.toThemeProperty('jqx-widget'));
                object.arrow.removeClass();
                object.arrow.addClass(object.toThemeProperty('jqx-icon-arrow-down'));
                object.arrow.addClass(object.toThemeProperty('jqx-icon'));
            }

            if (key == "autoDropDownHeight") {
                object.listBoxContainer.jqxListBox({ autoHeight: object.autoDropDownHeight });
                if (object.autoDropDownHeight) {
                    object.container.height(object.listBoxContainer.height() + 25);
                }
                else {
                    object.listBoxContainer.jqxListBox({ height: object.dropDownHeight });
                    object.container.height(parseInt(object.dropDownHeight) + 25);
                }

                object.listBox._arrange();
                object.listBox._updatescrollbars();
            }

            if (key == "searchMode") {
                object.listBoxContainer.jqxListBox({ searchMode: object.searchMode });
            }

            if (key == "incrementalSearch") {
                object.listBoxContainer.jqxListBox({ incrementalSearch: object.incrementalSearch });
            }

            if (key == "incrementalSearchDelay") {
                object.listBoxContainer.jqxListBox({ incrementalSearchDelay: object.incrementalSearchDelay });
            }

            if (key == "dropDownHeight") {
                if (!object.autoDropDownHeight) {
                    object.listBoxContainer.jqxListBox({ height: object.dropDownHeight });
                    object.container.height(parseInt(object.dropDownHeight) + 25);
                }
            }

            if (key == "dropDownWidth" || key == "scrollBarSize") {
                var width = object.width;
                if (object.dropDownWidth != 'auto') {
                    width = object.dropDownWidth;
                }

                object.listBoxContainer.jqxListBox({ width: width, scrollBarSize: object.scrollBarSize });
                object.container.width(parseInt(width) + 25);
            }

            if (key == 'width' || key == 'height') {
                if (value != oldvalue) {
                    this.refresh();
                    if (key == 'width') {
                        if (object.dropDownWidth == 'auto') {
                            var width = object.host.width();
                            object.listBoxContainer.jqxListBox({ width: width });
                            object.container.width(parseInt(width) + 25);
                        }
                    }
                }
            }

            if (key == "checkboxes") {
                object.listBoxContainer.jqxListBox({ checkboxes: object.checkboxes });
            }

            if (key == 'selectedIndex') {
                if (object.listBox != null) {
                    object.listBox.selectIndex(parseInt(value));
                    object.renderSelection();
                }
            }
        }
    });
})(jQuery);

/*
 * file from "src\jqxgrid.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/


(function ($) {

    $.jqx.jqxWidget("jqxGrid", "", {});

    $.extend($.jqx._jqxGrid.prototype, {
        defineInstance: function () {
            // enables or disables the grid.
            this.disabled = false;
            // sets the width.
            this.width = 600;
            // sets the height.
            this.height = 400;
            // sets the pager's height.
            this.pagerheight = 28;
            // sets the group header's height.
            this.groupsheaderheight = 34;
            // sets the default page size.
            this.pagesize = 10;
            // sets the available page sizes.
            this.pagesizeoptions = ['5', '10', '20'];
            // sets the rows height.
            this.rowsheight = 25;
            // sets the columns height.
            this.columnsheight = 25;
            // sets the columns height.
            this.filterrowheight = 31;
            // sets the group indent size. This size is used when the grid is grouped.
            this.groupindentwidth = 30;
            // enables or disables row details.
            this.rowdetails = false;
            // indents the row's details with the sum of the grouping columns and row details column indents.
            this.enablerowdetailsindent = true;
            // enables or disables the built-in mouse-wheel behavior.
            this.enablemousewheel = true;
            // renders the row details.
            this.initrowdetails = null;
            // updates the row details layout.
            this.layoutrowdetails = null;
            // enables or disables editing.
            this.editable = false;
            // sets the edit mode. - click, dblclick, selectedcell, selectedrow or programmatic.
            this.editmode = 'selectedcell';
            // enables or disables paging.
            this.pageable = false;
            this.pagermode = "default";
            this.pagerbuttonscount = 5;
            // enables or disables grouping.
            this.groupable = false;
            // enables or disables sorting.
            this.sortable = false;
            // enables or disables filtering.
            this.filterable = false;
            this.filtermode = "default";
            // displays the filter icon only when the column is filtered.
            this.autoshowfiltericon = true;
            // displays a background for the filtered column.
            this.showfiltercolumnbackground = true;
            // displays a background for the pinned column.
            this.showpinnedcolumnbackground = true;
            // displays a background for the sort column.
            this.showsortcolumnbackground = true;
            // enables or disables alternating rows.
            this.altrows = false;
            // sets the alternating rows start.
            this.altstart = 1;
            // sets the alternating rows step.
            this.altstep = 1;
            // shows or hides the details column.
            this.showrowdetailscolumn = true;
            // shows or hides the grid's toolbar.
            this.showtoolbar = false;
            this.toolbarheight = 34;
            this.showstatusbar = false;
            this.statusbarheight = 34;
            this.enableellipsis = true;
            // adds groups.
            this.groups = [];
            // custom groups renderer.
            this.groupsrenderer = null;
            // custom renderer for the grouping columns displayed in the grouping header.
            this.groupcolumnrenderer = null;
            // groups default expand state.
            this.groupsexpandedbydefault = false;
            // sets the pager renderer.
            this.pagerrenderer = null;
            this.touchmode = 'auto';
            // sets the grid columns.
            this.columns = [];
            // selected row index.
            this.selectedrowindex = -1;
            this.selectedrowindexes = new Array();
            this.selectedcells = new Array();
            this.selectedcell = null;
            this.tableZIndex = 799;
            this.headerZIndex = 199;
            this.updatefilterconditions = null;
            this.showaggregates = false;
            this.showfilterrow = false;
            this.autorowheight = false;
            this.autokoupdates = true;
            this.handlekeyboardnavigation = null;
            this.showsortmenuitems = true;
            this.showfiltermenuitems = true;
            this.showgroupmenuitems = true;
            this.enablebrowserselection = false;
            this.enablekeyboarddelete = true;
            this.clipboard = true;
            this.ready = null;
            this.updatefilterpanel = null;
            this.autogeneratecolumns = false;
            this.rowdetailstemplate = null;
            this.scrollfeedback = null;
            this.rendertoolbar = null;
            this.renderstatusbar = null;
            this.rendered = null;
            this.multipleselectionbegins = null;
            this.columngroups = null;
            this.cellhover = null;
            // sets the grid source.
            this.source =
            {
                beforeprocessing: null,
                beforesend: null,
                loaderror: null,
                localdata: null,
                data: null,
                datatype: 'array',
                // {name: name, map: map}
                datafields: [],
                url: "",
                root: '',
                record: '',
                id: '',
                totalrecords: 0,
                recordstartindex: 0,
                recordendindex: 0,
                loadallrecords: true,
                sortcolumn: null,
                sortdirection: null,
                sort: null,
                filter: null,
                sortcomparer: null
            };
            // sets the grid data view.
            this.dataview = null;
            // sets the rendering delay. 
            this.updatedelay = null;
            // sets the auto height option. This option is appropriate when the grid's paging is enables or when the grid has quite a few rows.
            this.autoheight = false;
            this.autowidth = false;
            // shows or hides the grid's columns header.
            this.showheader = true;
            // shows or hides the grid's grouping header.
            this.showgroupsheader = true;
            // enables or disables the grouping closing buttons.
            this.closeablegroups = true;
            // sets the scrollbars size.
            this.scrollbarsize = $.jqx.utilities.scrollBarSize;
            this.touchscrollbarsize = $.jqx.utilities.touchScrollBarSize;
            // enables or disables the virtual scrolling.
            this.virtualmode = false;
            // sets a custom sorting behavior.
            this.sort = null;
            // displays a dropdown button in each column.
            this.columnsmenu = true;
            // enables the resizing of grid columns.
            this.columnsresize = false;
            this.columnsreorder = false;
            // sets the width of the columns menu in each column.
            this.columnsmenuwidth = 15;
            this.autoshowcolumnsmenubutton = true;
            this.popupwidth = 'auto';
            // changes the sort state when the user clickes a column header.
            // 0 - disables toggling.
            // 1 - enables togging. Click on a column toggles the sort direction.
            // 2 - enables remove sorting option.
            this.sorttogglestates = 2;
            // callback function invoked when the rows are rendered.
            this.rendergridrows = null;
            // enables or disables the grid animations - slide and fade effects.
            this.enableanimations = true;
            // enables or disables the grid tooltips.
            this.enabletooltips = false;
            // enables or disables the selection.
            // possible values: 'none', 'singlerow', 'multiplerows, 'multiplerowsextended, 'singlecell, 'multiplecells, 'multiplecellsextended', 'multiplecellsadvanced'
            this.selectionmode = 'singlerow';
            // enables or disables the rows hover state.
            this.enablehover = true;
            // this message is displayed when the user tries to call a method before the binding complete.
            this.loadingerrormessage = "The data is still loading. When the data binding is completed, the Grid raises the 'bindingcomplete' event. Call this function in the 'bindingcomplete' event handler.";
            // vertical scroll step.
            this.verticalscrollbarstep = 25;
            // vertical large step.
            this.verticalscrollbarlargestep = 400;
            // horizontal step.
            this.horizontalscrollbarstep = 10;
            // horizontal large step.
            this.horizontalscrollbarlargestep = 50;
            this.keyboardnavigation = true;
            this.touchModeStyle = 'auto';
            this.autoshowloadelement = true;
            this.showdefaultloadelement = true;
            this.showemptyrow = true;
            this.autosavestate = false;
            this.autoloadstate = false;
            // private members
            this._updating = false;
            this._pagescache = new Array();
            this._pageviews = new Array();
            this._cellscache = new Array();
            this._rowdetailscache = new Array();
            this._rowdetailselementscache = new Array();
            this._requiresupdate = false;
            this._hasOpenedMenu = false;
            this.scrollmode = 'physical';
            this.deferreddatafields = null;
            this.localization = null;
            this.rtl = false;
            this.menuitemsarray = [];
            this.events =
	   	    [
            /*0*/'initialized',
            /*1*/'rowClick',
            /*2*/'rowSelect',
            /*3*/'rowUnselect',
            /*4*/'groupExpand',
            /*5*/'groupCollapse',
            /*6*/'sort',
            /*7*/'columnClick',
            /*8*/'cellClick',
            /*9*/'pageChanged',
            /*10*/'pageSizeChanged',
            /*11*/'bindingComplete',
            /*12*/'groupsChanged',
            /*13*/'filter',
            /*14*/'columnResized',
            /*15*/'cellSelect',
            /*16*/'cellUnselect',
            /*17*/'cellBeginEdit',
            /*18*/'cellEndEdit',
            /*19*/'cellValueChanged',
            /*20*/'rowExpand',
            /*21*/'rowCollapse',
            /*22*/'rowDoubleClick',
            /*23*/'cellDoubleClick',
            /*24*/'columnReordered',
            /*25*/'pageChanging'
	   	    ];
        },

        createInstance: function (args) {
            this.that = this;
            var gridStructure = "<div class='jqx-clear jqx-border-reset jqx-overflow-hidden jqx-max-size jqx-position-relative'>" +
                "<div tabindex='1' class='jqx-clear jqx-max-size jqx-position-relative jqx-overflow-hidden jqx-background-reset' id='wrapper" + this.element.id + "'>" +
                "<div class='jqx-clear jqx-position-absolute' id='toolbar' style='visibility: hidden;'></div>" +
                "<div class='jqx-clear jqx-position-absolute' id='groupsheader' style='visibility: hidden;'></div>" +
                "<div class='jqx-clear jqx-overflow-hidden jqx-position-absolute jqx-border-reset jqx-background-reset' id='content" + this.element.id + "'></div>" +
                "<div class='jqx-clear jqx-position-absolute' id='verticalScrollBar" + this.element.id + "'></div>" +
                "<div class='jqx-clear jqx-position-absolute' id='horizontalScrollBar" + this.element.id + "'></div>" +
                "<div class='jqx-clear jqx-position-absolute jqx-border-reset' id='bottomRight'></div>" +
                "<div class='jqx-clear jqx-position-absolute' id='statusbar'></div>" +
                "<div class='jqx-clear jqx-position-absolute' id='pager' style='z-index: 20;'></div>" +
                "</div>" +
                "</div>";

            this.element.innerText = '';
            this.element.innerHTML = '';
            if ($.jqx.utilities.scrollBarSize != 15) {
                this.scrollbarsize = $.jqx.utilities.scrollBarSize;
            }
            if (this.source) {
                if (!this.source.dataBind) {
                    this.source = new $.jqx.dataAdapter(this.source);
                }
                var datafields = this.source._source.datafields;
                if (datafields && datafields.length > 0) {
                    this._camelCase = this.source._source.dataFields !== undefined;
                    this.editmode = this.editmode.toLowerCase();
                    this.selectionmode = this.selectionmode.toLowerCase();
                }
            }

            this.host.attr('role', 'grid');
            this.host.attr('align', 'left');
            //    this.host.append(gridStructure);
            this.element.innerHTML = gridStructure;
            this.host.addClass(this.toTP('jqx-grid'));
            this.host.addClass(this.toTP('jqx-reset'));
            this.host.addClass(this.toTP('jqx-rc-all'));
            this.host.addClass(this.toTP('jqx-widget'));
            this.host.addClass(this.toTP('jqx-widget-content'));

            this.wrapper = this.host.find("#wrapper" + this.element.id);
            this.content = this.host.find("#content" + this.element.id);
            this.content.addClass(this.toTP('jqx-reset'));

            var verticalScrollBar = this.host.find("#verticalScrollBar" + this.element.id);
            var horizontalScrollBar = this.host.find("#horizontalScrollBar" + this.element.id);
            this.bottomRight = this.host.find("#bottomRight").addClass(this.toTP('jqx-grid-bottomright')).addClass(this.toTP('jqx-scrollbar-state-normal'));

            if (!verticalScrollBar.jqxScrollBar) {
                throw new Error('jqxGrid: Missing reference to jqxscrollbar.js');
                return;
            }

            this.editors = new Array();

            this.vScrollBar = verticalScrollBar.jqxScrollBar({ 'vertical': true, rtl: this.rtl, touchMode: this.touchmode, step: this.verticalscrollbarstep, largestep: this.verticalscrollbarlargestep, theme: this.theme, _triggervaluechanged: false });
            this.hScrollBar = horizontalScrollBar.jqxScrollBar({ 'vertical': false, rtl: this.rtl, touchMode: this.touchmode, step: this.horizontalscrollbarstep, largestep: this.horizontalscrollbarlargestep, theme: this.theme, _triggervaluechanged: false });

            this.pager = this.host.find("#pager");
            this.pager[0].id = "pager" + this.element.id;
            this.toolbar = this.host.find("#toolbar");
            this.toolbar[0].id = "toolbar" + this.element.id;
            this.toolbar.addClass(this.toTP('jqx-grid-toolbar'));
            this.toolbar.addClass(this.toTP('jqx-widget-header'));

            this.statusbar = this.host.find("#statusbar");
            this.statusbar[0].id = "statusbar" + this.element.id;
            this.statusbar.addClass(this.toTP('jqx-grid-statusbar'));
            this.statusbar.addClass(this.toTP('jqx-widget-header'));

            this.pager.addClass(this.toTP('jqx-grid-pager'));
            this.pager.addClass(this.toTP('jqx-widget-header'));

            this.groupsheader = this.host.find("#groupsheader");
            this.groupsheader.addClass(this.toTP('jqx-grid-groups-header'));
            this.groupsheader.addClass(this.toTP('jqx-widget-header'));

            this.vScrollBar.css('visibility', 'hidden');
            this.hScrollBar.css('visibility', 'hidden');

            this.vScrollInstance = $.data(this.vScrollBar[0], 'jqxScrollBar').instance;
            this.hScrollInstance = $.data(this.hScrollBar[0], 'jqxScrollBar').instance;
            this.gridtable = null;

            this.isNestedGrid = this.host.parent() ? this.host.parent().css('z-index') == 2000 : false;
            this.touchdevice = this.isTouchDevice();

            if (this.localizestrings) {
                this.localizestrings();
                if (this.localization != null) {
                    this.localizestrings(this.localization, false);
                }
            }
         
            if (this.rowdetailstemplate) {
                if (undefined == this.rowdetailstemplate.rowdetails) this.rowdetailstemplate.rowdetails = '<div></div>';
                if (undefined == this.rowdetailstemplate.rowdetailsheight) this.rowdetailstemplate.rowdetailsheight = 200;
                if (undefined == this.rowdetailstemplate.rowdetailshidden) this.rowdetailstemplate.rowdetailshidden = true;
            }

            if (this.showfilterrow && !this.filterable) {
                throw new Error('jqxGrid: "showfilterrow" requires setting the "filterable" property to true!');
                this.host.remove();
                return;
            }
            if (this.autorowheight && !this.autoheight && !this.pageable) {
                throw new Error('jqxGrid: "autorowheight" requires setting the "autoheight" or "pageable" property to true!');
                this.host.remove();
                return;
            }
            if (this.virtualmode && this.rendergridrows == null) {
                throw new Error('jqxGrid: "virtualmode" requires setting the "rendergridrows"!');
                this.host.remove();
                return;
            }

            if (this.virtualmode && !this.pageable && this.groupable) {
                throw new Error('jqxGrid: "grouping" in "virtualmode" without paging is not supported!');
                this.host.remove();
                return;
            }

            // check for missing modules.
            if (this._testmodules()) {
                return;
            }

            this._builddataloadelement();
            this._cachedcolumns = this.columns;
            if (this.rowsheight != 25) {
                this._measureElement('cell');
            }
            if (this.columnsheight != 25 || this.columngroups) {
                this._measureElement('column');
            }

            if (this.source) {
                var datafields = this.source.datafields;
                if (datafields == null && this.source._source) {
                    datafields = this.source._source.datafields;
                }

                if (datafields) {
                    for (var m = 0; m < this.columns.length; m++) {
                        var column = this.columns[m];
                        if (column && column.cellsformat && column.cellsformat.length > 2) {
                            for (var t = 0; t < datafields.length; t++) {
                                if (datafields[t].name == column.datafield && !datafields[t].format) {
                                    datafields[t].format = column.cellsformat;
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            this.databind(this.source);

            if (this.showtoolbar) {
                this.toolbar.css('visibility', 'visible');
            }
            if (this.showstatusbar) {
                this.statusbar.css('visibility', 'visible');
            }
      
            this._arrange();
            if (this.pageable && this._initpager) {
                this._initpager();
            }
            this.tableheight = null;
            var me = this.that;
            var clearoffset = function () {
                if (me.content) {
                    me.content[0].scrollTop = 0;
                    me.content[0].scrollLeft = 0;
                }
                if (me.gridcontent) {
                    me.gridcontent[0].scrollLeft = 0;
                    me.gridcontent[0].scrollTop = 0;
                }
            }

            this.addHandler(this.content, 'mousedown',
            function () {
                clearoffset();
            });

            this.addHandler(this.content, 'scroll',
            function (event) {
                clearoffset();
                return false;
            });

            if (!this.showfilterrow) {
                if (!this.showstatusbar && !this.showtoolbar) {
                    this.host.addClass('jqx-disableselect');
                }
                this.content.addClass('jqx-disableselect');
            }

            if (this.enablebrowserselection) {
                this.content.removeClass('jqx-disableselect');
                this.host.removeClass('jqx-disableselect');
            }

            this._resizeWindow();

            if (this.renderstatusbar) {
                this.renderstatusbar(this.statusbar);
            }
            if (this.rendertoolbar) {
                this.rendertoolbar(this.toolbar);
            }
            if (this.disabled) {
                this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
            }
            this.hasTransform = $.jqx.utilities.hasTransform(this.host);
            if (this.scrollmode == 'logical') {
                this.vScrollInstance.thumbStep = this.rowsheight;
                this.vScrollInstance.step = this.rowsheight;
            }
            if (!$.jqx.isHidden(this.host)) {
                if (this.filterable || this.groupable || this.sortable) {
                    this._initmenu();
                }
            }
        },

        _resizeWindow: function()
        {
            var me = this.that;
            if ((this.width != null && this.width.toString().indexOf('%') != -1) || (this.height != null && this.height.toString().indexOf('%') != -1)) {
                this._updatesizeonwindowresize = true;
                $.jqx.utilities.resize(this.host, function (type) {
                    var width = $(window).width();
                    var height = $(window).height();
                    var hostwidth = me.host.width();
                    var hostheight = me.host.height();

                    if (me.autoheight) me._lastHostWidth = height;
                    if (me._lastHostWidth != hostwidth || me._lastHostHeight != hostheight) {
                        if (me.touchdevice && me.editcell && type !== "orientationchange")
                            return;

                        me._updatesize(me._lastHostWidth != hostwidth, me._lastHostHeight != hostheight);
                    }

                    me._lastWidth = width;
                    me._lastHeight = height;
                    me._lastHostWidth = hostwidth;
                    me._lastHostHeight = hostheight;
                });
            }
        },

        _builddataloadelement: function () {
            if (this.dataloadelement) {
                this.dataloadelement.remove();
            }

            this.dataloadelement = $('<div style="overflow: hidden; position: absolute;"></div>');
            if (this.showdefaultloadelement) {
                var table = $('<div style="z-index: 99999; margin-left: -66px; left: 50%; top: 50%; margin-top: -24px; position: relative; width: 100px; height: 33px; padding: 5px; font-family: verdana; font-size: 12px; color: #767676; border-color: #898989; border-width: 1px; border-style: solid; background: #f6f6f6; border-collapse: collapse;"><div style="float: left;"><div style="float: left; overflow: hidden; width: 32px; height: 32px;" class="jqx-grid-load"/><span style="margin-top: 10px; float: left; display: block; margin-left: 5px;" >' + this.gridlocalization.loadtext + '</span></div></div>');
                table.addClass(this.toTP('jqx-rc-all'));
                this.dataloadelement.addClass(this.toTP('jqx-rc-all'));
                table.addClass(this.toTP('jqx-fill-state-normal'));
                this.dataloadelement.append(table);
            }
            else {
                this.dataloadelement.addClass(this.toTP('jqx-grid-load'));
            }
            this.dataloadelement.width(this.width);
            this.dataloadelement.height(this.height);

            this.host.prepend(this.dataloadelement);
        },

        _measureElement: function (type) {
            var span = $("<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>");
            span.addClass(this.toTP('jqx-widget'));
            $(document.body).append(span);
            if (type == 'cell') {
                this._cellheight = span.height();
            }
            else this._columnheight = span.height();
            span.remove();
        },

        _measureMenuElement: function () {
            var span = $("<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>");
            span.addClass(this.toTP('jqx-widget'));
            span.addClass(this.toTP('jqx-menu'));
            span.addClass(this.toTP('jqx-menu-item-top'));
            span.addClass(this.toTP('jqx-fill-state-normal'));
            $(document.body).append(span);
            var height = span.outerHeight();
            span.remove();
            return height;
        },

        _measureElementWidth: function (text) {
            var span = $("<span style='visibility: hidden; white-space: nowrap;'>" + text + "</span>");
            span.addClass(this.toTP('jqx-widget'));
            span.addClass(this.toTP('jqx-grid'));
            span.addClass(this.toTP('jqx-grid-column-header'));
            span.addClass(this.toTP('jqx-widget-header'));
            $(document.body).append(span);
            var w = span.outerWidth() + 20;
            span.remove();
            return w;
        },

        _getBodyOffset: function () {
            var top = 0;
            var left = 0;
            if ($('body').css('border-top-width') != '0px') {
                top = parseInt($('body').css('border-top-width'));
                if (isNaN(top)) top = 0;
            }
            if ($('body').css('border-left-width') != '0px') {
                left = parseInt($('body').css('border-left-width'));
                if (isNaN(left)) left = 0;
            }
            return { left: left, top: top };
        },

        _testmodules: function () {
            var missingModules = "";
            var me = this.that;
            var addComma = function () {
                if (missingModules.length != "") missingModules += ",";
            }

            if (this.columnsmenu && !this.host.jqxMenu && (this.sortable || this.groupable || this.filterable)) {
                addComma();
                missingModules += " jqxmenu.js";
            }
            if (!this.host.jqxScrollBar) {
                addComma();
                missingModules += " jqxscrollbar.js";
            }
            if (!this.host.jqxButton) {
                addComma();
                missingModules += " jqxbuttons.js";
            }
            if (!$.jqx.dataAdapter) {
                addComma();
                missingModules += " jqxdata.js";
            }
            if (this.pageable && !this.gotopage) {
                addComma();
                missingModules += "jqxgrid.pager.js";
            }
            if (this.filterable && !this.applyfilters) {
                addComma();
                missingModules += " jqxgrid.filter.js";
            }
            if (this.groupable && !this._initgroupsheader) {
                addComma();
                missingModules += " jqxgrid.grouping.js";
            }
            if (this.columnsresize && !this.autoresizecolumns) {
                addComma();
                missingModules += " jqxgrid.columnsresize.js";
            }
            if (this.columnsreorder && !this.setcolumnindex) {
                addComma();
                missingModules += " jqxgrid.columnsreorder.js";
            }
            if (this.sortable && !this.sortby) {
                addComma();
                missingModules += " jqxgrid.sort.js";
            }
            if (this.editable && !this.begincelledit) {
                addComma();
                missingModules += " jqxgrid.edit.js";
            }
            if (this.showaggregates && !this.getcolumnaggregateddata) {
                addComma();
                missingModules += " jqxgrid.aggregates.js";
            }
            if (this.keyboardnavigation && !this.selectrow) {
                addComma();
                missingModules += " jqxgrid.selection.js";
            }
            if (missingModules != "" || this.editable || this.filterable || this.pageable) {
                var missingTypes = [];

                var addMissing = function (type) {
                    switch (type) {
                        case "checkbox":
                            if (!me.host.jqxCheckBox && !missingTypes['checkbox']) {
                                missingTypes['checkbox'] = true;
                                addComma();
                                missingModules += ' jqxcheckbox.js';
                            }
                            break;
                        case "numberinput":
                            if (!me.host.jqxNumberInput && !missingTypes['numberinput']) {
                                missingTypes['numberinput'] = true;
                                addComma();
                                missingModules += ' jqxnumberinput.js';
                            }
                            break;
                        case "datetimeinput":
                            if (!me.host.jqxDateTimeInput && !missingTypes['datetimeinput']) {
                                addComma();
                                missingTypes['datetimeinput'] = true;
                                missingModules += ' jqxdatetimeinput.js(requires: jqxcalendar.js)';
                            }
                            else if (!me.host.jqxCalendar && !missingTypes['calendar']) {
                                addComma();
                                missingModules += ' jqxcalendar.js';
                            }
                            break;
                        case "combobox":
                            if (!me.host.jqxComboBox && !missingTypes['combobox']) {
                                addComma();
                                missingTypes['combobox'] = true;
                                missingModules += ' jqxcombobox.js(requires: jqxlistbox.js)';
                            }
                            else if (!me.host.jqxListBox && !missingTypes['listbox']) {
                                addComma();
                                missingTypes['listbox'] = true;
                                missingModules += ' jqxlistbox.js';
                            }
                            break;
                        case "dropdownlist":
                            if (!me.host.jqxDropDownList && !missingTypes['dropdownlist']) {
                                addComma();
                                missingTypes['dropdownlist'] = true;
                                missingModules += ' jqxdropdownlist.js(requires: jqxlistbox.js)';
                            }
                            else if (!me.host.jqxListBox && !missingTypes['listbox']) {
                                addComma();
                                missingTypes['listbox'] = true;
                                missingModules += ' jqxlistbox.js';
                            }
                            break;
                    }
                }

                if (this.filterable || this.pageable) {
                    addMissing('dropdownlist');
                }

                for (var i = 0; i < this.columns.length; i++) {
                    if (this.columns[i] == undefined)
                        continue;

                    var type = this.columns[i].columntype;
                    addMissing(type);
                    if (this.filterable && this.showfilterrow) {
                        var type = this.columns[i].filtertype;
                        if (type == 'checkedlist' || type == 'bool') {
                            addMissing('checkbox');
                        }
                        if (type == 'date') {
                            addMissing('datetimeinput');
                        }
                    }
                }
                if (missingModules != "") {
                    throw new Error("jqxGrid: Missing references to the following module(s): " + missingModules);
                    this.host.remove();
                    return true;
                }
            }
            return false;
        },

        focus: function () {
            try
            {
                this.wrapper.focus();
                var me = this.that;
                setTimeout(function () {
                    me.wrapper.focus();
                }, 25);
                this.focused = true;
            }
            catch (error) {
            }
        },

        hiddenParent: function () {
            return $.jqx.isHidden(this.host);
        },

        resize: function (width, height) {
            this.width = width;
            this.height = height;
            this._updatesize(true, true);
        },

        _updatesize: function (updateWidth, updateHeight) {
            if (this._loading) {
                return;
            }

            var me = this.that;

            me._newmax = null;

            var hostWidth = me.host.width();
            var hostHeight = me.host.height();

            if (!me._oldWidth) {
                me._oldWidth = hostWidth;
            }

            if (!me._oldHeight) {
                me._oldHeight = hostHeight;
            }

            if (me._resizeTimer) {
                clearTimeout(me._resizeTimer);
            }

            var delay = 5;

            me._resizeTimer = setTimeout(function () {
                me.resizingGrid = true;
                if ($.jqx.isHidden(me.host))
                    return;

                if (hostHeight != me._oldHeight || updateHeight == true) {
                    var hasgroups = me.groupable && me.groups.length > 0;
                    var isVScrollHidden = me.vScrollBar.css('visibility');

                    if (!me.autoheight) {
                        if (me.virtualmode) {
                            me._pageviews = new Array();
                        }
                        if (!hasgroups && !me.rowdetails && !me.pageable) {
                            me._arrange();
                            me.virtualsizeinfo = me._calculatevirtualheight();
                            var hostHeight = Math.round(me.host.height()) + 2 * me.rowsheight;
                            if (parseInt(hostHeight) >= parseInt(me._oldHeight)) {
                                me.prerenderrequired = true;
                            }
                            me._renderrows(me.virtualsizeinfo);
                        }
                        else {
                            me._arrange();
                            me.prerenderrequired = true;
                            var hostHeight = Math.round(me.host.height()) + 2 * me.rowsheight;
                            realheight = me._gettableheight();
                            var visiblerecords = Math.round(hostHeight / me.rowsheight);
                            var totalrows = Math.max(me.dataview.totalrows, me.dataview.totalrecords);
                            if (me.pageable) {
                                totalrows = me.pagesize;
                                if (me.pagesize > Math.max(me.dataview.totalrows, me.dataview.totalrecords) && me.autoheight) {
                                    totalrows = Math.max(me.dataview.totalrows, me.dataview.totalrecords);
                                }
                                else if (!me.autoheight) {
                                    if (me.dataview.totalrows < me.pagesize) {
                                        totalrows = Math.max(me.dataview.totalrows, me.dataview.totalrecords);
                                    }
                                }
                            }

                            var virtualheight = totalrows * me.rowsheight;
                            var pagesize = me._getpagesize();
                            if (!me.pageable && me.autoheight) {
                                visiblerecords = totalrows;
                            }
                            if (me.virtualsizeinfo) {
                                me.virtualsizeinfo.visiblerecords = visiblerecords;
                            }
                            me.rendergridcontent(true, false);
                            me._renderrows(me.virtualsizeinfo);
                        }

                        if (isVScrollHidden != me.vScrollBar.css('visibility')) {
                            me.vScrollInstance.setPosition(0);
                            me._arrange();
                            me._updatecolumnwidths();
                            if (me.table) {
                                me.table.width(me.columnsheader.width());
                            }
                            me._updatecellwidths();
                        }
                    }
                }

                if (hostWidth != me._oldWidth || updateWidth == true) {
                    var openedEditor = false;
                    if (me.editcell && me.editcell.editor) {
                        switch (me.editcell.columntype) {
                            case "dropdownlist":
                                openedEditor = me.editcell.editor.jqxDropDownList('isOpened') || (me.editcell.editor.jqxDropDownList('isanimating') && !me.editcell.editor.jqxDropDownList('ishiding'));
                                if (openedEditor) {
                                    me.editcell.editor.jqxDropDownList({ openDelay: 0 });
                                    me.editcell.editor.jqxDropDownList('open');
                                    me.editcell.editor.jqxDropDownList({ openDelay: 250 });
                                    return;
                                }
                                break;
                            case "combobox":
                                openedEditor = me.editcell.editor.jqxComboBox('isOpened') || (me.editcell.editor.jqxComboBox('isanimating') && !me.editcell.editor.jqxComboBox('ishiding'));
                                if (openedEditor) {
                                    me.editcell.editor.jqxComboBox({ openDelay: 0 });
                                    me.editcell.editor.jqxComboBox('open');
                                    me.editcell.editor.jqxComboBox({ openDelay: 250 });
                                    return;
                                }
                            break;
                            case "datetimeinput":
                                if (openedEditor) {
                                    openedEditor = me.editcell.editor.jqxDateTimeInput('isOpened') || (me.editcell.editor.jqxDateTimeInput('isanimating') && !me.editcell.editor.jqxDateTimeInput('ishiding'));
                                    me.editcell.editor.jqxDateTimeInput({ openDelay: 0 });
                                    me.editcell.editor.jqxDateTimeInput('open');
                                    me.editcell.editor.jqxDateTimeInput({ openDelay: 250 });
                                    return;
                                }
                            break;
                        }
                    }

                    var isHScrollHidden = me.hScrollBar.css('visibility');
                    me._arrange();
                    me._updatecolumnwidths();
                    if (me.table) {
                        me.table.width(me.columnsheader.width());
                    }
                    me._updatecellwidths();
                    if (!(updateWidth == false && me._oldWidth > hostWidth)) {
                        if (!updateHeight || me.dataview.rows.length == 0) {
                            me._renderrows(me.virtualsizeinfo);
                        }
                    }
                    if (isHScrollHidden != me.hScrollBar.css('visibility')) {
                        me.hScrollInstance.setPosition(0);
                    }                  
                }
                me._oldWidth = hostWidth;
                me._oldHeight = hostHeight;
                me.resizingGrid = false;
            }, delay);
        },

        getTouches: function (e) {
            return $.jqx.mobile.getTouches(e);
        },

        _updateTouchScrolling: function () {
            var me = this.that;
            if (me.isTouchDevice()) {
                me.scrollmode = 'logical';
                me.vScrollInstance.thumbStep = me.rowsheight
                var touchstart = $.jqx.mobile.getTouchEventName('touchstart');
                var touchend = $.jqx.mobile.getTouchEventName('touchend');
                var touchmove = $.jqx.mobile.getTouchEventName('touchmove');

                me.enablehover = false;
                if (me.gridcontent) {
                    me.removeHandler(me.gridcontent, touchstart + '.touchScroll');
                    me.removeHandler(me.gridcontent, touchmove + '.touchScroll');
                    me.removeHandler(me.gridcontent, touchend + '.touchScroll');
                    me.removeHandler(me.gridcontent, 'touchcancel.touchScroll');

                    $.jqx.mobile.touchScroll(me.gridcontent[0], me.vScrollInstance.max, function (left, top) {
                        if (me.vScrollBar.css('visibility') == 'visible') {
                            var oldValue = me.vScrollInstance.value;
                            me.vScrollInstance.setPosition(oldValue + top);
                        }
                        if (me.hScrollBar.css('visibility') == 'visible') {
                            var oldValue = me.hScrollInstance.value;
                            me.hScrollInstance.setPosition(oldValue + left);
                        }
                        me.vScrollInstance.thumbCapture = true;

                        me._lastScroll = new Date();
                    }, this.element.id, this.hScrollBar, this.vScrollBar);
                    if (me._overlayElement) {
                        me.removeHandler(me._overlayElement, touchstart + '.touchScroll');
                        me.removeHandler(me._overlayElement, touchmove + '.touchScroll');
                        me.removeHandler(me._overlayElement, touchend + '.touchScroll');
                        me.removeHandler(me._overlayElement, 'touchcancel.touchScroll');

                        $.jqx.mobile.touchScroll(me._overlayElement[0], me.vScrollInstance.max, function (left, top) {
                            if (me.vScrollBar.css('visibility') == 'visible') {
                                var oldValue = me.vScrollInstance.value;
                                me.vScrollInstance.setPosition(oldValue + top);
                            }
                            if (me.hScrollBar.css('visibility') == 'visible') {
                                var oldValue = me.hScrollInstance.value;
                                me.hScrollInstance.setPosition(oldValue + left);
                            }
                            me.vScrollInstance.thumbCapture = true;

                            me._lastScroll = new Date();
                        }, this.element.id, this.hScrollBar, this.vScrollBar);
                        this.addHandler(this.host, touchstart, function () {
                            if (!me.editcell)
                                me._overlayElement.css('visibility', 'visible');
                            else {
                                me._overlayElement.css('visibility', 'hidden');
                            }
                        });
                        this.addHandler(this.host, touchend, function () {
                            if (!me.editcell)
                                me._overlayElement.css('visibility', 'visible');
                            else {
                                me._overlayElement.css('visibility', 'hidden');
                            }
                        });
                    }
                }
            }
        },

        isTouchDevice: function () {
            if (this.touchDevice != undefined)
                return this.touchDevice;

            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            this.touchDevice = isTouchDevice;
            if (this.touchmode == true) {
                if ($.jqx.browser.msie && $.jqx.browser.version < 9) {
                    this.enablehover = false;
                    return false;
                }

                isTouchDevice = true;
                $.jqx.mobile.setMobileSimulator(this.element);
                this.touchDevice = isTouchDevice;
            }
            else if (this.touchmode == false) {
                isTouchDevice = false;
            }
            if (isTouchDevice && this.touchModeStyle != false) {
                this.touchDevice = true;
                this.host.addClass(this.toThemeProperty('jqx-touch'));
                this.host.find('jqx-widget-content').addClass(this.toThemeProperty('jqx-touch'));
                this.host.find('jqx-widget-header').addClass(this.toThemeProperty('jqx-touch'));
                this.scrollbarsize = this.touchscrollbarsize;
            }
            return isTouchDevice;
        },

        toTP: function (name) {
            return this.toThemeProperty(name);
        },

        localizestrings: function (localizationobj, refresh) {
            this._cellscache = new Array();
            if ($.jqx.dataFormat) {
                $.jqx.dataFormat.cleardatescache();
            }

            if (this._loading) {
                throw new Error('jqxGrid: ' + this.loadingerrormessage);
                return false;
            }

            if (localizationobj != null) {
                for (var obj in localizationobj) {
                    if (obj.toLowerCase() !== obj) {
                        localizationobj[obj.toLowerCase()] = localizationobj[obj];
                    }
                }

                if (localizationobj.pagergotopagestring) {
                    this.gridlocalization.pagergotopagestring = localizationobj.pagergotopagestring;
                }
                if (localizationobj.pagershowrowsstring) {
                    this.gridlocalization.pagershowrowsstring = localizationobj.pagershowrowsstring;
                }
                if (localizationobj.pagerrangestring) {
                    this.gridlocalization.pagerrangestring = localizationobj.pagerrangestring;
                }
                if (localizationobj.pagernextbuttonstring) {
                    this.gridlocalization.pagernextbuttonstring = localizationobj.pagernextbuttonstring;
                }
                if (localizationobj.pagerpreviousbuttonstring) {
                    this.gridlocalization.pagerpreviousbuttonstring = localizationobj.pagerpreviousbuttonstring;
                }
                if (localizationobj.pagerfirstbuttonstring) {
                    this.gridlocalization.pagerfirstbuttonstring = localizationobj.pagerfirstbuttonstring;
                }
                if (localizationobj.pagerlastbuttonstring) {
                    this.gridlocalization.pagerlastbuttonstring = localizationobj.pagerlastbuttonstring;
                }
                if (localizationobj.groupsheaderstring) {
                    this.gridlocalization.groupsheaderstring = localizationobj.groupsheaderstring;
                }
                if (localizationobj.sortascendingstring) {
                    this.gridlocalization.sortascendingstring = localizationobj.sortascendingstring;
                }
                if (localizationobj.sortdescendingstring) {
                    this.gridlocalization.sortdescendingstring = localizationobj.sortdescendingstring;
                }
                if (localizationobj.sortremovestring) {
                    this.gridlocalization.sortremovestring = localizationobj.sortremovestring;
                }
                if (localizationobj.groupbystring) {
                    this.gridlocalization.groupbystring = localizationobj.groupbystring;
                }
                if (localizationobj.groupremovestring) {
                    this.gridlocalization.groupremovestring = localizationobj.groupremovestring;
                }
                if (localizationobj.firstDay) {
                    this.gridlocalization.firstDay = localizationobj.firstDay;
                }
                if (localizationobj.days) {
                    this.gridlocalization.days = localizationobj.days;
                }
                if (localizationobj.months) {
                    this.gridlocalization.months = localizationobj.months;
                }
                if (localizationobj.AM) {
                    this.gridlocalization.AM = localizationobj.AM;
                }
                if (localizationobj.PM) {
                    this.gridlocalization.PM = localizationobj.PM;
                }
                if (localizationobj.patterns) {
                    this.gridlocalization.patterns = localizationobj.patterns;
                }
                if (localizationobj.percentsymbol) {
                    this.gridlocalization.percentsymbol = localizationobj.percentsymbol;
                }
                if (localizationobj.currencysymbol) {
                    this.gridlocalization.currencysymbol = localizationobj.currencysymbol;
                }
                if (localizationobj.currencysymbolposition) {
                    this.gridlocalization.currencysymbolposition = localizationobj.currencysymbolposition;
                }
                if (localizationobj.decimalseparator != undefined) {
                    this.gridlocalization.decimalseparator = localizationobj.decimalseparator;
                }
                if (localizationobj.thousandsseparator != undefined) {
                    this.gridlocalization.thousandsseparator = localizationobj.thousandsseparator;
                }
                if (localizationobj.filterclearstring) {
                    this.gridlocalization.filterclearstring = localizationobj.filterclearstring;
                }
                if (localizationobj.filterstring) {
                    this.gridlocalization.filterstring = localizationobj.filterstring;
                }
                if (localizationobj.filtershowrowstring) {
                    this.gridlocalization.filtershowrowstring = localizationobj.filtershowrowstring;
                }
                if (localizationobj.filterselectallstring) {
                    this.gridlocalization.filterselectallstring = localizationobj.filterselectallstring;
                }
                if (localizationobj.filterchoosestring) {
                    this.gridlocalization.filterchoosestring = localizationobj.filterchoosestring;
                }
                if (localizationobj.filterorconditionstring) {
                    this.gridlocalization.filterorconditionstring = localizationobj.filterorconditionstring;
                }
                if (localizationobj.filterandconditionstring) {
                    this.gridlocalization.filterandconditionstring = localizationobj.filterandconditionstring;
                }
                if (localizationobj.filterstringcomparisonoperators) {
                    this.gridlocalization.filterstringcomparisonoperators = localizationobj.filterstringcomparisonoperators;
                }
                if (localizationobj.filternumericcomparisonoperators) {
                    this.gridlocalization.filternumericcomparisonoperators = localizationobj.filternumericcomparisonoperators;
                }
                if (localizationobj.filterdatecomparisonoperators) {
                    this.gridlocalization.filterdatecomparisonoperators = localizationobj.filterdatecomparisonoperators;
                }
                if (localizationobj.filterbooleancomparisonoperators) {
                    this.gridlocalization.filterbooleancomparisonoperators = localizationobj.filterbooleancomparisonoperators;
                }
                if (localizationobj.emptydatastring) {
                    this.gridlocalization.emptydatastring = localizationobj.emptydatastring;
                }
                if (localizationobj.filterselectstring) {
                    this.gridlocalization.filterselectstring = localizationobj.filterselectstring;
                }
                if (localizationobj.todaystring) {
                    this.gridlocalization.todaystring = localizationobj.todaystring;
                }
                if (localizationobj.clearstring) {
                    this.gridlocalization.clearstring = localizationobj.clearstring;
                }
                if (localizationobj.validationstring) {
                    this.gridlocalization.validationstring = localizationobj.validationstring;
                }
                if (localizationobj.loadtext) {
                    this.gridlocalization.loadtext = localizationobj.loadtext;
                }

                if (refresh !== false) {
                    if (this._initpager) {
                        this._initpager();
                    }
                    if (this._initgroupsheader) {
                        this._initgroupsheader();
                    }
                    if (this._initmenu) {
                        this._initmenu();
                    }
                    this._builddataloadelement();
                    $(this.dataloadelement).css('visibility', 'hidden');
                    $(this.dataloadelement).css('display', 'none');

                    if (this.filterable && this.showfilterrow) {
                        if (this._updatefilterrow) {
                            for (var obj in this._filterrowcache) {
                                $(this._filterrowcache[obj]).remove();
                            }

                            this._filterrowcache = [];
                            this._updatefilterrow();
                        }
                    }
                    if (this.showaggregates && this.refresheaggregates) {
                        this.refresheaggregates();
                    }
                    this._renderrows(this.virtualsizeinfo);
                }
            }
            else {
                this.gridlocalization = {
                    // separator of parts of a date (e.g. '/' in 11/05/1955)
                    '/': "/",
                    // separator of parts of a time (e.g. ':' in 05:44 PM)
                    ':': ":",
                    // the first day of the week (0 = Sunday, 1 = Monday, etc)
                    firstDay: 0,
                    days: {
                        // full day names
                        names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                        // abbreviated day names
                        namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                        // shortest day names
                        namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
                    },
                    months: {
                        // full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
                        names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
                        // abbreviated month names
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]
                    },
                    // AM and PM designators in one of these forms:
                    // The usual view, and the upper and lower case versions
                    //      [standard,lowercase,uppercase]
                    // The culture does not use AM or PM (likely all standard date formats use 24 hour time)
                    //      null
                    AM: ["AM", "am", "AM"],
                    PM: ["PM", "pm", "PM"],
                    eras: [
                    // eras in reverse chronological order.
                    // name: the name of the era in this culture (e.g. A.D., C.E.)
                    // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
                    // offset: offset in years from gregorian calendar
                    {"name": "A.D.", "start": null, "offset": 0 }
                    ],
                    twoDigitYearMax: 2029,
                    patterns: {
                        // short date pattern
                        d: "M/d/yyyy",
                        // long date pattern
                        D: "dddd, MMMM dd, yyyy",
                        // short time pattern
                        t: "h:mm tt",
                        // long time pattern
                        T: "h:mm:ss tt",
                        // long date, short time pattern
                        f: "dddd, MMMM dd, yyyy h:mm tt",
                        // long date, long time pattern
                        F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                        // month/day pattern
                        M: "MMMM dd",
                        // month/year pattern
                        Y: "yyyy MMMM",
                        // S is a sortable format that does not vary by culture
                        S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss",
                        // formatting of dates in MySQL DataBases
                        ISO: "yyyy-MM-dd hh:mm:ss",
                        ISO2: "yyyy-MM-dd HH:mm:ss",
                        d1: "dd.MM.yyyy",
                        d2: "dd-MM-yyyy",
                        d3: "dd-MMMM-yyyy",
                        d4: "dd-MM-yy",
                        d5: "H:mm",
                        d6: "HH:mm",
                        d7: "HH:mm tt",
                        d8: "dd/MMMM/yyyy",
                        d9: "MMMM-dd",
                        d10: "MM-dd",
                        d11: "MM-dd-yyyy"
                    },
                    percentsymbol: "%",
                    currencysymbol: "$",
                    currencysymbolposition: "before",
                    decimalseparator: '.',
                    thousandsseparator: ',',
                    pagergotopagestring: "Go to page:",
                    pagershowrowsstring: "Show rows:",
                    pagerrangestring: " of ",
                    pagerpreviousbuttonstring: "previous",
                    pagernextbuttonstring: "next",
                    pagerfirstbuttonstring: "first",
                    pagerlastbuttonstring: "last",
                    groupsheaderstring: "Drag a column and drop it here to group by that column",
                    sortascendingstring: "Sort Ascending",
                    sortdescendingstring: "Sort Descending",
                    sortremovestring: "Remove Sort",
                    groupbystring: "Group By this column",
                    groupremovestring: "Remove from groups",
                    filterclearstring: "Clear",
                    filterstring: "Filter",
                    filtershowrowstring: "Show rows where:",
                    filterorconditionstring: "Or",
                    filterandconditionstring: "And",
                    filterselectallstring: "(Select All)",
                    filterchoosestring: "Please Choose:",
                    filterstringcomparisonoperators: ['empty', 'not empty', 'contains', 'contains(match case)',
                       'does not contain', 'does not contain(match case)', 'starts with', 'starts with(match case)',
                       'ends with', 'ends with(match case)', 'equal', 'equal(match case)', 'null', 'not null'],
                    filternumericcomparisonoperators: ['equal', 'not equal', 'less than', 'less than or equal', 'greater than', 'greater than or equal', 'null', 'not null'],
                    filterdatecomparisonoperators: ['equal', 'not equal', 'less than', 'less than or equal', 'greater than', 'greater than or equal', 'null', 'not null'],
                    filterbooleancomparisonoperators: ['equal', 'not equal'],
                    validationstring: "Entered value is not valid",
                    emptydatastring: "No data to display",
                    filterselectstring: "Select Filter",
                    loadtext: "Loading...",
                    clearstring: "Clear",
                    todaystring: "Today"
                };
            }
        },

        _initmenu: function () {
            var self = this.that;

            if (this.host.jqxMenu) {
                if (this.gridmenu) {
                    if (this.filterable) {
                        if (this._destroyfilterpanel) {
                            this._destroyfilterpanel();
                        }
                    }
                    this.removeHandler(this.gridmenu, 'keydown');
                    this.removeHandler(this.gridmenu, 'closed');
                    this.removeHandler(this.gridmenu, 'itemclick');
                    this.gridmenu.jqxMenu('destroy');
                    this.gridmenu.removeData();
                    this.gridmenu.remove();
                }
                this.menuitemsarray = new Array();
                this.gridmenu = $('<div id="gridmenu' + this.element.id + '" style="z-index: 9999999999999;"></div>');
                this.host.append(this.gridmenu);
                var menuitems = $('<ul></ul>');
                var imgsortasc = '<div class="jqx-grid-sortasc-icon"></div>';
                var sortascendingitem = $('<li>' + imgsortasc + this.gridlocalization.sortascendingstring + '</li>');
                var imgsortdesc = '<div class="jqx-grid-sortdesc-icon"></div>';
                var sortdescendingitem = $('<li>' + imgsortdesc + this.gridlocalization.sortdescendingstring + '</li>');
                var imgsortclear = '<div class="jqx-grid-sortremove-icon"></div>';
                var sortremoveitem = $('<li>' + imgsortclear + this.gridlocalization.sortremovestring + '</li>');
                var imggroupby = '<div class="jqx-grid-groupby-icon"></div>';
                var groupbyitem = $('<li>' + imggroupby + this.gridlocalization.groupbystring + '</li>');
                var groupremoveitem = $('<li>' + imggroupby + this.gridlocalization.groupremovestring + '</li>');
                var separatoritem = $('<li type="separator"></li>');
                var filteritem = $('<li class="filter" style="height: 175px;" ignoretheme="true">' + '<div class="filter"></div>' + '</li>');

                var maxstringlength = this.gridlocalization.sortascendingstring.length;
                var maxstring = this.gridlocalization.sortascendingstring;
                if (this.gridlocalization.sortdescendingstring.length > maxstringlength) {
                    maxstringlength = this.gridlocalization.sortdescendingstring.length;
                    maxstring = this.gridlocalization.sortdescendingstring;
                }
                if (this.gridlocalization.sortremovestring.length > maxstringlength) {
                    maxstringlength = this.gridlocalization.sortremovestring.length;
                    maxstring = this.gridlocalization.sortremovestring;
                }
                if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) {
                    if (this.gridlocalization.groupbystring.length > maxstringlength) {
                        maxstringlength = this.gridlocalization.groupbystring.length;
                        maxstring = this.gridlocalization.groupbystring;
                    }
                    if (this.gridlocalization.groupremovestring.length > maxstringlength) {
                        maxstringlength = this.gridlocalization.groupremovestring.length;
                        maxstring = this.gridlocalization.groupremovestring;
                    }
                }
                var stringwidth = 200;
                maxstring = $.trim(maxstring).replace(/\&nbsp\;/ig, '').replace(/\&#160\;/ig, '');
                var measurestring = $('<span>' + maxstring + '</span>');
                measurestring.addClass(this.toThemeProperty('jqx-menu-item'));
                this.host.append(measurestring);
                stringwidth = measurestring.outerWidth() + 60;
                measurestring.remove();
                var itemscount = 0;
                if (this.sortable && this._togglesort && this.showsortmenuitems) {
                    menuitems.append(sortascendingitem);
                    this.menuitemsarray[0] = sortascendingitem[0];

                    menuitems.append(sortdescendingitem);
                    this.menuitemsarray[1] = sortdescendingitem[0];

                    menuitems.append(sortremoveitem);
                    this.menuitemsarray[2] = sortremoveitem[0];
                    itemscount = 3;
                }

                if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) {
                    menuitems.append(groupbyitem);
                    this.menuitemsarray[3] = groupbyitem[0];

                    menuitems.append(groupremoveitem);
                    this.menuitemsarray[4] = groupremoveitem[0];
                    itemscount += 2;
                }

                var measureHeight = this._measureMenuElement();
                var itemsheight = itemscount * measureHeight + 9;
                var closeonclick = true;
                if (this.filterable && !this.showfilterrow && this.showfiltermenuitems) {
                    if (this._initfilterpanel) {
                        this.menuitemsarray[5] = filteritem[0];
                        this.menuitemsarray[6] = filteritem[0];
                        menuitems.append(separatoritem);
                        menuitems.append(filteritem);
                        itemsheight += 180;
                        if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                            itemsheight += 20;
                        }

                        var filterpanel = $(filteritem).find('div:first');
                        stringwidth += 20;
                        this._initfilterpanel(this, filterpanel, "", stringwidth);
                        closeonclick = false;

                        this.removeHandler($(document), 'click.menu' + self.element.id, self._closemenuafterclick, self);
                        this.addHandler($(document), 'click.menu' + self.element.id, self._closemenuafterclick, self);
                    }
                    else {
                        throw new Error('jqxGrid: Missing reference to jqxgrid.filter.js.');
                    }
                }

                this.gridmenu.append(menuitems);

                if ($.jqx.browser.msie && $.jqx.browser.version < 8 && this.filterable) {
                    $("#listBoxfilter1" + this.element.id).css('z-index', 4990);
                    $("#listBoxfilter2" + this.element.id).css('z-index', 4990);
                    $("#listBoxfilter3" + this.element.id).css('z-index', 4990);
                    $('#gridmenu' + this.element.id).css('z-index', 5000);
                    this.addHandler($('#gridmenu' + this.element.id), 'initialized', function () {
                        $('#menuWrappergridmenu' + self.element.id).css('z-index', 4980);
                    });
                }

                if (this.menuitemsarray[0] == undefined) {
                    itemsheight = 65;
                }

                this.removeHandler(this.gridmenu, 'keydown');
                this.addHandler(this.gridmenu, 'keydown', function (event) {
                    if (event.keyCode == 27) {
                        self.gridmenu.jqxMenu('close');
                    }
                    else if (event.keyCode == 13 && self.filterable) {
                        if (self._buildfilter) {
                            var filter1 = $($.find('#filter1' + self.element.id)).jqxDropDownList('container').css('display') == 'block';
                            var filter2 = $($.find('#filter2' + self.element.id)).jqxDropDownList('container').css('display') == 'block';
                            var filter3 = $($.find('#filter3' + self.element.id)).jqxDropDownList('container').css('display') == 'block';
                            var clearButton = $($.find('#filterclearbutton' + self.element.id)).hasClass('jqx-fill-state-focus');
                            if (clearButton) {
                                var column = $.data(document.body, "contextmenu" + self.element.id).column;
                                self._clearfilter(self, self.element, column);
                                self.gridmenu.jqxMenu('close');
                            }
                            else {
                                if (!filter1 && !filter2 && !filter3) {
                                    var column = $.data(document.body, "contextmenu" + self.element.id).column;
                                    self.gridmenu.jqxMenu('close');
                                    self._buildfilter(self, filteritem, column);
                                }
                            }
                        }
                    }
                });
                if (this.popupwidth != 'auto') {
                    stringwidth = this.popupwidth;
                }

                this.gridmenu.jqxMenu({ width: stringwidth, height: itemsheight, autoCloseOnClick: closeonclick, autoOpenPopup: false, mode: 'popup', theme: this.theme, animationShowDuration: 0, animationHideDuration: 0, animationShowDelay: 0 });
                if (this.filterable) {
                    this.gridmenu.jqxMenu('_setItemProperty', filteritem[0].id, 'closeOnClick', false);
                }
                if (this.rtl) {
                    var me = this.that;
                    $.each(menuitems.find('li'), function () {
                        $(this).addClass(me.toTP('jqx-rtl'));
                    });
                    var func = function (element) {
                        var el = element.find('div');
                        el.css('float', 'right');
                        el.css('margin-left', '4px');
                        el.css('margin-right', '-4px');
                    }
                    func(sortremoveitem);
                    func(sortdescendingitem);
                    func(sortascendingitem);
                    func(groupbyitem);
                    func(groupremoveitem);
                }
                this._handlemenueevents();
            }
            else {
                this.columnsmenu = false;
            }
            //this._appendmenu();
        },

        _arrangemenu: function () {
            if (!this.gridmenu) {
                this._initmenu();
            }

            var maxstringlength = this.gridlocalization.sortascendingstring.length;
            var maxstring = this.gridlocalization.sortascendingstring;
            if (this.gridlocalization.sortdescendingstring.length > maxstringlength) {
                maxstringlength = this.gridlocalization.sortdescendingstring.length;
                maxstring = this.gridlocalization.sortdescendingstring;
            }
            if (this.gridlocalization.sortremovestring.length > maxstringlength) {
                maxstringlength = this.gridlocalization.sortremovestring.length;
                maxstring = this.gridlocalization.sortremovestring;
            }
            if (this.groupable && this._initgroupsheader) {
                if (this.gridlocalization.groupbystring.length > maxstringlength) {
                    maxstringlength = this.gridlocalization.groupbystring.length;
                    maxstring = this.gridlocalization.groupbystring;
                }
                if (this.gridlocalization.groupremovestring.length > maxstringlength) {
                    maxstringlength = this.gridlocalization.groupremovestring.length;
                    maxstring = this.gridlocalization.groupremovestring;
                }
            }
            var stringwidth = 200;
            maxstring = $.trim(maxstring).replace(/\&nbsp\;/ig, '').replace(/\&#160\;/ig, '');
            var measurestring = $('<span>' + maxstring + '</span>');
            measurestring.addClass(this.toThemeProperty('jqx-menu-item'));
            this.host.append(measurestring);
            stringwidth = measurestring.outerWidth() + 60;
            measurestring.remove();
            var itemscount = 0;
            if (this.sortable && this._togglesort && this.showsortmenuitems) {
                itemscount = 3;
            }

            if (this.groupable && this._initgroupsheader && this.showgroupmenuitems) {
                itemscount += 2;
            }

            var itemsheight = itemscount * 27 + 3;
            if (this.filterable && this.showfiltermenuitems) {
                if (this._initfilterpanel) {
                    itemsheight += 180;
                    stringwidth += 20;
                    if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                        itemsheight += 20;
                    }
                }
            }

            if (this.menuitemsarray[0] == undefined) {
                itemsheight = 65;
            }

            if (this.popupwidth != 'auto') {
                stringwidth = this.popupwidth;
            }

            this.gridmenu.jqxMenu({ width: stringwidth, height: itemsheight });
        },

        //_appendmenu: function () {
        //    var el = $.jqx.dataFormat._getmenuelement();
        //    var me = this.that;
        //    if (el != "") {
        //        setTimeout(function () {
        //            var e = $(el);
        //            e.css('position', 'absolute');
        //            var offset = me.host.offset();
        //            e.css('left', offset.left + me.content.width() - 60);
        //            var height = me.table.height();
        //            e.css('top', offset.top);
        //            me.host.append(e);
        //        }, 100);
        //    }
        //},

        _closemenuafterclick: function (event) {
            var me = event != null ? event.data : this;
            var matches = false;

            if (event.target == undefined || (event.target != undefined && event.target.className.indexOf == undefined))
            {
                me.gridmenu.jqxMenu('close');
                return;
            }
            
            if (event.target.className.indexOf('filter') != -1 && event.target.className.indexOf('jqx-grid-cell-filter') == -1) {
                return;
            }

            if (event.target.className.indexOf('jqx-grid-cell') != -1) {
                me.gridmenu.jqxMenu('close');
                return;
            }

            if (me._hasOpenedMenu) {
                if ($(event.target).ischildof(me.gridmenu)) {
                    return;
                }
            }

            var gridbounds = me.host.coord();
            var menubounds = me.gridmenu.coord();
            var x = event.pageX;
            var y = event.pageY;

            $.each($(event.target).parents(), function () {
                if (this.id != null && this.id.indexOf && this.id.indexOf('filter') != -1) {
                    matches = true;
                    return false;
                }

                if (this.className.indexOf && this.className.indexOf('filter') != -1 && this.className.indexOf('jqx-grid-cell-filter') == -1) {
                    matches = true;
                    return false;
                }

                if (this.className.indexOf && this.className.indexOf('jqx-grid-cell') != -1) {
                    me.gridmenu.jqxMenu('close');
                    return false;
                }
                if (this.className.indexOf && this.className.indexOf('jqx-grid-column') != -1) {
                    me.gridmenu.jqxMenu('close');
                    return false;
                }
            });

            if (matches) {
                return;
            }

            try {
                if (me.filtermode === "default") {
                    var date1 = $($.find('#filter1' + me.element.id)).jqxDropDownList('listBox').vScrollInstance._mouseup;
                    var newDate = new Date();
                    if (newDate - date1 < 100)
                        return;

                    var date2 = $($.find('#filter3' + me.element.id)).jqxDropDownList('listBox').vScrollInstance._mouseup;
                    if (newDate - date2 < 100)
                        return;

                    if (($($.find('#filter3' + me.element.id)).jqxDropDownList('container')).css('display') == 'block')
                        return;
                    if (($($.find('#filter1' + me.element.id)).jqxDropDownList('container')).css('display') == 'block')
                        return;
                    if (($($.find('#filter2' + me.element.id)).jqxDropDownList('container')).css('display') == 'block')
                        return;
                }
                else {
                    var date1 = $($.find('#filter1' + me.element.id)).data().jqxListBox.instance.vScrollInstance._mouseup;
                    var newDate = new Date();
                    if (newDate - date1 < 100)
                        return;
                    var date2 = $($.find('#filter1' + me.element.id)).data().jqxListBox.instance.hScrollInstance._mouseup;
                    if (newDate - date2 < 100)
                        return;
                }
            }
            catch (error) {
            }

            if (x >= menubounds.left && x <= menubounds.left + me.gridmenu.width()) {
                if (y >= menubounds.top && y <= menubounds.top + me.gridmenu.height()) {
                    return;
                }
            }

            me.gridmenu.jqxMenu('close');

            //if (x < gridbounds.left || x > gridbounds.left + me.host.width()) {
            //    me.gridmenu.jqxMenu('close');
            //    return;
            //}

            //if (y < gridbounds.top || y > gridbounds.top + me.host.height()) {
            //    me.gridmenu.jqxMenu('close');
            //    return;
            //}
        },

        _handlemenueevents: function () {
            var self = this.that;
            this.removeHandler(this.gridmenu, 'closed');
            this.addHandler(this.gridmenu, 'closed', function (event) {
                self._closemenu();
            });

            this.removeHandler(this.gridmenu, 'itemclick');
            this.addHandler(this.gridmenu, 'itemclick', function (event) {
                var clickeditem = event.args;

                for (var i = 0; i < self.menuitemsarray.length; i++) {
                    var currentitem = self.menuitemsarray[i];
                    if (clickeditem == currentitem) {
                        if ($(clickeditem).attr('ignoretheme') != undefined) {
                            return;
                        }

                        var menu = $.data(document.body, "contextmenu" + self.element.id);
                        var column = menu.column;
                        if (self.filterable) {
                            self.gridmenu.jqxMenu('close');
                        }
                        var displayfield = column.displayfield;
                        if (displayfield == null) displayfield = column.datafield;

                        if (menu != null) {
                            switch (i) {
                                case 0:
                                    self.sortby(displayfield, 'ascending', null);
                                    break;
                                case 1:
                                    self.sortby(displayfield, 'descending', null);
                                    break;
                                case 2:
                                    self.sortby(displayfield, null, null);
                                    break;
                                case 3:
                                    self.addgroup(column.datafield);
                                    break;
                                case 4:
                                    self.removegroup(column.datafield);
                                    break;
                                case 5:
                                    var filteritem = $(self.menuitemsarray[6]);
                                    $(filteritem).css('display', 'block');
                                    break;
                                case 7:
                                    break;
                            }
                        }
                        break;
                    }
                }
            });
        },

        // get information about the data records.
        getdatainformation: function () {
            var totalrecords = this.dataview.totalrecords;
            if (this.summaryrows) {
                totalrecords += this.summaryrows.length;
            }

            return { rowscount: totalrecords, sortinformation: this.getsortinformation(), paginginformation: this.getpaginginformation() }
        },

        // gets sort information.
        getsortinformation: function () {
            return { sortcolumn: this.sortcolumn, sortdirection: this.sortdirection };
        },

        // get paging information.
        getpaginginformation: function () {
            return { pagenum: this.dataview.pagenum, pagesize: this.pagesize, pagescount: Math.ceil(this.dataview.totalrecords / this.pagesize) };
        },

        _updaterowsproperties: function () {
            this._updatehiddenrows();
            this._updaterowheights();
            this._updaterowdetails();
        },

        _updatehiddenrows: function () {
            var me = this.that;
            this.hiddens = new Array();
            var hiddenboundrows = this.hiddenboundrows;
            $.each(hiddenboundrows, function (index) {
                if (this.index != undefined) {
                    var boundindex = this.index;
                    var visibleindex = me.getrowvisibleindex(index);
                    me.hiddens[visibleindex] = this.hidden;
                }
            });
        },

        _updaterowheights: function () {
            var me = this.that;
            this.heights = new Array();
            var heightboundrows = this.heightboundrows;
            $.each(heightboundrows, function (index) {
                if (this.index != undefined) {
                    var boundindex = this.index;
                    var visibleindex = me.getrowvisibleindex(index);
                    me.heights[visibleindex] = this.height;
                }
            });
        },

        _updaterowdetails: function () {
            var me = this.that;
            this.details = new Array();
            var detailboundrows = this.detailboundrows;
            $.each(detailboundrows, function (index) {
                if (this.index != undefined) {
                    var boundindex = this.index;
                    var visibleindex = me.getrowvisibleindex(index);
                    me.details[visibleindex] = this.details;
                }
            });
        },

        _getmenuitembyindex: function (index) {
            if (index == undefined)
                return null;

            return this.menuitemsarray[index];
        },

        _closemenu: function () {
            if (this._hasOpenedMenu) {
                if (this.gridmenu != null) {
                    this.gridmenu.jqxMenu('close');
                }

                var menu = $.data(document.body, "contextmenu" + this.element.id);
                var menuoffset = 16;
                if (menu != null && this.autoshowcolumnsmenubutton) {
                    if (this.enableanimations) {
                        $(menu.columnsmenu).animate({
                            'margin-left': 0
                        }, 'fast', function () {
                            $(menu.columnsmenu).css('display', 'none');
                        });
                        var left = !this.rtl ? -32 : 0;
                        menu.column.iconscontainer.animate({
                            'margin-left': left
                        }, 'fast');
                    }
                    else {
                        $(menu.columnsmenu).css('display', 'none');
                        var left = !this.rtl ? -32 : 0;
                        menu.column.iconscontainer.css('margin-left', left);
                    }

                    $.data(document.body, "contextmenu" + this.element.id, null)
                }
                this._hasOpenedMenu = false;


                var filteritem = this._getmenuitembyindex(5);
                if (filteritem) {
                    var condition = $(filteritem).find('#filter1' + this.element.id);
                    var filteroperator = $(filteritem).find('#filter2' + this.element.id);
                    var condition2 = $(filteritem).find('#filter3' + this.element.id);
                    if (condition.length > 0 && this.filtermode === "default") {
                        condition.jqxDropDownList('hideListBox');
                        filteroperator.jqxDropDownList('hideListBox');
                        condition2.jqxDropDownList('hideListBox');
                    }
                }
            }
        },

        scrolloffset: function (top, left) {
            if (top == null || left == null || top == undefined || left == undefined)
                return;

            this.vScrollBar.jqxScrollBar('setPosition', top);
            this.hScrollBar.jqxScrollBar('setPosition', left);
        },

        scrollleft: function (left) {
            if (left == null || left == undefined)
                return;
            if (this.hScrollBar.css('visibility') != 'hidden') {
                this.hScrollBar.jqxScrollBar('setPosition', left);
            }
        },

        scrolltop: function (top) {
            if (top == null || top == undefined)
                return;
            if (this.vScrollBar.css('visibility') != 'hidden') {
                this.vScrollBar.jqxScrollBar('setPosition', top);
            }
        },

        beginupdate: function () {
            this._updating = true;
            this._datachanged = false;
        },

        endupdate: function () {
            this.resumeupdate();
        },

        resumeupdate: function () {
            this._updating = false;
            if (this._datachanged == true) {
                var verticalScrollValue = this.vScrollInstance.value;
                this.render(true, true, false);
                this._datachanged = false;
                if (verticalScrollValue != 0 && verticalScrollValue < this.vScrollInstance.max) {
                    this.scrolltop(verticalScrollValue);
                }
            }
            else {
                this.rendergridcontent(true);
                this._renderrows(this.virtualsizeinfo);
            }
            if (this.showaggregates && this.renderaggregates) {
                this.renderaggregates();
            }
            this._updatecolumnwidths();
            this._updatecellwidths();
            this._renderrows(this.virtualsizeinfo);
        },

        updating: function () {
            return this._updating;
        },

        showloadelement: function () {
            if (this.renderloadelement) {
                this.dataloadelement.html(this.renderloadelement());
            }

            $(this.dataloadelement).css('visibility', 'visible');
            $(this.dataloadelement).css('display', 'block');
        },

        hideloadelement: function () {
            $(this.dataloadelement).css('visibility', 'hidden');
            $(this.dataloadelement).css('display', 'none');
        },

        _updatefocusedfilter: function () {
            var me = this.that;
            if (me.focusedfilter) {
                me.focusedfilter.focus();
                setTimeout(function () {
                    me.focusedfilter.focus();
                    if (me.focusedfilter[0].nodeName.toLowerCase() == "input") {
                        var start = me.focusedfilter.val().length;
                        try {
                            if ('selectionStart' in me.focusedfilter[0]) {
                                me.focusedfilter[0].setSelectionRange(start, start);
                            }
                            else {
                                var range = me.focusedfilter[0].createTextRange();
                                range.collapse(true);
                                range.moveEnd('character', start);
                                range.moveStart('character', start);
                                range.select();
                            }
                        }
                        catch (error) {
                        }
                    }
                }, 10);
            }
        },

        databind: function (source, reason) {
            if (this.loadingstate === true) {
                return;
            }
        
            if (this.host.css('display') == 'block') {
                if (this.autoshowloadelement) {
                    $(this.dataloadelement).css('visibility', 'visible');
                    $(this.dataloadelement).css('display', 'block');
                    this.dataloadelement.width(this.host.width());
                    this.dataloadelement.height(this.host.height());
                    this._hideemptyrow();
                }
                else {
                    $(this.dataloadelement).css('visibility', 'hidden');
                    $(this.dataloadelement).css('display', 'none');
                }
            }
            if (!this._initgroupsheader && this.groups.length > 0) {
                this.groups = new Array();
            }

            var me = this.that;
            if (source == null) {
                source = {};
            }

            if (!source.recordstartindex) {
                source.recordstartindex = 0;
            }
            if (!source.recordendindex) {
                source.recordendindex = 0;
            }
            if (source.loadallrecords == undefined || source.loadallrecords == null) {
                source.loadallrecords = true;
            }
            if (source.sortcomparer == undefined || source.sortcomparer == null) {
                source.sortcomparer = null;
            }
            if (source.filter == undefined || source.filter == null) {
                source.filter = null;
            }
            if (source.sort == undefined || source.sort == null) {
                source.sort = null;
            }
            if (source.data == undefined || source.data == null) {
                source.data = null;
            }

            var url = null;
            if (source != null) {
                url = source._source != undefined ? source._source.url : source.url;
            }
            this.dataview = this.dataview || new $.jqx.dataview();
            if ($.jqx.dataview.sort) {
                $.extend(this.dataview, new $.jqx.dataview.sort());
            }
            if ($.jqx.dataview.grouping) {
                $.extend(this.dataview, new $.jqx.dataview.grouping());
            }

            this.dataview.suspendupdate();
            this.dataview.pageable = this.pageable;
            this.dataview.groupable = this.groupable;
            this.dataview.groups = this.groups;
            this.dataview.virtualmode = this.virtualmode;
            this.dataview.grid = this;
            this.dataview._clearcaches();
            if (!this.pageable && this.virtualmode) {
                this.loadondemand = true;
            }
            if (!me.initializedcall) {
                if (source._source) {
                    if (this.sortable) {
                        if (source._source.sortcolumn != undefined) {
                            this.sortcolumn = source._source.sortcolumn;
                            this.source.sortcolumn = this.sortcolumn;
                            this.dataview.sortfield = source._source.sortcolumn;
                            source._source.sortcolumn = null;
                        }
                        if (source._source.sortdirection != undefined) {
                            this.dataview.sortfielddirection = source._source.sortdirection;
                            var sortdirection = source._source.sortdirection;
                            if (sortdirection == 'a' || sortdirection == 'asc' || sortdirection == 'ascending' || sortdirection == true) {
                                var ascending = true;
                            }
                            else {
                                var ascending = false;
                            }

                            if (sortdirection != null) {
                                this.sortdirection = { 'ascending': ascending, 'descending': !ascending };
                            }
                            else {
                                this.sortdirection = { 'ascending': false, 'descending': false };
                            }
                        }
                    }
                }
                if (this.pageable) {
                    if (source._source) {   
                        if (source._source.pagenum != undefined) {
                            this.dataview.pagenum = source._source.pagenum;
                        }
                        if (source._source.pagesize != undefined) {
                            this.pagesize = source._source.pagesize;
                            this.dataview.pagesize = source._source.pagesize;
                        }
                        else {
                            this.dataview.pagesize = source._source.pagesize;
                            if (this.dataview.pagesize == undefined)
                                this.dataview.pagesize = this.pagesize;
                        }
                    }
                }
                if (this.sortable) {
                    if (source.sortcolumn) {
                        this.dataview.sortfield = source.sortcolumn;
                    }
                    if (source.sortdirection) {
                        this.dataview.sortfielddirection = source.sortdirection;
                    }
                }
            }

            this._loading = true;

            this.dataview.update = function (rowschanged) {
                if (!me.pageable && me.virtualmode) {
                    me.loadondemand = true;
                }
                me._loading = false;
                if (me.dataview.isupdating()) {
                    me.dataview.resumeupdate(false);
                }
                if (me.pageable && me.pagerrenderer) {
                    if (me._initpager)
                        me._initpager();
                    else throw new Error('jqxGrid: Missing reference to jqxgrid.pager.js.');
                }

                if ((me.source && me.source.sortcolumn) && me.sortby && !me.virtualmode) {
                    me.render();
                    if (!me.source._source.sort) {
                        me.sortby(me.source.sortcolumn, me.source.sortdirection, me.source.sortcomparer);
                    }
                    me.source.sortcolumn = null;
                }
                else {
                    var vvalue = me.vScrollInstance.value;
                    var hvalue = me.hScrollInstance.value;
                    var datatype = me.source ? me.source.datatype : "array";
                    if (datatype != 'local' || datatype != 'array') {
                        var virtualheight = me.virtualsizeinfo == null || (me.virtualsizeinfo != null && me.virtualsizeinfo.virtualheight == 0);
                        if (reason == 'cells') {
                            var hasfilter = false;
                            if (me.filterable && me._initfilterpanel && me.dataview.filters.length) {
                                hasfilter = true;
                            }

                            if (false == rowschanged) {
                                if (!me.vScrollInstance.isScrolling() && !me.hScrollInstance.isScrolling()) {
                                    me._cellscache = new Array();
                                    me._pagescache = new Array();
                                    me._renderrows(me.virtualsizeinfo);
                                    if (me.showfilterrow && me.filterable && me.filterrow) {
                                        me._updatelistfilters(true);
                                    }

                                    if (me.showaggregates && me._updateaggregates) {
                                        me._updateaggregates();
                                    }
                                }
                                if (me.sortcolumn) {
                                    me.sortby(me.sortcolumn, me.dataview.sortfielddirection, me.source.sortcomparer);
                                }
                                if (me.autoshowloadelement) {
                                    $(me.dataloadelement).css('visibility', 'hidden');
                                    $(me.dataloadelement).css('display', 'none');
                                }
                                if (me.virtualmode && !me._loading) {
                                    me.loadondemand = true;
                                    me._renderrows(me.virtualsizeinfo);
                                }
                                return;
                            }
                            else {
                                if (hasfilter) {
                                    reason = 'filter';
                                }
                                else if (me.sortcolumn != undefined) {
                                    reason = 'sort';
                                }
                            }
                        }

                        if (!me.virtualmode || virtualheight || (me.virtualmode && me.pageable)) {
                            if (me.initializedcall == true && reason == 'pagechanged') {
                                vvalue = 0;
                                if (me.groupable && me.groups.length > 0) {
                                    me._render(true, true, false, false, false);
                                    me._updatecolumnwidths();
                                    me._updatecellwidths();
                                    me._renderrows(me.virtualsizeinfo);
                                }
                                else {
                                    me.rendergridcontent(true);
                                    if (me.pageable && me.updatepagerdetails) {
                                        me.updatepagerdetails();
                                        if (me.autoheight) {
                                            me._updatepageviews();
                                            if (me.autorowheight) {
                                                me._renderrows(this.virtualsizeinfo);
                                            }
                                        }
                                        else {
                                            if (me.autorowheight) {
                                                me._updatepageviews();
                                                me._renderrows(this.virtualsizeinfo);
                                            }
                                        }
                                    }
                                }

                                if (me.showaggregates && me._updateaggregates) {
                                    me._updateaggregates();
                                }
                                //     me._render(true, true, false, false);
                            }
                            else if (reason == 'filter') {
                                if (me.virtualmode) {
                                    me._render(true, true, false, false, false);
                                    me._updatefocusedfilter();
                                    me._updatecolumnwidths();
                                    me._updatecellwidths();
                                    me._renderrows(me.virtualsizeinfo);
                                }
                                else {
                                    me._render(true, true, false, false, false);
                                }
                            }
                            else if (reason == 'sort') {
                                if (me.virtualmode) {
                                    me.rendergridcontent(true);
                                    if (me.showaggregates && me._updateaggregates) {
                                        me._updateaggregates();
                                    }
                                }
                                else {
                                    me._render(true, true, false, false, false);
                                    if (me.sortcolumn && !me.source.sort) {
                                        me.sortby(me.sortcolumn, me.dataview.sortfielddirection, me.source.sortcomparer);
                                    }
                                }
                            }
                            else if (reason == 'data') {
                                me._render(true, true, false, false, false);
                            }
                            else if (reason == "state") {
                                me._render(true, true, false, me.menuitemsarray && me.menuitemsarray.length > 0 && !me.virtualmode);
                            }
                            else {
                                me._render(true, true, true, me.menuitemsarray && me.menuitemsarray.length > 0 && !me.virtualmode);
                            }
                        }
                        else {
                            if (me.virtualmode && rowschanged == true && !me.pageable) {
                                me._render(true, true, false, false, false);
                                me._updatefocusedfilter();
                                me._updatecolumnwidths();
                                me._updatecellwidths();
                                me._renderrows(me.virtualsizeinfo);
                            }
                            else if (me.virtualmode && !me.pageable && rowschanged == false && reason != undefined) {
                                me.rendergridcontent(true);
                                if (me.showaggregates && me._updateaggregates) {
                                    me._updateaggregates();
                                }
                            }
                            else {
                                if (me.virtualmode && me.dataview.totalrecords == 0 && me.dataview.filters.length > 0) {
                                    me._render(true, true, true, me.menuitemsarray && !me.virtualmode);
                                }
                                else {
                                    me._pagescache = new Array();
                                    me._renderrows(me.virtualsizeinfo);
                                }
                            }
                        }
                        if (me.vScrollInstance.value != vvalue && vvalue <= me.vScrollInstance.max) {
                            me.vScrollInstance.setPosition(vvalue);
                        }
                        if (me.hScrollInstance.value != hvalue && hvalue <= me.hScrollInstance.max) {
                            me.hScrollInstance.setPosition(hvalue);
                        }
                    }
                }
                if (me.autoshowloadelement) {
                    $(me.dataloadelement).css('visibility', 'hidden');
                    $(me.dataloadelement).css('display', 'none');
                }
                if (me.pageable) {
                    if (me.pagerrightbutton) {
                        me.pagerrightbutton.jqxButton({ disabled: false });
                        me.pagerleftbutton.jqxButton({ disabled: false });
                        me.pagershowrowscombo.jqxDropDownList({ disabled: false });
                    }
                }

                me._raiseEvent(11);
                if (!me.initializedcall) {
                    var callReady = function () {
                        me._raiseEvent(0);
                        me.initializedcall = true;
                        me.isInitialized = true;
                        if (me.ready) {
                            me.ready();
                        }
                        if (me.autoloadstate) {
                            if (me.loadstate) {
                                me.loadstate(null, true);
                            }
                        }
                    }

                    if (!$.jqx.isHidden(me.host)) {
                        callReady();
                    }
                    else {
                        if (me.readyInterval) {
                            clearInterval(me.readyInterval);
                        }
                        me.readyInterval = setInterval(function () {
                            if (!$.jqx.isHidden(me.host)) {
                                if (me.__isRendered) {
                                    clearInterval(me.readyInterval);
                                    me.readyInterval = null;
                                    callReady();
                                    me._initmenu();
                                }
                            }
                        }, 200);
                    }

                    if ((me.width != null && me.width.toString().indexOf('%') != -1) || (me.height != null && me.height.toString().indexOf('%') != -1)) {
                    //    me._updatesize(true);
                    }

                    if (me.host.css('visibility') == 'hidden') {
                        var ie7 = $.jqx.browser.msie && $.jqx.browser.version < 8;

                        if (me.vScrollBar.css('visibility') == 'visible') {
                            me.vScrollBar.css('visibility', 'inherit');
                        }

                        if (!me.autowidth) {
                            if (me.hScrollBar.css('visibility') == 'visible') {
                                me.hScrollBar.css('visibility', 'inherit');
                            }
                        }

                        me._intervalTimer = setInterval(function () {
                            if (me.host.css('visibility') == 'visible') {
                                me._updatesize(true);
                                clearInterval(me._intervalTimer);
                            }
                        }, 100);
                    }
                }
                else me._updateTouchScrolling();
            }

            this.dataview.databind(source);

            if (this.dataview.isupdating()) {
                if (url != undefined) {
                    this.dataview.suspend = false;
                }
                else {
                    this.dataview.resumeupdate(false);
                }
            }

            this._initializeRows();
        },

        scrollto: function (left, top) {
            if (undefined != left) {
                this.hScrollInstance.setPosition(left);
            }

            if (undefined != top) {
                this.vScrollInstance.setPosition(top);
            }
        },

        scrollposition: function () {
            return { top: this.vScrollInstance.value, left: this.hScrollInstance.value }
        },

        ensurerowvisible: function (index) {
            if (this.autoheight && !this.pageable) {
                return true;
            }

            var pagesize = this._getpagesize();
            var pagenumber = Math.floor(index / pagesize);

            if (!this._pageviews[pagenumber] && !this.pageable) {
                this._updatepageviews();
            }
            if (this.groupable && this.groups.length > 0)
                return true;

            var result = false;
            if (this.pageable && this.gotopage && !this.virtualmode) {
                var pagenumber = Math.floor(index / pagesize);
                if (this.dataview.pagenum != pagenumber) {
                    if (this.groupable && this.groups.length > 0)
                        return true;

                    this.gotopage(pagenumber);
                    result = true;
                }
            }

            var value = this.vScrollInstance.value;
            var height = this._gettableheight() - this.rowsheight;
            var rowindexinpage = pagesize * (index / pagesize - pagenumber);
            rowindexinpage = Math.round(rowindexinpage);

            if (this._pageviews[pagenumber]) {
                var top = this._pageviews[pagenumber].top;
                var rowposition = top + rowindexinpage * this.rowsheight;
                if (this.rowdetails) {
                    for (var i = pagesize * pagenumber; i < index; i++) {
                        if (this.details[i]) {
                            if (this.details[i].rowdetailshidden == false) {
                                rowposition += this.details[i].rowdetailsheight;
                            }
                        }
                    }
                }

                if (this.scrollmode == 'deferred') {
                    if (this.vScrollInstance.max <= rowposition + this.rowsheight) {
                        rowposition = this.vScrollInstance.max;
                    }
                }

                if (rowposition < value) {
                    this.scrolltop(rowposition);
                    result = true;
                }
                else if (rowposition > value + height + 2) {
                    this.scrolltop(rowposition - height);
                    result = true;
                }
            }
            else if (this.pageable) {
                var rowposition = rowindexinpage * this.rowsheight;
                if (this.rowdetails) {
                    for (var i = pagesize * pagenumber; i < pagesize * pagenumber + rowindexinpage; i++) {
                        if (this.details[i] && this.details[i].rowdetailshidden == false) {
                            rowposition += this.details[i].rowdetailsheight;
                        }
                    }
                }

                if (rowposition < value || rowposition > value + height) {
                    this.scrollto(0, rowposition);
                    result = true;
                }
            }
            return result;
        },

        ensurecellvisible: function (index, datafield) {
            var self = this.that;
            var hvalue = this.hScrollBar.jqxScrollBar('value');
            var max = self.hScrollInstance.max;
            if (self.rtl) {
                if (this.hScrollBar.css('visibility') != 'visible') {
                    max = 0;
                }
            }

            var result = this.ensurerowvisible(index);
            var left = 0;
            if (this.columns.records) {
                var value = hvalue;
                if (this.hScrollBar.css('visibility') == 'hidden')
                    return;

                var gridwidth = this.host.width();
                var columnindex = 0;
                var vScrollOffset = this.vScrollBar.css('visibility') == 'visible' ? 20 : 0;
                var hresult = false;
          
                $.each(this.columns.records, function () {
                    if (this.datafield == datafield) {
                        var newleft = 0;
                        var val = !self.rtl ? value : max - hvalue;
                        if (left + this.width > val + gridwidth - vScrollOffset) {
                            newleft = left + this.width - gridwidth + vScrollOffset;
                            if (self.rtl) {
                                newleft = max - newleft;
                            }
                            self.scrollleft(newleft);
                            hresult = true;
                        }
                        else if (left <= val) {
                            newleft = left - this.width;
                            if (self.rtl) {
                                newleft = max - newleft;
                            }
                            self.scrollleft(newleft);
                            hresult = true;
                        }

                        if (columnindex == 0) {
                            if (self.rtl) {
                                self.scrollleft(max);
                            }
                            else {
                                self.scrollleft(0);
                            }
                            hresult = true;
                        }
                        else if (columnindex == self.columns.records.length - 1) {
                            if (self.hScrollBar.css('visibility') == 'visible') {
                                if (!self.rtl) {
                                    self.scrollleft(self.hScrollBar.jqxScrollBar('max'));
                                }
                                else {
                                    self.scrollleft(self.hScrollBar.jqxScrollBar('min'));
                                }

                                hresult = true;
                            }
                        }
                        return false;
                    }
                    columnindex++;
                    left += this.width;
                });
                if (!hresult) {
                    self.scrollleft(value);
                }
            }
            return result;
        },

        setrowheight: function (index, height) {
            if (this._loading) {
                throw new Error('jqxGrid: ' + this.loadingerrormessage);
                return false;
            }

            if (index == null || height == null)
                return false;

            this.heightboundrows[index] = { index: index, height: height };

            index = this.getrowvisibleindex(index);
            if (index < 0)
                return false;

            if (this.rows.records[index]) {
                this.rows.records[index].height = height;
            }
            else {
                row = new jqxGridRow(this, null);
                row.height = height;
                this.rows.replace(index, row);
            }
            this.heights[index] = height;

            this.rendergridcontent(true);
            return true;
        },

        getrowheight: function (index) {
            if (index == null)
                return null;

            index = this.getrowvisibleindex(index);
            if (index < 0)
                return false;

            if (this.rows.records[index]) {
                return this.rows.records[index].height;
            }
        },

        setrowdetails: function (index, details, height, hidden) {
            if (index == undefined || index == null || index < 0)
                return;

            var lookupkey = index + "_";
            if (this._rowdetailscache[lookupkey]) {
                var element = this._rowdetailscache[lookupkey].element;
                $(element).remove();
                this._rowdetailscache[lookupkey] = null;
            }

            var detailskey = this.dataview.generatekey();
            this.detailboundrows[index] = { index: index, details: { rowdetails: details, rowdetailsheight: height, rowdetailshidden: hidden, key: detailskey} };

            index = this.getrowvisibleindex(index);
            if (index < 0)
                return false;

            return this._setrowdetails(index, details, height, hidden, detailskey);
        },

        getcolumn: function (datafield) {
            var column = null;
            if (this.columns.records) {
                $.each(this.columns.records, function () {
                    if (this.datafield == datafield || this.displayfield == datafield) {
                        column = this;
                        return false;
                    }
                });
            }
            return column;
        },

        _getcolumnindex: function (datafield) {
            var index = -1;
            if (this.columns.records) {
                $.each(this.columns.records, function () {
                    index++;
                    if (this.datafield == datafield) {
                        return false;
                    }
                });
            }
            return index;
        },

        _getcolumnat: function (index) {
            var column = this.columns.records[index];
            return column;
        },

        _getprevvisiblecolumn: function (index) {
            var self = this.that;
            while (index > 0) {
                index--;
                var column = self.getcolumnat(index);
                if (!column)
                    return null;

                if (!column.hidden)
                    return column;
            }
            return null;
        },

        _getnextvisiblecolumn: function (index) {
            var self = this.that;
            while (index < this.columns.records.length) {
                index++;
                var column = self.getcolumnat(index);

                if (!column)
                    return null;

                if (!column.hidden)
                    return column;
            }
            return null;
        },

        getcolumnat: function (index) {
            if (!isNaN(index)) {
                var column = this.columns.records[index];
                return column;
            }

            return null;
        },

        _getcolumn: function (datafield) {
            var column = null;
            $.each(this._columns, function () {
                if (this.datafield == datafield || this.displayfield == datafield) {
                    column = this;
                    return false;
                }
            });
            return column;
        },

        _setcolumnproperty: function (datafield, propertyname, value) {
            if (datafield == null || propertyname == null || value == null)
                return null;

            propertyname = propertyname.toLowerCase();
            var column = this.getcolumn(datafield);
            if (column == null)
                return;

            var oldvalue = column[propertyname];
            column[propertyname] = value;

            var _cachedcolumn = this._getcolumn(datafield);
            if (_cachedcolumn != null) {
                _cachedcolumn[propertyname] = value;
            }
            this._cellscache = new Array();

            switch (propertyname) {
                case "filteritems":
                    if (this.filterable && this.showfilterrow) {
                        this._updatelistfilters(true, true);
                    }
                    break;
                case "text":
                    this.prerenderrequired = true;
                    this._rendercolumnheaders();
                    this._updatecellwidths();
                    if (this._groupsheader()) {
                        if (this._initgroupsheader) {
                            this._initgroupsheader();
                        }
                    }
                    this._renderrows(this.virtualsizeinfo);
                    break;
                case "editable":
                case "resizable":
                case "draggable":
                    if (propertyname == "editable") {
                        if (value != oldvalue) {
                            if (this.editcell != null && this.endcelledit) {
                                this.endcelledit(this.editcell.row, this.editcell.column, true, true);
                            }
                            if (column.columntype == 'checkbox') {
                                this.prerenderrequired = true;
                                this.rendergridcontent(true, false);
                                if (this.updating()) {
                                    return false;
                                }
                            }
                            if (this.updating()) {
                                return false;
                            }
                            this._renderrows(this.virtualsizeinfo);
                        }
                    }
                    break;
                case "hidden":
                case "hideable":
                case "renderer":
                case "cellsrenderer":
                case "align":
                case "aggregates":
                case "cellsalign":
                case "cellsformat":
                case "pinned":
                case "contenttype":
                case "filterable":
                case "groupable":
                case "cellclass":
                case "cellclassname":
                case "classname":
                case "class":
                    this.prerenderrequired = true;
                    this.rendergridcontent(true);
                    if (this.updating()) {
                        return false;
                    }

                    if (propertyname == "hidden") {
                        this._updatecolumnwidths();
                        this._updatecellwidths();
                    }
                    this._renderrows(this.virtualsizeinfo);
                    if (this.showaggregates && this._updateaggregates) {
                        this._updateaggregates();
                    }
                    break;
                case "width":
                case "minwidth":
                case "maxwidth":
                    if (this.updating()) {
                        return false;
                    }
                    column['_width'] = null;
                    column['_percentagewidth'] = null;
                    this._updatecolumnwidths();
                    this._updatecellwidths();
                    this._renderrows(this.virtualsizeinfo);
                    break;
            }
        },

        _getcolumnproperty: function (datafield, propertyname) {
            if (datafield == null || propertyname == null)
                return null;

            propertyname = propertyname.toLowerCase();

            var column = this.getcolumn(datafield);
            return column[propertyname];
        },

        // sets a property of a column.
        setcolumnproperty: function (datafield, propertyname, value) {
            this._setcolumnproperty(datafield, propertyname, value);
        },

        // gets the value of a column property.
        getcolumnproperty: function (datafield, propertyname) {
            return this._getcolumnproperty(datafield, propertyname);
        },

        // hides a column.
        hidecolumn: function (datafield) {
            this._setcolumnproperty(datafield, 'hidden', true);
        },

        // shows a column.
        showcolumn: function (datafield) {
            this._setcolumnproperty(datafield, 'hidden', false);
        },

        // gets column's hidden.
        iscolumnvisible: function (datafield) {
            return !this._getcolumnproperty(datafield, 'hidden');
        },

        // pins the column.
        pincolumn: function (datafield) {
            this._setcolumnproperty(datafield, 'pinned', true);
        },

        // unpins the column.
        unpincolumn: function (datafield) {
            this._setcolumnproperty(datafield, 'pinned', false);
        },

        iscolumnpinned: function (datafield) {
            return this._getcolumnproperty(datafield, 'pinned');
        },

        _setrowdetails: function (index, details, height, hidden, detailskey) {
            if (height == 0) {
                height = 100;
            }

            if (index == null || height == null)
                return false;

            if (detailskey != null) {
                this.details[index] = { rowdetails: details, rowdetailsheight: height, rowdetailshidden: hidden, detailskey: detailskey };
            }
            else {
                var olddetailskey = this.details[index] != null ? this.details[index].detailskey : null;
                var newdetails = { rowdetails: details, rowdetailsheight: height, rowdetailshidden: hidden, detailskey: olddetailskey };

                var me = this.that;

                for (var i = 0; i < this.detailboundrows.length; i++) {
                    if (this.detailboundrows[i] != undefined) {
                        var olddetails = this.detailboundrows[i];
                        if (olddetails.details.detailskey == olddetailskey) {
                            olddetails.details.rowdetailsheight = newdetails.rowdetailsheight;
                            olddetails.details.rowdetailshidden = newdetails.rowdetailshidden;
                            olddetails.details.rowdetails = newdetails.rowdetails;
                            break;
                        }
                    }
                }
                this.details[index] = newdetails;
            }

            this.rendergridcontent(true);
            this._updatecolumnwidths();
            this._updatecellwidths();
            this._renderrows(this.virtualsizeinfo);

            return true;
        },

        // gets the row details.
        getrowdetails: function (index) {
            if (index == null)
                return false;

            index = this.getrowvisibleindex(index);
            return this._getrowdetails(index);
        },


        _getrowdetails: function (index) {
            if (index == null)
                return false;

            if (index < 0)
                return false;

            if (this.details[index]) {
                return this.details[index];
            }

            if (this.rowdetailstemplate) {
                return this.rowdetailstemplate;
            }
        },

        // gets all records count.
        getrecordscount: function () {
            return this.dataview.totalrecords;
        },

        // shows the row details.
        showrowdetails: function (index) {
            if (this._loading) {
                throw new Error( 'jqxGrid: ' + this.loadingerrormessage);
                return false;
            }
            if (index == null)
                return false;

            index = this.getrowvisibleindex(index);
            if (index < 0)
                return false;

            var details = this._getrowdetails(index);
            return this._setrowdetailsvisibility(index, details, false);
        },

        // hides the row details.
        hiderowdetails: function (index) {
            if (this._loading) {
                throw new Error( 'jqxGrid: ' + this.loadingerrormessage);
                return false;
            }

            index = this.getrowvisibleindex(index);
            if (index < 0)
                return false;

            var details = this._getrowdetails(index);
            return this._setrowdetailsvisibility(index, details, true);
        },

        _togglerowdetails: function (row) {
            var index = row.visibleindex;
            var details = this._getrowdetails(index);
            if (details != null) {
                var scrollPosition = this.vScrollInstance.value;
                var hidden = !details.rowdetailshidden;
                var result = this._setrowdetailsvisibility(index, details, hidden);
                if (scrollPosition !== 0 && this.vScrollBar.css('visibility') !== 'hidden') {
                    if (scrollPosition <= this.vScrollInstance.max) {
                        this.vScrollInstance.setPosition(scrollPosition);
                    }
                    else {
                        this.vScrollInstance.setPosition(this.vScrollInstance.max);
                    }
                }

                return result;
            }
            return false;
        },

        _setrowdetailsvisibility: function (index, details, hidden) {
            if (this.rowdetailstemplate) {
                if (!this.details) this.details = new Array();
                if (!this.details[index]) {
                    this.details[index] = { rowdetailshidden: this.rowdetailstemplate.rowdetailshidden, rowdetailsheight: this.rowdetailstemplate.rowdetailsheight, rowdetails: this.rowdetailstemplate.rowdetails };
                    var detailskey = this.dataview.generatekey();
                    this.details[index].detailskey = detailskey;
                    this.detailboundrows[index] = { index: index, details: this.details[index] };
                }
            }

            if (details != null) {
                this.details[index].rowdetailshidden = hidden;
            }
            else {
                return false;
            }

            var newdetails = this.details[index];
            if (hidden) {
                this._raiseEvent(21, { rowindex: index, details: newdetails.rowdetails, height: newdetails.rowdetailsheight });
            }
            else {
                this._raiseEvent(20, { rowindex: index, details: newdetails.rowdetails, height: newdetails.rowdetailsheight });
            }
            return this._setrowdetails(index, newdetails.rowdetails, newdetails.rowdetailsheight, newdetails.rowdetailshidden);
        },

        // gets the row's visible index.
        getrowvisibleindex: function (boundindex) {
            if (boundindex == undefined || boundindex == null || boundindex < 0)
                return false;

            if (this.virtualmode) {
                var row = this.dataview.loadedrecords[boundindex];
                if (row == undefined) {
                    return -1;
                }
                return row.visibleindex;
            }

            return this.getrowdisplayindex(boundindex);
        },

        // hides a row.
        hiderow: function (index) {
            if (this._loading) {
                throw new Error('jqxGrid: ' + this.loadingerrormessage);
                return false;
            }

            if (index == undefined || index == null || index < 0)
                return false;

            if (index == null)
                return false;

            this.hiddenboundrows[index] = { index: index, hidden: true };
            index = this.getrowvisibleindex(index);

            return this._setrowvisibility(index, true);
        },

        // shows a row.
        showrow: function (index) {
            if (this._loading) {
                throw new Error('jqxGrid: ' + this.loadingerrormessage);
                return false;
            }

            if (index == undefined || index == null || index < 0)
                return false;

            if (index == null)
                return false;

            this.hiddenboundrows[index] = { index: index, hidden: false };
            index = this.getrowvisibleindex(index);

            return this._setrowvisibility(index, false);
        },
        // is row hidden
        isrowhiddenat: function (index) {
            if (index == null)
                return null;

            index = this.getrowvisibleindex(index);

            if (this.rows.records[index]) {
                return this.rows.records[index].hidden;
            }
        },

        _setrowvisibility: function (index, hidden, refresh) {
            if (index == null)
                return false;

            this.hiddens[index] = hidden;

            if (refresh == undefined || refresh) {
                this.rendergridcontent(true);
                return true;
            }
            return false;
        },

        _loadrows: function () {
            if (!this._pageviews[this.dataview.pagenum] && !this.pageable)
                return;

            var top = !this.pageable ? this._pageviews[this.dataview.pagenum].top : 0;
            if (!this.pageable && this._pagescache[this.dataview.pagenum] != undefined) {
                return null;
            }

            if (!this.virtualsizeinfo) {
                return;
            }

            var self = this.that;
            var storage = new Array();
            var datastorage = new Array();
            var hasgroups = self.groupable && self.groups.length > 0;
            var totalrows = this.dataview.totalrecords;
            var virtualheight = this.virtualsizeinfo.virtualheight;
            var rowindex = 0;

            this.rows.beginupdate();
            var pagesize = this.dataview.pagesize;
            if (this.pageable && hasgroups) {
                pagesize = this.dataview.rows.length;
            }

            for (var i = 0; i < pagesize; i++) {
                if (i >= this.dataview.rows.length)
                    break;

                var datarow = this.dataview.rows[i];
                var row = null;
                if (!self.rows.records[datarow.visibleindex]) {
                    row = new jqxGridRow(self, datarow);
                }
                else {
                    row = self.rows.records[datarow.visibleindex];
                    row.setdata(datarow);
                }

                row.hidden = this.hiddens[row.visibleindex];

                if (this.rowdetailstemplate) {
                    row.rowdetails = this.rowdetailstemplate.rowdetails;
                    row.rowdetailsheight = this.rowdetailstemplate.rowdetailsheight;
                    row.rowdetailshidden = this.rowdetailstemplate.rowdetailshidden;
                }

                var details = this.details[row.visibleindex];
                if (details) {
                    row.rowdetails = details.rowdetails;
                    row.rowdetailsheight = details.rowdetailsheight;
                    row.rowdetailshidden = details.rowdetailshidden;
                }
                else if (!this.rowdetailstemplate) {
                    row.rowdetails = null;
                }

                if (hasgroups && this.pageable && row.parentbounddata != null) {
                    var parentrow = storage[row.parentbounddata.uniqueid];
                    if (parentrow != null) {
                        var groupstate = this._findgroupstate(parentrow.uniqueid);

                        if (this._setsubgroupsvisibility) {
                            this._setsubgroupsvisibility(this, row.parentbounddata, !groupstate, false);
                        }

                        row.hidden = this.hiddens[row.visibleindex];
                    }

                    if (parentrow != null && parentrow != undefined) {
                        row.parentrow = parentrow;
                        parentrow.subrows[parentrow.subrows.length++] = row;
                    }
                }

                if (row.hidden)
                    continue;

                var num = datarow.visibleindex;
                if (!this.heights[num]) {
                    this.heights[num] = this.rowsheight;
                }

                row.height = this.heights[num];

                if (this.rowdetails) {
                    if (row.rowdetails && !row.rowdetailshidden) {
                        row.height += row.rowdetailsheight;
                    }
                }

                storage[row.uniqueid] = row;
                datastorage[rowindex++] = row;

                row.top = top;
                top += row.height;

                var recordindex = num;
                self.rows.replace(recordindex, row);
            }

            if ((this.autoheight || this.pageable) && this.autorowheight) {
                if (this._pageviews && this._pageviews.length > 0) {
                    this._pageviews[0].height = top;
                }
            }

            this.rows.resumeupdate();

            if (datastorage.length > 0) {
                this._pagescache[this.dataview.pagenum] = datastorage;
            }
        },

        _gettableheight: function () {
            if (this.tableheight != undefined)
                return this.tableheight;

            var realheight = this.host.height();

            if (this.columnsheader) {
                var columnheaderheight = this.columnsheader.outerHeight();
                if (!this.showheader) {
                    columnheaderheight = 0;
                }
            }

            realheight -= columnheaderheight;

            if (this.hScrollBar[0].style.visibility == 'visible') {
                realheight -= this.hScrollBar.outerHeight();
            }

            if (this.pageable) {
                realheight -= this.pager.outerHeight();
            }

            if (this._groupsheader()) {
                realheight -= this.groupsheader.outerHeight();
            }

            if (this.showtoolbar) {
                realheight -= this.toolbarheight;
            }

            if (this.showstatusbar) {
                realheight -= this.statusbarheight;
            }

            if (realheight > 0) {
                this.tableheight = realheight;
                return realheight;
            }

            return this.host.height();
        },

        _getpagesize: function () {
            if (this.pageable) {
                return this.pagesize;
            }

            if (this.virtualmode) {
                var hostHeight = Math.round(this.host.height()) + 2 * this.rowsheight;

                var visiblerecords = Math.round(hostHeight / this.rowsheight);
                return visiblerecords;
            }

            if (this.autoheight || this.autorowheight) {
                if (this.dataview.totalrows == 0)
                    return 1;
                return this.dataview.totalrows;
            }

            if (this.dataview.totalrows < 100 && this.dataview.totalrecords < 100 && this.dataview.totalrows > 0) {
                return this.dataview.totalrows;
            }

            return 100;
        },

        _calculatevirtualheight: function () {
            var self = this.that;

            var hostHeight = Math.round(this.host.height()) + 2 * this.rowsheight;
            realheight = this._gettableheight();
            var visiblerecords = Math.round(hostHeight / this.rowsheight);

            this.heights = new Array();
            this.hiddens = new Array();
            this.details = new Array();
            this.expandedgroups = new Array();
            this.hiddenboundrows = new Array();
            this.heightboundrows = new Array();
            this.detailboundrows = new Array();

            var totalrows = Math.max(this.dataview.totalrows, this.dataview.totalrecords);
            if (this.pageable) {
                totalrows = this.pagesize;
                if (this.pagesize > Math.max(this.dataview.totalrows, this.dataview.totalrecords) && this.autoheight) {
                    totalrows = Math.max(this.dataview.totalrows, this.dataview.totalrecords);
                }
                else if (!this.autoheight) {
                    if (this.dataview.totalrows < this.pagesize) {
                        totalrows = Math.max(this.dataview.totalrows, this.dataview.totalrecords);
                    }
                }
            }

            var virtualheight = totalrows * this.rowsheight;
            var top = 0;
            var index = 0;
            var lasttop = 0;
            var pagesize = this._getpagesize();
            var pageheight = pagesize * this.rowsheight;
            var i = 0;
            if (!this.pageable && this.autoheight) {
                visiblerecords = totalrows;
            }

            if (totalrows + pagesize > 0) {
                while (i <= totalrows + pagesize) {
                    top += pageheight;
                    if (i - pagesize < totalrows && i >= totalrows) {
                        var rows = i - totalrows;
                        if (rows > 0) {
                            lasttop -= pageheight;
                            this._pageviews[index - 1] = { top: lasttop, height: pageheight - rows * this.rowsheight };
                        }
                        break;
                    }
                    else {
                        this._pageviews[index++] = { top: lasttop, height: pageheight };
                    }
                    lasttop = top;
                    i += pagesize;
                }
            }

            if (this.resizingGrid != true) {
                this.vScrollBar.jqxScrollBar({ value: 0 });
            }
            if (virtualheight > realheight && !this.autoheight) {
                this.vScrollBar.css('visibility', 'visible');
                if (this.scrollmode == 'deferred') {
                    this.vScrollBar.jqxScrollBar({ max: virtualheight });
                }
                else {
                    this.vScrollBar.jqxScrollBar({ max: virtualheight - realheight });
                }
            }
            else {
                this.vScrollBar.css('visibility', 'hidden');
            }

            this.dataview.pagesize = pagesize;
            this.dataview.updateview();
            return { visiblerecords: visiblerecords, virtualheight: virtualheight };
        },

        _updatepageviews: function () {
            if (this.updating())
                return;
            this._pagescache = new Array();
            this._pageviews = new Array();
            this.tableheight = null;
            var self = this.that;
            var hostHeight = Math.round(this.host.height()) + 2 * this.rowsheight;
            var visiblerecords = Math.round(hostHeight / this.rowsheight);
            var totalrows = Math.max(this.dataview.totalrows, this.dataview.totalrecords);
            var virtualheight = totalrows * this.rowsheight;
            var top = 0;
            var currentheight = 0;
            var index = 0;
            var lasttop = 0;
            var k = 0;
            var pagesize = this._getpagesize();

            if (!this.pageable) {
                for (var i = 0; i < totalrows; i++) {
                    var rowinfo = { index: i, height: this.heights[i], hidden: this.hiddens[i], details: this.details[i] }
                    if (this.heights[i] == undefined) {
                        this.heights[i] = this.rowsheight;
                        rowinfo.height = this.rowsheight;
                    }
                    if (this.hiddens[i] == undefined) {
                        this.hiddens[i] = false;
                        rowinfo.hidden = false;
                    }
                    if (this.details[i] == undefined) {
                        this.details[i] = null;
                    }
                    if (rowinfo.height != self.rowsheight) {
                        virtualheight -= self.rowsheight;
                        virtualheight += rowinfo.height;
                    }

                    if (rowinfo.hidden) {
                        virtualheight -= rowinfo.height;
                    }
                    else {
                        currentheight += rowinfo.height;
                        var detailsheight = 0;
                        if (this.rowdetails) {
                            if (this.rowdetailstemplate) {
                                if (!rowinfo.details) rowinfo.details = this.rowdetailstemplate;
                            }

                            if (rowinfo.details && rowinfo.details.rowdetails && !rowinfo.details.rowdetailshidden) {
                                detailsheight = rowinfo.details.rowdetailsheight;
                                currentheight += detailsheight;
                                virtualheight += detailsheight;
                            }
                        }
                        top += rowinfo.height + detailsheight;
                    }

                    k++;
                    if (k >= pagesize || i == totalrows - 1) {
                        this._pageviews[index++] = { top: lasttop, height: currentheight };
                        currentheight = 0;
                        lasttop = top;
                        k = 0;
                    }
                }
            }
            else {
                if (this._updatepagedview) {
                    virtualheight = this._updatepagedview(totalrows, virtualheight, 0);
                }
                if (this.autoheight) {
                    this._arrange();
                }
            }

            var tableheight = this._gettableheight();
            if (virtualheight > tableheight) {
                if (this.pageable && this.gotopage) {
                    virtualheight = this._pageviews[0].height; // -this._gettableheight();
                    if (virtualheight < 0) {
                        virtualheight = this._pageviews[0].height;
                    }
                }

                if (this.vScrollBar.css('visibility') != 'visible') {
                    this.vScrollBar.css('visibility', 'visible');
                }
                if (virtualheight <= tableheight || this.autoheight) {
                    this.vScrollBar.css('visibility', 'hidden');
                }

                if (virtualheight - tableheight > 0) {
                    if (this.scrollmode != 'deferred') {
                        var max = virtualheight - tableheight;
                        var oldmax = this.vScrollInstance.max;
                        this.vScrollBar.jqxScrollBar({ max: max });
                        if (max != oldmax) {
                            this.vScrollBar.jqxScrollBar({ value: 0 });
                        }
                    }
                }
                else {
                    this.vScrollBar.jqxScrollBar({ value: 0, max: virtualheight });
                }
            }
            else {
                if (!this._loading) {
                    this.vScrollBar.css('visibility', 'hidden');
                }
                this.vScrollBar.jqxScrollBar({ value: 0 });
            }

            this._arrange();

            if (this.autoheight) {
                visiblerecords = Math.round(this.host.height() / this.rowsheight);
            }

            this.virtualsizeinfo = { visiblerecords: visiblerecords, virtualheight: virtualheight };
        },

        updatebounddata: function (reason) {
            if (reason != "data" && reason != "sort" && reason != "filter" && reason != "cells" && reason != "pagechanged" && reason != "pagesizechanged" && !this.virtualmode) {
                this.virtualsizeinfo = null;
                if (this.showfilterrow && this.filterable && this.filterrow) {
                    if (this.clearfilters) {
                        this.clearfilters(false);
                    }
                    this.filterrow.remove();
                    this._filterrowcache = new Array();
                    this.filterrow = null;
                }
                else if (this.filterable) {
                    if (this.clearfilters) {
                        this.clearfilters(false);
                    }
                }

                if (this.groupable) {
                    this.dataview.groups = [];
                    this.groups = [];
                }

                if (this.pageable) {
                    this.pagenum = 0;
                    this.dataview.pagenum = 0;
                }
                if (this.sortable) {
                    this.sortcolumn = null;
                    this.sortdirection = '';
                    this.dataview.sortfielddirection = "";
                    this.dataview.clearsortdata();
                }
            }
            this.databind(this.source, reason);
        },

        refreshdata: function () {
            this._refreshdataview();
            this.render();
        },

        _updatevscrollbarmax: function () {
            if (this._pageviews && this._pageviews.length > 0) {
                var virtualheight = this._pageviews[0].height;
                if (this.virtualmode || !this.pageable) {
                    virtualheight = this.virtualsizeinfo.virtualheight;
                }

                var tableheight = this._gettableheight();
                if (virtualheight > tableheight) {
                    if (this.pageable && this.gotopage) {
                        virtualheight = this._pageviews[0].height;
                        if (virtualheight < 0) {
                            virtualheight = this._pageviews[0].height;
                        }
                    }

                    if (this.vScrollBar.css('visibility') != 'visible') {
                        this.vScrollBar.css('visibility', 'visible');
                    }
                    if (virtualheight <= tableheight || this.autoheight) {
                        this.vScrollBar.css('visibility', 'hidden');
                    }

                    if (virtualheight - tableheight > 0) {
                        var max = virtualheight - tableheight;
                        this.vScrollBar.jqxScrollBar({ max: max });
                    }
                    else {
                        this.vScrollBar.jqxScrollBar({ value: 0, max: virtualheight });
                    }
                }
                else {
                    this.vScrollBar.css('visibility', 'hidden');
                    this.vScrollBar.jqxScrollBar({ value: 0 });
                }
            }
        },

        _refreshdataview: function () {
            this.dataview.refresh();
        },

        refresh: function (initialRefresh) {
            if (initialRefresh != true) {
                if ($.jqx.isHidden(this.host))
                    return;

                if (this.virtualsizeinfo != null) {
                    //   this._requiresupdate = true;
                    this._cellscache = new Array();
                    this._renderrows(this.virtualsizeinfo);
                    this._updatesize();
                }
            }
        },

        render: function () {
            this._render(true, true, true, true);
        },

        invalidate: function () {
            if (this.virtualsizeinfo) {
                this._updatecolumnwidths();
                this._updatecellwidths();
                this._renderrows(this.virtualsizeinfo);
            }
        },

        clear: function () {
            this.databind(null);
            this.render();
        },

        _preparecolumngroups: function()
        {
            var columnsheight = this.columnsheight;
            if (this.columngroups) {
                this.columnshierarchy = new Array();
                if (this.columngroups.length) {
                    var that = this;
                    for (var i = 0; i < this.columngroups.length; i++) {
                        this.columngroups[i].parent = null;
                        this.columngroups[i].groups = null;
                    }
                    for (var i = 0; i < this.columns.records.length; i++) {
                        this.columns.records[i].parent = null;
                        this.columns.records[i].groups = null;
                    }

                    var getParentGroup = function (name) {
                        for (var i = 0; i < that.columngroups.length; i++) {
                            var group = that.columngroups[i];
                            if (group.name === name)
                                return group;
                        }
                        return null;
                    }

                    for (var i = 0; i < this.columngroups.length; i++) {
                        var group = this.columngroups[i];
                        if (!group.groups) {
                            group.groups = null;
                        }
                        if (group.parentgroup) {
                            var parentgroup = getParentGroup(group.parentgroup);
                            if (parentgroup) {
                                group.parent = parentgroup;
                                if (!parentgroup.groups) {
                                    parentgroup.groups = new Array();
                                }
                                if (parentgroup.groups.indexOf(group) === -1) {
                                    parentgroup.groups.push(group);
                                }
                            }
                        }
                    }
                    for (var i = 0; i < this.columns.records.length; i++) {
                        var group = this.columns.records[i];
                        if (group.columngroup) {
                            var parentgroup = getParentGroup(group.columngroup);
                            if (parentgroup) {
                                if (!parentgroup.groups) {
                                    parentgroup.groups = new Array();
                                }
                                group.parent = parentgroup;
                                if (parentgroup.groups.indexOf(group) === -1) {
                                    parentgroup.groups.push(group);
                                }
                            }
                        }
                    }
                    var totalmaxlevel = 0;
                    for (var i = 0; i < this.columns.records.length; i++) {
                        var group = this.columns.records[i];
                        var initialgroup = group;
                        group.level = 0;
                        while (initialgroup.parent) {
                            initialgroup = initialgroup.parent;
                            group.level++;
                        }
                        var initialgroup = group;
                        var maxlevel = group.level;
                        totalmaxlevel = Math.max(totalmaxlevel, group.level);
                        while (initialgroup.parent) {
                            initialgroup = initialgroup.parent;
                            if (initialgroup) {
                                initialgroup.level = --maxlevel;
                            }
                        }
                    }

                    var getcolumns = function (group) {
                        var columns = new Array();
                        if (group.columngroup) {
                            columns.push(group);
                        }
                        if (group.groups) {
                            for (var i = 0; i < group.groups.length; i++) {
                                if (group.groups[i].columngroup) {
                                    columns.push(group.groups[i]);
                                }
                                else {
                                    if (group.groups[i].groups) {
                                        var tmpcolumns = getcolumns(group.groups[i]);
                                        for (var j = 0; j < tmpcolumns.length; j++) {
                                            columns.push(tmpcolumns[j]);
                                        }
                                    }
                                }
                            }
                        }
                        return columns;
                    }

                    for (var i = 0; i < this.columngroups.length; i++) {
                        var group = this.columngroups[i];
                        var columns = getcolumns(group);
                        group.columns = columns;
                        var indexes = new Array();
                        var pinned = 0;
                        for (var j = 0; j < columns.length; j++) {
                            indexes.push(this.columns.records.indexOf(columns[j]));
                            if (columns[j].pinned) {
                                pinned++;
                            }
                        }
                        if (pinned != 0) {
                            throw new Error("jqxGrid: Column Groups initialization Error. Please, check the initialization of the jqxGrid's columns array. The columns in a column group cannot be pinned.");
                        }

                        indexes.sort(function (value1, value2) {
                            value1 = parseInt(value1);
                            value2 = parseInt(value2);

                            if (value1 < value2) { return -1; }
                            if (value1 > value2) { return 1; }
                            return 0;
                        }
                        );
                        for (var index = 1; index < indexes.length; index++) {
                            if (indexes[index] != indexes[index - 1] + 1) {
                                throw new Error("jqxGrid: Column Groups initialization Error. Please, check the initialization of the jqxGrid's columns array. The columns in a column group are expected to be siblings in the columns array.");
                                this.host.remove();
                            }
                        }
                    }
                }
                this.columngroupslevel = 1 + totalmaxlevel;
                columnsheight = this.columngroupslevel * this.columnsheight;
            }
            return columnsheight;
        },

        _render: function (initialization, forceupdate, rendercolumns, rendermenu, updatelistfilter) {
            if (this.dataview == null)
                return;

            if (this._loading) {
                return;
            }

            if ($.jqx.isHidden(this.host)) {
                var that = this;
                if (that.___hiddenTimer) {
                    clearInterval(that.___hiddenTimer);
                    that.___hiddenTimer = null;
                }

                this.___hiddenTimer = setInterval(function () {
                    if (!$.jqx.isHidden(that.host)) {
                        clearInterval(that.___hiddenTimer);
                        that.render();
                    }
                }, 300);
                return;
            }

            if (this.editcell != null && this.endcelledit) {
                this.endcelledit(this.editcell.row, this.editcell.column, true, false);
            }
            this.validationpopup = null;
            this._removeHandlers();
            this._addHandlers();
            this._initializeRows();

            this._requiresupdate = forceupdate != undefined ? forceupdate : true;
            this._newmax = null;

            if (rendercolumns) {
                if (!this._requiresupdate) {
                    if (rendermenu != false) {
                        this._initmenu();
                    }
                }

                if (this.columns == null) {
                    this.columns = new $.jqx.collection(this.element);
                }
                else {
                    this._initializeColumns();
                }
            }

            this.tableheight = null;
            this._pagescache = new Array();
            this._pageviews = new Array();
            this.visiblerows = new Array();
            this.hittestinfo = new Array();

            if (this._requiresupdate) {
                this._clearcaches();
                if (rendermenu == true) {
                    this._initmenu();
                }   
            }

            this.virtualsizeinfo = null;
            this.prerenderrequired = true;

            if ((this.groupable && this.groups.length > 0 && this.rowdetails) || (this.rowdetails)) {
                if (this.gridcontent) {
                    this._rowdetailscache = new Array();
                    this._rowdetailselementscache = new Array();
                    this.detailboundrows = new Array();
                    this.details = new Array();
                    $.jqx.utilities.html(this.gridcontent, '');
                    this.gridcontent = null;
                }
            }

            if (this.gridcontent) {
                if (this.editable && this._destroyeditors) {
                    this._destroyeditors();
                }
            }

            if (rendercolumns) {
                if (this.filterrow) this.filterrow.detach();
                $.jqx.utilities.html(this.content, '');
                this.columnsheader = this.columnsheader || $('<div style="overflow: hidden;"></div>');
                this.columnsheader.remove();
                this.columnsheader.addClass(this.toTP('jqx-widget-header'));
                this.columnsheader.addClass(this.toTP('jqx-grid-header'));
            }
            else {
                if (this.gridcontent) {
                    $.jqx.utilities.html(this.gridcontent, '');
                }
            }

            if (!this.showheader) {
                this.columnsheader.css('display', 'none');
            }
            else {
                if (this.columnsheader) {
                    this.columnsheader.css('display', 'block');
                }
            }

            this.gridcontent = this.gridcontent || $('<div style="width: 100%; overflow: hidden; position: absolute;"></div>');
            this.gridcontent.remove();

            var columnsheight = this.columnsheight;
            columnsheight = this._preparecolumngroups();

            if (this.showfilterrow && this.filterable) {
                this.columnsheader.height(columnsheight + this.filterrowheight);
            }
            else {
                this.columnsheader.height(columnsheight);
            }

            this.content.append(this.columnsheader);
            this.content.append(this.gridcontent);
            this._arrange();

            if (this._initgroupsheader) {
                this._initgroupsheader();
            }

            this.selectionarea = this.selectionarea || $("<div style='z-index: 99999; visibility: hidden; position: absolute;'></div>");
            this.selectionarea.addClass(this.toThemeProperty('jqx-grid-selectionarea'));
            this.selectionarea.addClass(this.toThemeProperty('jqx-fill-state-pressed'));
            this.content.append(this.selectionarea);
            this.tableheight = null;

            this.rendergridcontent(false, rendercolumns);
            if (this.groups.length > 0 && this.groupable) {
                var vScrollVisibility = this.vScrollBar[0].style.visibility;
                this.suspendgroupevents = true;
                if (this.collapseallgroups) {
                    if (!this.groupsexpandedbydefault) {
                        this.collapseallgroups(false);
                        this._updatescrollbarsafterrowsprerender();
                    }
                    else {
                        this.expandallgroups(false);
                    }
                }
                if (this.vScrollBar[0].style.visibility != vScrollVisibility) {
                    this._updatecolumnwidths();
                    this._updatecellwidths();
                }
                this.suspendgroupevents = false;
            }

            if (this.pageable && this.updatepagerdetails) {
                this.updatepagerdetails();
                if (this.autoheight) {
                    this._updatepageviews();
                }
                if (this.autorowheight) {
                    if (!this.autoheight) {
                        this._updatepageviews();
                    }
                    this._renderrows(this.virtualsizeinfo);
                }
            }

            if (this.showaggregates && this._updateaggregates) {
                this._updateaggregates();
            }

            this._addoverlayelement();
            if (this.scrollmode == "deferred") {
                this._addscrollelement();
            }

            if (this.showfilterrow && this.filterable && this.filterrow && (updatelistfilter == undefined || updatelistfilter == true)) {
                this._updatelistfilters(!rendercolumns);
            }

            // callback when the rendering is complete.
            if (this.rendered) {
                this.rendered('full');
            }
            this.__isRendered = true;
        },

        _addoverlayelement: function () {
            if (this.autoheight) {
                if (this._overlayElement) {
                    this._overlayElement.remove();
                }
                this._updateTouchScrolling();
                return;
            }

            var browserInfo = $.jqx.utilities.getBrowser();
            if ((browserInfo.browser == 'msie' && parseInt(browserInfo.version) < 9) || this.isTouchDevice()) {
                if (this._overlayElement) {
                    this._overlayElement.remove();
                }
                this._overlayElement = $("<div style='visibility: hidden; position: absolute; width: 100%; height: 100%;'></div>");
                this._overlayElement.css('background', 'white');
                this._overlayElement.css('z-index', 18000);
                this._overlayElement.css('opacity', 0.001);
                if (this.isTouchDevice()) {
                    if (this.vScrollBar.css('visibility') !== "hidden" || this.hScrollBar.css('visibility') !== "hidden") {
                     //   this.table.prepend(this._overlayElement);
                     //   this._overlayElement.css('visibility', 'visible');
                        var leftOffset = 0;
                        if (this.selectionmode == "checkbox") {
                            leftOffset += 30;
                        }
                        if (this.groupable || this.rowdetails) {
                            this._overlayElement.css('left', 30 * (this.groups.length + (this.rowdetails ? 1 : 0)));
                        }
                        var left = this._overlayElement.css('left');
                        this._overlayElement.css('left', left + leftOffset);
                    }
                    else {
                        if (this._overlayElement) {
                            this._overlayElement.remove();
                        }
                    }
                }
                else {
                    this.content.prepend(this._overlayElement);
                }
            }
            this._updateTouchScrolling();
        },

        _addscrollelement: function () {
            if (this._scrollelement) {
                this._scrollelement.remove();
            }
            if (this._scrollelementoverlay) {
                this._scrollelementoverlay.remove();
            }

            this._scrollelementoverlay = $("<div style='visibility: hidden; position: absolute; width: 100%; height: 100%;'></div>");
            this._scrollelementoverlay.css('background', 'black');
            this._scrollelementoverlay.css('z-index', 18000);
            this._scrollelementoverlay.css('opacity', 0.1);

            this._scrollelement = $("<span style='visibility: hidden; top: 50%; right: 10px; position: absolute;'></span>");
            this._scrollelement.css('z-index', 18005);
            this._scrollelement.addClass(this.toThemeProperty('jqx-button'));
            this._scrollelement.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            this._scrollelement.addClass(this.toThemeProperty('jqx-rc-all'));
            this._scrollelement.addClass(this.toThemeProperty('jqx-shadow'));
            this.content.prepend(this._scrollelement);
            this.content.prepend(this._scrollelementoverlay);
        },

        rendergridcontent: function (requiresupdate, rendercolumns) {
            if (this.updating()) {
                return false;
            }

            if (requiresupdate == undefined || requiresupdate == null) {
                requiresupdate = false;
            }

            this._requiresupdate = requiresupdate;

            var prerender = this.prerenderrequired;
            if (this.prerenderrequired) {
                this._arrange();
            }

            var me = this.that;
            var rendercolumns = rendercolumns;
            if (rendercolumns == null || rendercolumns == undefined) {
                rendercolumns = true;
            }

            this.tableheight = null;
            me.virtualsizeinfo = me.virtualsizeinfo || me._calculatevirtualheight();
            if (me.pageable && !me.autoheight) {
                if (me.dataview.totalrows < me.pagesize) {
                    me._requiresupdate = true;
                }
            }

            if (rendercolumns) {
                me._rendercolumnheaders();
            }
            else {
                if (this._rendersortcolumn) {
                    this._rendersortcolumn();
                }
                if (this._renderfiltercolumn) {
                    this._renderfiltercolumn();
                }
            }

            me._renderrows(me.virtualsizeinfo);

            if (this.gridcontent) {
                if (this.gridcontent[0].scrollTop != 0) {
                    this.gridcontent[0].scrollTop = 0;
                }

                if (this.gridcontent[0].scrollLeft != 0) {
                    this.gridcontent[0].scrollLeft = 0;
                }
            }

            if (prerender) {
                var tableheight = this.tableheight;
                this._arrange();
                if (tableheight != this.tableheight && this.autoheight) {
                    me._renderrows(me.virtualsizeinfo);
                }
            }

            if (this.rtl) {
                this._renderhorizontalscroll();
            }

            if (this.autosavestate) {
                if (this.initializedcall != null) {
                    if (this.savestate) {
                        this.savestate();
                    }
                }
            }

            return true;
        },

        _updatecolumnwidths: function () {
            var totalwidth = this.host.width();
            var hostwidth = totalwidth;
            var allcharacters = '';
            if (this.columns == undefined || this.columns.records == undefined)
                return;

            var self = this.that;
            var indent = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth;

            $.each(this.columns.records, function (i, value) {
                if (!(this.hidden && this.hideable)) {
                    if (this.width.toString().indexOf('%') != -1 || this._percentagewidth != undefined) {
                        var value = 0;
                        var offset = self.vScrollBar[0].style.visibility == 'hidden' ? 0 : self.scrollbarsize + 5;
                        var w = hostwidth;
                        value = parseFloat(this.width) * w / 100;
                        offset += indent;
                        if (this._percentagewidth != undefined) {
                            value = parseFloat(this._percentagewidth) * (w - offset) / 100;
                        }

                        if (value < this.minwidth && this.minwidth != 'auto') value = this.minwidth;
                        if (value > this.maxwidth && this.maxwidth != 'auto') value = this.maxwidth;
                        totalwidth -= value;
                    }
                    else if (this.width != 'auto' && !this._width) {
                        totalwidth -= this.width;
                    }
                    else {
                        allcharacters += this.text;
                    }
                }
            });

            var tableheight = this._gettableheight();

            if (!this.autoheight) {
                if (this.virtualsizeinfo && this.virtualsizeinfo.virtualheight > tableheight) {
                    if (this.groupable && this.groups.length > 0) {
                        if (this.dataview && this.dataview.loadedrootgroups && !this.groupsexpandedbydefault) {
                            var groupsheight = this.dataview.loadedrootgroups.length * this.rowsheight;
                            if (this.pageable) {
                                for (var q = 0; q < this.dataview.rows.length; q++) {
                                    if (this.dataview.rows[q].group && this.dataview.rows[q].level === 0) {
                                        groupsheight += this.rowsheight;
                                    }
                                }
                            }
                            
                            if (groupsheight > tableheight) {
                                totalwidth -= this.scrollbarsize + 5;
                                hostwidth -= this.scrollbarsize + 5;
                            }
                            else if (this.vScrollBar.css('visibility') == 'visible') {
                                totalwidth -= this.scrollbarsize + 5;
                                hostwidth -= this.scrollbarsize + 5;
                            }
                        }
                        else {
                            totalwidth -= this.scrollbarsize + 5;
                            hostwidth -= this.scrollbarsize + 5;
                        }
                    }
                    else {
                        totalwidth -= this.scrollbarsize + 5;
                        hostwidth -= this.scrollbarsize + 5;
                    }
                }
            }
            var indent = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth;
            hostwidth -= indent;

            if (!this.columnsheader) {
                return;
            }

            var columnheader = this.columnsheader.find('#columntable' + this.element.id);
            if (columnheader.length == 0)
                return;

            var columns = columnheader.find('.jqx-grid-column-header');
            var left = 0;
            $.each(this.columns.records, function (i, value) {
                var column = $(columns[i]);
                var percentage = false;
                var desiredwidth = this.width;
                if (this.width.toString().indexOf('%') != -1 || this._percentagewidth != undefined) {
                    if (this._percentagewidth != undefined) {
                        desiredwidth = parseFloat(this._percentagewidth) * hostwidth / 100;
                    }
                    else {
                        desiredwidth = parseFloat(this.width) * hostwidth / 100;
                    }
                    percentage = true;
                }

                if (this.width != 'auto' && !this._width && !percentage) {
                    if (parseInt(column[0].style.width) != this.width) {
                        column.width(this.width);
                    }
                }
                else if (percentage) {
                    if (desiredwidth < this.minwidth && this.minwidth != 'auto') {
                        desiredwidth = this.minwidth;
                        this.width = desiredwidth;
                    }
                    if (desiredwidth > this.maxwidth && this.maxwidth != 'auto') {
                        desiredwidth = this.maxwidth;
                        this.width = desiredwidth;
                    }

                    if (parseInt(column[0].style.width) != desiredwidth) {
                        column.width(desiredwidth);
                        this.width = desiredwidth;
                    }
                }
                else  {
                    var width = Math.floor(totalwidth * (this.text.length / allcharacters.length));
                    if (isNaN(width)) {
                        width = this.minwidth;
                    }

                    if (width < 0) {
                        $element = $('<span>' + this.text + '</span>');
                        $(document.body).append($element);
                        width = 10 + $element.width();
                        $element.remove();
                    }
                    if (width < this.minwidth) {
                        width = this.minwidth;
                    }
                    if (width > this.maxwidth) {
                        width = this.maxwidth;
                    }
                    
                    this._width = 'auto';
                    this.width = width;
                    column.width(this.width);
                }
                if (parseInt(column[0].style.left) != left) {
                    column.css('left', left);
                }

                if (!(this.hidden && this.hideable)) {
                    left += this.width;
                }

                this._requirewidthupdate = true;
            });
            this.columnsheader.width(2 + left);
            columnheader.width(this.columnsheader.width());
            if (left == 0)
                this.columnsheader[0].style.visibility = "hidden";
            else
                this.columnsheader[0].style.visibility = "inherit";

            this._resizecolumngroups();
            if (this.showfilterrow && this.filterrow) {
                this.filterrow.width(this.columnsheader.width());
                this._updatefilterrowui();
            }
            if (this.autowidth) {
                this._arrange();
            }
        },

        _rendercolumnheaders: function () {
            var self = this.that;

            if (!this.prerenderrequired) {
                if (this._rendersortcolumn) {
                    this._rendersortcolumn();
                }
                if (this._renderfiltercolumn) {
                    this._renderfiltercolumn();
                }
                if (this.showfilterrow && this.filterrow) {
                    this.filterrow.width(this.columnsheader.width());
                    this._updatefilterrowui();
                }
                return;
            }

            this._columnsbydatafield = new Array();
            this.columnsheader.find('#columntable' + this.element.id).remove();
            var columnheader = $('<div id="columntable' + this.element.id + '" style="height: 100%; position: relative;"></div>')
            columnheader[0].cells = new Array();

            var k = 0;
            var left = 0;

            var allcharacters = "";
            var totalwidth = this.host.width();
            var hostwidth = totalwidth;

            var pinnedcolumns = new Array();
            var normalcolumns = new Array();
            var indent = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth;

            $.each(this.columns.records, function (i, value) {
                if (!(this.hidden && this.hideable)) {
                    if (this.width != 'auto' && !this._width) {
                        if (this.width < this.minwidth && this.minwidth != 'auto') {
                            totalwidth -= this.minwidth;
                        }
                        else if (this.width > this.maxwidth && this.maxwidth != 'auto') {
                            totalwidth -= this.maxwidth;
                        }
                        else if (this.width.toString().indexOf('%') != -1) {
                            var value = 0;
                            var offset = self.vScrollBar[0].style.visibility == 'hidden' ? 0 : self.scrollbarsize + 5;
                            offset += indent;
                            value = parseFloat(this.width) * (hostwidth-offset) / 100;
                            if (value < this.minwidth && this.minwidth != 'auto') value = this.minwidth;
                            if (value > this.maxwidth && this.maxwidth != 'auto') value = this.maxwidth;
                            totalwidth -= value;
                        }
                        else {
                            if (typeof this.width == 'string') this.width = parseInt(this.width);
                            totalwidth -= this.width;
                        }
                    }
                    else {
                        allcharacters += this.text;
                    }
                }
                if (this.pinned || this.grouped || this.checkboxcolumn) {
                    if (self._haspinned) {
                        this.pinned = true;
                    }
                    pinnedcolumns[pinnedcolumns.length] = this;
                }
                else {
                    normalcolumns[normalcolumns.length] = this;
                }
            });

            if (!this.rtl) {
                for (var i = 0; i < pinnedcolumns.length; i++) {
                    this.columns.replace(i, pinnedcolumns[i]);
                }
                for (var j = 0; j < normalcolumns.length; j++) {
                    this.columns.replace(pinnedcolumns.length + j, normalcolumns[j]);
                }
            }
            else {
                var p = 0;
                pinnedcolumns.reverse();
                for (var i = this.columns.records.length - 1; i >= this.columns.records.length - pinnedcolumns.length; i--) {
                    this.columns.replace(i, pinnedcolumns[p++]);
                }
                for (var j = 0; j < normalcolumns.length; j++) {
                    this.columns.replace(j, normalcolumns[j]);
                }
            }

            var zindex = this.headerZIndex;
            var groupslength = self.groupable ? self.groups.length : 0;
            if (this.rowdetails && this.showrowdetailscolumn) {
                groupslength++;
            }

            var headerheight = self.columnsheader.height();
            if (this.showfilterrow) {
                if (!this.columngroups) {
                    headerheight = this.columnsheight;
                }
                else {
                    headerheight -= this.filterrowheight;
                }
            }
            var tableheight = this._gettableheight();

            if (this.virtualsizeinfo && this.virtualsizeinfo.virtualheight > tableheight) {
                if (this.groupable && this.groups.length > 0) {
                    if (this.dataview && this.dataview.loadedrootgroups && !this.groupsexpandedbydefault) {
                        var groupsheight = 0;
                        if (!this.pageable) {
                            var groupsheight = this.dataview.loadedrootgroups.length * this.rowsheight;
                        }
                        else if (this.pageable) {
                            for (var q = 0; q < this.dataview.rows.length; q++) {
                                if (this.dataview.rows[q].group && this.dataview.rows[q].level === 0) {
                                    groupsheight += this.rowsheight;
                                }
                            }
                        }
                        if (groupsheight > tableheight) {
                            totalwidth -= this.scrollbarsize + 5;
                            hostwidth -= this.scrollbarsize + 5;
                        }
                    }
                    else {
                        totalwidth -= this.scrollbarsize + 5;
                        hostwidth -= this.scrollbarsize + 5;
                    }
                }
                else {
                    if (!this.autoheight) {
                        totalwidth -= this.scrollbarsize + 5;
                        hostwidth -= this.scrollbarsize + 5;
                    }
                }
            }

            hostwidth -= indent;

            var getcolumnheight = function (datafield, column) {
                var height = self.columngroupslevel * self.columnsheight;
                height = height - (column.level * self.columnsheight);
                return height;
            }

            $.each(this.columns.records, function (i, value) {
                this.height = self.columnsheight;
                if (self.columngroups) {
                    if (self.columngroups.length) {
                        this.height = getcolumnheight(this.datafield, this);
                        headerheight = this.height;
                    }
                }

                var classname = self.toTP('jqx-grid-column-header') + " " + self.toTP('jqx-widget-header');
                if (self.rtl) {
                    classname += " " + self.toTP('jqx-grid-column-header-rtl');
                }

                var pinnedZIndex = !self.rtl ? 150 + zindex-1 : 150 + zindex+1;
                var columnZIndex = !self.rtl ? zindex-- : zindex++;

                var column = $('<div role="columnheader" style="z-index: '  + columnZIndex + ';position: absolute; height: 100%;" class="' + classname + '"><div style="height: 100%; width: 100%;"></div></div>');

                if (self.columngroups) {
                    column[0].style.height = headerheight + 'px';
                    column[0].style.bottom = '0px';

                    if (this.pinned) {
                        column[0].style.zIndex = pinnedZIndex;
                    }
                }

                this.uielement = column;
                if (this.classname != '' && this.classname) {
                    column.addClass(this.classname);
                }

                var desiredwidth = this.width;
                var percentage = false;
                if (this.width === null) this.width = "auto";
                if (this.width.toString().indexOf('%') != -1 || this._percentagewidth != undefined) {
                    if (this._percentagewidth != undefined) {
                        desiredwidth = parseFloat(this._percentagewidth) * hostwidth / 100;
                    }
                    else {
                        desiredwidth = parseFloat(this.width) * hostwidth / 100;
                    }
                    percentage = true;
                }

                if (this.width != 'auto' && !this._width && !percentage) {
                    if (desiredwidth < this.minwidth && this.minwidth != 'auto') {
                        desiredwidth = this.minwidth;
                    }
                    if (desiredwidth > this.maxwidth && this.maxwidth != 'auto') {
                        desiredwidth = this.maxwidth;
                    }

                    column[0].style.width = parseInt(desiredwidth) + 'px';
                }
                else if (percentage) {
                    if (desiredwidth < this.minwidth && this.minwidth != 'auto') {
                        desiredwidth = this.minwidth;
                    }
                    if (desiredwidth > this.maxwidth && this.maxwidth != 'auto') {
                        desiredwidth = this.maxwidth;
                    }

                    if (this._percentagewidth == undefined || this.width.toString().indexOf('%') != -1) {
                        this._percentagewidth = this.width;
                    }
                    column.width(desiredwidth);
                    this.width = desiredwidth;
                }
                else if (!this.hidden){
                    var width = Math.floor(totalwidth * (this.text.length / allcharacters.length));
                    if (isNaN(width)) {
                        width = this.minwidth;
                    }

                    if (width < 0) {
                        $element = $('<span>' + this.text + '</span>');
                        $(document.body).append($element);
                        width = 10 + $element.width();
                        $element.remove();
                    }
                    if (width < this.minwidth) {
                        width = this.minwidth;
                    }
                    if (width > this.maxwidth) {
                        width = this.maxwidth;
                    }

                    this._width = 'auto';
                    this.width = width;
                    desiredwidth = this.width;
                    column.width(this.width);
                }

                if (this.hidden && this.hideable) {
                    column.css('display', 'none');
                }

                var columncontentcontainer = $(column.children()[0]);
                var menuinnerelementclassname = self.rtl ? self.toTP('jqx-grid-column-menubutton') + " " + self.toTP('jqx-grid-column-menubutton-rtl') : self.toTP('jqx-grid-column-menubutton');
                menuinnerelementclassname += " " + self.toTP('jqx-icon-arrow-down');
                var columnsmenu = $('<div style="height: ' + headerheight + 'px; display: none; left: 100%; top: 0%; position: absolute;"><div class="' + menuinnerelementclassname + '" style="width: 100%; height:100%;"></div></div>');

                if (!self.enableanimations) {
                    columnsmenu.css('margin-left', -16);
                }
                if (self.rtl) {
                    columnsmenu.css('left', '0px');
                }

                this.columnsmenu = columnsmenu[0];
                columnheader[0].cells[i] = column[0];
                columnsmenu[0].style.width = parseInt(self.columnsmenuwidth) + 'px';
                var showcolumnsmenu = self.columnsmenu;
                var shouldhandledragdrop = false;
                var detailscolumn = false;

                var isgroupcolumn = (self.groupable && groupslength > 0 && k < groupslength) || (self.rowdetails && k < groupslength);
                if (self.rtl) {
                    isgroupcolumn = (self.groupable && groupslength > 0 && k < groupslength) || (self.rowdetails && k < groupslength);
                    isgroupcolumn &= i > self.columns.records.length - 1 - groupslength;
                }

                if (isgroupcolumn) {
                    k++;
                    showcolumnsmenu &= false;
                    this.sortable = false;
                    this.editable = false;
                    detailscolumn = true;
                }
                else {
                    var columnContent = this.renderer != null ? this.renderer(this.text, this.align, headerheight) : self._rendercolumnheader(this.text, this.align, headerheight, self);
                    if (columnContent == null) {
                        columnContent = self._rendercolumnheader(this.text, this.align, headerheight, self);
                    }
                    if (this.renderer != null) columnContent = $(columnContent);
                    showcolumnsmenu &= true;
                    shouldhandledragdrop = true;
                }
                if (self.WinJS) {
                    MSApp.execUnsafeLocalFunction(function () {
                        columncontentcontainer.append($(columnContent));
                    });
                }
                else {
                    if (this.renderer) {
                        columncontentcontainer.append($(columnContent));
                    }
                    else {
                        if (columnContent) {
                            columncontentcontainer[0].innerHTML = columnContent;
                        }
                    }
                }

                if (columnContent != null) {
                    var iconscontainer = $('<div class="iconscontainer" style="height: ' + headerheight + 'px; margin-left: -32px; display: block; position: absolute; left: 100%; top: 0%; width: 32px;">'
                        + '<div class="filtericon ' + self.toTP('jqx-widget-header') + '" style="height: ' + headerheight + 'px; float: right; display: none; width: 16px;"><div class="' + self.toTP('jqx-grid-column-filterbutton') + '" style="width: 100%; height:100%;"></div></div>'
                        + '<div class="sortasc ' + self.toTP('jqx-widget-header') + '" style="height: ' + headerheight + 'px; float: right; display: none; width: 16px;"><div class="' + self.toTP('jqx-grid-column-sortascbutton') + ' ' + self.toTP('jqx-icon-arrow-up') + '" style="width: 100%; height:100%;"></div></div>'
                        + '<div class="sortdesc ' + self.toTP('jqx-widget-header') + '" style="height: ' + headerheight + 'px; float: right; display: none; width: 16px;"><div class="' + self.toTP('jqx-grid-column-sortdescbutton') + ' ' + self.toTP('jqx-icon-arrow-down') + '" style="width: 100%; height:100%;"></div></div>'
                        + '</div>');
                    columnsmenu.addClass(self.toTP('jqx-widget-header'));
                    columncontentcontainer.append(iconscontainer);

                    var iconschildren = iconscontainer.children();
                    this.sortasc = iconschildren[1];
                    this.sortdesc = iconschildren[2];
                    this.filtericon = iconschildren[0];

                    this.iconscontainer = iconscontainer;
                    if (self.rtl) {
                        iconscontainer.css('margin-left', '0px');
                        iconscontainer.css('left', '0px');
                        $(this.sortasc).css('float', 'left');
                        $(this.filtericon).css('float', 'left');
                        $(this.sortdesc).css('float', 'left');
                    }
                    if (!self.autoshowfiltericon && this.filterable) {
                         $(this.filtericon).css('display', 'block');
                    }

                }

                if (showcolumnsmenu) {
                    self._handlecolumnsmenu(self, columncontentcontainer, column, columnsmenu, this);
                    if (!this.menu) columnsmenu.hide();
                }

                columnheader.append(column);

                if (self.groupable && shouldhandledragdrop) {
                    column[0].id = self.dataview.generatekey();
                    if (self._handlecolumnstogroupsdragdrop) {
                        self._handlecolumnstogroupsdragdrop(this, column);
                    }
                    else throw new Error('jqxGrid: Missing reference to jqxgrid.grouping.js.');
                }
                if (self.columnsreorder && this.draggable && self._handlecolumnsdragreorder) {
                    self._handlecolumnsdragreorder(this, column);
                }

                var columnitem = this;
                self.addHandler(column, 'click', function (event) {
                    if (columnitem.checkboxcolumn)
                        return true;

                    if (self.sorttogglestates > 0 && self._togglesort) {
                        if (!self._loading) {
                            self._togglesort(columnitem);
                        }
                    }
                    event.preventDefault();
                    self._raiseEvent(7, { column: columnitem.getcolumnproperties(), datafield: columnitem.datafield, originalEvent: event });
                });

                if (columnitem.resizable && self.columnsresize && !detailscolumn) {
                    var isTouchDevice = false;
                    var eventname = 'mousemove';
                    if (self.isTouchDevice() && self.touchmode !== true) {
                        isTouchDevice = true;
                        eventname = $.jqx.mobile.getTouchEventName('touchstart');
                    }
                    self.addHandler(column, eventname, function (event) {
                        var pagex = parseInt(event.pageX);
                        var offset = 5;
                        var columnleft = parseInt(column.coord().left);
                        if (self.hasTransform) {
                            columnleft = $.jqx.utilities.getOffset(column).left;
                        }
                        if (self.resizing) {
                            return true;
                        }

                        if (self._handlecolumnsresize) {
                            if (isTouchDevice) {
                                var touches = self.getTouches(event);
                                var touch = touches[0];
                                pagex = touch.pageX;
                                offset = 40;
                                if (pagex >= columnleft + columnitem.width - offset) {
                                    self.resizablecolumn = { columnelement: column, column: columnitem };
                                    column.css('cursor', "col-resize");
                                }
                                else {
                                    column.css('cursor', "");
                                    self.resizablecolumn = null;
                                }
                                return true;
                            }

                            var colwidth = columnitem.width;
                            if (self.rtl) colwidth = 0;

                            if (pagex >= columnleft + colwidth - offset) {
                                if (pagex <= columnleft + colwidth + offset) {
                                    self.resizablecolumn = { columnelement: column, column: columnitem };
                                    column.css('cursor', "col-resize");
                                    return false;
                                }
                                else {
                                    column.css('cursor', "");
                                    self.resizablecolumn = null;
                                }
                            }
                            else {
                                column.css('cursor', "");
                                if (pagex < columnleft + colwidth - offset) {
                                    if (!columnitem._animating && !columnitem._menuvisible) {
                                        column.mouseenter();
                                    }
                                }

                                self.resizablecolumn = null;
                            }
                        }
                    });
                }

                column.css('left', left);

                if (!(this.hidden && this.hideable)) {
                    left += desiredwidth;
                }

                if (columnitem.rendered) {
                    var result = columnitem.rendered($(columncontentcontainer[0].firstChild), columnitem.align, headerheight);
                    if (result && iconscontainer != null) {
                        iconscontainer.hide();
                    }
                }
                if (columnitem.checkboxcolumn) {
                    if (iconscontainer) {
                        iconscontainer.hide();
                    }
                    if (!self.host.jqxCheckBox) {
                        throw new Error("jqxGrid: Missing reference to jqxcheckbox.js");
                    }

                    columncontentcontainer.html('<div style="cursor: pointer; margin-left: 5px; top: 50%; margin-top: -8px; position: relative;"></div>');
                    var checkboxelement = columncontentcontainer.find('div:first');
                    checkboxelement.jqxCheckBox({_canFocus: false, disabledContainer: true, theme: self.theme, enableContainerClick: false, width: 16, height: 16, animationShowDelay: 0, animationHideDelay: 0 });
                    columnitem.checkboxelement = checkboxelement;
                    var checkboxinstance = checkboxelement.data().jqxCheckBox.instance;
                    self._checkboxcolumn = columnitem;
                    checkboxinstance.updated = function (event, checked, oldchecked) {
                        self._checkboxcolumnupdating = true;
                        if (checked) {
                            self.selectallrows();
                        }
                        else {
                            self.clearselection(true, false);
                        }
                        self._checkboxcolumnupdating = false;
                    }
                }
            });

            if (left > 0) {
                this.columnsheader.width(2 + left);
            }
            else {
                this.columnsheader.width(left);
            }

            this.columnsrow = columnheader;
            self.columnsheader.append(columnheader);
            if (this.showfilterrow && this._updatefilterrow) {
                if (!this.columngroups) {
                    columnheader.height(this.columnsheight);
                }
                else {
                    columnheader.height(this.columngroupslevel*this.columnsheight);                    
                }

                if (!this.filterrow) {
                    var filterrow = $("<div></div>");
                    filterrow[0].id = "filterrow." + this.element.id;
                    filterrow.height(this.filterrowheight);
                    this.filterrow = filterrow;
                }
                this.filterrow.width(left);

                this.columnsheader.append(this.filterrow);
                this._updatefilterrow();
            }

            if (left == 0)
                columnheader[0].style.visibility = "hidden";
            else
                columnheader[0].style.visibility = "inherit";

            columnheader.width(left);
            if (this._handlecolumnsdragdrop) {
                this._handlecolumnsdragdrop();
            }
            if (this._handlecolumnsreorder) {
                this._handlecolumnsreorder();
            }
            if (this._rendersortcolumn) {
                this._rendersortcolumn();
            }
            if (this._renderfiltercolumn) {
                this._renderfiltercolumn();
            }
            if (this._handlecolumnsresize) {
                this._handlecolumnsresize();
            }
            if (this.columngroups) {
                this._rendercolumngroups();
            }
            if (this._updatecheckboxselection) {
                this._updatecheckboxselection();
            }
        },

        _rendercolumngroups: function()
        {
            if (!this.columngroups) return;
            var pinnedColumns = 0;
            for (var i = 0; i < this.columns.records.length; i++) {
                if (this.columns.records[i].pinned) pinnedColumns++;
            }

            var zindex = this.headerZIndex - pinnedColumns + this.columns.records.length;
            var self = this.that;
            var classname = self.toTP('jqx-grid-column-header') + " " + self.toTP('jqx-grid-columngroup-header') + " " + self.toTP('jqx-widget-header');
            if (self.rtl) {
                classname += " " + self.toTP('jqx-grid-columngroup-header-rtl');
            }
            var columnheader = this.columnsheader.find('#columntable' + this.element.id);
            columnheader.find('jqx-grid-columngroup-header').remove();

            for (var j = 0; j < this.columngroupslevel-1; j++) {
                for (var i = 0; i < this.columngroups.length; i++) {
                    var group = this.columngroups[i];
                    var level = group.level;
                    if (level !== j)
                        continue;

                    var top = level * this.columnsheight;
                    var left = 99999;
                    if (group.groups) {
                        var getwidth = function (group) {
                            var width = 0;
                            for (var j = 0; j < group.groups.length; j++) {
                                var currentgroup = group.groups[j];
                                if (!currentgroup.groups) {
                                    if (!currentgroup.hidden) {
                                        width += currentgroup.width;
                                        left = Math.min(parseInt(currentgroup.element.style.left), left);
                                    }
                                }
                                else {
                                    width += getwidth(currentgroup);
                                }
                            }
                            return width;
                        }
                        group.width = getwidth(group);
                        group.left = left;

                        var height = this.columnsheight;
                        var columnZIndex = zindex--;
                        var column = $('<div role="columnheader" style="z-index: ' + columnZIndex + ';position: absolute;" class="' + classname + '"></div>');
                        var element = $(this._rendercolumnheader(group.text, group.align, this.columnsheight, this));
                        if (group.renderer) {
                            var element = $("<div style='height: 100%; width: 100%;'></div>");
                            var content = group.renderer(group.text, group.align, height);
                            element.html(content);
                        }

                        column.append(element);
                        column[0].style.left = left + 'px';
                        if (left === 0) {
                            column[0].style.borderLeftColor = 'transparent';
                        }
                        column[0].style.top = top + 'px';
                        column[0].style.height = height + 'px';
                        column[0].style.width = -1 + group.width + 'px';
                        columnheader.append(column);
                        group.element = column;
                        if (group.rendered) {
                            group.rendered(element, group.align, height);
                        }
                    }
                }
            }
        },

        _resizecolumngroups: function()
        {
            if (!this.columngroups) return;
            for (var i = 0; i < this.columngroups.length; i++) {
                var group = this.columngroups[i];
                var level = group.level;
                var top = level * this.columnsheight;
                var left = 99999;
                if (group.groups) {
                    var getwidth = function (group) {
                        var width = 0;
                        for (var j = 0; j < group.groups.length; j++) {
                            var currentgroup = group.groups[j];
                            if (!currentgroup.groups) {
                                if (!currentgroup.hidden) {
                                    width += currentgroup.width;
                                    left = Math.min(parseInt(currentgroup.element.style.left), left);
                                }
                            }
                            else {
                                width += getwidth(currentgroup);
                            }
                        }
                        return width;
                    }
                    group.width = getwidth(group);
                    group.left = left;

                    var height = this.columnsheight;
                    var column = group.element;
                    column[0].style.left = left + 'px';
                    column[0].style.top = top + 'px';
                    column[0].style.height = height + 'px';
                    column[0].style.width = -1 + group.width + 'px';
                }
            }
        },

        _handlecolumnsmenu: function (self, columncontentcontainer, column, columnsmenu, columnitem) {
            self.dragmousedown = null;
            columnsmenu[0].id = self.dataview.generatekey();

            columncontentcontainer.append(columnsmenu);
            column[0].columnsmenu = columnsmenu[0];
            columnitem.element = column[0];

            var menuoffset = this.columnsmenuwidth + 1;

            var showcolumnsmenu = function () {
                if (!columnitem.menu)
                    return false;

                if (!self.resizing) {
                    if (columnitem._menuvisible && self._hasOpenedMenu) return false;

                    columnitem._animating = true;
                    if (self.menuitemsarray && self.menuitemsarray.length > 0) {
                        if (!self.enableanimations) {
                            columnsmenu.css('display', 'block');
                            var left = !self.rtl ? -48 : 16;
                            columnitem.iconscontainer.css('margin-left', left + 'px');
                            columnitem._animating = false;
                            columnitem._menuvisible = true;
                        }
                        else {
                            columnsmenu.css('display', 'block');
                            columnsmenu.stop();
                            columnitem.iconscontainer.stop();
                            if (!self.rtl) {
                                columnsmenu.css('margin-left', '0px');
                                columnsmenu.animate({
                                    'margin-left': -menuoffset
                                }, 'fast', function () {
                                    columnsmenu.css('display', 'block');
                                    columnitem._animating = false;
                                    columnitem._menuvisible = true;
                                }
                                );
                            }
                            else {
                                columnsmenu.css('margin-left', -menuoffset);
                                columnsmenu.animate({
                                    'margin-left': '0px'
                                }, 'fast', function () {
                                    columnsmenu.css('display', 'block');
                                    columnitem._animating = false;
                                    columnitem._menuvisible = true;
                                }
                                );
                            }

                            var left = !self.rtl ? -(32+menuoffset) : menuoffset;
                            columnitem.iconscontainer.animate({
                                'margin-left': left
                            }, 'fast');
                        }
                    }
                }
            }
            
            var enterEventName = "mouseenter";
            if (self.isTouchDevice()) {
                enterEventName = "touchstart";
            }

            self.addHandler(column, enterEventName, function (event) {
                var pagex = parseInt(event.pageX);
                var offset = self.columnsresize && columnitem.resizable ? 3 : 0;
                var columnleft = parseInt(column.coord().left);
                if (self.hasTransform) {
                    columnleft = $.jqx.utilities.getOffset(column).left;
                }
              
                var colwidth = columnitem.width;
                if (self.rtl) colwidth = 0;

                if (offset != 0) {
                    if (pagex >= columnleft + colwidth - offset) {
                        if (pagex <= columnleft + colwidth + offset) {
                            return false;
                        }
                    }
                }

                var scrolling = self.vScrollInstance.isScrolling();
                if (columnitem.menu && self.autoshowcolumnsmenubutton && !scrolling) {
                    showcolumnsmenu();
                }
            });

            if (!self.autoshowcolumnsmenubutton) {
                columnsmenu.css('display', 'block');
                var left = !self.rtl ? -48 : 16;
                columnitem.iconscontainer.css('margin-left', left + 'px');
                if (!self.rtl) {
                    columnsmenu.css({ 'margin-left': -menuoffset });
                }
                else {
                    columnsmenu.css({ 'margin-left': '0px' });
                }
            }

            self.addHandler(column, 'mouseleave', function (event) {
                if (self.menuitemsarray && self.menuitemsarray.length > 0 && columnitem.menu) {
                    var menu = $.data(document.body, "contextmenu" + self.element.id);
                    if (menu != undefined && columnsmenu[0].id == menu.columnsmenu.id) {
                        return;
                    }

                    if (self.autoshowcolumnsmenubutton) {
                        if (!self.enableanimations) {
                            columnsmenu.css('display', 'none');
                            var left = !self.rtl ? -32 : 0;
                            columnitem.iconscontainer.css('margin-left', left + 'px');
                            columnitem._menuvisible = false;
                        }
                        else {
                            if (!self.rtl) {
                                columnsmenu.css('margin-left', -menuoffset);
                            }
                            else columnsmenu.css('margin-left', '0px');

                            columnsmenu.stop();
                            columnitem.iconscontainer.stop();
                            if (!self.rtl) {
                                columnsmenu.animate({
                                    'margin-left': 0
                                }, 'fast', function () {
                                    columnsmenu.css('display', 'none');
                                    columnitem._menuvisible = false;
                                });
                            }
                            else {
                                columnsmenu.animate({
                                    'margin-left': -menuoffset
                                }, 'fast', function () {
                                    columnsmenu.css('display', 'none');
                                    columnitem._menuvisible = false;
                                });
                            }

                            var left = !self.rtl ? -32 : 0;
                            columnitem.iconscontainer.animate({
                                'margin-left': left
                            }, 'fast');
                        }
                    }
                }
            });

            var canopen = true;
            var openedmenu = "";
            var $filtericon = $(columnitem.filtericon);

            self.addHandler(columnsmenu, 'mousedown', function (event) {
                if (!self.gridmenu) self._initmenu();
                canopen = !$.data(self.gridmenu[0], 'contextMenuOpened' + self.gridmenu[0].id);
                openedmenu = $.data(document.body, "contextmenu" + self.element.id);
                if (openedmenu != null) {
                    openedmenu = openedmenu.column.datafield;
                }
            });

            self.addHandler($filtericon, 'mousedown', function (event) {
                if (!self.gridmenu) self._initmenu();
                canopen = !$.data(self.gridmenu[0], 'contextMenuOpened' + self.gridmenu[0].id);
                openedmenu = $.data(document.body, "contextmenu" + self.element.id);
                if (openedmenu != null) {
                    openedmenu = openedmenu.column.datafield;
                }
            });

            var opencolumnsmenu = function () {
                if (!columnitem.menu)
                    return false;

                if (!self.gridmenu) {
                    self._initmenu();
                }

                var offset = columnsmenu.coord(true);
                var top = columnsmenu.height();

                if (!canopen) {
                    canopen = true;

                    if (openedmenu == columnitem.datafield) {
                        self._closemenu();
                        return false;
                    }
                }

                var hostOffset = self.host.coord(true);
                if (self.hasTransform) {
                    hostOffset = $.jqx.utilities.getOffset(self.host);
                    offset = $.jqx.utilities.getOffset(columnsmenu);
                }

                if (hostOffset.left + self.host.width() > parseInt(offset.left) + self.gridmenu.width()) {
                    self.gridmenu.jqxMenu('open', offset.left, offset.top + top);
                }
                else {
                    self.gridmenu.jqxMenu('open', columnsmenu.width() + offset.left - self.gridmenu.width(), offset.top + top);
                }
                if (self.gridmenu.width() < 100) {
                    self._arrangemenu();
                }
                self._hasOpenedMenu = true;

                var sortascmenuitem = self._getmenuitembyindex(0);
                var sortdescmenuitem = self._getmenuitembyindex(1);
                var sortremovemenuitem = self._getmenuitembyindex(2);
                var groupmenuitem = self._getmenuitembyindex(3);
                var groupremoveitem = self._getmenuitembyindex(4);
                var filteritem = self._getmenuitembyindex(5);

                if (sortascmenuitem != null && sortdescmenuitem != null && sortremovemenuitem != null) {
                    var sortable = columnitem.sortable && self.sortable;
                    self.gridmenu.jqxMenu('disable', sortascmenuitem.id, !sortable);
                    self.gridmenu.jqxMenu('disable', sortdescmenuitem.id, !sortable);
                    self.gridmenu.jqxMenu('disable', sortremovemenuitem.id, !sortable);

                    if (columnitem.datafield) {
                        if (self.sortcolumn == columnitem.datafield) {
                            var sortinfo = self.getsortinformation();
                            if (sortable) {
                                if (sortinfo.sortdirection.ascending) {
                                    self.gridmenu.jqxMenu('disable', sortascmenuitem.id, true);
                                }
                                else {
                                    self.gridmenu.jqxMenu('disable', sortdescmenuitem.id, true);
                                }
                            }
                        }
                        else {
                            self.gridmenu.jqxMenu('disable', sortremovemenuitem.id, true);
                        }
                    }
                }
                if (groupmenuitem != null && groupremoveitem != null) {
                    if (!self.groupable || !columnitem.groupable) {
                        self.gridmenu.jqxMenu('disable', groupremoveitem.id, true);
                        self.gridmenu.jqxMenu('disable', groupmenuitem.id, true);
                    }
                    else {
                        if (self.groups && self.groups.indexOf(columnitem.datafield) != -1) {
                            self.gridmenu.jqxMenu('disable', groupmenuitem.id, true);
                            self.gridmenu.jqxMenu('disable', groupremoveitem.id, false);
                        }
                        else {
                            self.gridmenu.jqxMenu('disable', groupmenuitem.id, false);
                            self.gridmenu.jqxMenu('disable', groupremoveitem.id, true);
                        }
                    }
                }
                if (filteritem != null) {

                    self._updatefilterpanel(self, filteritem, columnitem);

                    var itemscount = 0;
                    if (self.sortable && self._togglesort && self.showsortmenuitems) {
                        itemscount += 3;
                    }

                    if (self.groupable && self.addgroup && self.showgroupmenuitems) {
                        itemscount += 2;
                    }

                    var height = itemscount * 27 + 3;
                    if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                        height += 20;
                        $(filteritem).height(190);
                    }

                    if (self.filterable && self.showfiltermenuitems) {
                        if (!columnitem.filterable) {
                            self.gridmenu.height(height);
                            $(filteritem).css('display', 'none');
                        }
                        else {
                            self.gridmenu.height(height + 180);
                            $(filteritem).css('display', 'block');
                        }
                    }
                }
                $.data(document.body, "contextmenu" + self.element.id, { column: columnitem, columnsmenu: columnsmenu[0] });
            }

            self.addHandler($filtericon, 'click', function (event) {
                if (!columnitem.menu)
                    return false;
                if (!self.showfilterrow) {
                    showcolumnsmenu();
                    opencolumnsmenu();
                }
                return false;
            });

            self.addHandler(columnsmenu, 'click', function (event) {
                if (!columnitem.menu)
                    return false;

                opencolumnsmenu();
                return false;
            });
            if (self.isTouchDevice()) {
                self.addHandler(columnsmenu, $.jqx.mobile.getTouchEventName('touchstart'), function (event) {
                    if (!columnitem.menu)
                        return false;

                    if (!self._hasOpenedMenu) {
                        opencolumnsmenu();
                    }
                    else {
                        self._closemenu();
                    }

                    return false;
                });
            }
        },

        _removecolumnhandlers: function (columnitem) {
            var self = this.that;
            var column = $(columnitem.element);
            if (column.length > 0) {
                self.removeHandler(column, 'mouseenter');
                self.removeHandler(column, 'mouseleave');
                var $filtericon = $(columnitem.filtericon);
                self.removeHandler($filtericon, 'mousedown');
                self.removeHandler($filtericon, 'click');
                self.removeHandler(column, 'click');
                self.removeHandler(column, 'mousemove');
                if (self.columnsreorder) {
                    self.removeHandler(column, 'mousedown.drag');
                    self.removeHandler(column, 'mousemove.drag');
                }
                self.removeHandler(column, 'dragstart');
                if (column[0].columnsmenu) {
                    var columnsmenu = $(column[0].columnsmenu);
                    self.removeHandler(columnsmenu, 'click');
                    self.removeHandler(columnsmenu, 'mousedown');
                    self.removeHandler(columnsmenu, $.jqx.mobile.getTouchEventName('touchstart'));
                }
            }
        },

        _rendercolumnheader: function (text, align, headerheight, self) {
            var margin = '4px';

            if (self.columngroups) {
                margin = (headerheight / 2 - this._columnheight / 2);
                if (margin < 0) {
                    margin = 4;
                }
                margin += 'px';
            }
            else {
                if (this.columnsheight != 25) {
                    margin = (this.columnsheight / 2 - this._columnheight / 2);
                    if (margin < 0) {
                        margin = 4;
                    }
                    margin += 'px';
                }
            }

            if (this.enableellipsis) {
                return '<div style="padding-bottom: 2px; overflow: hidden; text-overflow: ellipsis; text-align: ' + align + '; margin-left: 4px; margin-right: 2px; margin-bottom: ' + margin + '; margin-top: ' + margin + ';">' + '<span style="text-overflow: ellipsis; cursor: default;">' + text + '</span>' + '</div>';
            }

            if (align == 'center' || align == 'middle')
                return '<div style="padding-bottom: 2px; text-align: center; margin-top: ' + margin + ';">' + '<a href="#">' + text + '</a>' + '</div>';

            var link = '<a style="margin-top: ' + margin + '; float: ' + align + ';" href="#">' + text + '</a>';
            return link;
        },

        _renderrows: function (virtualsizeinfo, forceVirtualRefresh, reason) {
            var self = this.that;

            if ((this.pageable || this.groupable) && (this.autoheight || this.autorowheight)) {
                if (this.table != null && this.table[0].rows != null && this.table[0].rows.length < this.dataview.rows.length) {
                    self.prerenderrequired = true;
                }
            }

            if (!this.pageable && (this.autoheight || this.autorowheight) && (this.virtualmode || this.unboundmode)) {
                var recordscount = this.source.totalrecords;
                if (!isNaN(recordscount)) {
                    if (this.table != null && this.table[0].rows != null && this.table[0].rows.length != recordscount) {
                        self.prerenderrequired = true;
                    }
                }
            }
            if ((this.autoheight || this.autorowheight) && !self.prerenderrequired) {
                if (this.table && this.table[0].rows) {
                    if (this.table[0].rows.length < this.dataview.records.length) {
                        if (this.pageable && this.table[0].rows.length < this.dataview.pagesize) {
                            self.prerenderrequired = true;
                        }
                        else if (!this.pageable) {
                            self.prerenderrequired = true;
                        }
                    }
                    if (this.table[0].rows.length < this.dataview.cachedrecords.length) {
                        if (this.pageable && this.table[0].rows.length < this.dataview.pagesize) {
                            self.prerenderrequired = true;
                        }
                        else if (!this.pageable) {
                            self.prerenderrequired = true;
                        }
                    }
                }
            }

            self._prerenderrows(virtualsizeinfo);
            if (self._requiresupdate) {
                self._requiresupdate = false;
                self._updatepageviews();
            }

            var callrenderrows = function () {
                if (self._loading) return;

                if (self.WinJS) {
                    MSApp.execUnsafeLocalFunction(function () {
                        self._rendervisualrows();
                    });
                }
                else {
                    self._rendervisualrows();
                }

                if (self.virtualmode && self.showaggregates && self._updateaggregates) {
                    self.refreshaggregates();
                }
            }
            var oldie = $.jqx.browser.msie && $.jqx.browser.version < 10;

            if (this.virtualmode) {
                var loadondemand = function () {
                    if (self.rendergridrows) {
                        var startboundindex = self._startboundindex;
                        if (startboundindex == undefined) startboundindex = 0;
                        var endboundindex = startboundindex + 1 + self.dataview.pagesize;
                        if (startboundindex != null && endboundindex != null) {
                            var isdataadapter = self.source._source ? true : false;
                            var sourcestartindex = !isdataadapter ? self.source.recordstartindex : self.source._source.recordstartindex;

                            if (sourcestartindex != startboundindex || forceVirtualRefresh == true) {
                                if (!isdataadapter) {
                                    self.source.recordstartindex = startboundindex;
                                    self.source.recordendindex = endboundindex;
                                }
                                else {
                                    if (endboundindex >= self.source._source.totalrecords) {
                                        endboundindex = self.source._source.totalrecords;
                                        startboundindex = endboundindex - self.dataview.pagesize - 1;
                                        if (startboundindex < 0) startboundindex = 0;
                                        if (self.source._source.recordendindex == endboundindex && self.source._source.recordstartindex == startboundindex) {
                                            return;
                                        }
                                    }

                                    self.source._source.recordstartindex = startboundindex;
                                    self.source._source.recordendindex = endboundindex;
                                }
                                self.updatebounddata('cells');
                            }
                        }
                    }
                }

                if (this.loadondemand) {
                    callrenderrows();
                    loadondemand();
                    this.loadondemand = false;
                }
                var ie10 = this._browser == undefined ? this._isIE10() : this._browser;

                if (this.editable && this.editcell && !this.vScrollInstance.isScrolling() && !this.hScrollInstance.isScrolling()) {
                    callrenderrows();
                }
                else {
                    if (this.autoheight) {
                        callrenderrows();
                    }
                    else {
                        if (ie10 || oldie || $.jqx.browser.mozilla || (navigator && navigator.userAgent.indexOf('Safari') != -1)) {
                            if (this._scrolltimer != null) {
                                clearTimeout(this._scrolltimer);
                            }
                            this._scrolltimer = setTimeout(function () {
                                callrenderrows();
                            }, 5);
                        }
                        else {
                            callrenderrows();
                        }
                    }
                }
            }
            else {
                if (this.scrollmode == 'deferred' && (this.hScrollInstance.isScrolling() || this.vScrollInstance.isScrolling())) {
                    if (this._scrolltimer != null) {
                        clearInterval(this._scrolltimer);
                    }
                    var row = this._getfirstvisualrow();
                    if (row != null) {
                        var renderer = function (data) {
                            if (row == null) return "";
                            var table = "<table>";
                            var columns = self.deferreddatafields;
                            if (columns == null) {
                                if (self.columns.records.length > 0) {
                                    columns = new Array();
                                    columns.push(self.columns.records[0].displayfield);
                                }
                            }

                            for (var i = 0; i < columns.length; i++) {
                                var field = columns[i];
                                var column = self._getcolumnbydatafield(field);
                                if (column) {
                                    var cellvalue = self._getcellvalue(column, row);
                                    if (column.cellsformat != '') {
                                        if ($.jqx.dataFormat) {
                                            if ($.jqx.dataFormat.isDate(cellvalue)) {
                                                cellvalue = $.jqx.dataFormat.formatdate(cellvalue, column.cellsformat, self.gridlocalization);
                                            }
                                            else if ($.jqx.dataFormat.isNumber(cellvalue)) {
                                                cellvalue = $.jqx.dataFormat.formatnumber(cellvalue, column.cellsformat, self.gridlocalization);
                                            }
                                        }
                                    }
                                    table += "<tr><td>" + cellvalue + "</td></tr>";
                                }
                            }
                            table += "</table>";
                            return table;
                        }

                        var html = this.scrollfeedback ? this.scrollfeedback(row.bounddata) : renderer(row.bounddata);
                        if (html != this._scrollelementcontent) {
                            this._scrollelement[0].innerHTML = html;
                            this._scrollelementcontent = html;
                        }
                    }

                    this._scrollelement.css('visibility', 'visible');
                    this._scrollelementoverlay.css('visibility', 'visible');
                    this._scrollelement.css('margin-top', -this._scrollelement.height() / 2);

                    this._scrolltimer = setInterval(function () {
                        if (!self.hScrollInstance.isScrolling() && !self.vScrollInstance.isScrolling()) {
                            callrenderrows();
                            self._scrollelement.css('visibility', 'hidden');
                            self._scrollelementoverlay.css('visibility', 'hidden');
                            clearInterval(self._scrolltimer);
                            if (row) {
                                self.ensurerowvisible(row.visibleindex);
                            }
                        }
                    }, 100);

                    return;
                }

                if (navigator && navigator.userAgent.indexOf('Chrome') == -1 && navigator.userAgent.indexOf('Safari') != -1) {
                    this._updatedelay = 1;
                }
                if (this.touchDevice != undefined && this.touchDevice == true) {
                    this._updatedelay = 5;
                }

                var ie10 = this._browser == undefined ? this._isIE10() : this._browser;

                if (ie10 || oldie) {
                    this._updatedelay = 5;
                }

                if ((ie10 || $.jqx.browser.mozilla) && this.hScrollInstance.isScrolling()) {
                    callrenderrows();
                    return;
                }

                if ($.jqx.browser.mozilla && this._updatedelay == 0 && (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling())) {
                    this._updatedelay = 1;  
                }
                if (this.updatedelay != null) {
                    this._updatedelay = this.updatedelay;
                }

                if (this._updatedelay == 0) {
                    callrenderrows();
                }
                else {
                    var timer = this._jqxgridrendertimer;
                    if (timer != null) {
                        clearTimeout(timer);
                    }
                    if (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling()) {
                        timer = setTimeout(function () {
                            callrenderrows();
                        }, this._updatedelay);
                        this._jqxgridrendertimer = timer;
                    }
                    else {
                        this._jqxgridrendertimer = timer;
                        callrenderrows();
                    }
                }
            }
            if (self.autorowheight && !self.autoheight) {
                if (this._pageviews.length > 0) {
                    var tableheight = this._gettableheight();
                    var virtualheight = this._pageviews[0].height;
                    if (virtualheight > tableheight) {
                        if (this.pageable && this.gotopage) {
                            virtualheight = this._pageviews[0].height;
                            if (virtualheight < 0) {
                                virtualheight = this._pageviews[0].height;
                            }
                        }

                        if (this.vScrollBar.css('visibility') != 'visible') {
                            this.vScrollBar.css('visibility', 'visible');
                        }
                        if (virtualheight <= tableheight || this.autoheight) {
                            this.vScrollBar.css('visibility', 'hidden');
                        }

                        if (virtualheight - tableheight > 0) {
                            if (this.scrollmode != 'deferred') {
                                var max = virtualheight - tableheight;
                                var oldmax = this.vScrollInstance.max;
                                this.vScrollBar.jqxScrollBar({ max: max });
                                if (Math.round(max) != Math.round(oldmax)) {
                                    this.vScrollBar.jqxScrollBar({ value: 0 });
                                }
                            }
                        }
                        else {
                            this.vScrollBar.jqxScrollBar({ value: 0, max: virtualheight });
                        }
                    }
                    else {
                        if (!this._loading) {
                            this.vScrollBar.css('visibility', 'hidden');
                        }
                        this.vScrollBar.jqxScrollBar({ value: 0 });
                    }

                    this._arrange();
                    if (this.virtualsizeinfo) {
                        this.virtualsizeinfo.virtualheight = virtualheight;
                    }
                }
            }
        },

        scrolling: function()
        {
            var vertical = this.vScrollInstance.isScrolling();
            var horizontal = this.hScrollInstance.isScrolling();
            return { vertical: vertical, horizontal: horizontal };
        },

        _renderhorizontalscroll: function () {
            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            if (this.hScrollBar.css('visibility') === 'hidden') {
                hScrollInstance.value = 0;
                horizontalscrollvalue = 0;
            }

            var left = parseInt(horizontalscrollvalue);
            if (this.table == null)
                return;

            var rows = this.table[0].rows.length;
            var columnsrow = this.columnsrow;
            var columnstart = this.groupable && this.groups.length > 0 ? this.groups.length : 0;
            var columnend = this.columns.records.length - columnstart;
            var columns = this.columns.records;
            var isempty = this.dataview.rows.length == 0;
            if (this.rtl) {
                if (this.hScrollBar.css('visibility') != 'hidden') {
                    left = hScrollInstance.max - left;
                }
            }

            if (isempty && !this._haspinned) {
                for (var i = 0; i < rows; i++) {
                    var tablerow = this.table[0].rows[i];
                    for (var j = 0; j < columnstart + columnend; j++) {
                        var tablecell = tablerow.cells[j];
                        if (tablecell != undefined) {
                            var column = columns[j];
                            if (column.pinned) {
                                tablecell.style.marginLeft = left + 'px';
                                if (i == 0) {
                                    var columncell = columnsrow[0].cells[j];
                                    columncell.style.marginLeft = left + 'px';
                                }
                            }
                        }
                    }
                }
                this.table[0].style.marginLeft = -left + 'px';
                columnsrow[0].style.marginLeft = -left + 'px';
            }
            else {
                if (this._haspinned || this._haspinned == undefined) {
                    for (var i = 0; i < rows; i++) {
                        var tablerow = this.table[0].rows[i];
                        for (var j = 0; j < columnstart + columnend; j++) {
                            var tablecell = tablerow.cells[j];
                            if (tablecell != undefined) {
                                var column = columns[j];
                                if (column.pinned) {
                                    if (left == 0 && tablecell.style.marginLeft == "")
                                        continue;

                                    var statuscell = null;
                                    var filtercell = null;

                                    if (this.showfilterrow && this.filterrow) {
                                        if (this.filterrow[0].cells) {
                                            filtercell = this.filterrow[0].cells[j];
                                        }
                                    }

                                    if (this.showaggregates) {
                                        if (this.statusbar[0].cells) {
                                            statuscell = this.statusbar[0].cells[j];
                                        }
                                    }

                                    if (!this.rtl) {
                                        tablecell.style.marginLeft = left + 'px';
                                        if (i == 0) {
                                            var columncell = columnsrow[0].cells[j];
                                            columncell.style.marginLeft = left + 'px';
                                            if (statuscell) {
                                                statuscell.style.marginLeft = left + 'px';
                                            }
                                            if (filtercell) {
                                                filtercell.style.marginLeft = left + 'px';
                                            }
                                        }
                                    }
                                    else {
                                        tablecell.style.marginLeft = -parseInt(horizontalscrollvalue) + 'px';
                                        if (i == 0) {
                                            var columncell = columnsrow[0].cells[j];
                                            columncell.style.marginLeft = -parseInt(horizontalscrollvalue) + 'px';
                                            if (statuscell) {
                                                statuscell.style.marginLeft = -parseInt(horizontalscrollvalue) + 'px';
                                            }
                                            if (filtercell) {
                                                filtercell.style.marginLeft = -parseInt(horizontalscrollvalue) + 'px';
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    this.table[0].style.marginLeft = -left + 'px';
                    columnsrow[0].style.marginLeft = -left + 'px';
                }
                else if (this._haspinned == false) {
                    this.table[0].style.marginLeft = -left + 'px';
                    columnsrow[0].style.marginLeft = -left + 'px';
                }
            }

            if (this.showaggregates) {
                if (this.statusbar[0].cells) {
                    var offset = 0;
                    if (this.rtl) {
                        if (this.vScrollBar.css('visibility') != 'hidden') {
                            if (this.hScrollBar.css('visibility') != 'hidden') {
                                offset = 2 + parseInt(this.hScrollBar.css('left'));
                            }
                        }
                    }
                    this.statusbar[0].style.marginLeft = -left + offset + 'px';
                }
            }
            if (this.showfilterrow && this.filterrow) {
                if (this.filterrow[0].cells) {
                    this.filterrow[0].style.marginLeft = -left + 'px';
                }
            }
        },

        _updaterowdetailsvisibility: function () {
            if (this.rowdetails) {
                for (var i = 0; i < this._rowdetailselementscache.length; i++) {
                    $(this._rowdetailselementscache[i]).css('display', 'none');
                }
            }
        },

        _getvisualcolumnsindexes: function (left, tablewidth, columnstart, columnend, hasgroups) {
            if (this.rowdetails || this.rtl || this.editcell || (this.width && this.width.toString().indexOf('%') >= 0) || this.exporting) {
                return { start: 0, end: columnstart + columnend };
            }

            var xcolumn = 0;
            var hcolumnstart = -1;
            var hcolumnend = columnstart + columnend;
            var haspinnedcolumn = false;

            if (this.autorowheight) {
                return { start: 0, end: columnstart + columnend };
            }

            if (!hasgroups) {
                for (var j = 0; j < columnstart + columnend; j++) {
                    var rendercolumn = j;

                    if (!haspinnedcolumn) {
                        if (this.columns.records[j].pinned) {
                            haspinnedcolumn = true;
                        }
                    }

                    if (!this.columns.records[j].hidden) {
                        xcolumn += this.columns.records[j].width;
                    }

                    if (xcolumn >= left && hcolumnstart == -1) {
                        hcolumnstart = j;
                    }

                    if (xcolumn > tablewidth + left) {
                        hcolumnend = j
                        break;
                    }
                }
            }

            hcolumnend++;
            if (hcolumnend > columnstart + columnend) {
                hcolumnend = columnstart + columnend;
            }

            if (hcolumnstart == -1 || haspinnedcolumn) {
                hcolumnstart = 0;
            }

            return { start: hcolumnstart, end: hcolumnend };
        },

        _getfirstvisualrow: function () {
            var vScrollInstance = this.vScrollInstance;
            var verticalscrollvalue = vScrollInstance.value;
            var top = parseInt(verticalscrollvalue);

            if (this._pagescache.length == 0) {
                this.dataview.updateview();
                this._loadrows();
            }

            if (this.vScrollBar[0].style.visibility != 'visible') {
                top = 0;
            }

            if (!this.pageable) {
                var pagenum = this._findvisiblerow(top, this._pageviews);

                if (pagenum == -1) {
                    return null;
                }

                if (pagenum != this.dataview.pagenum) {
                    this.dataview.pagenum = pagenum;
                    this.dataview.updateview();
                    this._loadrows();
                }
                else if (!this._pagescache[this.dataview.pagenum]) {
                    this._loadrows();
                }
            }

            var firstvisiblerow = this._findvisiblerow(top, this._pagescache[this.dataview.pagenum]);
            var rowstorender = this._pagescache[this.dataview.pagenum];
            if (rowstorender && rowstorender[0]) {
                return rowstorender[firstvisiblerow];
            }
        },

        _rendervisualrows: function () {
            if (!this.virtualsizeinfo)
                return;

            var vScrollInstance = this.vScrollInstance;
            var hScrollInstance = this.hScrollInstance;
            var verticalscrollvalue = vScrollInstance.value;
            var horizontalscrollvalue = hScrollInstance.value;
            var top = parseInt(verticalscrollvalue);
            var left = parseInt(horizontalscrollvalue);
            var tableheight = this._gettableheight();
            var tablewidth = this._hostwidth != undefined ? this._hostwidth : this.host.width();
            if (this.hScrollBar[0].style.visibility == 'visible') {
                tableheight += 29;
            }
            if (this.scrollmode == 'deferred' && this._newmax != 0) {
                if (top > this._newmax && this._newmax != null) top = this._newmax;
            }

            var scrolling = vScrollInstance.isScrolling() || hScrollInstance.isScrolling() || this._keydown;
            var hasgroups = this.groupable && this.groups.length > 0;
            this.visiblerows = new Array();
            this.hittestinfo = new Array();

            if (this.editcell && this.editrow == undefined) {
                this._hidecelleditor(false);
            }
            if (this.editrow != undefined) {
                this._hideeditors();
            }

            if (this.virtualmode && !this.pageable) {
                this._pagescache = new Array();
            }

            if (this._pagescache.length == 0) {
                this.dataview.updateview();
                this._loadrows();
            }

            if (this.vScrollBar[0].style.visibility == 'hidden') {
                top = 0;
            }

            if (!this.pageable) {
                var pagenum = this._findvisiblerow(top, this._pageviews);

                if (pagenum == -1) {
                    this._clearvisualrows();
                    this._renderemptyrow();
                    this._updaterowdetailsvisibility();
                    return;
                }

                if (pagenum != this.dataview.pagenum) {
                    this.dataview.pagenum = pagenum;
                    this.dataview.updateview();
                    this._loadrows();
                }
                else if (!this._pagescache[this.dataview.pagenum]) {
                    this._loadrows();
                }
            }

            var columnstart = this.groupable && this.groups.length > 0 ? this.groups.length : 0;
            if (!this.columns.records) {
                return;
            }
            var columnend = this.columns.records.length - columnstart;
            var firstvisiblerow = this._findvisiblerow(top, this._pagescache[this.dataview.pagenum]);
            var rowstorender = this._pagescache[this.dataview.pagenum];
            var startindex = firstvisiblerow;
            if (startindex < 0) startindex = 0;

            var emptyheight = 0;
            var renderedrows = 0;
            var renderedheight = 0;
            var tableoffset = 0;
            var pagesize = this.virtualsizeinfo.visiblerecords;
            var groupslength = this.groupable ? this.groups.length : 0;
            var cellclass = this.toTP('jqx-grid-cell') + ' ' + this.toTP('jqx-item');
            if (this.rtl) {
                cellclass += ' ' + this.toTP('jqx-grid-cell-rtl');
            }

            if ((this.autoheight || this.autorowheight) && this.pageable) {
                if (!this.groupable) {
                    pagesize = this.dataview.pagesize;
                }
            }

            if (hasgroups) {
                cellclass = ' ' + this.toTP('jqx-grid-group-cell');
            }

            if (this.isTouchDevice()) {
                cellclass += ' ' + this.toTP('jqx-touch');
            }

            if (this.autorowheight) {
                cellclass += ' jqx-grid-cell-wrap'
            }

            var rowheight = this.rowsheight;
            var altrowindex = startindex;
            var rendercellfunc = this._rendercell;
            var enableselection = true;

            var visualcolumnsindexes = this._getvisualcolumnsindexes(left, tablewidth, columnstart, columnend, hasgroups);
            var hcolumnstart = visualcolumnsindexes.start;
            var hcolumnend = visualcolumnsindexes.end;
            if ((this.autoheight || this.pageable) && this.autorowheight) {
                if (this._pageviews[0]) {
                    this._oldpageviewheight = this._pageviews[0].height;
                }
            }

            if (this.autorowheight) {
                startindex = 0;
            }

            if (startindex >= 0) {
                this._updaterowdetailsvisibility();
                this._startboundindex = rowstorender != null ? rowstorender[startindex].bounddata.boundindex : 0;
                this._startvisibleindex = rowstorender != null ? rowstorender[startindex].bounddata.visibleindex : 0;
                for (var renderindex = 0; renderindex < pagesize && renderedrows < pagesize; renderindex++) {
                    var renderrow = rowstorender != undefined ? rowstorender[startindex + renderindex] : null;

                    if (renderrow == null) {
                        startindex = -renderindex;
                        if (this._pagescache[this.dataview.pagenum + 1]) {
                            rowstorender = this._pagescache[this.dataview.pagenum + 1];
                            this.dataview.pagenum++;
                        }
                        else {
                            var pageviewslength = this._pageviews.length;
                            do {
                                if (this.dataview.pagenum < this._pageviews.length - 1) {
                                    this.dataview.pagenum++;
                                    rowstorender = undefined;
                                    if (this._pageviews[this.dataview.pagenum].height > 0) {
                                        this.dataview.updateview();
                                        this._loadrows();
                                        rowstorender = this._pagescache[this.dataview.pagenum];
                                    }
                                }
                                else {
                                    rowstorender = undefined;
                                    break;
                                }
                            } while (rowstorender == undefined && this.dataview.pagenum < pageviewslength);
                        }

                        if (rowstorender != undefined) {
                            renderrow = rowstorender[startindex + renderindex]
                        }
                    }

                    if (renderrow != null) {
                        if (renderrow.hidden)
                            continue;

                        this._endboundindex = this._startboundindex + renderindex;
                        this._endvisibleindex = this._startvisibleindex + renderindex;
                        if (renderindex == 0) {
                            var topoffset = Math.abs(top - renderrow.top);
                            this.table[0].style.top = -topoffset + 'px';
                            tableoffset = -topoffset;
                        }

                        var tablerow = this.table[0].rows[renderedrows];
                        if (!tablerow) continue;
                        if (parseInt(tablerow.style.height) != renderrow.height) {
                            tablerow.style.height = parseInt(renderrow.height) + 'px';
                        }

                        renderedheight += renderrow.height;
                        var hasdetails = this.rowdetails && renderrow.rowdetails;
                        var showdetails = !renderrow.rowdetailshidden;
                        if (hasdetails && showdetails) {
                            tablerow.style.height = parseInt(renderrow.height - renderrow.rowdetailsheight) + 'px';
                            pagesize++;
                        }

                        var selected = this._isrowselected(enableselection, renderrow);
                        for (var cindex = hcolumnstart; cindex < hcolumnend; cindex++) {
                            var rendercolumn = cindex;
                            this._rendervisualcell(rendercellfunc, cellclass, selected, hasdetails, showdetails, hasgroups, groupslength, tablerow, renderrow, rendercolumn, renderedrows, scrolling);
                        }

                        if (renderrow.group != undefined && this._rendergroup) {
                            this._rendergroup(groupslength, tablerow, renderrow, columnstart, columnend, renderedrows, tablewidth);
                        }

                        if (this.autorowheight && (this.autoheight || this.pageable)) {
                            var rowheight = this.rowsheight;
                            for (var cindex = hcolumnstart; cindex < hcolumnend; cindex++) {
                                if (this.editable && this.editcell && this.editcell.column == this.columns.records[cindex].datafield && this.editcell.row == this.getboundindex(renderrow)) {
                                    continue;
                                }

                                if (tablerow.cells[cindex].firstChild) {
                                    rowheight = Math.max(rowheight, 8 + parseInt(tablerow.cells[cindex].firstChild.offsetHeight));
                                }
                            }
                            tablerow.style.height = parseInt(rowheight) + 'px';
                            this.heights[this._startboundindex + renderindex] = rowheight;
                            if (hasdetails && showdetails) {
                                rowheight += renderrow.rowdetailsheight;
                            }
                            renderrow.height = rowheight;
                        }

                        this.visiblerows[this.visiblerows.length] = renderrow;
                        this.hittestinfo[this.hittestinfo.length] = { row: renderrow, visualrow: tablerow, details: false };

                        if (hasdetails && showdetails) {
                            renderedrows++;
                            var tablerow = this.table[0].rows[renderedrows];
                            this._renderrowdetails(cellclass, tablerow, renderrow, columnstart, columnend, renderedrows);

                            this.visiblerows[this.visiblerows.length] = renderrow;
                            this.hittestinfo[this.hittestinfo.length] = { row: renderrow, visualrow: tablerow, details: true };
                        }

                        if (!this.autorowheight) {
                            if (renderedheight + tableoffset >= tableheight)
                                break;
                        }
                    }
                    else {
                        cansetheight = true;
                        this._clearvisualrow(left, hasgroups, renderedrows, columnstart, columnend);
                        if (renderedheight + emptyheight + tableoffset <= tableheight) {
                            emptyheight += rowheight;
                        }
                    }
                    renderedrows++;
                }
                this._horizontalvalue = left;

                if (emptyheight > 0) {
                    if (this.vScrollBar[0].style.visibility == 'visible') {
                        var tabletop = parseInt(this.table.css('top'));
                        var lastpageview = this._pageviews[this._pageviews.length - 1];
                        var oldmax = vScrollInstance.max;
                        var newmax = lastpageview.top + lastpageview.height - tableheight; //tabletop + this.visiblerows[this.visiblerows.length - 1].top + tableheight; //offset + vScrollInstance.max - emptyheight;
                        if (this.hScrollBar.css('visibility') == 'visible') {
                            newmax += this.scrollbarsize + 20;
                        }

                        if (oldmax != newmax && !this.autorowheight) {
                            if (newmax >= 0) {
                                if (this.scrollmode != 'deferred') {
                                    vScrollInstance.max = newmax;
                                    vScrollInstance.setPosition(vScrollInstance.max);
                                }
                                else {
                                    if (this._newmax != newmax) {
                                        this._newmax = newmax;
                                        this._rendervisualrows();
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if ((this.autoheight || this.pageable) && this.autorowheight) {
                this._pagescache = new Array();
                var y = 0;
                var height = 0;
                for (var i = 0; i < this.visiblerows.length; i++) {
                    var row = this.visiblerows[i];
                    row.top = y;
                    y += row.height;
                    height += row.height;
                    var hasdetails = this.rowdetails && row.rowdetails;
                    var showdetails = !row.rowdetailshidden;
                    var tablerow = this.table[0].rows[i];
                    if (hasdetails && showdetails) {
                        i++;
                    }

                    for (var cindex = hcolumnstart; cindex < hcolumnend; cindex++) {
                        var column = this.columns.records[cindex];
                        if (!column.hidden) {
                            if (!column.cellsrenderer) {
                                var cell = tablerow.cells[cindex];
                                var topMargin = 0;
                                if (cell.firstChild) {
                                    var topMargin = (row.height - parseInt(cell.firstChild.offsetHeight) - 8) / 2;
                                    if (hasdetails && showdetails) {
                                        var topMargin = (row.height - row.rowdetailsheight - $(cell.firstChild).height() - 8) / 2;
                                    }
                                }
                                else {
                                    var topMargin = (row.height - parseInt($(cell).height()) - 8) / 2;
                                }

                                if (topMargin >= 0) {
                                    topMargin = parseInt(topMargin) + 4;
                                    if (cell.firstChild) {
                                        if (cell.firstChild.className.indexOf('jqx-grid-groups-row') == -1) {
                                            if (column.columntype != 'checkbox' && column.columntype != 'button') {
                                                if (this.editable && this.editcell && this.editcell.column == column.datafield && this.editcell.row == this.getboundindex(row))
                                                    continue;

                                                cell.firstChild.style.marginTop = topMargin + 'px';
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (this._pageviews[0]) {
                    this._pageviews[0].height = height; //this.table.height();
                }
                this._arrange();
            }
            this._renderemptyrow();
        },

        _hideemptyrow: function()
        {
            if (!this.showemptyrow) return;
            if (!this.table) return;
            if (!this.table[0].rows) return;

            var row = this.table[0].rows[0];
            if (!row) return;
            var rendered = false;
            for (var i = 0; i < row.cells.length; i++) {
                var cell = $(row.cells[i]);
                if (cell.css('display') != 'none' && !rendered) {
                    if (cell.width() == this.host.width() || cell.text() == this.gridlocalization.emptydatastring) {
                        cell[0].checkbox = null;
                        cell[0].button = null;
                        rendered = true;
                        cell[0].innerHTML = "";
                    }
                }
            }     
        },

        _renderemptyrow: function () {
            if (this._loading) {
                return;
            }

            if (this.dataview.records.length == 0 && this.showemptyrow) {
                var rendered = false;
                var cellclass = this.toTP('jqx-grid-cell');

                if (this.table && this.table.length > 0 && this.table[0].rows && this.table[0].rows.length > 0) {
                    var row = this.table[0].rows[0];
                    this.table[0].style.top = '0px';
                    for (var i = 0; i < row.cells.length; i++) {
                        var cell = $(row.cells[i]);
                        if (cell.css('display') != 'none' && !rendered) {
                            cell[0].checkbox = null;
                            cell[0].button = null;
                            cell[0].className = cellclass;
                            rendered = true;
                            cell[0].innerHTML = "";
                            var span = $("<span style='white-space: nowrap; float: left; margin-left: 50%; position: relative;'></span>");
                            span.text(this.gridlocalization.emptydatastring);
                            cell.append(span);
                            var hscroll = 0;
                            if (!this.oldhscroll) {
                                hscroll = parseInt(this.table[0].style.marginLeft);
                                if (this.rtl) {
                                    cell.css('z-index', 999);
                                    cell.css('overflow', 'visible');
                                }
                            }

                            span.css('left', -hscroll - (span.width() / 2));
                            span.css('top', this._gettableheight() / 2 - span.height() / 2);
                            if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                                span.css('margin-left', '0px');
                                span.css('left', this.host.width() / 2 - span.width() / 2);
                            }
                            var top = Math.abs(parseInt(this.table[0].style.top));
                            if (isNaN(top)) top = 0;
                            $(row).height(this._gettableheight() + top);
                            cell.css('margin-left', '0px');
                            cell.width(this.host.width());
                            if (this.table.width() < this.host.width()) {
                                this.table.width(this.host.width());
                            }
                        }
                        cell.addClass(this.toThemeProperty('jqx-grid-empty-cell'));
                    }
                }
            }
        },

        _clearvisualrows: function () {
            var pagesize = this.virtualsizeinfo.visiblerecords;
            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var left = parseInt(horizontalscrollvalue);
            var hasgroups = this.groupable && this.groups.length > 0;
            if (!this.columns.records)
                return;

            for (var renderindex = 0; renderindex < pagesize; renderindex++) {
                this._clearvisualrow(left, hasgroups, renderindex, 0, this.columns.records.length);
            }
        },

        _iscellselected: function (enableselection, row, column) {
            var selected = false;
            var boundindexoffset = 0;
            if (this.virtualmode && this.pageable && this.groupable) {
                if (this.groups.length > 0) {
                    boundindexoffset = this.dataview.pagesize * this.dataview.pagenum;
                }
            }

            if (enableselection && row.bounddata != null) {
                if (this.selectionmode != "singlerow") {
                    if (this.dataview.filters.length > 0) {
                        if (!this.virtualmode) {
                            for (var obj in this.selectedcells) {
                                if (obj == boundindexoffset + row.bounddata.dataindex + "_" + column) {
                                    selected = true;
                                }
                            }
                        }
                        else {
                            for (var obj in this.selectedcells) {
                                if (obj == boundindexoffset + row.bounddata.boundindex + "_" + column) {
                                    selected = true;
                                }
                            }
                        }
                    }
                    else {
                        for (var obj in this.selectedcells) {
                            if (obj == boundindexoffset + row.bounddata.boundindex + "_" + column) {
                                selected = true;
                                break;
                            }
                        }
                    }
                }
                else {
                    if (this.dataview.filters.length > 0) {
                        if (!this.virtualmode) {
                            for (var obj in this.selectedcells) {
                                if (obj == boundindexoffset + row.bounddata.dataindex + "_" + column)
                                {
                                    selected = true;
                                    break;
                                }
                            }
                        }
                        else {
                            for (var obj in this.selectedcells) {
                                if (obj == boundindexoffset + row.bounddata.boundindex + "_" + column) {
                                    selected = true;
                                    break;
                                }
                            }
                        }
                    }
                    else {
                        for (var obj in this.selectedcells) {
                            if (obj == boundindexoffset + row.bounddata.boundindex == this.selectedrowindex)
                            {
                                selected = true;
                                break;
                            }
                        }
                    }
                }
            }

            return selected;
        },

        _isrowselected: function (enableselection, row) {
            var selected = false;
            var boundindexoffset = 0;
            if (this.virtualmode && this.pageable && this.groupable) {
                if (this.groups.length > 0) {
                    boundindexoffset = this.dataview.pagesize * this.dataview.pagenum;
                }
            }
            
            if (enableselection && row.bounddata != null) {
                if (this.selectionmode != "singlerow") {
                    if (this.dataview.filters.length > 0) {
                        if (!this.virtualmode) {
                            if (this.selectedrowindexes.indexOf(boundindexoffset + row.bounddata.dataindex) != -1) {
                                selected = true;
                            }
                        }
                        else {
                            if (this.selectedrowindexes.indexOf(boundindexoffset + row.bounddata.boundindex) != -1) {
                                selected = true;
                            }
                        }
                    }
                    else {
                        if (this.selectedrowindexes.indexOf(boundindexoffset + row.bounddata.boundindex) != -1) {
                            selected = true;
                        }
                    }
                }
                else {
                    if (this.dataview.filters.length > 0) {
                        if (!this.virtualmode) {
                            if (this.selectedrowindexes.indexOf(boundindexoffset + row.bounddata.dataindex) != -1) {
                                selected = true;
                            }
                        }
                        else {
                            if (this.selectedrowindexes.indexOf(boundindexoffset + row.bounddata.boundindex) != -1) {
                                selected = true;
                            }
                        }
                    }
                    else {
                        if (boundindexoffset + row.bounddata.boundindex == this.selectedrowindex) {
                            selected = true;
                        }
                    }
                }
            }

            return selected;
        },

        _rendervisualcell: function (rendercellfunc, cellclass, selected, hasdetails, showdetails, hasgroups, groupslength, tablerow, renderrow, rendercolumn, renderedrows, scrolling) {
            var cell = null;
            var column = this.columns.records[rendercolumn];
            if (column.hidden) {
                var tablecell = tablerow.cells[rendercolumn];
                tablecell.innerHTML = "";
                return;
            }

            cellvalue = this._getcellvalue(column, renderrow);
            var tablecell = tablerow.cells[rendercolumn];
            var classname = cellclass;

            if (this.selectionmode.indexOf('cell') != -1) {
                if (this.dataview.filters.length > 0) {
                    if (this.selectedcells[renderrow.bounddata.dataindex + '_' + column.datafield]) {
                        selected = true;
                    }
                    else {
                        selected = false;
                    }
                }
                else {
                    if (this.selectedcells[renderrow.boundindex + '_' + column.datafield]) {
                        selected = true;
                    }
                    else {
                        selected = false;
                    }
                }
                if (this.editcell) {
                    if (this.editcell.row === renderrow.boundindex && this.editcell.column === column.datafield) {
                        if (column.columntype !== "checkbox") {
                            selected = false;
                        }
                    }
                }
                if (this.virtualmode) {
                    selected = this._iscellselected(true, renderrow, column.datafield);
                }
            }

            if (column.cellclassname != '' && column.cellclassname) {
                if (typeof column.cellclassname == "string") {
                    classname += ' ' + column.cellclassname;
                }
                else {
                    var customclassname = column.cellclassname(this.getboundindex(renderrow), column.datafield, cellvalue, renderrow.bounddata);
                    if (customclassname) {
                        classname += ' ' + customclassname;
                    }
                }
            }
            
            var issortcolumn = this.showsortcolumnbackground && this.sortcolumn && column.displayfield == this.sortcolumn;
            if (issortcolumn) {
                classname += ' ' + this.toTP('jqx-grid-cell-sort');
            }

            if (column.filter && this.showfiltercolumnbackground) {
                classname += ' ' + this.toTP('jqx-grid-cell-filter');
            }

            if ((column.pinned && this.showpinnedcolumnbackground) || column.grouped) {
                if (hasgroups) {
                    classname += ' ' + this.toTP('jqx-grid-cell-pinned');
                }
                else {
                    classname += ' ' + this.toTP('jqx-grid-cell-pinned');
                }
            }

            if (this.altrows && renderrow.group == undefined) {
                var altrowindex = renderrow.visibleindex;
                if (altrowindex >= this.altstart) {
                    if ((this.altstart + altrowindex) % (1 + this.altstep) == 0) {
                        if (!issortcolumn) {
                            classname += ' ' + this.toTP('jqx-grid-cell-alt');
                        }
                        else classname += ' ' + this.toTP('jqx-grid-cell-sort-alt');

                        if (column.filter && this.showfiltercolumnbackground) {
                            classname += ' ' + this.toTP('jqx-grid-cell-filter-alt');
                        }

                        if (column.pinned && this.showpinnedcolumnbackground) {
                            classname += ' ' + this.toTP('jqx-grid-cell-pinned-alt');
                        }
                    }
                }
            }

            if (rendercolumn <= groupslength) {
                if (hasgroups || this.rowdetails) {
                    var $tablecell = $(tablecell);
                    var cellwidth = this.columns.records[rendercolumn].width;

                    if (tablecell.style.width != parseInt(cellwidth) + 'px') {
                        $tablecell.width(cellwidth);
                    }
                }
            }
            else {
                if (hasgroups || this.rowdetails) {
                    if (this._hiddencolumns) {
                        var $tablecell = $(tablecell);
                        var cellwidth = this.columns.records[rendercolumn].width;

                        if (parseInt(tablecell.style.width) != cellwidth) {
                            $tablecell.width(cellwidth);
                        }
                    }
                }
            }

            var selectedstate = true;
            if (this.rowdetails && hasdetails) {
                if (showdetails && !hasgroups) {
                    classname += ' ' + this.toTP('jqx-grid-details-cell');
                }
                else if (hasgroups) {
                    classname += ' ' + this.toTP('jqx-grid-group-details-cell');
                }

                if (this.showrowdetailscolumn) {
                    if (!this.rtl) {
                        if (renderrow.group == undefined && rendercolumn == groupslength) {
                            var iconClassName = this.toThemeProperty('jqx-icon-arrow-down');
                            if (showdetails) {
                                classname += ' ' + this.toTP('jqx-grid-group-expand');
                                classname += ' ' + iconClassName;
                            }
                            else {
                                classname += ' ' + this.toTP('jqx-grid-group-collapse');
                                var iconClassName = this.toThemeProperty('jqx-icon-arrow-right');
                                classname += ' ' + iconClassName;
                            }
                            selectedstate = false;
                            tablecell.title = "";
                            tablecell.innerHTML = "";
                            if (tablecell.className != classname) {
                                tablecell.className = classname;
                            }
                            return;
                        }
                    }
                    else {
                        if (renderrow.group == undefined && rendercolumn == tablerow.cells.length - groupslength - 1) {
                            var iconClassName = this.toThemeProperty('jqx-icon-arrow-down');
                            if (showdetails) {
                                classname += ' ' + this.toTP('jqx-grid-group-expand-rtl');
                                classname += ' ' + iconClassName;
                            }
                            else {
                                classname += ' ' + this.toTP('jqx-grid-group-collapse-rtl');
                                var iconClassName = this.toThemeProperty('jqx-icon-arrow-left');
                                classname += ' ' + iconClassName;
                            }
                            selectedstate = false;
                            tablecell.title = "";
                            tablecell.innerHTML = "";
                            if (tablecell.className != classname) {
                                tablecell.className = classname;
                            }
                            return;
                        }
                    }
                }
            }

            if (selected && selectedstate && rendercolumn >= groupslength) {
                classname += ' ' + this.toTP('jqx-grid-cell-selected');
                classname += ' ' + this.toTP('jqx-fill-state-pressed');
            }

            if (tablecell.className != classname) {
                tablecell.className = classname;
            }

            if (renderrow.group != undefined) {
                cellvalue = "";
                tablecell.title = "";
                tablecell.innerHTML = "";

                return;
            }
            rendercellfunc(this, column, renderrow, cellvalue, tablecell, scrolling);
        },

        _rendercell: function (me, column, row, value, tablecell, scrolling) {
            var lookupkey = value + "_" + column.visibleindex;
            //row.uniqueid + "_" + column.visibleindex;
            if (column.columntype == "number" || column.cellsrenderer != null) {
                var lookupkey = row.uniqueid + "_" + column.visibleindex;
            }

            if (me.editcell && me.editrow == undefined) {
                if (me.editmode == "selectedrow" && column.editable && me.editable) {
                    if (me.editcell.row == me.getboundindex(row)) {
                        if (me._showcelleditor) {
                            if (!me.hScrollInstance.isScrolling() && !me.vScrollInstance.isScrolling()) {
                                me._showcelleditor(me.editcell.row, column, tablecell, me.editcell.init);
                            }
                            else {
                                me._showcelleditor(me.editcell.row, column, tablecell, me.editcell.init, false);
                            }
                            return;
                        }
                    }
                }
                else {
                    if (me.editcell.row == me.getboundindex(row) && me.editcell.column == column.datafield) {
                        me.editcell.element = tablecell;
                        if (me.editcell.editing) {
                            if (me._showcelleditor) {
                                if (!me.hScrollInstance.isScrolling() && !me.vScrollInstance.isScrolling()) {
                                    me._showcelleditor(me.editcell.row, column, me.editcell.element, me.editcell.init);
                                }
                                else {
                                    me._showcelleditor(me.editcell.row, column, me.editcell.element, me.editcell.init, false);
                                }
                                return;
                            }
                        }
                    }
                }
            }

            var defaultcellsrenderer = me._defaultcellsrenderer(value, column);

            var cachedcell = me._cellscache[lookupkey];
            //   var ie10 = me._browser == undefined ? me._isIE10() : me._browser;
            if (cachedcell) {
                if (column.columntype == "inline") {
                    me._renderinlinecell(me, tablecell, column, row, value);
                    if (column.cellsrenderer != null) {
                        var newvalue = column.cellsrenderer(me.getboundindex(row), column.datafield, value, defaultcellsrenderer, column.getcolumnproperties(), row.bounddata);
                        if (newvalue != undefined) {
                            tablecell.innerHTML = newvalue;
                        }
                    } return;
                }
                else if (column.columntype == "checkbox") {
                    if (me.host.jqxCheckBox) {
                        if (value === "") value = null;
                        var empty = tablecell.innerHTML.toString().length == 0;
                        if (tablecell.checkbox && !me.groupable && !empty) {
                            tablecell.checkboxrow = me.getboundindex(row);
                            if (value == "") value = false;
                            if (value == "1") value = true;
                            if (value == "0") value = false;
                            if (value == 1) value = true;
                            if (value == 0) value = false;
                            if (value == 'true') value = true;
                            if (value == 'false') value = false;
                            if (value == null && !column.threestatecheckbox) {
                                value = false;
                            }
                            if (column.checkboxcolumn) {
                                value = false;
                                if (me.dataview.filters.length > 0 && !me.virtualmode) {
                                    if (me.selectedrowindexes.indexOf(row.bounddata.dataindex) != -1) {
                                        value = true;
                                    }
                                }
                                else {
                                    if (me.selectedrowindexes.indexOf(row.bounddata.boundindex) != -1) {
                                        value = true;
                                    }
                                }
                            }
                            if (tablecell.checkboxinstance) {
                                tablecell.checkboxinstance._setState(value);
                            }
                            else {
                                tablecell.checkbox.jqxCheckBox('_setState', value);
                            }
                        }
                        else {
                            me._rendercheckboxcell(me, tablecell, column, row, value);
                        }
                        if (column.cellsrenderer != null) {
                            var newvalue = column.cellsrenderer(me.getboundindex(row), column.datafield, value, defaultcellsrenderer, column.getcolumnproperties(), row.bounddata);
                            if (newvalue != undefined) {
                                tablecell.innerHTML = newvalue;
                            }
                        }

                        return;
                    }
                }
                else if (column.columntype == "button") {
                    if (me.host.jqxButton) {
                        if (value == "") value = false;
                        if (column.cellsrenderer != null) {
                            value = column.cellsrenderer(me.getboundindex(row), column.datafield, value, defaultcellsrenderer, column.getcolumnproperties(), row.bounddata);
                        }

                        if (tablecell.innerHTML == "") {
                            tablecell.buttonrow = me.getboundindex(row);
                            tablecell.button = null;
                            me._renderbuttoncell(me, tablecell, column, row, value);
                        }

                        if (tablecell.button && !me.groupable) {
                            tablecell.buttonrow = me.getboundindex(row);
                            tablecell.button.val(value);
                        }
                        else {
                            me._renderbuttoncell(me, tablecell, column, row, value);
                        }
                        return;
                    }
                }

                var cellelement = cachedcell.element;

                if (column.cellsrenderer != null || (tablecell.childNodes && tablecell.childNodes.length == 0) || me.groupable || me.rowdetails) {
                    if (tablecell.innerHTML != cellelement) {
                        tablecell.innerHTML = cellelement;
                    }
                }
                else {
                    if (tablecell.innerHTML.indexOf('editor') >= 0) {
                        tablecell.innerHTML = cellelement;
                    }
                    else if (scrolling) {
                        var textStartIndex = cellelement.indexOf('>');
                        var textEndIndex = cellelement.indexOf('</');
                        var text = cellelement.substring(textStartIndex + 1, textEndIndex);
                        var child = tablecell.childNodes[0];
                        if (text.indexOf('>') >= 0) {
                            tablecell.innerHTML = cellelement;
                        }
                        else {
                            if (child.childNodes[0]) {
                                if (text != child.childNodes[0].nodeValue) {
                                    if (text.indexOf('&') >= 0) {
                                        tablecell.innerHTML = cellelement;
                                    }
                                    else {
                                        child.childNodes[0].nodeValue = text;
                                    }
                                    //      var newChild = document.createTextNode(text);
                                    //      child.replaceChild(newChild, child.childNodes[0]);
                                }
                            }
                            else {
                                var newChild = document.createTextNode(text);
                                child.appendChild(newChild);
                            }
                        }
                    }
                    else {
                        if (tablecell.innerHTML != cellelement) {
                            tablecell.innerHTML = cellelement;
                        }
                    }
                }

                if (me.enabletooltips && column.enabletooltips) {
                    tablecell.title = cachedcell.title;
                }
                return;
            }

            if (column.columntype == "checkbox") {
                me._rendercheckboxcell(me, tablecell, column, row, value);
                me._cellscache[lookupkey] = { element: "", title: value };
                if (me.enabletooltips && column.enabletooltips) {
                    tablecell.title = value;
                }
                return;
            }
            else if (column.columntype == "button") {
                if (column.cellsrenderer != null) {
                    value = column.cellsrenderer(me.getboundindex(row), column.datafield, value, defaultcellsrenderer, column.getcolumnproperties(), row.bounddata);
                }
                me._renderbuttoncell(me, tablecell, column, row, value);
                me._cellscache[lookupkey] = { element: "", title: value };
                if (me.enabletooltips && column.enabletooltips) {
                    tablecell.title = value;
                }
                return;
            }
            else if (column.columntype == "number") {
                value = row.visibleindex;
            }
            else if (column.columntype == "inline") {
                me._renderinlinecell(me, tablecell, column, row, value);
                me._cellscache[lookupkey] = { element: "", title: value };
                if (me.enabletooltips && column.enabletooltips) {
                    tablecell.title = value;
                }
                return;
            }

            var cellelement = null;
            if (column.cellsrenderer != null) {
                cellelement = column.cellsrenderer(me.getboundindex(row), column.datafield, value, defaultcellsrenderer, column.getcolumnproperties(), row.bounddata);
            }
            else {
                cellelement = defaultcellsrenderer;
            }

            if (cellelement == null) {
                cellelement = defaultcellsrenderer;
            }
            var formattedValue = value;
            if (me.enabletooltips && column.enabletooltips) {
               if (column.cellsformat != '') {
                    if ($.jqx.dataFormat) {
                        if ($.jqx.dataFormat.isDate(value)) {
                            formattedValue = $.jqx.dataFormat.formatdate(formattedValue, column.cellsformat, this.gridlocalization);
                        }
                        else if ($.jqx.dataFormat.isNumber(value)) {
                            formattedValue = $.jqx.dataFormat.formatnumber(formattedValue, column.cellsformat, this.gridlocalization);
                        }
                    }
                }
                tablecell.title = formattedValue;
            }

            if (me.WinJS) {
                $(tablecell).html(cellelement);
            }
            else {
                tablecell.innerHTML = cellelement;
            }

            me._cellscache[lookupkey] = { element: tablecell.innerHTML, title: formattedValue };
            return true;
        },

        _isIE10: function () {
            if (this._browser == undefined) {
                var browserInfo = $.jqx.utilities.getBrowser();
                if (browserInfo.browser == 'msie' && parseInt(browserInfo.version) > 9)
                    this._browser = true;
                else {
                    this._browser = false;
                    if (browserInfo.browser == 'msie') {
                        var txt = "Browser CodeName: " + navigator.appCodeName + "";
                        txt += "Browser Name: " + navigator.appName + "";
                        txt += "Browser Version: " + navigator.appVersion + "";
                        txt += "Platform: " + navigator.platform + "";
                        txt += "User-agent header: " + navigator.userAgent + "";
                        if (txt.indexOf('Zune 4.7') != -1) {
                            this._browser = true;
                        }
                    }
                }
            }
            return this._browser;
        },

        _renderinlinecell: function (me, tablecell, column, row, value) {
            var $tablecell = $(tablecell); 
            tablecell.innerHTML = '<div style="position: absolute;"></div>';
        },

        _rendercheckboxcell: function (me, tablecell, column, row, value) {
            if (me.host.jqxCheckBox) {
                var $tablecell = $(tablecell);
                if (value === "") {
                    if (column.threestatecheckbox) {
                        value = null;
                    }
                    else {
                        value = false;
                    }
                }
                if (value == "1") value = true;
                if (value == "0") value = false;
                if (value == 1) value = true;
                if (value == 0) value = false;
                if (value == 'true') value = true;
                if (value == 'false') value = false;
                if (column.checkboxcolumn) {
                    value = false;
                    if (this.dataview.filters.length > 0) {
                        if (this.selectedrowindexes.indexOf(row.bounddata.dataindex) != -1) {
                            value = true;
                        }
                    }
                    else {
                        if (this.selectedrowindexes.indexOf(row.bounddata.boundindex) != -1) {
                            value = true;
                        }
                    }
                }

                if ($tablecell.find('.jqx-checkbox').length == 0) {
                    tablecell.innerHTML = '<div style="position: absolute; top: 50%; left: 50%; margin-top: -7px; margin-left: -10px;"></div>';
                    $(tablecell.firstChild).jqxCheckBox({ _canFocus: false, hasInput: false, hasThreeStates: column.threestatecheckbox, enableContainerClick: false, animationShowDelay: 0, animationHideDelay: 0, locked: true, theme: me.theme, checked: value });

                    if (this.editable && column.editable) {
                        $(tablecell.firstChild).jqxCheckBox({ locked: false });
                    }
                    if (column.checkboxcolumn) {
                        $(tablecell.firstChild).jqxCheckBox({ locked: false });
                    }

                    tablecell.checkbox = $(tablecell.firstChild);
                    tablecell.checkboxinstance = tablecell.checkbox.data().jqxCheckBox.instance;
                    tablecell.checkboxrow = row.boundindex;
                    if (this.dataview.filters.length > 0) {
                        var boundindex = row.bounddata.dataindex;
                        tablecell.checkboxrow = boundindex;
                    }
                    var checkinstance = $.data(tablecell.firstChild, "jqxCheckBox").instance;
                    checkinstance.updated = function (event, checked, oldchecked) {
                        if (column.editable) {
                            var totalrows = me.table[0].rows.length;
                            var columnindex = me._getcolumnindex(column.datafield);

                            if (me.editrow == undefined) {
                                if (column.cellbeginedit) {
                                    var beginEdit = column.cellbeginedit(tablecell.checkboxrow, column.datafield, column.columntype, !checked);
                                    if (beginEdit == false) {
                                        me.setcellvalue(tablecell.checkboxrow, column.datafield, !checked, true);
                                        return;
                                    }
                                }

                                if (me.editmode !== "selectedrow") {
                                    for (var currentCheckbox = 0; currentCheckbox < totalrows; currentCheckbox++) {
                                        var checkboxcell = me.table[0].rows[currentCheckbox].cells[columnindex].firstChild;
                                        if (checkboxcell) {
                                            $(checkboxcell).jqxCheckBox('destroy');
                                        }
                                    }
                                }

                                if (me.editcell && me.editcell.validated == false) {
                                    me.setcellvalue(tablecell.checkboxrow, column.datafield, !checked, true);
                                }
                                else {
                                    if (me.editmode !== "selectedrow" || me.editcell == null) {
                                        me._raiseEvent(17, { rowindex: tablecell.checkboxrow, datafield: column.datafield, value: oldchecked, columntype: column.columntype });
                                        me.setcellvalue(tablecell.checkboxrow, column.datafield, checked, true);
                                        me._raiseEvent(18, { rowindex: tablecell.checkboxrow, datafield: column.datafield, oldvalue: oldchecked, value: checked, columntype: column.columntype });
                                    }
                                    else {
                                        me.setcellvalue(tablecell.checkboxrow, column.datafield, checked, false, false);
                                    }
                                }
                            }
                        }
                        else if (column.checkboxcolumn) {
                            if (me.editcell) {
                                me.endcelledit(me.editcell.row, me.editcell.column, false, true);
                            }
                            if (checked) {
                                me.selectrow(tablecell.checkboxrow);
                            }
                            else {
                                me.unselectrow(tablecell.checkboxrow);
                            }
                            if (me.autosavestate) {
                                if (me.savestate) me.savestate();
                            }
                        }
                    }
                }
                else {
                    tablecell.checkboxrow = row.boundindex;
                    if (this.dataview.filters.length > 0) {
                        boundindex = row.bounddata.dataindex;
                        tablecell.checkboxrow = boundindex;
                    }
                    $(tablecell.firstChild).jqxCheckBox('_setState', value);
                }
            }
        },

        _renderbuttoncell: function (me, tablecell, column, row, value) {
            if (me.host.jqxButton) {
                var $tablecell = $(tablecell);
                if (value == "") value = false;
                if ($tablecell.find('.jqx-button').length == 0) {
                    tablecell.innerHTML = '<input type="button" style="opacity: 0.99; position: absolute; top: 0%; left: 0%; padding: 0px; margin-top: 2px; margin-left: 2px;"/>';
                    $(tablecell.firstChild).val(value);
                    $(tablecell.firstChild).attr("hideFocus", "true");
                    $(tablecell.firstChild).jqxButton({ theme: me.theme, height: me.rowsheight - 4, width: column.width - 4 });
                    tablecell.button = $(tablecell.firstChild);
                    tablecell.buttonrow = me.getboundindex(row);
                    var isTouch = this.isTouchDevice();
                    if (isTouch) {
                        var eventname = $.jqx.mobile.getTouchEventName('touchend');
                        me.addHandler($(tablecell.firstChild), eventname, function (event) {
                            if (column.buttonclick) {
                                column.buttonclick(tablecell.buttonrow, event);
                            }
                        });
                    }
                    else {
                        me.addHandler($(tablecell.firstChild), 'click', function (event) {
                            if (column.buttonclick) {
                                column.buttonclick(tablecell.buttonrow, event);
                            }
                        });
                    }
                }
                else {
                    tablecell.buttonrow = me.getboundindex(row);
                    $(tablecell.firstChild).val(value);
                }
            }
        },

        _clearvisualrow: function (left, hasgroups, renderedrows, columnstart, columnend) {
            var cellclass = this.toTP('jqx-grid-cell');
            if (hasgroups) {
                cellclass = ' ' + this.toTP('jqx-grid-group-cell');
            }
            cellclass += ' ' + this.toTP('jqx-grid-cleared-cell');
            var rows = this.table[0].rows;
            for (var j = 0; j < columnstart + columnend; j++) {
                if (rows[renderedrows]) {
                    var tablecell = rows[renderedrows].cells[j];
                    if (tablecell.className != cellclass) {
                        tablecell.className = cellclass;
                    }
                    var columnrecord = this.columns.records[j];
                    if (this._horizontalvalue != left && !columnrecord.pinned) {
                        //      $(tablecell).css('margin-left', -left);
                        if (this.oldhscroll == true) {
                            var margin = -left;
                            tablecell.style.marginLeft = -left + 'px';
                        }
                    }
                    var cellwidth = columnrecord.width;
                    if (cellwidth < columnrecord.minwidth) cellwidth = columnrecord.minwidth;
                    if (cellwidth > columnrecord.maxwidth) cellwidth = columnrecord.maxwidth;

                    if (parseInt(tablecell.style.width) != cellwidth) {
                        if (cellwidth != "auto") {
                            $(tablecell)[0].style.width = cellwidth + 'px';
                        }
                        else {
                            $(tablecell)[0].style.width = cellwidth;
                        }
                    }
                    if (tablecell.title != "") {
                        tablecell.title = "";
                    }
                    if (tablecell.innerHTML != "") {
                        tablecell.innerHTML = "";
                    }
                }
            }
            if (rows[renderedrows]) {
                if (parseInt(rows[renderedrows].style.height) != this.rowsheight) {
                    rows[renderedrows].style.height = parseInt(this.rowsheight) + 'px';
                }
            }
        },

        _findgroupstate: function (uniqueid) {
            var group = this._findgroup(uniqueid);
            if (group == null) {
                return false;
            }
            return group.expanded;
        },

        _findgroup: function (uniqueid) {
            var group = null;

            if (this.expandedgroups[uniqueid])
                return this.expandedgroups[uniqueid];

            return group;
        },

        _clearcaches: function () {
            this._columnsbydatafield = new Array();
            this._pagescache = new Array();
            this._pageviews = new Array();
            this._cellscache = new Array();
            this.heights = new Array();
            this.hiddens = new Array();
            this.hiddenboundrows = new Array();
            this.heightboundrows = new Array();
            this.detailboundrows = new Array();
            this.details = new Array();
            this.expandedgroups = new Array();
            this._rowdetailscache = new Array();
            this._rowdetailselementscache = new Array();
            if ($.jqx.dataFormat) {
                $.jqx.dataFormat.cleardatescache();
            }
            this.tableheight = null;
        },

        _getColumnText: function (datafield) {
            if (this._columnsbydatafield == undefined) {
                this._columnsbydatafield = new Array();
            }

            if (this._columnsbydatafield[datafield])
                return this._columnsbydatafield[datafield];

            var columnname = datafield;
            var column = null;
            $.each(this.columns.records, function () {
                if (this.datafield == datafield) {
                    columnname = this.text;
                    column = this;
                    return false;
                }
            });

            this._columnsbydatafield[datafield] = { label: columnname, column: column };
            return this._columnsbydatafield[datafield];
        },

        _getcolumnbydatafield: function (datafield) {
            if (this.__columnsbydatafield == undefined) {
                this.__columnsbydatafield = new Array();
            }

            if (this.__columnsbydatafield[datafield])
                return this.__columnsbydatafield[datafield];

            var columnname = datafield;
            var column = null;
            $.each(this.columns.records, function () {
                if (this.datafield == datafield || this.displayfield == datafield) {
                    columnname = this.text;
                    column = this;
                    return false;
                }
            });

            this.__columnsbydatafield[datafield] = column;
            return this.__columnsbydatafield[datafield];
        },

        isscrollingvertically: function () {
            var isscrolling = (this.vScrollBar.jqxScrollBar('isScrolling'))
            return isscrolling;
        },

        _renderrowdetails: function (cellclass, tablerow, renderrow, columnstart, columnend, renderedrows) {
            if (tablerow == undefined)
                return;

            var $tablerow = $(tablerow);
            var cellindex = 0;
            var indent = this.rowdetails && this.showrowdetailscolumn ? (1 + this.groups.length) * this.groupindentwidth : (this.groups.length) * this.groupindentwidth;
            if (this.groupable && this.groups.length > 0) {
                for (var detailsIndex = 0; detailsIndex <= columnend; detailsIndex++) {
                    var tablecell = $(tablerow.cells[detailsIndex]);
                    tablecell[0].innerHTML = "";
                    tablecell[0].className = 'jqx-grid-details-cell';
                }
            }

            var tablecell = $(tablerow.cells[cellindex]);
            if (tablecell[0].style.display == "none") {
                var cellToRender = tablerow.cells[cellindex];
                var m = 2;
                var start = cellindex;
                while (cellToRender != undefined && cellToRender.style.display == 'none' && m < 10) {
                    cellToRender = tablerow.cells[start + m - 1];
                    m++;
                }
                tablecell = $(cellToRender);
            }

            if (this.rtl) {
                for (var s = columnstart; s < columnend; s++) {
                    tablerow.cells[s].innerHTML = "";
                    tablerow.cells[s].className = 'jqx-grid-details-cell';
                }
            }

            tablecell.css('width', '100%');
            $tablerow.height(renderrow.rowdetailsheight);
            tablecell[0].className = cellclass;

            var boundindex = this.getboundindex(renderrow);
            var lookupkey = boundindex + "_";

            if (this._rowdetailscache[lookupkey]) {
                var cache = this._rowdetailscache[lookupkey];
                var $detailselement = cache.html;

                if (this.initrowdetails) {
                    if (this._rowdetailscache[lookupkey].element) {
                        var element = this._rowdetailscache[lookupkey].element;
                        var tablecelloffset = tablecell.coord();
                        var gridcontentoffset = this.gridcontent.coord();
                        var top = parseInt(tablecelloffset.top) - parseInt(gridcontentoffset.top);
                        var left = parseInt(tablecelloffset.left) - parseInt(gridcontentoffset.left);
                        if (this.rtl) {
                            left = 0;
                        }

                        $(element).css('top', top);
                        $(element).css('left', left);
                        $(element).css('display', 'block');
                        $(element).width(this.host.width() - indent);
                        if (this.layoutrowdetails) {
                            this.layoutrowdetails(boundindex, element, this.element, this.getrowdata(boundindex));
                        }
                    }
                }
                else {
                    tablecell[0].innerHTML = $detailselement;
                }
                return;
            }

            tablecell[0].innerHTML = '';
            if (!this.enablerowdetailsindent) {
                indent = 0;
            }

            var detailselement = '<div role="rowgroup" style="border: none; overflow: hidden; width: 100%; height: 100%; margin-left: ' + indent + 'px;">' + renderrow.rowdetails + '</div>';
            if (this.rtl) {
                var detailselement = '<div role="rowgroup" style="border: none; overflow: hidden; width: 100%; height: 100%; margin-left: ' + 0 + 'px; margin-right: ' + indent + 'px;">' + renderrow.rowdetails + '</div>';
            }

            this._rowdetailscache[lookupkey] = { id: tablerow.id, html: detailselement }
            if (this.initrowdetails) {
                var element = $(detailselement)[0];
                $(this.gridcontent).prepend($(element));

                $(element).css('position', 'absolute');
                $(element).width(this.host.width() - indent);
                $(element).height(tablecell.height());

                var tablecelloffset = tablecell.coord();
                $(element).css('z-index', 2000);
                if (this.isTouchDevice()) {
                    $(element).css('z-index', 99999);
                }
                $(element).addClass(this.toThemeProperty('jqx-widget-content'));
                var tablecelloffset = tablecell.coord();
                var gridcontentoffset = this.gridcontent.coord();
                var top = parseInt(tablecelloffset.top) - parseInt(gridcontentoffset.top);
                var left = parseInt(tablecelloffset.left) - parseInt(gridcontentoffset.left);

                $(element).css('top', top);
                $(element).css('left', left);

                this.content[0].scrollTop = 0;
                this.content[0].scrollLeft = 0;
                var details = $($(element).children()[0]);
                if (details[0].id != "") {
                    details[0].id = details[0].id + boundindex;
                }

                this.initrowdetails(boundindex, element, this.element, this.getrowdata(boundindex));

                this._rowdetailscache[lookupkey].element = element;
                this._rowdetailselementscache[boundindex] = element;
            }
            else {
                tablecell[0].innerHTML = detailselement;
            }
        },

        _defaultcellsrenderer: function (value, column) {
            if (column.cellsformat != '') {
                if ($.jqx.dataFormat) {
                    if ($.jqx.dataFormat.isDate(value)) {
                        value = $.jqx.dataFormat.formatdate(value, column.cellsformat, this.gridlocalization);
                    }
                    else if ($.jqx.dataFormat.isNumber(value)) {
                        value = $.jqx.dataFormat.formatnumber(value, column.cellsformat, this.gridlocalization);
                    }
                }
            }

            var margin = '4px';
            if (this.rowsheight != 25) {
                margin = (this.rowsheight / 2 - this._cellheight / 2);
                if (margin < 0) {
                    margin = 4;
                }
                margin += 'px';
            }

            if (this.enableellipsis) {
                if (column.cellsalign == 'center' || column.cellsalign == 'middle') {
                    margin = '5px';
                    return '<div style="text-overflow: ellipsis; overflow: hidden; padding-bottom: 2px; text-align: center; margin-top: ' + margin + ';">' + value + '</div>';
                }

                if (column.cellsalign == 'left')
                    return '<div style="overflow: hidden; text-overflow: ellipsis; padding-bottom: 2px; text-align: left; margin-right: 2px; margin-left: 4px; margin-top: ' + margin + ';">' + value + '</div>';

                if (column.cellsalign == 'right')
                    return '<div style="overflow: hidden;  text-overflow: ellipsis; padding-bottom: 2px; text-align: right; margin-right: 2px; margin-left: 4px; margin-top: ' + margin + ';">' + value + '</div>';
            }

            if (column.cellsalign == 'center' || column.cellsalign == 'middle') {
                margin = '5px';
                return '<div style="text-align: center; margin-top: ' + margin + ';">' + value + '</div>';
            }
            return '<span style="margin-left: 4px; margin-right: 2px; margin-top: ' + margin + '; float: ' + column.cellsalign + ';">' + value + '</span>';
        },

        getcelltext: function (row, datafield) {
            if (row == null || datafield == null)
                return null;

            var cellvalue = this.getcellvalue(row, datafield);
            var column = this.getcolumn(datafield);
            if (column && column.cellsformat != '') {
                if ($.jqx.dataFormat) {
                    if ($.jqx.dataFormat.isDate(cellvalue)) {
                        cellvalue = $.jqx.dataFormat.formatdate(cellvalue, column.cellsformat, this.gridlocalization);
                    }
                    else if ($.jqx.dataFormat.isNumber(cellvalue)) {
                        cellvalue = $.jqx.dataFormat.formatnumber(cellvalue, column.cellsformat, this.gridlocalization);
                    }
                }
            }
            return cellvalue;
        },

        getcelltextbyid: function (row, datafield) {
            if (row == null || datafield == null)
                return null;

            var cellvalue = this.getcellvaluebyid(row, datafield);
            var column = this.getcolumn(datafield);
            if (column && column.cellsformat != '') {
                if ($.jqx.dataFormat) {
                    if ($.jqx.dataFormat.isDate(cellvalue)) {
                        cellvalue = $.jqx.dataFormat.formatdate(cellvalue, column.cellsformat, this.gridlocalization);
                    }
                    else if ($.jqx.dataFormat.isNumber(cellvalue)) {
                        cellvalue = $.jqx.dataFormat.formatnumber(cellvalue, column.cellsformat, this.gridlocalization);
                    }
                }
            }
            return cellvalue;
        },

        _getcellvalue: function (column, row) {
            var value = null;
            value = row.bounddata[column.datafield];
            if (column.displayfield != null) {
                value = row.bounddata[column.displayfield];
            }

            if (value == null) value = "";
            return value;
        },

        // gets a cell.
        getcell: function (row, datafield) {
            if (row == null || datafield == null)
                return null;

            var rowindex = parseInt(row);
            var datarow = row;
            var value = '';

            if (!isNaN(rowindex)) {
                datarow = this.getrowdata(rowindex);
            }

            if (datarow != null) {
                value = datarow[datafield];
            }

            return this._getcellresult(value, row, datafield);
        },
        // gets the rendered cell data.
        getrenderedcell: function (row, datafield) {
            if (row == null || datafield == null)
                return null;

            var rowindex = parseInt(row);
            var datarow = row;
            var value = '';

            if (!isNaN(rowindex)) {
                datarow = this.getrenderedrowdata(rowindex);
            }

            if (datarow != null) {
                value = datarow[datafield];
            }
            return this._getcellresult(value, row, datafield);
        },

        _getcellresult: function (value, row, datafield) {
            var column = this.getcolumn(datafield);
            if (column == null || column == undefined) {
                return null;
            }

            var properties = column.getcolumnproperties();

            var hidden = properties.hidden;
            var width = properties.width;
            var pinned = properties.pinned;
            var align = properties.cellsalign;
            var format = properties.cellsformat;
            var height = this.getrowheight(row);

            // invalid row.
            if (height == false) {
                return null;
            }

            return { value: value, row: row, column: datafield, datafield: datafield, width: width, height: height, hidden: hidden, pinned: pinned, align: align, format: format };
        },

        setcellvaluebyid: function(row, datafield, value, refresh, sync) {
            var rowindex = this.getrowboundindexbyid(row);
            return this.setcellvalue(rowindex, datafield, value, refresh, sync);
        },

        getcellvaluebyid: function (row, datafield) {
            var rowindex = this.getrowboundindexbyid(row);
            return this.getcellvalue(rowindex, datafield);
        },
       
        setcellvalue: function (row, datafield, value, refresh, sync) {
            if (row == null || datafield == null)
                return false;

            var rowindex = parseInt(row);
            var datasourcerowindex = rowindex;

            var datarow = row;
            if (!isNaN(rowindex)) {
                datarow = this.getrowdata(rowindex);
            }

            var hasfilter = false;
            if (this.filterable && this._initfilterpanel && this.dataview.filters.length) {
                hasfilter = true;
            }
            if (this.virtualmode) {
                this._pagescache = new Array();
            }

            var oldvalue = "";
            var olddisplayvalue = "";
            if (datarow != null && datarow[datafield] !== value) {
                if (datarow[datafield] === null && value === "") {
                    return;
                }

                var column = this._getcolumnbydatafield(datafield);
                var type = 'string';
                var datafields = this.source.datafields || ((this.source._source) ? this.source._source.datafields : null);

                if (datafields) {
                    var foundType = "";
                    $.each(datafields, function () {
                        if (this.name == column.displayfield) {
                            if (this.type) {
                                foundType = this.type;
                            }
                            return false;
                        }
                    });
                    if (foundType)
                        type = foundType;
                    olddisplayvalue = datarow[column.displayfield];
                }

                oldvalue = datarow[datafield];
                if (!column.nullable || (value != null && value !== "" && column.nullable && value.label === undefined)) {
                    if ($.jqx.dataFormat.isNumber(oldvalue) || type == 'number' || type == 'float' || type == 'int' || type == 'decimal' && type != 'date') {
                        value = new Number(value);
                        value = parseFloat(value);
                        if (isNaN(value)) {
                            value = 0;
                        }
                    }
                    else if ($.jqx.dataFormat.isDate(oldvalue) || type == 'date') {
                        if (value != '') {
                            var tmp = value;
                            tmp = new Date(tmp);
                            if (tmp != 'Invalid Date' && tmp != null) {
                                value = tmp;
                            }
                            else if (tmp == 'Invalid Date') {
                                tmp = new Date();
                                value = tmp;
                            }
                        }
                    }
                    if (datarow[datafield] === value) {
                        if (!this._updating && refresh != false) {
                            this._renderrows(this.virtualsizeinfo);
                        }
                        return;
                    }
                }
               
                datarow[datafield] = value;
                var renderedrow = this.getrenderedrowdata(rowindex, true);
                renderedrow[datafield] = value;

                if (value != null && value.label != null) {
                    var column = this._getcolumnbydatafield(datafield);
                    datarow[column.displayfield] = value.label;
                    renderedrow[column.displayfield] = value.label;
                    datarow[datafield] = value.value;
                    renderedrow[datafield] = value.value;
                }

                if (hasfilter) {
                    if (datarow.dataindex != undefined) {
                        datasourcerowindex = datarow.dataindex;
                        this.dataview.cachedrecords[datarow.dataindex][datafield] = value;
                        if (value != null && value.label != undefined) {
                            this.dataview.cachedrecords[datarow.dataindex][datafield] = value.value;
                            this.dataview.cachedrecords[datarow.dataindex][column.displayfield] = value.label;
                        }
                    }
                }
            }
            else {
                if (!this._updating && refresh != false) {
                    this._renderrows(this.virtualsizeinfo);
                }
                return false;
            }

            if (this.source && this.source._knockoutdatasource && !this._updateFromAdapter && this.autokoupdates) {
                if (this.source._source._localdata) {
                    var korowindex = rowindex;
                    if (hasfilter) {
                        if (datarow.dataindex != undefined) {
                            korowindex = datarow.dataindex;
                        }
                    }

                    var olditem = this.source._source._localdata.get()[korowindex];
                    this.source.suspendKO = true;
                    var oldobject = olditem;
                    if ('function'==typeof(oldobject.ref) && oldobject.ref(datafield)) {
                        if (value != null && value.label != null) {
                            oldobject[column.displayfield].set(value.label);
                            oldobject.ref(datafield).set(value.value);
                        }
                        else {
                        	oldobject.ref(datafield).set(value);
                        }
                    }
                    else {
                        var datafields = this.source._source.datafields;
                        var sourcedatafield = null;
                        var map = null;
                        if (datafields) {
                            $.each(datafields, function () {
                                if (this.name == datafield) {
                                    map = this.map;
                                    return false;
                                }
                            });
                        }
                        if (map == null) {
                            if (value != null && value.label != null) {
                                oldobject[datafield] = value.value;
                                oldobject[column.displayfield] = value.label;
                            }
                            else {
                                oldobject[datafield] = value;
                            }
                        }
                        else {
                            var splitMap = map.split(this.source.mapChar);
                            if (splitMap.length > 0) {
                                var datavalue = oldobject;
                                for (var p = 0; p < splitMap.length-1; p++) {
                                    datavalue = datavalue[splitMap[p]];
                                }
                                datavalue[splitMap[splitMap.length - 1]] = value;
                            }
                        }
                        this.source._source._localdata.replace(olditem, $.extend({}, oldobject));
                    }

                    this.source.suspendKO = false;
                }
            }

            if (this.sortcolumn && this.dataview.sortby && !this._updating) {
                var sortinformation = this.getsortinformation();
                if (this.sortcolumn == datafield) {
                    this.dataview.clearsortdata();
                    this.dataview.sortby(sortinformation.sortcolumn, sortinformation.sortdirection.ascending);
                }
            }
            else if (!this._updating){
                if (this.dataview.sortby) {
                    if (this.dataview.sortcache[datafield]) {
                        this.dataview.sortcache[datafield] = null;
                    }
                }
            }

            this._cellscache = new Array();

            if (this.source.updaterow && (sync == undefined || sync == true)) {
                var success = false;
                var me = this.that;
                var result = function (param) {
                    if (false == param) {
                        me.setcellvalue(row, datafield, oldvalue, true, false);
                        if (oldvalue != olddisplayvalue) {
                            me.setcellvalue(row, me.getcolumn(datafield).displayfield, olddisplayvalue, true, false);
                        }
                    }
                }
                try {
                    var rowid = this.getrowid(rowindex);
                    success = this.source.updaterow(rowid, datarow, result);
                    if (success == undefined) success = true;
                }
                catch (error) {
                    success = false;
                    me.setcellvalue(row, datafield, oldvalue, true, false);
                    if (oldvalue != olddisplayvalue) {
                        me.setcellvalue(row, me.getcolumn(datafield).displayfield, olddisplayvalue, true, false);
                    }
                    return;
                }
            }

            //     var rowid = this.getrowid(row);
            var scrollvalue = this.vScrollInstance.value;

            if (this._updating && refresh != true) {
                refresh = false;
            }

            if (refresh == true || refresh == undefined) {
                var me = this.that;
                var updatepager = function () {
                    if (me.pageable && me.updatepagerdetails) {
                        me.updatepagerdetails();
                        if (me.autoheight || me.autorowheight) {
                            me._updatepageviews();
                        }
                    }
                }
                var hasgroups = this.groupable && this.groups.length > 0;

                if (hasfilter && !hasgroups) {
                    if (this.autoheight || this.autorowheight) this.prerenderrequired = true;
                    this.dataview.refresh();
                    this.rendergridcontent(true, false);
                    updatepager();
                    this._renderrows(this.virtualsizeinfo);
                }
                else if (this.sortcolumn && !hasgroups) {
                    if (this.autoheight || this.autorowheight) this.prerenderrequired = true;
                    this.dataview.reloaddata();
                    this.rendergridcontent(true, false);
                    updatepager();
                    this._renderrows(this.virtualsizeinfo);
                }
                else if (this.groupable && this.groups.length > 0) {
                    if (this.autoheight || this.autorowheight) this.prerenderrequired = true;
                    if (this.pageable) {
                        if (this.groups.indexOf(datafield) != -1) {
                            this._pagescache = new Array();
                            this._cellscache = new Array();
                            this.dataview.refresh();
                            this._render(true, true, false, false);
                        }
                        else {
                            this._pagescache = new Array();
                            this._cellscache = new Array();
                            this.dataview.updateview();
                            this._renderrows(this.virtualsizeinfo);
                        }
                    }
                    else {
                        this._pagescache = new Array();
                        this._cellscache = new Array();
                        this.dataview.updateview();
                        this._renderrows(this.virtualsizeinfo);

                        //     this.dataview.updateview();
                        //     this._renderrows(this.virtualsizeinfo);
                    }
                    //                    this.dataview.reloaddata();
                    //                    this.render(true, true, false, false);
                    //                    var datarow = this.getrowdata(row);
                    //                    var renderedrow = this.getrenderedrowdata(rowindex, true);
                    //                    var parentItem = renderedrow.parentItem;
                    //                    this._setgroupstate(parentItem, true, true);
                }
                else {
                    this.dataview.updateview();
                    this._renderrows(this.virtualsizeinfo);
                }
            }
            this.vScrollInstance.setPosition(scrollvalue);
            if (this.showaggregates && this._updatecolumnsaggregates) {
                this._updatecolumnsaggregates();
            }
            if (this.showfilterrow && this.filterable && this.filterrow) {
                var filtertype = this.getcolumn(datafield).filtertype;
                if (filtertype == 'list' || filtertype == 'checkedlist') {
                    this._updatelistfilters(true);
                }
            }

            this._raiseEvent(19, { rowindex: row, datafield: datafield, newvalue: value, value: value, oldvalue: oldvalue });
            return true;
        },

        // get cell's bound value.
        getcellvalue: function (row, datafield) {
            if (row == null || datafield == null)
                return null;

            var rowindex = parseInt(row);
            var datarow = row;
            if (!isNaN(rowindex)) {
                datarow = this.getrowdata(rowindex);
            }

            if (datarow != null) {
                var value = datarow[datafield];
                return value;
            }

            return null;
        },

        getrows: function () {
            var length = this.dataview.records.length;
            if (this.virtualmode) {
                var rows = new Array();

                for (var i = 0; i < this.dataview.records.length; i++) {
                    var record = this.dataview.records[i];
                    if (record) {
                        rows.push(record);
                    }
                }
                if (this.dataview.records.length === undefined) {
                    $.each(this.dataview.records, function () {
                        var record = this;
                        if (record) {
                            rows.push(record);
                        }
                    });
                }

                var recordsoffset = 0;
                if (this.pageable) {
                    recordsoffset = this.dataview.pagenum * this.dataview.pagesize;
                }

                if (rows.length > this.source._source.totalrecords - recordsoffset) {
                    return rows.slice(0, this.source._source.totalrecords - recordsoffset);
                }
                return rows;
            }

            if (this.dataview.sortdata) {
                var rows = new Array();
                for (var i = 0; i < length; i++) {
                    var item = {};
                    item = $.extend({}, this.dataview.sortdata[i].value);
                    rows[i] = item;
                }
                return rows;
            }
            else return this.dataview.records;
        },

        getrowboundindexbyid: function(id)
        {
            var rowdata = this.dataview.recordsbyid["id" + id];
            if (rowdata) {
                if (rowdata.boundindex)
                    return this.getboundindex(rowdata);
            }

            var rows = this.getboundrows();
            for (var i = 0; i < rows.length; i++) {
                if (rows[i]) {
                    if (rows[i].uid == id) {
                        return i;
                    }
                }
            }

            return -1;
        },

        getrowdatabyid: function(id)
        {
            var rowdata = this.dataview.recordsbyid["id" + id];
            if (rowdata) {
                return rowdata;
            }
            else {
                var index = this.getrowboundindexbyid(id);
                return this.getboundrows()[index];
            }

            return null;
        },

        // get getrowdata.
        getrowdata: function (boundindex) {
            if (boundindex == undefined)
                boundindex = 0;

            if (this.virtualmode) {
                var record = this.dataview.records[boundindex];
                return record;
            }
            else {
                var record = this.getboundrows()[boundindex];
                return record;
            }

            return null;
        },

        // deprecated.
        // get visible row data.
        getrenderedrowdata: function (boundindex, bypasspaging) {
            if (boundindex == undefined)
                boundindex = 0;

            if (this.virtualmode) {
                var visibleindex = this.getrowvisibleindex(boundindex);
                var record = this.dataview.loadedrecords[visibleindex];
                return record;
            }

            var visibleindex = this.getrowvisibleindex(boundindex);
            if (visibleindex >= 0) {
                if (this.groupable && this.groups.length > 0) {
                    var record = this.dataview.loadedrecords[visibleindex];
                }
                else {
                    var record = this.dataview.loadedrecords[visibleindex];

                    if (this.pageable && (bypasspaging == undefined || bypasspaging == false)) {
                        var record = this.dataview.loadedrecords[this.dataview.pagesize * this.dataview.pagenum + boundindex];
                    }
                }
                return record;
            }

            return null;
        },

        // gets all rows loaded in jqxGrid.
        getboundrows: function () {
            return this.dataview.cachedrecords;
        },

        getrowdisplayindex: function(boundindex)
        {
            var rows = this.getdisplayrows();
            for (var i = 0; i < rows.length; i++) {
                if (rows[i].dataindex !== undefined) {
                    if (rows[i].dataindex === boundindex)
                        return rows[i].visibleindex;
                }
                else {
                    if (rows[i].boundindex === boundindex)
                        return rows[i].visibleindex;
                }
            }
            return -1;
        },

        getboundindex: function(row)
        {
            var boundindex = row.boundindex;
            if (this.dataview.filters.length > 0) {
                if (row.bounddata) {
                    if (row.bounddata.dataindex !== undefined) {
                        boundindex = row.bounddata.dataindex;
                    }
                }
                else {
                    if (row.dataindex !== undefined) {
                        boundindex = row.dataindex;
                    }
                }
            }
            return boundindex;
        },

        getrowboundindex: function (displayindex) {
            var rowdata = this.getdisplayrows()[displayindex];
            if (rowdata) {
                if (rowdata.dataindex !== undefined) {
                    return rowdata.dataindex;
                }

                return rowdata.boundindex;
            }
            return -1;
        },

        // gets all rows displayed in jqxGrid.
        getdisplayrows: function()
        {
            return this.dataview.loadedrecords;
        },

        // deprecated.
        getloadedrows: function () {
            return this.getdisplayrows();
        },

        // deprecated.
        getvisiblerowdata: function (visibleindex) {
            var visiblerows = this.getvisiblerows();
            if (visiblerows) {
                return visiblerows[visibleindex];
            }

            return null;
        },

        // deprecated.
        getloadedrowdata: function (visibleindex) {
            var visiblerows = this.getloadedrows();
            if (visiblerows) {
                return visiblerows[visibleindex];
            }

            return null;
        },

        // deprecated.
        getvisiblerows: function () {
            if (this.virtualmode) {
                return this.dataview.loadedrecords
            }

            if (this.pageable) {
                var rows = [];
                for (var i = 0; i < this.dataview.pagesize; i++) {
                    var record = this.dataview.loadedrecords[i + (this.dataview.pagesize * this.dataview.pagenum)];
                    if (record == undefined) break;
                    rows.push(record);
                }
                return rows;
            }
            else {
                if (this._startboundindex != undefined && this._endboundindex != undefined) {
                    var rows = [];

                    for (var i = this._startvisibleindex; i <= this._endvisibleindex; i++) {
                        var record = this.dataview.loadedrecords[i];
                        if (record == undefined) break;
                        rows.push(record);
                    }
                    return rows;
                }
            }

            return this.dataview.loadedrecords;
        },

        // get row id.
        getrowid: function (boundindex) {
            if (boundindex == undefined)
                boundindex = 0;

            if (this.virtualmode) {
                var visibleindex = this.getrowvisibleindex(boundindex);
                var record = this.dataview.loadedrecords[visibleindex];
                if (record)
                    return record.uid;
            }
            else {
                var record = null;
                var hasFilters = this.dataview.filters.length > 0;
                if (boundindex >= 0 && boundindex < this.dataview.bounditems.length && !hasFilters) {
                    if (this.groupable && this.groups.length > 0) {
                        var visibleindex = this.getrowvisibleindex(boundindex);
                        var record = this.dataview.loadedrecords[visibleindex];
                    }
                    else {
                        var visibleindex = this.getrowvisibleindex(boundindex);
                        var record = this.dataview.loadedrecords[visibleindex];
                    }
                    if (record)
                        return record.uid;
                }
                if (this.dataview.filters.length > 0) {
                    var record = this.getboundrows()[boundindex];
                    if (record) {
                        if (record.uid != null) {
                            return record.uid;
                        }
                    }
                    return null;
                }
            }

            return null;
        },

        _updateGridData: function (reason) {
            var hasfilter = false;
            if (this.filterable && this._initfilterpanel && this.dataview.filters.length) {
                hasfilter = true;
            }
            if (hasfilter) {
                this.dataview.refresh();
                if (reason == "updaterow") {
                    this._render(true, true, false, false, false);
                    this.invalidate();
                }
                else {
                    this.render();
                }
            }
            else if (this.sortcolumn || (this.groupable && this.groups.length > 0)) {
                this.dataview.reloaddata();
                this.render();
            }
            else {
                this._cellscache = new Array();
                this._pagescache = new Array();
                this._renderrows(this.virtualsizeinfo);
            }
            if (this.showfilterrow && this.filterable && this.filterrow) {
                this._updatelistfilters(true);
            }
        },

        // update row.
        updaterow: function (rowid, rowdata, refresh) {
            if (rowid != undefined && rowdata != undefined) {
                var me = this.that;
                var success = false;
                me._datachanged = true;
                var applychanges = function (me, rowid, rowdata) {
                    if (me._loading) {
                        throw new Error('jqxGrid: ' + me.loadingerrormessage);
                        return false;
                    }

                    var success = false;
                    if (!$.isArray(rowid)) {
                        success = me.dataview.updaterow(rowid, rowdata);
                    }
                    else {
                        $.each(rowid, function (index, value) {
                            success = me.dataview.updaterow(this, rowdata[index], false);
                        });
                        me.dataview.refresh();
                    }

                    var scrollvalue = me.vScrollInstance.value;
                    if (refresh == undefined || refresh == true) {
                        if (me._updating == undefined || me._updating == false) {
                            me._updateGridData("updaterow");
                        }
                    }

                    if (me.showaggregates && me._updatecolumnsaggregates) {
                        me._updatecolumnsaggregates();
                    }

                    if (me.source && me.source._knockoutdatasource && !me._updateFromAdapter && me.autokoupdates) {
                        if (me.source._source._localdata) {
                            var record = me.dataview.recordsbyid["id" + rowid];
                            var recordindex = me.dataview.records.indexOf(record);
                            var olditem = me.source._source._localdata.get()[recordindex];
                            me.source.suspendKO = true;
                            me.source._source._localdata.replace(olditem, $.extend({}, record));
                            me.source.suspendKO = false;
                        }
                    }

                    me.vScrollInstance.setPosition(scrollvalue);
                    return success;
                }

                if (this.source.updaterow) {
                    var done = function (result) {
                        if (result == true || result == undefined) {
                            applychanges(me, rowid, rowdata);
                        }
                    }
                    try {
                        success = this.source.updaterow(rowid, rowdata, done);
                        if (success == undefined) success = true;
                    }
                    catch (error) {
                        success = false;
                    }
                }
                else {
                    success = applychanges(me, rowid, rowdata);
                }

                return success;
            }

            return false;
        },

        // delete row.
        deleterow: function (rowid, refresh) {
            if (rowid != undefined) {
                this._datachanged = true;
                var success = false;
                var me = this.that;

                var applychanges = function (me, rowid) {
                    if (me._loading) {
                        throw new Error('jqxGrid: ' + me.loadingerrormessage);
                        return false;
                    }

                    var success = false;
                    var scrollvalue = me.vScrollInstance.value;
                    if (!$.isArray(rowid)) {
                        var success = me.dataview.deleterow(rowid);
                    }
                    else {
                        $.each(rowid, function () {
                            success = me.dataview.deleterow(this, false);
                        });
                        me.dataview.refresh();
                    }
                    if (me._updating == undefined || me._updating == false) {
                        if (refresh == undefined || refresh == true) {
                            me._render(true, true, false, false);
                            if (me.vScrollBar.css('visibility') != 'visible') {
                                me._arrange();
                                me._updatecolumnwidths();
                                me._updatecellwidths();
                                me._renderrows(me.virtualsizeinfo);
                            }
                        }
                    }

                    if (me.source && me.source._knockoutdatasource && !me._updateFromAdapter && me.autokoupdates) {
                        if (me.source._source._localdata) {
                            me.source.suspendKO = true;
                            me.source._source._localdata.pop(rowdata);
                            me.source.suspendKO = false;
                        }
                    }

                    me.vScrollInstance.setPosition(scrollvalue);
                    return success;
                }

                if (this.source.deleterow) {
                    var done = function (result) {
                        if (result == true || result == undefined) {
                            applychanges(me, rowid);
                        }
                    }
                    try {
                        this.source.deleterow(rowid, done);
                        if (success == undefined) success = true;
                    }
                    catch (error) {
                        success = false;
                    }
                }
                else {
                    success = applychanges(me, rowid);
                }
                return success;
            }

            return false;
        },

        // add row.
        addrow: function (rowid, rowdata, position) {
            if (rowdata != undefined) {
                this._datachanged = true;
                if (position == undefined) {
                    position = 'last';
                }

                var success = false;
                var me = this.that;
   
                if (rowid == null) {
                    var hasFilter = this.dataview.filters && this.dataview.filters.length > 0;
                    var totallength = !hasFilter ? this.dataview.totalrecords : this.dataview.cachedrecords.length;
                    if (!$.isArray(rowdata)) {
                        rowid = this.dataview.getid(this.dataview.source.id, rowdata, totallength);
                        while (null != this.dataview.recordsbyid["id" + rowid]) {
                            rowid++;
                        }
                    } else {
                        var ids = new Array();
                        $.each(rowdata, function (index, value) {
                            var id = me.dataview.getid(me.dataview.source.id, rowdata[index], totallength + index);
                            ids.push(id);
                        });
                        rowid = ids;
                    }
                }

                var applychanges = function (me, rowid, rowdata, position) {
                    if (me._loading) {
                        throw new Error('jqxGrid: ' + me.loadingerrormessage);
                        return false;
                    }

                    var scrollvalue = me.vScrollInstance.value;
                    var success = false;
                    if (!$.isArray(rowdata)) {
                        if (rowdata != undefined && rowdata.dataindex != undefined) {
                            delete rowdata.dataindex;
                        }
                        success = me.dataview.addrow(rowid, rowdata, position);
                    }
                    else {
                        $.each(rowdata, function (index, value) {
                            if (this.dataindex != undefined) {
                                delete this.dataindex;
                            }

                            var id = null;
                            if (rowid != null && rowid[index] != null) id = rowid[index];
                            success = me.dataview.addrow(id, this, position, false);
                        });
                        me.dataview.refresh();
                    }

                    if (me._updating == undefined || me._updating == false) {
                        me._render(true, true, false, false);
                        me.invalidate();
                    }

                    if (me.source && me.source._knockoutdatasource && !me._updateFromAdapter && me.autokoupdates) {
                        if (me.source._source._localdata) {
                            me.source.suspendKO = true;
                            me.source._source._localdata.push(rowdata);
                            me.source.suspendKO = false;
                        }
                    }

                    if (me.scrollmode != "deferred") {
                        me.vScrollInstance.setPosition(scrollvalue);
                    }
                    else {
                        me.vScrollInstance.setPosition(0);
                    }

                    return success;
                }

                if (this.source.addrow) {
                    var done = function (result, ids) {
                        if (result == true || result == undefined) {
                            if (ids != undefined) rowid = ids;
                            applychanges(me, rowid, rowdata, position);
                        }
                    }
                    // undefined or true response code are handled as success. false or exception as failure
                    try {
                        success = this.source.addrow(rowid, rowdata, position, done);
                        if (success == undefined) success = true;
                    }
                    catch (e) {
                        success = false;
                    }
                    if (success == false) {
                        return false;
                    }
                }
                else {
                    applychanges(this, rowid, rowdata, position);
                }

                return success;
            }
            return false;
        },

        _findvisiblerow: function (value, collection) {
            if (value == undefined) {
                value = parseInt(this.vScrollInstance.value);
            }
            var min = 0;
            if (collection == undefined || collection == null) {
                collection = this.rows.records;
            }

            var max = collection.length;
            while (min <= max) {
                mid = parseInt((min + max) / 2)
                var item = collection[mid];

                if (item == undefined)
                    break;

                if (item.top > value && item.top + item.height > value) {
                    max = mid - 1;
                } else if (item.top < value && item.top + item.height < value) {
                    min = mid + 1;
                } else {
                    return mid;
                    break;
                }
            }

            return -1;
        },

        _updatecellwidths: function () {
            var virtualsizeinfo = this.virtualsizeinfo;
            if (!virtualsizeinfo) {
                return;
            }
            var me = this.that;

            if (this.gridcontent == undefined)
                return;

            if (this.table == undefined) {
                this.table = this.gridcontent.find('#contenttable' + this.element.id);
            }

            var hasgroups = this.groupable && this.groups.length > 0;
            var tablewidth = 0;
            var pagesize = virtualsizeinfo.visiblerecords;

            if (this.pageable && (this.autoheight || this.autorowheight)) {
                pagesize = this.dataview.pagesize;

                if (this.groupable) {
                    this.dataview.updateview();
                    pagesize = this.dataview.rows.length;
                }
            }

            if (!this.groupable && !this.pageable && (this.autoheight || this.autorowheight)) {
                pagesize = this.dataview.totalrecords;
            }

            if (this.rowdetails) {
                pagesize += this.dataview.pagesize;
            }

            if (!this.columns.records)
                return;

            var columnslength = this.columns.records.length;
            var rows = this.table[0].rows;
            for (var i = 0; i < pagesize; i++) {
                var tablerow = rows[i];
                if (!tablerow)
                    break;

                var cells = tablerow.cells;
                var left = 0;
                for (var j = 0; j < columnslength; j++) {
                    var columnrecord = this.columns.records[j];
                    var width = columnrecord.width;
                    var tablecolumn = cells[j];
                    if (parseInt(tablecolumn.style.left) != left) {
                        tablecolumn.style.left = left + 'px';
                    }

                    if (parseInt(tablecolumn.style.width) != width) {
                        tablecolumn.style.width = width + 'px';
                    }
               //     tablecolumn[0].left = left;
                    if (!(columnrecord.hidden && columnrecord.hideable)) {
                        left += parseInt(width);
                    }
                    else {
                        tablecolumn.style.display = "none";
                    }
                }

                if (tablewidth == 0) {
                    this.table.width(parseInt(left) + 2);
                    tablewidth = left;
                }
            }

            if (this.showaggregates && this._updateaggregates) {
                this._updateaggregates();
            }
            if (this.showfilterrow && this.filterable && this._updatefilterrowui) {
                this._updatefilterrowui();
            }
            this._updatescrollbarsafterrowsprerender();
            if (hasgroups) {
                this._renderrows(this.virtualsizeinfo);
            }
        },

        _updatescrollbarsafterrowsprerender: function () {
            var hscrollbarvisibility = this.hScrollBar[0].style.visibility;
            var offset = 0;
            var vscrollbarvisibility = this.vScrollBar[0].style.visibility;
            if (vscrollbarvisibility == 'visible') {
                offset = this.scrollbarsize + 3;
            }
            var w = this.element.style.width;
            if (w.toString().indexOf('%') >= 0) {
                w = this.host.width();
            }
            else {
                w = parseInt(w);
            }

            if (parseInt(this.table[0].style.width) - 2 > w - offset) {
                if (hscrollbarvisibility != 'visible') {
                    if (!this.autowidth) {
                        this.hScrollBar[0].style.visibility = 'visible';
                    }
                    this._arrange();
                }

                if (vscrollbarvisibility == 'visible') {
                    if (this.scrollmode != 'deferred' && !this.virtualmode) {
                        if (this.virtualsizeinfo) {
                            var vscrollbarmax = this.virtualsizeinfo.virtualheight - this._gettableheight();
                            if (!isNaN(vscrollbarmax) && vscrollbarmax > 0) {
                                if (hscrollbarvisibility != 'hidden') {
                                    this.vScrollBar.jqxScrollBar('max', vscrollbarmax + this.scrollbarsize + 4);
                                }
                                else {
                                    this.vScrollBar.jqxScrollBar('max', vscrollbarmax);
                                }
                            }
                        }
                    }
                    else {
                        this._updatevscrollbarmax();
                    }
                }
                else {
                    offset = -2;
                }

                this.hScrollBar.jqxScrollBar('max', offset + this.table.width() - this.host.width());
            }
            else {
                if (hscrollbarvisibility != 'hidden') {
                    this.hScrollBar.css('visibility', 'hidden');
                    this._arrange();
                }
            }
            this._renderhorizontalscroll();
        },

        _prerenderrows: function (virtualsizeinfo) {
            var me = this.that;
            if (this.prerenderrequired == true) {
                this.prerenderrequired = false;
                if (this.editable && this._destroyeditors) {
                    this._destroyeditors();
                }

                if (this.gridcontent == undefined)
                    return;

                this.gridcontent.find('#contenttable' + this.element.id).remove();
                if (this.table != null) {
                    this.table.remove();
                    this.table = null;
                }

                this.table = $('<div id="contenttable' + this.element.id + '" style="overflow: hidden; position: relative;" height="100%"></div>');
                this.gridcontent.addClass(this.toTP('jqx-grid-content'));
                this.gridcontent.addClass(this.toTP('jqx-widget-content'));
                this.gridcontent.append(this.table);
                var hasgroups = this.groupable && this.groups.length > 0;
                var tablewidth = 0;
                this.table[0].rows = new Array();
                var cellclass = this.toTP('jqx-grid-cell');
                if (hasgroups) {
                    cellclass = ' ' + this.toTP('jqx-grid-group-cell');
                }

                var pagesize = virtualsizeinfo.visiblerecords;

                if (this.pageable && (this.autoheight || this.autorowheight)) {
                    pagesize = this.dataview.pagesize;
                    if (this.groupable) {
                        this.dataview.updateview();
                        pagesize = this.dataview.rows.length;
                        if (pagesize < this.dataview.pagesize) {
                            pagesize = this.dataview.pagesize;
                        }
                    }
                }

                if (!this.pageable && (this.autoheight || this.autorowheight)) {
                    pagesize = this.dataview.totalrecords;
                }

                if (this.groupable && (this.autoheight || this.autorowheight) && !this.pageable) {
                    pagesize = this.dataview.rows.length;
                }

                if (this.rowdetails) {
                    if (this.autoheight || this.autorowheight) {
                        pagesize += this.dataview.pagesize;
                    }
                    else {
                        pagesize += pagesize;
                    }
                }
                if (!this.columns.records) {
                    return;
                }

                var columnslength = this.columns.records.length;

                if ($.jqx.browser.msie && $.jqx.browser.version > 8) {
                    this.table.css('opacity', '0.99');
                }

                if ($.jqx.browser.mozilla) {
                    this.table.css('opacity', '0.99');
                }

                if (navigator.userAgent.indexOf('Safari') != -1) {
                    this.table.css('opacity', '0.99');
                }

                var isIE7 = $.jqx.browser.msie && $.jqx.browser.version < 8;
                if (isIE7) {
                    this.host.attr("hideFocus", "true");
                }

                var zindex = this.tableZIndex;
                if (pagesize * columnslength > zindex) {
                    zindex = pagesize * columnslength;
                }
                var isempty = this.dataview.records.length == 0;
                var isTouch = this.isTouchDevice();
                var tableHTML = "";
                this._hiddencolumns = false;
                for (var i = 0; i < pagesize; i++) {
                    var tablerow = '<div role="row" style="position: relative; height=' + this.rowsheight + 'px;" id="row' + i + this.element.id + '">';
                    if (isIE7) {
                        var tablerow = '<div role="row" style="position: relative; z-index: ' + zindex + '; height:' + this.rowsheight + 'px;" id="row' + i + this.element.id + '">';
                        zindex--;
                    }

                    var left = 0;

                    for (var j = 0; j < columnslength; j++) {
                        var columnrecord = this.columns.records[j];
                        var width = columnrecord.width;
                        if (width < columnrecord.minwidth) width = columnrecord.minwidth;
                        if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;
                        if (this.rtl) {
                            var rtlzindex = zindex - columnslength + 2 * j;
                            var tablecolumn = '<div role="gridcell" style="left: ' + left + 'px; z-index: ' + rtlzindex + '; width:' + width + 'px;';
                            zindex--;
                        }
                        else var tablecolumn = '<div role="gridcell" style="left: ' + left + 'px; z-index: ' + zindex-- + '; width:' + width + 'px;';

                        if (!(columnrecord.hidden && columnrecord.hideable)) {
                            left += width;
                        }
                        else {
                            tablecolumn += 'display: none;'
                            this._hiddencolumns = true;
                            zindex++;
                        }
                        tablecolumn += '" class="' + cellclass + '"></div>';
                        tablerow += tablecolumn;
                    }

                    if (tablewidth == 0) {
                        this.table.width(parseInt(left) + 2);
                        tablewidth = left;
                    }

                    tablerow += '</div>';
                    tableHTML += tablerow;
                }

                if (me.WinJS) {
                    MSApp.execUnsafeLocalFunction(function () {
                        me.table.html(tableHTML);
                    });
                }
                else {
                    me.table[0].innerHTML = tableHTML;
                }

                this.table[0].rows = new Array();
                var rows = this.table.children();
                for (var i = 0; i < pagesize; i++) {
                    var row = rows[i];
                    this.table[0].rows.push(row);
                    row.cells = new Array();
                    var cells = $(row).children();
                    for (var j = 0; j < columnslength; j++) {
                        row.cells.push(cells[j]);
                    }
                }

                if (pagesize == 0) {
                    var left = 0;
                    if (this.showemptyrow) {
                        var tablerow = $('<div style="position: relative;" id="row0' + this.element.id + '"></div>');
                        this.table.append(tablerow);
                        tablerow.height(this.rowsheight);
                        this.table[0].rows[0] = tablerow[0];
                        this.table[0].rows[0].cells = new Array();
                    }
                    for (var j = 0; j < columnslength; j++) {
                        var columnrecord = this.columns.records[j];
                        var width = columnrecord.width;
                        if (this.showemptyrow) {
                            var tablecolumn = $('<div style="position: absolute; height: 100%; left: ' + left + 'px; z-index: ' + zindex-- + '; width:' + width + 'px;" class="' + cellclass + '"></div>');
                            tablecolumn.height(this.rowsheight);
                            tablerow.append(tablecolumn);
                            this.table[0].rows[0].cells[j] = tablecolumn[0];
                        }
                        if (width < columnrecord.minwidth) width = columnrecord.minwidth;
                        if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;
                        if (!(columnrecord.hidden && columnrecord.hideable)) {
                            left += width;
                        }
                    }
                    this.table.width(parseInt(left) + 2);
                    tablewidth = left;
                }

                this._updatescrollbarsafterrowsprerender();
                // callback when the rendering is complete.
                if (this.rendered) {
                    this.rendered('rows');
                }
                this._addoverlayelement();
            }
        },

        _groupsheader: function () {
            return this.groupable && this.showgroupsheader;
        },

        _arrange: function () {
            var width = null;
            var height = null;
            this.tableheight = null;
            var me = this.that;
            var isPercentageWidth = false;
            var isPercentageHeight = false;
     
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                width = this.width;
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    width = this.width;
                };

            if (this.width != null && this.width.toString().indexOf("%") != -1) {
                width = this.width;
                isPercentageWidth = true;
            }

            if (this.autowidth) {
                var w = 0;
                for (var i = 0; i < this.columns.records.length; i++) {
                    var cw = this.columns.records[i].width;
                    if (cw == 'auto') {
                        cw = this._measureElementWidth(this.columns.records[i].text);
                        w += cw;
                    }
                    else {
                        w += cw;
                    }
                }
                if (this.vScrollBar.css('visibility') != 'hidden') {
                    w += this.scrollbarsize + 4
                }

                width = w;
                this.width = width;
            }

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                height = this.height;
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                height = this.height;
            };

            if (this.height != null && this.height.toString().indexOf("%") != -1) {
                height = this.height;
                isPercentageHeight = true;
            }

            var baseheight = function () {
                var height = 0;
                var columnheaderheight = me.showheader ? me.columnsheader != null ? me.columnsheader.height() + 2 : 0 : 0;
                height += columnheaderheight;
                if (me.pageable) {
                    height += me.pagerheight;
                }
                if (me._groupsheader()) {
                    height += me.groupsheaderheight;
                }
                if (me.showtoolbar) {
                    height += me.toolbarheight;
                }
                if (me.showstatusbar) {
                    height += me.statusbarheight;
                }
                if (me.hScrollBar[0].style.visibility == 'visible') {
                    height += 20;
                }

                return height;
            }

            if (this.autoheight && this.virtualsizeinfo) {
                if (this.pageable && this.gotopage) {
                    //var newheight = this.host.height() - this._gettableheight();
                    var newheight = 0;
                    height = newheight + (this._pageviews[0] ? this._pageviews[0].height : 0);
                    //if (height == 0) {
                    height += baseheight();               
                    //}
                    if (this.showemptyrow && this.dataview.totalrecords == 0) {
                        height += this.rowsheight;
                    }
                }
                else {
                    var newheight = this.host.height() - this._gettableheight();
                    if (this._pageviews.length > 0) {
                        height = newheight + this._pageviews[this._pageviews.length - 1].height + this._pageviews[this._pageviews.length - 1].top;
                        this.vScrollBar[0].style.visibility = 'hidden';
                    }
                    else {
                        height = baseheight();
                        if (this.showemptyrow) {
                            height += this.rowsheight;
                        }
                    }
                }
            }
            else if (this.autoheight) {
                height = this.dataview.totalrecords * this.rowsheight;
                if (this._loading) {
                    height = 250;
                    this.dataloadelement.height(height);
                }
                height += baseheight();

                if (height > 10000)
                    height = 10000;
            }

            if (width != null) {
                width = parseInt(width);
                if (!isPercentageWidth) {
                    if (this.element.style.width != parseInt(this.width) + 'px') {
                        this.element.style.width = parseInt(this.width) + 'px';
                    }
                }
                else {
                    this.element.style.width = this.width;
                }

                if (isPercentageWidth) {
                    width = this.host.width();
                    if (width <= 2) {
                        width = 600;
                        this.host.width(width);
                    }
                    if (!this._oldWidth) {
                        this._oldWidth = width;
                    }
                }
            }
            else this.host.width(250);

            if (height != null) {
                if (!isPercentageHeight) {
                    height = parseInt(height);
                }

                if (!isPercentageHeight) {
                    if (this.element.style.height != parseInt(height) + 'px') {
                        this.element.style.height = parseInt(height) + 'px';
                    }
                }
                else {
                    this.element.style.height = this.height;
                }

                if (isPercentageHeight && !this.autoheight) {
                    height = this.host.height();
                    if (height == 0) {
                        height = 400;
                        this.host.height(height);
                    }
                    if (!this._oldHeight) {
                        this._oldHeight = height;
                    }
                }
            }
            else this.host.height(250);

            if (this.autoheight) {
                this.tableheight = null;
                this._gettableheight();
            }

            var top = 0;

            if (this.showtoolbar) {
                this.toolbar.width(width);
                this.toolbar.height(this.toolbarheight - 1);
                this.toolbar.css('top', 0);
                top += this.toolbarheight;
                height -= parseInt(this.toolbarheight);
            }
            else {
                this.toolbar[0].style.height = '0px';
            }

            if (this.showstatusbar) {
                if (this.showaggregates) {
                    this.statusbar.width(!this.table ? width : Math.max(width, this.table.width()));
                }
                else {
                    this.statusbar.width(width);
                }

                this.statusbar.height(this.statusbarheight);
            }
            else {
                this.statusbar[0].style.height = '0px';
            }

            if (this._groupsheader()) {
                this.groupsheader.width(width);
                this.groupsheader.height(this.groupsheaderheight);
                this.groupsheader.css('top', top);
                var groupsheaderheight = this.groupsheader.height() + 1;
                top += groupsheaderheight;
                if (height > groupsheaderheight) {
                    height -= parseInt(groupsheaderheight);
                }
            }
            else {
                if (this.groupsheader[0].style.width != width + 'px') {
                    this.groupsheader[0].style.width = parseInt(width) + 'px';
                }
                if (this.groupsheader[0].style.height != this.groupsheaderheight + 'px') {
                    this.groupsheader[0].style.height = parseInt(this.groupsheaderheight) + 'px';
                }

                if (this.groupsheader[0].style.top != top + 'px') {
                    this.groupsheader.css('top', top);
                }

                var groupsheaderheight = this.showgroupsheader && this.groupable ? this.groupsheaderheight : 0;
                var newContentTop = top + groupsheaderheight + 'px';
                if (this.content[0].style.top != newContentTop) {
                    this.content.css('top', top + this.groupsheaderheight);
                }
            }

            // scrollbar Size.
            var scrollSize = this.scrollbarsize;
            if (isNaN(scrollSize)) {
                scrollSize = parseInt(scrollSize);
                if (isNaN(scrollSize)) {
                    scrollSize = '17px';
                }
                else scrollSize = scrollSize + 'px';
            }

            scrollSize = parseInt(scrollSize);
            var scrollOffset = 4;
            var bottomSizeOffset = 2;
            var rightSizeOffset = 0;

            // right scroll offset. 
            if (this.vScrollBar[0].style.visibility == 'visible') {
                rightSizeOffset = scrollSize + scrollOffset;
            }

            // bottom scroll offset.
            if (this.hScrollBar[0].style.visibility == 'visible') {
                bottomSizeOffset = scrollSize + scrollOffset + 2;
            }

            var pageheight = 0;
            if (this.pageable) {
                pageheight = this.pagerheight;
                bottomSizeOffset += this.pagerheight;
            }
            if (this.showstatusbar) {
                bottomSizeOffset += this.statusbarheight;
                pageheight += this.statusbarheight;
            }

            if (this.hScrollBar[0].style.height != scrollSize + 'px') {
                this.hScrollBar[0].style.height = parseInt(scrollSize) + 'px';
            }

            if (this.hScrollBar[0].style.top != top + height - scrollOffset - scrollSize - pageheight + 'px' || this.hScrollBar[0].style.left != '0px') {
                this.hScrollBar.css({ top: top + height - scrollOffset - scrollSize - pageheight + 'px', left: '0px' });
            }

            var hScrollWidth = this.hScrollBar[0].style.width;
            var hSizeChange = false;
            var vSizeChange = false;

            if (rightSizeOffset == 0) {
                if (hScrollWidth != (width - 2) + 'px') {
                    this.hScrollBar.width(width - 2);
                    hSizeChange = true;
                }
            }
            else {
                if (hScrollWidth != (width - scrollSize - scrollOffset) + 'px') {
                    this.hScrollBar.width(width - scrollSize - scrollOffset + 'px');
                    hSizeChange = true;
                }
            }


            if (!this.autoheight) {
                if (this.vScrollBar[0].style.width != scrollSize + 'px') {
                    this.vScrollBar.width(scrollSize);
                    vSizeChange = true;
                }
                if (this.vScrollBar[0].style.height != parseInt(height) - bottomSizeOffset + 'px') {
                    this.vScrollBar.height(parseInt(height) - bottomSizeOffset + 'px');
                    vSizeChange = true;
                }
                if (this.vScrollBar[0].style.left != parseInt(width) - parseInt(scrollSize) - scrollOffset + 'px' || this.vScrollBar[0].style.top != top + 'px') {
                    this.vScrollBar.css({ left: parseInt(width) - parseInt(scrollSize) - scrollOffset + 'px', top: top });
                }
            }

            if (this.rtl) {
                this.vScrollBar.css({ left: '0px', top: top });
                if (this.vScrollBar.css('visibility') != 'hidden') {
                    this.hScrollBar.css({ left: scrollSize + 2 });
                }
            }

            var vScrollInstance = this.vScrollInstance;
            vScrollInstance.disabled = this.disabled;
            if (!this.autoheight) {
                if (vSizeChange) {
                    vScrollInstance.refresh();
                }
            }
            var hScrollInstance = this.hScrollInstance;
            hScrollInstance.disabled = this.disabled;
            if (hSizeChange) {
                hScrollInstance.refresh();
            }

            if (this.autowidth) {
                this.hScrollBar[0].style.visibility = 'hidden';
            }

            this.statusbarheight = parseInt(this.statusbarheight);
            this.toolbarheight = parseInt(this.toolbarheight);

            var updateBottomRight = function (me) {
                if ((me.vScrollBar[0].style.visibility == 'visible') && (me.hScrollBar[0].style.visibility == 'visible')) {
                    me.bottomRight[0].style.visibility = 'visible';
                    me.bottomRight.css({ left: 1 + parseInt(me.vScrollBar.css('left')), top: parseInt(me.hScrollBar.css('top')) });
                    if (me.rtl) {
                        me.bottomRight.css('left', '0px');
                    }

                    me.bottomRight.width(parseInt(scrollSize) + 3);
                    me.bottomRight.height(parseInt(scrollSize) + 4);
                    if (me.showaggregates) {
                        me.bottomRight.css('z-index', 99);
                        me.bottomRight.height(parseInt(scrollSize) + 4 + me.statusbarheight);
                        me.bottomRight.css({ top: parseInt(me.hScrollBar.css('top')) - me.statusbarheight });
                    }
                }
                else me.bottomRight[0].style.visibility = 'hidden';
            }

            updateBottomRight(this);
            if (this.content[0].style.width != width - rightSizeOffset + 'px') {
                this.content.width(width - rightSizeOffset);
            }
            if (this.content[0].style.height != height - bottomSizeOffset + 3 + 'px') {
                this.content.height(height - bottomSizeOffset + 3);
            }
            if (this.content[0].style.top != top + 'px') {
                this.content.css('top', top);
            }
            if (this.rtl) {
                this.content.css('left', rightSizeOffset);
                if (this.table) {
                    var tablewidth = this.table.width();
                    if (tablewidth < width - rightSizeOffset) {
                        this.content.css('left',  width - tablewidth);
                    }
                }
            }

            if (this.showstatusbar) {
                this.statusbar.css('top', top + height - this.statusbarheight - (this.pageable ? this.pagerheight : 0));
                if (this.showaggregates) {
                    if (this.hScrollBar.css('visibility') == 'visible') {
                        this.hScrollBar.css({ top: top + height - scrollOffset - scrollSize - pageheight + this.statusbarheight + 'px' });
                        this.statusbar.css('top', 1 + top + height - scrollSize - 5 - this.statusbarheight - (this.pageable ? this.pagerheight : 0));
                    }
                    updateBottomRight(this);
                }
                if (this.rtl) {
                    if (this.hScrollBar.css('visibility') != 'visible') {
                        this.statusbar.css('left', this.content.css('left'));
                    }
                    else {
                        this.statusbar.css('left', '0px');
                    }
                }
            }

            if (this.pageable) {
                this.pager.width(width);
                this.pager.height(this.pagerheight);
                this.pager.css('top', top + height - this.pagerheight - 1);
            }
            else {
                this.pager[0].style.height = '0px';
            }

            if (this.table != null) {
                var offset = -2;
                if (this.vScrollBar[0].style.visibility == 'visible') {
                    offset = this.scrollbarsize + 3;
                }

                if (this.hScrollBar[0].style.visibility == 'visible') {
                    var newoffset = offset + this.table.width() - this.host.width();
                    if (newoffset >= 0) {
                        this.hScrollBar.jqxScrollBar('max', newoffset);
                    }
                    if (this.hScrollBar[0].style.visibility == 'visible' && newoffset == 0) {
                        this.hScrollBar[0].style.visibility = 'hidden';
                        this._arrange();
                    }
                }
            }

            if (width != parseInt(this.dataloadelement[0].style.width)) {
                this.dataloadelement[0].style.width = this.element.style.width;
            }
            if (height != parseInt(this.dataloadelement[0].style.height)) {
                this.dataloadelement[0].style.height = this.element.style.height;
            }
            this._hostwidth = width;
        },

        // destroy grid.
        destroy: function () {
            delete $.jqx.dataFormat.datescache;
            delete this.gridlocalization;
            $.jqx.utilities.resize(this.host, null, true);

            if (this.table && this.table[0])
            {
                var rowscount = this.table[0].rows.length;
                for (var i = 0; i < rowscount; i++) {
                    var row = this.table[0].rows[i];
                    var cells = row.cells;
                    var cellscount = cells.length;
                    for (var j = 0; j < cellscount; j++) {
                        $(row.cells[j]).remove();
                        row.cells[j] = null;
                        delete row.cells[j];
                    }
                    row.cells = null;
                    if (row.cells) {
                        delete row.cells;
                    }
                    $(this.table[0].rows[i]).remove();
                    this.table[0].rows[i] = null;
                }
                try
                {
                    delete this.table[0].rows;
                }
                catch (error) {
                }
                this.table.remove();
                delete this.table;
            }

            if (this.columns && this.columns.records) {
                for (var i = 0; i < this.columns.records.length; i++) {
                    var column = this.columns.records[i];
                    this._removecolumnhandlers(this.columns.records[i]);
                    if (column.element) {
                        $(column.element).remove();
                        $(column.sortasc).remove();
                        $(column.sortdesc).remove();
                        $(column.filtericon).remove();
                        $(column.menu).remove();

                        column.element = null;
                        column.uielement = null;
                        column.sortasc = null;
                        column.sortdesc = null;
                        column.filtericon = null;
                        column.menu = null;
                        delete column.element;
                        delete column.uielement;
                        delete column.sortasc;
                        delete column.sortdesc;
                        delete column.filtericon;
                        delete column.menu;
                        delete this.columnsrow[0].cells[i];
                    }
                }

                try
                {
                    delete this.columnsrow[0].cells;
                }
                catch (error) {
                }
                delete this.columnsrow;
            }
            jQuery.removeData(document.body, "contextmenu" + this.element.id);

            if (this.host.jqxDropDownList) {
                if (this._destroyfilterpanel) {
                    this._destroyfilterpanel();
                }
            }
            if (this.editable && this._destroyeditors) {
                this._destroyeditors();
            }
            if (this.filterable && this._destroyedfilters && this.showfilterrow) {
                this._destroyedfilters();
            }

            if (this.host.jqxMenu) {
                if (this.gridmenu) {
                    this.removeHandler($(document), 'click.menu' + this.element.id);
                    this.removeHandler(this.gridmenu, 'keydown');
                    this.removeHandler(this.gridmenu, 'closed');
                    this.removeHandler(this.gridmenu, 'itemclick');
                    this.gridmenu.jqxMenu('destroy');
                    this.gridmenu = null;
                }
            }

            if (this.pagershowrowscombo) {
                this.pagershowrowscombo.jqxDropDownList('destroy');
                this.pagershowrowscombo = null;
            }

            if (this.pagerrightbutton) {
                this.removeHandler(this.pagerrightbutton, 'mousedown');
                this.removeHandler(this.pagerrightbutton, 'mouseup');
                this.removeHandler(this.pagerrightbutton, 'click');
                this.pagerrightbutton.jqxButton('destroy');
                this.pagerrightbutton = null;
            }

            if (this.pagerleftbutton) {
                this.removeHandler(this.pagerleftbutton, 'mousedown');
                this.removeHandler(this.pagerleftbutton, 'mouseup');
                this.removeHandler(this.pagerleftbutton, 'click');
                this.pagerleftbutton.jqxButton('destroy');
                this.removeHandler($(document), 'mouseup.pagerbuttons' + this.element.id);
                this.pagerleftbutton = null;
            }

            this.removeHandler($(document), 'selectstart.' + this.element.id);
            this.removeHandler($(document), 'mousedown.resize' + this.element.id);
            this.removeHandler($(document), 'mouseup.resize' + this.element.id);
            this.removeHandler($(document), 'mousemove.resize' + this.element.id);
            if (this.isTouchDevice()) {
                var mousemove = $.jqx.mobile.getTouchEventName('touchmove') + '.resize' + this.element.id;
                var mousedown = $.jqx.mobile.getTouchEventName('touchstart') + '.resize' + this.element.id;
                var mouseup = $.jqx.mobile.getTouchEventName('touchend') + '.resize' + this.element.id;
                this.removeHandler($(document), mousemove);
                this.removeHandler($(document), mousedown);
                this.removeHandler($(document), mouseup);
            }
            this.removeHandler($(document), 'mousedown.reorder' + this.element.id);
            this.removeHandler($(document), 'mouseup.reorder' + this.element.id);
            this.removeHandler($(document), 'mousemove.reorder' + this.element.id);
            if (this.isTouchDevice()) {
                var mousemove = $.jqx.mobile.getTouchEventName('touchmove') + '.reorder' + this.element.id;
                var mousedown = $.jqx.mobile.getTouchEventName('touchstart') + '.reorder' + this.element.id;
                var mouseup = $.jqx.mobile.getTouchEventName('touchend') + '.reorder' + this.element.id;
                this.removeHandler($(document), mousemove);
                this.removeHandler($(document), mousedown);
                this.removeHandler($(document), mouseup);
            }
            this.removeHandler($(window), 'resize.' + this.element.id);

            if (this.groupable) {
                var mousemove = 'mousemove.grouping' + this.element.id;
                var mousedown = 'mousedown.grouping' + this.element.id;
                var mouseup = 'mouseup.grouping' + this.element.id;
                this.removeHandler($(document), mousemove);
                this.removeHandler($(document), mousedown);
                this.removeHandler($(document), mouseup);
            }
            if (this.columnsreorder) {
                var mousemove = 'mousemove.reorder' + this.element.id;
                var mousedown = 'mousedown.reorder' + this.element.id;
                var mouseup = 'mouseup.reorder' + this.element.id;
                this.removeHandler($(document), mousemove);
                this.removeHandler($(document), mousedown);
                this.removeHandler($(document), mouseup);
                delete this.columnsbounds;
            }

            if (this.content) {
                this.removeHandler(this.content, 'mousedown');
                this.removeHandler(this.content, 'scroll');
            }

    
            this._removeHandlers();
            this.hScrollInstance.destroy();
            this.vScrollInstance.destroy();
            this.hScrollBar.remove();
            this.vScrollBar.remove();
            this._clearcaches();
            delete this.hScrollInstance;
            delete this.vScrollInstance;
            delete this.visiblerows;
            delete this.hittestinfo;
            delete this.rows;
            delete this.columns;
            delete this.columnsbydatafield;
            delete this.pagescache;
            delete this.pageviews;
            delete this.cellscache;
            delete this.heights;
            delete this.hiddens;
            delete this.hiddenboundrows;
            delete this.heightboundrows;
            delete this.detailboundrows;
            delete this.details;
            delete this.expandedgroups;
            delete this._rowdetailscache;
            delete this._rowdetailselementscache;
            delete this.columnsmenu;
            this.columnsheader.remove();
            delete this.columnsheader;
            this.selectionarea.remove();
            delete this.selectionarea;
            if (this.menuitemsarray && this.menuitemsarray.length) {
                var itemslength = this.menuitemsarray.length;
                for (var i = 0; i < itemslength; i++) {
                    $(this.menuitemsarray[i]).remove();
                }
            }
            delete this.menuitemsarray;

            this.dataview._clearcaches();
            this.content.removeClass();
            this.content.remove();
            this.content = null;
            delete this.content;
            this.vScrollBar = null;
            this.hScrollBar = null;
            delete this.hScrollBar;
            delete this.hScrollBar;
            this.gridcontent.remove();
            delete this.gridcontent;

            if (this.gridmenu) {
                this.gridmenu = null;
                delete this.gridmenu;
            }

            delete this._mousemovefunc;
            delete this._mousewheelfunc;

            this.dataview.destroy();
            delete this.dataview;
            
            this.bottomRight.remove();
            delete this.bottomRight;

            this.wrapper.remove();
            delete this.wrapper;

            if (this.pagerdiv) {
                this.pagerdiv.remove();
                delete this.pagerdiv;
            }
            if (this.pagerpageinput) {
                this.pagerpageinput.remove();
                delete this.pagerpageinput;
            }
            if (this.pagergoto) {
                this.pagergoto.remove();
                delete this.pagergoto;
            }
            if (this.pagershowrows) {
                this.pagershowrows.remove();
                delete this.pagershowrows;
            }
            if (this.pagerfirstbutton) {
                this.pagerfirstbutton.remove();
                delete this.pagerfirstbutton;
            }
            if (this.pagerlastbutton) {
                this.pagerlastbutton.remove();
                delete this.pagerlastbutton;
            }
            if (this.pagerbuttons) {
                this.pagerbuttons.remove();
                delete this.pagerbuttons;
            }
            if (this.pagerdetails) {
                this.pagerdetails.remove();
                delete this.pagerdetails;
            }
            if (this.pagergotoinput) {
                this.pagergotoinput.remove();
                delete this.pagergotoinput;
            }

            this.pager.remove();
            delete this.pager;

            this.groupsheader.remove();
            delete this.groupsheader;

            this.dataloadelement.remove();
            delete this.dataloadelement;

            this.toolbar.remove();
            delete this.toolbar;

            this.statusbar.remove();
            delete this.statusbar;

            this.host.removeData();
            this.host.removeClass();
            this.host.remove();
            this.host = null;
            delete this.host;
            delete this.element;
            delete this.set;
            delete this.get;
            delete this.that;
            delete this.call;
        },

        _initializeColumns: function () {
            var datafields = this.source ? this.source.datafields : null;
            if (datafields == null && this.source && this.source._source) {
                datafields = this.source._source.datafields;
            }
            var hasfields = datafields ? datafields.length > 0 : false;
            if (this.autogeneratecolumns) {
                var cols = new Array();
                if (datafields) {
                    $.each(datafields, function () {
                        var column = { datafield: this.name, text: this.text || this.name, cellsformat: this.format || "" };
                        cols.push(column);
                    });
                }
                else {
                    if (this.source.records.length > 0) {
                        var row = this.source.records[0];
                        for (obj in row) {
                            if (obj != "uid") {
                                var column = {width: 100, datafield: obj, text: obj};
                                cols.push(column);
                            }
                        }
                    }
                }
                this.columns = cols;
            }

            if (this.columns && this.columns.records) {
                for (var i = 0; i < this.columns.records.length; i++) {
                    this._removecolumnhandlers(this.columns.records[i]);
                }
            }
            var me = this.that;
            var _columns = new $.jqx.collection(this.element);
            var visibleindex = 0;
            this._haspinned = false;
            if (!this._columns) {
                this._columns = this.columns;
            }
            else {
                this.columns = this._columns;
            }

            if (this.groupable) {
                $.each(this.groups, function (index) {
                    var column = new jqxGridColumn(me, this);
                    column.visibleindex = visibleindex++;
                    column.width = me.groupindentwidth;
                    _columns.add(column);
                    column.grouped = true;
                    column.filterable = false;
                    column.sortable = false;
                    column.editable = false;
                    column.resizable = false;
                    column.draggable = false;
                });
            }

            if (this.rowdetails && this.showrowdetailscolumn) {
                var column = new jqxGridColumn(me, this);
                column.visibleindex = visibleindex++;
                column.width = me.groupindentwidth;
                column.pinned = true;
                column.editable = false;
                column.filterable = false;
                column.draggable = false;
                column.groupable = false;
                column.resizable = false;
                _columns.add(column);
                me._haspinned = true;
            }

            if (this.selectionmode == "checkbox") {
                var column = new jqxGridColumn(me, null);
                column.visibleindex = visibleindex++;
                column.width = me.groupindentwidth;
                column.checkboxcolumn = true;
                column.editable = false;
                column.columntype = 'checkbox';
                column.groupable = false;
                column.draggable = false;
                column.filterable = false;
                column.resizable = false;
                column.datafield = "_checkboxcolumn";
                _columns.add(column);
            }

            var keys = new Array();
            $.each(this.columns, function (index) {
                if (me.columns[index] != undefined) {
                    var column = new jqxGridColumn(me, this);
                    column.visibleindex = visibleindex++;
                    if (this.dataField != undefined) {
                        this.datafield = this.dataField;
                    }
                    if (this.pinned) {
                        me._haspinned = true;
                    }

                    if (this.datafield == null) {
                        if (me.source && me.source._source && (me.source._source.datatype == 'array')) {
                            if (!hasfields) {
                                if (!me.source._source.datafields) {
                                    me.source._source.datafields = new Array();
                                    me.source._source.datafields.push({ name: index.toString() });
                                }
                                else {
                                    me.source._source.datafields.push({ name: index.toString() });
                                }
                            }
                            this.datafield = index.toString();
                            this.displayfield = index.toString();
                            column.datafield = this.datafield;
                            column.displayfield = this.displayfield;
                      
                        }
                    }
                    else {
                        if (keys[this.datafield]) {
                            throw new Error("jqxGrid: Invalid column 'datafield' setting. jqxGrid's columns should be initialized with unique data fields.");
                            me.host.remove();
                            return false;
                        }
                        else {
                            keys[this.datafield] = true;
                        }
                    }
                    _columns.add(column);
                }
            });

            if (this.rtl) _columns.records.reverse();
            this.columns = _columns;
        },

        _initializeRows: function () {
            var _rows = new $.jqx.collection(this.element);
            if (this.rows) {
                this.rows.clear();
            }
            this.rows = _rows;
        },

        _raiseEvent: function (id, arg) {
            if (arg == undefined)
                arg = { owner: null };

            if (this._trigger === false)
                return;

            var evt = this.events[id];
            if (!this._camelCase) {
                evt = evt.toLowerCase();
            }

            args = arg;
            args.owner = this;

            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;
            var result = this.host.trigger(event);

            // save the new event arguments.
            arg = event.args;
            return result;
        },

        // performs mouse wheel.
        wheel: function (event, self) {
            if (self.autoheight && self.hScrollBar.css('visibility') != 'visible') {
                event.returnValue = true;
                return true;
            }

            var delta = 0;
            if (!event) /* For IE. */
                event = window.event;

            if (event.originalEvent && event.originalEvent.wheelDelta) {
                event.wheelDelta = event.originalEvent.wheelDelta;
            }

            if (event.wheelDelta) { /* IE/Opera. */
                delta = event.wheelDelta / 120;
            } else if (event.detail) { /** Mozilla case. */
                delta = -event.detail / 3;
            }

            if (delta) {
                var result = self._handleDelta(delta);
                if (result) {
                    if (event.preventDefault)
                        event.preventDefault();

                    if (event.originalEvent != null) {
                        event.originalEvent.mouseHandled = true;
                    }

                    if (event.stopPropagation != undefined) {
                        event.stopPropagation();
                    }
                }

                if (result) {
                    result = false;
                    event.returnValue = result;
                    return result;
                }
                else {
                    return false;
                }
            }

            if (event.preventDefault)
                event.preventDefault();
            event.returnValue = false;
        },

        _handleDelta: function (delta) {
            if (this.vScrollBar.css('visibility') != 'hidden') {
                var oldvalue = this.vScrollInstance.value;
                if (delta < 0) {
                    this.scrollDown();
                }
                else this.scrollUp();
                var newvalue = this.vScrollInstance.value;
                if (oldvalue != newvalue) {
                    return true;
                }
            }
            else if (this.hScrollBar.css('visibility') != 'hidden') {
                var oldvalue = this.hScrollInstance.value;
                if (delta > 0) {
                    if (this.hScrollInstance.value > 2 * this.horizontalscrollbarstep) {
                        this.hScrollInstance.setPosition(this.hScrollInstance.value - 2 * this.horizontalscrollbarstep);
                    }
                    else {
                        this.hScrollInstance.setPosition(0);
                    }
                }
                else {
                    if (this.hScrollInstance.value < this.hScrollInstance.max) {
                        this.hScrollInstance.setPosition(this.hScrollInstance.value + 2 * this.horizontalscrollbarstep);
                    }
                    else this.hScrollInstance.setPosition(this.hScrollInstance.max);

                }
                var newvalue = this.hScrollInstance.value;
                if (oldvalue != newvalue) {
                    return true;
                }
            }

            return false;
        },

        // scrolls down.
        scrollDown: function () {
            if (this.vScrollBar.css('visibility') == 'hidden')
                return;

            var vScrollInstance = this.vScrollInstance;
            if (vScrollInstance.value + this.rowsheight <= vScrollInstance.max) {
                vScrollInstance.setPosition(parseInt(vScrollInstance.value) + this.rowsheight);
            }
            else vScrollInstance.setPosition(vScrollInstance.max);
        },

        // scrolls up.
        scrollUp: function () {
            if (this.vScrollBar.css('visibility') == 'hidden')
                return;

            var vScrollInstance = this.vScrollInstance;
            if (vScrollInstance.value - this.rowsheight >= vScrollInstance.min) {
                vScrollInstance.setPosition(parseInt(vScrollInstance.value) - this.rowsheight);
            }
            else vScrollInstance.setPosition(vScrollInstance.min);
        },

        _removeHandlers: function () {
            var self = this.that;
            this.removeHandler(this.vScrollBar, 'valuechanged');
            this.removeHandler(this.hScrollBar, 'valuechanged');
            this.vScrollInstance.valuechanged = null;
            this.hScrollInstance.valuechanged = null;

            var eventname = 'mousedown.jqxgrid';

            if (this.isTouchDevice()) {
                eventname = $.jqx.mobile.getTouchEventName('touchend');
            }

            this.removeHandler(this.host, 'dblclick.jqxgrid');
            this.removeHandler(this.host, eventname);
            this.removeHandler(this.content, 'mousemove', this._mousemovefunc);
            this.removeHandler(this.host, 'mouseleave.jqxgrid');
            this.removeHandler(this.content, 'mouseenter');
            this.removeHandler(this.content, 'mouseleave');
            this.removeHandler(this.content, 'mousedown');
            this.removeHandler(this.content, 'scroll');
            this.removeHandler(this.content, 'selectstart.' + this.element.id);
            this.removeHandler(this.host, 'dragstart.' + this.element.id);
            this.removeHandler(this.host, 'keydown.edit' + this.element.id);
            this.removeHandler($(document), 'keydown.edit' + this.element.id);
            this.removeHandler($(document), 'keyup.edit' + this.element.id);
            if (this._mousemovedocumentfunc) {
                this.removeHandler($(document), 'mousemove.selection' + this.element.id, this._mousemovedocumentfunc);
            }
            this.removeHandler($(document), 'mouseup.selection' + this.element.id);
            if (this._mousewheelfunc) {
                this.removeHandler(this.host, 'mousewheel', this._mousewheelfunc);
            }
            if (this.editable) {
                this.removeHandler($(document), 'mousedown.gridedit' + this.element.id);
            }
            if (this.host.off) {
                this.content.off('mousemove');
                this.host.off('mousewheel');
            }

        },

        _addHandlers: function () {
            var self = this.that;
            var isTouch = self.isTouchDevice();
            if (!isTouch) {
                this.addHandler(this.host, 'dragstart.' + this.element.id, function (event) {
                    return false;
                });
            }

            if (this.editable) {
                this.addHandler($(document), 'mousedown.gridedit' + this.element.id, function (event) {
                    if (self.editable && self.begincelledit) {
                        if (self.editcell) {
                            if (!self.vScrollInstance.isScrolling() && !self.vScrollInstance.isScrolling()) {
                                var gridOffset = self.host.coord();
                                var gridWidth = self.host.width();
                                var gridHeight = self.host.height();
                                var close = false;
                                var yclose = false;
                                var xclose = false;
                                if (event.pageY < gridOffset.top || event.pageY > gridOffset.top + gridHeight) {
                                    close = true;
                                    yclose = true;
                                }
                                if (event.pageX < gridOffset.left || event.pageX > gridOffset.left + gridWidth) {
                                    close = true;
                                    xclose = true;
                                }

                                if (close) {
                                    var stopPropagation = false;
                                    if (self.editcell && self.editcell.editor) {
                                        switch (self.editcell.columntype) {
                                            case "datetimeinput":
                                                if (self.editcell.editor.jqxDateTimeInput && self.editcell.editor.jqxDateTimeInput('container')[0].style.display == 'block') {
                                                    var top = self.editcell.editor.jqxDateTimeInput('container').coord().top;
                                                    var bottom = self.editcell.editor.jqxDateTimeInput('container').coord().top + self.editcell.editor.jqxDateTimeInput('container').height();
                                                    if (yclose && (event.pageY < top || event.pageY > bottom)) {
                                                        close = true;
                                                        self.editcell.editor.jqxDateTimeInput('close');
                                                    }
                                                    else {
                                                        return;
                                                    }
                                                }
                                                break;
                                            case "combobox":
                                                if (self.editcell.editor.jqxComboBox && self.editcell.editor.jqxComboBox('container')[0].style.display == 'block') {
                                                    var top = self.editcell.editor.jqxComboBox('container').coord().top;
                                                    var bottom = self.editcell.editor.jqxComboBox('container').coord().top + self.editcell.editor.jqxComboBox('container').height();
                                                    if (yclose && (event.pageY < top || event.pageY > bottom)) {
                                                        close = true;
                                                        self.editcell.editor.jqxComboBox('close');
                                                    }
                                                    else {
                                                        return;
                                                    }
                                                }
                                                break;
                                            case "dropdownlist":
                                                if (self.editcell.editor.jqxDropDownList && self.editcell.editor.jqxDropDownList('container')[0].style.display == 'block') {
                                                    var top = self.editcell.editor.jqxDropDownList('container').coord().top;
                                                    var bottom = self.editcell.editor.jqxDropDownList('container').coord().top + self.editcell.editor.jqxDropDownList('container').height();
                                                    if (yclose && (event.pageY < top || event.pageY > bottom)) {
                                                        close = true;
                                                        self.editcell.editor.jqxDropDownList('close');
                                                    }
                                                    else {
                                                        return;
                                                    }
                                                }
                                                break;
                                            case "template":
                                            case "custom":
                                                var editorType = ['jqxDropDownList', 'jqxComboBox', 'jqxDropDownButton', 'jqxDateTimeInput'];
                                                var testEditorType = function (type) {
                                                    var editorData = self.editcell.editor.data();
                                                    if (editorData[type] && editorData[type].instance.container && editorData[type].instance.container[0].style.display == 'block') {
                                                        var instance = editorData[type].instance;
                                                        var top = instance.container.coord().top;
                                                        var bottom = instance.container.coord().top + instance.container.height();
                                                        if (yclose && (event.pageY < top || event.pageY > bottom)) {
                                                            close = true;
                                                            instance.close();
                                                            return true;
                                                        }
                                                        else {
                                                            return false;
                                                        }
                                                    }
                                                }
                                                for (var i = 0; i < editorType.length; i++) {
                                                    var result = testEditorType(editorType[i]);
                                                    if (result == false) return;
                                                }
                                                break;
                                        }
                                    }
                                    self.endcelledit(self.editcell.row, self.editcell.column, false, true);
                                }
                            }
                        }
                    }
                });
            }

            this.vScrollInstance.valuechanged = function (params) {
                if (self.virtualsizeinfo) {
                    self._closemenu();
                    if (self.scrollmode != 'physical') {
                        self._renderrows(self.virtualsizeinfo);
                        self.currentScrollValue = params.currentValue;
                    }
                    else {
                        if (self.currentScrollValue != undefined && Math.abs(self.currentScrollValue - params.currentValue) >= 5) {
                            self._renderrows(self.virtualsizeinfo);
                            self.currentScrollValue = params.currentValue;
                        }
                        else {
                            self._renderrows(self.virtualsizeinfo);
                            self.currentScrollValue = params.currentValue;
                        }
                    }

                    if (!self.pageable && !self.groupable && self.dataview.virtualmode) {
                        if (self.loadondemandupdate) {
                            clearTimeout(self.loadondemandupdate);
                        }

                        self.loadondemandupdate = setTimeout(function () {
                            self.loadondemand = true;
                            self._renderrows(self.virtualsizeinfo);
                        }, 100);
                    }
                    if (isTouch) {
                        self._lastScroll = new Date();
                    }
                }
            }

            this.hScrollInstance.valuechanged = function (params) {
                if (self.virtualsizeinfo) {
                    self._closemenu();
                    var doHScroll = function () {
                        self._renderhorizontalscroll();
                        self._renderrows(self.virtualsizeinfo);
                        if (self.editcell && !self.editrow) {
                            if (self._showcelleditor && self.editcell.editing) {
                                if (!self.hScrollInstance.isScrolling()) {
                                    self._showcelleditor(self.editcell.row, self.getcolumn(self.editcell.column), self.editcell.element, self.editcell.init);
                                }
                            }
                        }
                    }

                    var ie10 = self._browser == undefined ? self._isIE10() : self._browser;
                    if (navigator && navigator.userAgent.indexOf('Safari') != -1) {
                        if (self._hScrollTimer) clearTimeout(self._hScrollTimer);
                        self._hScrollTimer = setTimeout(function () {
                            doHScroll();
                        }, 1);
                    }
                    else if ($.jqx.browser.mozilla || $.jqx.browser.msie) {
                        if (self._hScrollTimer) clearTimeout(self._hScrollTimer);
                        self._hScrollTimer = setTimeout(function () {
                            doHScroll();
                        }, 0.01);
                    }
                    else {
                        doHScroll();
                    }

                    if (isTouch) {
                        self._lastScroll = new Date();
                    }
                }
            }

            this._mousewheelfunc = this._mousewheelfunc || function (event) {
                if (!self.editcell && self.enablemousewheel) {
                    self.wheel(event, self);
                    return false;
                }
            };

            this.removeHandler(this.host, 'mousewheel', this._mousewheelfunc);
            this.addHandler(this.host, 'mousewheel', this._mousewheelfunc);

            var eventname = 'mousedown.jqxgrid';

            if (isTouch) {
                eventname = $.jqx.mobile.getTouchEventName('touchend');
            }

            this.addHandler(this.host, eventname, function (event) {
                if (self.isTouchDevice()) {
                    self._newScroll = new Date();
                    if (self._newScroll - self._lastScroll < 500) {
                        return false;
                    }
                    if ($(event.target).ischildof(self.vScrollBar)) {
                        return false;
                    }
                    if ($(event.target).ischildof(self.hScrollBar)) {
                        return false;
                    }
                }
                self._mousedown = new Date();
                var result = self._handlemousedown(event, self);
                if (self.isNestedGrid) {
                    if (!self.resizablecolumn && !self.columnsreorder) {
                        event.stopPropagation();
                    }
                }

                self._lastmousedown = new Date();
                return result;
            });

            if (!isTouch) {
                this.addHandler(this.host, 'dblclick.jqxgrid', function (event) {
                    if (self.editable && self.begincelledit && self.editmode == 'dblclick') {
                        self._handledblclick(event, self);
                    }
                    else if ($.jqx.browser.msie && $.jqx.browser.version < 9) {
                        var result = self._handlemousedown(event, self);
                    }

                    self.mousecaptured = false;
                    self._lastmousedown = new Date();
                    return true;
                });

                this._mousemovefunc = function (event) {
                    if (self._handlemousemove) {
                        return self._handlemousemove(event, self);
                    };
                }

                this.addHandler(this.content, 'mousemove', this._mousemovefunc);

                if (self._handlemousemoveselection) {
                    this._mousemovedocumentfunc = function (event) {
                        if (self._handlemousemoveselection) {
                            return self._handlemousemoveselection(event, self);
                        };
                    }

                    this.addHandler($(document), 'mousemove.selection' + this.element.id, this._mousemovedocumentfunc);
                }
                     
                this.addHandler($(document), 'mouseup.selection' + this.element.id, function (event) {
                    if (self._handlemouseupselection) {
                        self._handlemouseupselection(event, self);
                    }
                });
            }

            try
            {
                if (document.referrer != "" || window.frameElement) {
                    if (window.top != null && window.top != window.self) {
                        var parentLocation = null;

                        if (window.parent && document.referrer) {
                            parentLocation = document.referrer;
                        }

                        if (parentLocation && parentLocation.indexOf(document.location.host) != -1) {
                            var eventHandle = function (event) {
                                if (self._handlemouseupselection) {
                                    self._handlemouseupselection(event, self);
                                }
                            };

                            if (window.top.document.addEventListener) {
                                window.top.document.addEventListener('mouseup', eventHandle, false);

                            } else if (window.top.document.attachEvent) {
                                window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                            }
                        }
                    }
                }
            }
            catch (error) {
            }

            this.focused = false;

            if (!isTouch) {
                this.addHandler(this.content, 'mouseenter', function (event) {
                    self.focused = true;

                    if (self.wrapper) {
                        self.wrapper.attr('tabindex', 1);
                        self.content.attr('tabindex', 2);
                    }

                    if (self._overlayElement) {
                        if (self.vScrollInstance.isScrolling() || self.hScrollInstance.isScrolling()) {
                            self._overlayElement[0].style.visibility = 'visible';
                        }
                        else {
                            self._overlayElement[0].style.visibility = 'hidden';
                        }
                    }
                });

                this.addHandler(this.content, 'mouseleave', function (event) {                  
                    if (self._handlemousemove) {
                        if (self.enablehover) {
                            self._clearhoverstyle();
                        }
                    }
                    if (self._overlayElement) {
                        self._overlayElement[0].style.visibility = 'hidden';
                    }
                    self.focused = false;
                });

                if (this.groupable || this.columnsreorder) {
                    this.addHandler($(document), 'selectstart.' + this.element.id, function (event) {
                        if (self.__drag === true) {
                            return false;
                        }
                    });
                }

                this.addHandler(this.content, 'selectstart.' + this.element.id, function (event) {
                    if (self.enablebrowserselection) {
                        return true;
                    }

                    if (self.showfilterrow) {
                        if ($(event.target).ischildof(self.filterrow))
                            return true;
                    }

                    if (!self.editcell) {
                        return false;
                    }
                });

                this.addHandler($(document), 'keyup.edit' + this.element.id, function (event) {
                    self._keydown = false;
                });

                this.addHandler($(document), 'keydown.edit' + this.element.id, function (event) {
                    self._keydown = true && !self.editcell;
                    var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
                    if (self.handlekeyboardnavigation) {
                        var handled = self.handlekeyboardnavigation(event);
                        if (handled == true)
                            return false;
                    }

                    if (self.editable && self.editcell) {
                        if (key == 13 || key == 27) {
                            if (self._handleeditkeydown) {
                                result = self._handleeditkeydown(event, self);
                            }
                        }
                    }
                    if (key == 27) {
                        self.mousecaptured = false;
                        if (self.selectionarea.css('visibility') == 'visible') {
                            self.selectionarea.css('visibility', 'hidden');
                        }
                    }
                    if ($.jqx.browser.msie && $.jqx.browser.version < 8 && self.focused && !self.isNestedGrid) {
                        if (key == 13 && result == false) {
                            return result;
                        }

                        var result = true;
                        var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
                        if (!self.editcell && self.editable && self.editmode != 'programmatic') {
                            if (self._handleeditkeydown) {
                                result = self._handleeditkeydown(event, self);
                            }
                        }
                        if (result && self.keyboardnavigation && self._handlekeydown) {
                            result = self._handlekeydown(event, self);
                            if (!result) {
                                if (event.preventDefault)
                                    event.preventDefault();

                                if (event.stopPropagation != undefined) {
                                    event.stopPropagation();
                                }
                            }
                            return result;
                        }
                    }

                    return true;
                });

                this.addHandler(this.host, 'keydown.edit' + this.element.id, function (event) {
                    var result = true;
                    if (self.handlekeyboardnavigation) {
                        var handled = self.handlekeyboardnavigation(event);
                        if (handled == true) {
                            return false;
                        }
                    }

                    if (self.editable && self.editmode != 'programmatic') {
                        if (self._handleeditkeydown) {
                            result = self._handleeditkeydown(event, self);
                        }
                    }
                    if (!($.jqx.browser.msie && $.jqx.browser.version < 8)) {
                        if (result && self.keyboardnavigation && self._handlekeydown) {
                            result = self._handlekeydown(event, self);
                            if (self.isNestedGrid) {
                                event.stopPropagation();
                            }
                        }
                    }
                    else if (self.isNestedGrid) {
                        if (result && self.keyboardnavigation && self._handlekeydown) {
                            result = self._handlekeydown(event, self);
                            event.stopPropagation();
                        }
                    }

                    if (!result) {
                        if (event.preventDefault)
                            event.preventDefault();

                        if (event.stopPropagation != undefined) {
                            event.stopPropagation();
                        }
                    }
                    return result;
                });
            }
        },

        _hittestrow: function (x, y) {
            if (this.vScrollInstance == null || this.hScrollInstance == null)
                return;

            if (x == undefined) x = 0;
            if (y == undefined) y == 0;

            var vScrollInstance = this.vScrollInstance;
            var hScrollInstance = this.hScrollInstance;
            var verticalscrollvalue = vScrollInstance.value;
            if (this.vScrollBar.css('visibility') != 'visible') {
                verticalscrollvalue = 0;
            }
            var horizontalscrollvalue = hScrollInstance.value;
            if (this.hScrollBar.css('visibility') != 'visible') {
                horizontalscrollvalue = 0;
            }

            if (this.scrollmode == 'deferred' && this._newmax != null) {
                if (verticalscrollvalue > this._newmax) verticalscrollvalue = this._newmax;
            }

            var top = parseInt(verticalscrollvalue) + y;
            var left = parseInt(horizontalscrollvalue) + x;

            if (this.visiblerows == null) {
                return;
            }
            if (this.visiblerows.length == 0) {
                return;
            }

            var details = false;
            var hitIndex = this._findvisiblerow(top, this.visiblerows);
            if (hitIndex >= 0) {
                var hitRow = this.visiblerows[hitIndex];
                var hasdetails = this.rowdetails && hitRow.rowdetails;
                var showdetails = !hitRow.rowdetailshidden;
                if (hasdetails) {
                    var prevRow = this.visiblerows[hitIndex - 1];
                    if (prevRow == hitRow) {
                        hitRow = prevRow;
                        hitIndex--;
                    }

                    if (showdetails) {
                        var rowstop = $(this.hittestinfo[hitIndex].visualrow).position().top + parseInt(this.table.css('top'));
                        var rowsheight = $(this.hittestinfo[hitIndex].visualrow).height();
                        if (!(y >= rowstop && y <= rowstop + rowsheight)) {
                            hitIndex++;
                            hitRow = this.visiblerows[hitIndex];
                            details = true;
                        }
                    }
                }
            }
            return { index: hitIndex, row: hitRow, details: details };
        },

        getcellatposition: function (left, top) {
            var self = this.that;
            var columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
            var groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
            var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
            groupsheaderheight += toolbarheight;

            var hostoffset = this.host.coord();
            if (this.hasTransform) {
                hostoffset = $.jqx.utilities.getOffset(this.host);
            }
            var x = left - hostoffset.left;
            var y = top - columnheaderheight - hostoffset.top - groupsheaderheight;
            var rowinfo = this._hittestrow(x, y);
            var row = rowinfo.row;
            var index = rowinfo.index;
            var tablerow = this.table[0].rows[index];

            if (this.dataview && this.dataview.records.length == 0) {
                var rows = this.table[0].rows;
                var rowY = 0;
                for (var i = 0; i < rows.length; i++) {
                    if (y >= rowY && y < rowY + this.rowsheight) {
                        tablerow = rows[i];
                        break;
                    }
                    rowY += this.rowsheight;
                }
                row = { boundindex: i };
            }

            if (tablerow == null)
                return true;

            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var cellindex = 0;
            var groupslength = this.groupable ? this.groups.length : 0;

            for (var i = 0; i < tablerow.cells.length; i++) {
                var columnleft = parseInt($(this.columnsrow[0].cells[i]).css('left'));
                var left = columnleft - horizontalscrollvalue;
                if (self.columns.records[i].pinned) {
                    left = columnleft;
                }

                var right = left + $(this.columnsrow[0].cells[i]).width();
                if (right >= x && x >= left) {
                    cellindex = i;
                    break;
                }
            }

            if (row != null) {
                var column = this._getcolumnat(cellindex);
                return { row: this.getboundindex(row), column: column.datafield, value: this.getcellvalue(this.getboundindex(row), column.datafield) };
            }

            return null;
        },

        _handlemousedown: function (event, self) {
            if (event.target == null) {
                return true;
            }

            if (self.disabled) {
                return true;
            }

            if ($(event.target).ischildof(this.columnsheader)) {
                return true;
            }

            var rightclick;
            if (event.which) rightclick = (event.which == 3);
            else if (event.button) rightclick = (event.button == 2);

            var middleclick;
            if (event.which) middleclick = (event.which == 2);
            else if (event.button) middleclick = (event.button == 1);

            if (middleclick) {
                return true;
            }
            
            if (this.showstatusbar) {
                if ($(event.target).ischildof(this.statusbar))
                    return true;
                if (event.target == this.statusbar[0])
                    return true;
            }
            if (this.showtoolbar) {
                if ($(event.target).ischildof(this.toolbar))
                    return true;
                if (event.target == this.toolbar[0])
                    return true;
            }
            if (this.pageable) {
                if ($(event.target).ischildof(this.pager))
                    return true;
                if (event.target == this.pager[0])
                    return true;
            }
            if (!this.columnsheader) return true;

            if (!this.editcell) {
                if (this.pageable) {
                    if ($(event.target).ischildof(this.pager))
                        return true;
                }
                //this.focus();
            }

            var columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
            var groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
            var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
            groupsheaderheight += toolbarheight;

            var hostoffset = this.host.coord();
            if (this.hasTransform) {
                hostoffset = $.jqx.utilities.getOffset(this.host);
                var bodyOffset = this._getBodyOffset();
                hostoffset.left -= bodyOffset.left;
                hostoffset.top -= bodyOffset.top;
            }
        
            var left = parseInt(event.pageX);
            var top = parseInt(event.pageY);

            if (this.isTouchDevice()) {
                var touches = self.getTouches(event);
                var touch = touches[0];
                left = parseInt(touch.pageX);
                top = parseInt(touch.pageY);
                if (self.touchmode == true) {
                    left = parseInt(touch._pageX);
                    top = parseInt(touch._pageY);
                }
            }
            var x = left - hostoffset.left;
            var y = top - columnheaderheight - hostoffset.top - groupsheaderheight;
            if (this.pageable && !this.autoheight && this.gotopage) {
                var pagerposition = this.pager.coord().top - hostoffset.top - groupsheaderheight - columnheaderheight;
                if (y > pagerposition) {
                    return;
                }
            }
            var rowinfo = this._hittestrow(x, y);
            if (!rowinfo)
                return;

            if (rowinfo.details)
                return;

            var row = rowinfo.row;
            var index = rowinfo.index;
            var targetclassname = event.target.className;
            var tablerow = this.table[0].rows[index];
            if (tablerow == null) {
                if (self.editable && self.begincelledit) {
                    if (self.editcell) {
                        self.endcelledit(self.editcell.row, self.editcell.column, false, true);
                    }
                }
                return true;
            }

            self.mousecaptured = true;
            self.mousecaptureposition = { left: event.pageX, top: event.pageY - groupsheaderheight, clickedrow: tablerow };

            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            if (this.rtl) {
                if (this.hScrollBar.css('visibility') != 'hidden') {
                    horizontalscrollvalue = hScrollInstance.max - hScrollInstance.value;
                }
            }

            var cellindex = -1;
            var groupslength = this.groupable ? this.groups.length : 0;
            if (this.rtl) {
                if (this.vScrollBar[0].style.visibility != 'hidden') {
                    horizontalscrollvalue -= this.scrollbarsize + 4;
                }
                if (this.hScrollBar[0].style.visibility == 'hidden') {
                    horizontalscrollvalue = -parseInt(this.content.css('left'));
                }
            }

            for (var i = 0; i < tablerow.cells.length; i++) {
                var columnleft = parseInt($(this.columnsrow[0].cells[i]).css('left'));
                var left = columnleft - horizontalscrollvalue;
                if (self.columns.records[i].pinned && !self.rtl) {
                    left = columnleft;
                }

                var column = this._getcolumnat(i);
                if (column != null && column.hidden) {
                    continue;
                }

                var right = left + $(this.columnsrow[0].cells[i]).width();
                if (right >= x && x >= left) {
                    cellindex = i;
                    self.mousecaptureposition.clickedcell = i;
                    break;
                }
            }

            if (this.rtl && this._haspinned) {
                for (var i = tablerow.cells.length-1; i >= 0; i--) {
                    if (!self.columns.records[i].pinned) break;

                    var columnleft = $(this.columnsrow[0].cells[i]).coord().left-this.host.coord().left;
                    var left = columnleft;
        
                    var column = this._getcolumnat(i);
                    if (column != null && column.hidden) {
                        continue;
                    }

                    var right = left + $(this.columnsrow[0].cells[i]).width();
                    if (right >= x && x >= left) {
                        cellindex = i;
                        self.mousecaptureposition.clickedcell = i;
                        break;
                    }
                }
            }

            if (row != null && cellindex >= 0) {
                this._raiseEvent(1, { rowindex: this.getboundindex(row), visibleindex: row.visibleindex, group: row.group, rightclick: rightclick, originalEvent: event });
                var column = this._getcolumnat(cellindex);
                var cellvalue = this.getcellvalue(this.getboundindex(row), column.datafield);
                if (this.editable && this.editcell) {
                    if (column.datafield == this.editcell.column) {
                        if (this.getboundindex(row) == this.editcell.row) {
                            this.mousecaptured = false;
                        }
                    }
                }

                this._raiseEvent(8, { rowindex: this.getboundindex(row), column: column ? column.getcolumnproperties() : null, datafield: column ? column.datafield : null, columnindex: cellindex, value: cellvalue, rightclick: rightclick, originalEvent: event });

                if (this.isTouchDevice()) {
                    if (column.columntype == 'checkbox' && this.editable && this._overlayElement) {
                        if (!this.editcell) {
                            this._overlayElement.css('visibility', 'hidden');
                            this.editcell = this.getcell(index, column.datafield);
                            return true;
                        }
                    }
                    else if (column.columntype == 'button' && this._overlayElement) {
                        //   this._overlayElement.css('visibility', 'hidden');
                        if (column.buttonclick) {
                            column.buttonclick(tablerow.cells[cellindex].buttonrow, event);
                        }
                        return true;
                    }
                }

                // handle double clicks.
                var _triggeredEvents = false;
                if (this._lastmousedown != null) {
                    if (this._mousedown - this._lastmousedown < 300) {
                        if (this._clickedrowindex == this.getboundindex(row)) {
                            this._raiseEvent(22, { rowindex: this.getboundindex(row), visibleindex: row.visibleindex, group: row.group, rightclick: rightclick, originalEvent: event });
                            if (this._clickedcolumn == column.datafield) {
                                this._raiseEvent(23, { rowindex: this.getboundindex(row), column: column ? column.getcolumnproperties() : null, datafield: column ? column.datafield : null, columnindex: cellindex, value: cellvalue, rightclick: rightclick, originalEvent: event });
                            }
                            _triggeredEvents = true;
                            this._clickedrowindex = -1;
                            this._clickedcolumn = null;
                            if (event.isPropagationStopped && event.isPropagationStopped()) {
                                return false;
                            }
                        }
                    }
                }

                if (rightclick) return true;

                if (!_triggeredEvents) {
                    this._clickedrowindex = this.getboundindex(row);
                    this._clickedcolumn = column.datafield;
                }
                // end of handle double clicks.

                var browserInfo = $.jqx.utilities.getBrowser();
                if (browserInfo.browser == 'msie' && parseInt(browserInfo.version) <= 7) {
                    if (cellindex == 0 && this.rowdetails) {
                        targetclassname = "jqx-grid-group-collapse";
                    }
                    if (groupslength > 0) {
                        if (cellindex <= groupslength) {
                            targetclassname = "jqx-grid-group-collapse";
                        }
                    }
                }

                if (targetclassname.indexOf('jqx-grid-group-expand') != -1 || targetclassname.indexOf('jqx-grid-group-collapse') != -1) {
                    if (!this.rtl) {
                        if (groupslength > 0 && cellindex < groupslength && this._togglegroupstate) {
                            this._togglegroupstate(row.bounddata, true);
                        }
                        else if (cellindex == groupslength && this.rowdetails && this.showrowdetailscolumn) {
                            this._togglerowdetails(row.bounddata, true);
                            this.gridcontent[0].scrollTop = 0;
                            this.gridcontent[0].scrollLeft = 0;
                        }
                    }
                    else {
                        if (groupslength > 0 && cellindex > tablerow.cells.length - groupslength - 1 && this._togglegroupstate) {
                            this._togglegroupstate(row.bounddata, true);
                        }
                        else if (cellindex == tablerow.cells.length - 1 - groupslength && this.rowdetails && this.showrowdetailscolumn) {
                            this._togglerowdetails(row.bounddata, true);
                            this.gridcontent[0].scrollTop = 0;
                            this.gridcontent[0].scrollLeft = 0;
                        }
                    }
                }
                else {
                    if (row.boundindex != -1) {
                        var oldselectedrowindexes = this.selectedrowindexes.slice(0);
                        var isoldcell = false;
                        if (self.selectionmode != 'none' && self.selectionmode != 'checkbox' && this._selectrowwithmouse) {
                            if (self.selectionmode == 'multiplecellsadvanced' || self.selectionmode == 'multiplecellsextended' || self.selectionmode == 'multiplerowsextended' || self.selectionmode == 'multiplerowsadvanced') {
                                if (!event.ctrlKey && !event.shiftKey) {
                                    self.selectedrowindexes = new Array();
                                    self.selectedcells = new Array();
                                }
                            }

                            var caneditrow = false;

                            var boundindex = this.getboundindex(row);
                            if (self._oldselectedrow === boundindex || self.selectionmode === "none") {
                                caneditrow = true;
                            }

                            if (self.selectionmode.indexOf('cell') == -1) {
                                if ((self.selectionmode != 'singlerow') || (self.selectedrowindex != boundindex && self.selectionmode == 'singlerow')) {
                                    this._applyrowselection(boundindex, true, false, null, column.datafield);
                                    this._selectrowwithmouse(self, rowinfo, oldselectedrowindexes, column.datafield, event.ctrlKey, event.shiftKey);
                                }
                            }
                            else {
                                if (column.datafield != null) {
                                    this._selectrowwithmouse(self, rowinfo, oldselectedrowindexes, column.datafield, event.ctrlKey, event.shiftKey);
                                    if (!event.shiftKey) {
                                        this._applycellselection(boundindex, column.datafield, true, false);
                                    }
                                }
                            }

                            if (self._oldselectedcell) {
                                if (self._oldselectedcell.datafield == self.selectedcell.datafield && self._oldselectedcell.rowindex == self.selectedcell.rowindex) {
                                    isoldcell = true;
                                }
                            }
                            self._oldselectedcell = self.selectedcell;

                            self._oldselectedrow = boundindex;
                        }
                        if (self.autosavestate) {
                            if (self.savestate) self.savestate();
                        }
                        if (self.editable && self.begincelledit) {
                            if (event.isPropagationStopped && event.isPropagationStopped()) {
                                return false;
                            }

                            if (self.editmode == "selectedrow") {
                                if (caneditrow && !self.editcell) {
                                    if (column.columntype !== "checkbox") {
                                        var result = self.beginrowedit(this.getboundindex(row));
                                    }
                                }
                                else if (self.editcell && !caneditrow && self.selectionmode != "none") {
                                    var result = self.endrowedit(self.editcell.row);
                                }
                            }
                            else {
                                var canselect = self.editmode == 'click' || (isoldcell && self.editmode == 'selectedcell');
                                if (self.selectionmode.indexOf('cell') == -1) {
                                    if (self.editmode != 'dblclick') {
                                        canselect = true;
                                    }
                                }

                                if (canselect) {
                                    if (row.boundindex != undefined && column.editable) {
                                        var result = self.begincelledit(this.getboundindex(row), column.datafield, column.defaulteditorvalue);
                                        if (self.selectionmode.indexOf('cell') != -1) {
                                            self._applycellselection(boundindex, column.datafield, false, false);
                                        }
                                 //       return false;
                                    }
                                }

                                if (self.selectionmode.indexOf('cell') != -1) {
                                    if (self.editmode == 'selectedcell' && !isoldcell && self.editcell) {
                                        self.endcelledit(self.editcell.row, self.editcell.column, false, true);
                                    }
                                }
                            }
                            return true;
                        }
                    }
                }
            }
            return true;
        },

        _columnPropertyChanged: function (column, key, oldvalue, value) {
        },

        _rowPropertyChanged: function (row, key, oldvalue, value) {
        },

        _serializeObject: function (data) {
            if (data == null) return "";
            var str = "";
            $.each(data, function (index) {
                var val = this;
                if (index > 0) str += ', ';
                str += "[";
                var m = 0;
                for (obj in val) {
                    if (m > 0) str += ', ';
                    str += '{' + obj + ":" + val[obj] + '}';
                    m++;
                }
                str += "]";
            });
            return str;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            key = key.toLowerCase();
            switch (key) {
                case "enablebrowserselection":
                    if (!object.showfilterrow) {
                        if (!object.showstatusbar && !object.showtoolbar) {
                            object.host.addClass('jqx-disableselect');
                        }
                        object.content.addClass('jqx-disableselect');
                    }

                    if (object.enablebrowserselection) {
                        object.content.removeClass('jqx-disableselect');
                        object.host.removeClass('jqx-disableselect');
                    }
                    break;
                case "columnsheight":
                    if (object.columnsheight != 25 || object.columngroups) {
                        object._measureElement('column');
                    }
                    object._render(true, true, true, false, false);
                    break;
                case "rowsheight":
                    if (value != oldvalue) {
                        if (object.rowsheight != 25) {
                            object._measureElement('cell');
                        }
                        object.virtualsizeinfo = null;
                        object.rendergridcontent(true, false);
                        object.refresh();
                    }
                    break;
                case "scrollMode":
                    object.vScrollInstance.thumbStep = object.rowsheight;
                    break;
                case "showdefaultloadelement":
                    object._builddataloadelement();
                    break;
                case "showfiltermenuitems":
                case "showsortmenuitems":
                case "showgroupmenuitems":
                case "filtermode":
                    object._initmenu();
                    break;
                case "touchmode":
                    if (oldvalue != value) {
                        object._removeHandlers();
                        object.touchDevice = null;
                        object.vScrollBar.jqxScrollBar({ touchMode: value });
                        object.hScrollBar.jqxScrollBar({ touchMode: value });
                        object._updateTouchScrolling();
                        object._arrange();
                        object._updatecolumnwidths();
                        object._updatecellwidths();

                        object._addHandlers();
                    }
                    break;
                case "autoshowcolumnsmenubutton":
                    if (oldvalue != value) {
                        object._rendercolumnheaders();
                    }
                    break;
                case "rendergridrows":
                    if (oldvalue != value) {
                        object.updatebounddata();
                    }
                    break;
                case "editmode":
                    if (oldvalue != value) {
                        object._removeHandlers();
                        object._addHandlers();
                    }
                    break;
                case "source":
                    object.updatebounddata();
                    if (object.virtualmode && !object._loading) {
                        object.loadondemand = true;
                        object._renderrows(object.virtualsizeinfo);
                    }
                    break;
                case "horizontalscrollbarstep":
                case "verticalscrollbarstep":
                case "horizontalscrollbarlargestep":
                case "verticalscrollbarlargestep":
                    this.vScrollBar.jqxScrollBar({ step: this.verticalscrollbarstep, largestep: this.verticalscrollbarlargestep });
                    this.hScrollBar.jqxScrollBar({ step: this.horizontalscrollbarstep, largestep: this.horizontalscrollbarlargestep });
                    break;
                case "closeablegroups":
                    if (object._initgroupsheader) {
                        object._initgroupsheader();
                    }
                    break;
                case "showgroupsheader":
                    if (oldvalue != value) {
                        object._arrange();
                        if (object._initgroupsheader) {
                            object._initgroupsheader();
                        }
                        object._renderrows(object.virtualsizeinfo);
                    }
                    break;
                case "theme":
                    if (value != oldvalue) {
                        if (object.pager) {
                            object.pager.removeClass();
                            object.pager.addClass(object.toTP('jqx-grid-pager'));
                            object.pager.addClass(object.toTP('jqx-widget-header'));
                            if (object.pageable && object._updatepagertheme) {
                                object._updatepagertheme();
                            }
                        }
                        if (object.groupsheader) {
                            object.groupsheader.removeClass();
                            object.groupsheader.addClass(object.toTP('jqx-grid-groups-header'));
                            object.groupsheader.addClass(object.toTP('jqx-widget-header'));
                        }
                        object.toolbar.removeClass();
                        object.toolbar.addClass(object.toTP('jqx-grid-toolbar'));
                        object.toolbar.addClass(object.toTP('jqx-widget-header'));
                        object.statusbar.removeClass();
                        object.statusbar.addClass(object.toTP('jqx-grid-statusbar'));
                        object.statusbar.addClass(object.toTP('jqx-widget-content'));
                        object.vScrollBar.jqxScrollBar({ theme: object.theme });
                        object.hScrollBar.jqxScrollBar({ theme: object.theme });
                        object.host.removeClass();
                        object.host.addClass(object.toTP('jqx-grid'));
                        object.host.addClass(object.toTP('jqx-reset'));
                        object.host.addClass(object.toTP('jqx-rc-all'));
                        object.host.addClass(object.toTP('jqx-widget'));
                        object.host.addClass(object.toTP('jqx-widget-content'));
                        object.bottomRight.removeClass();
                        object.bottomRight.addClass(object.toTP('jqx-grid-bottomright'));
                        object.bottomRight.addClass(object.toTP('jqx-scrollbar-state-normal'));
                        object.toolbar.addClass(object.toTP('jqx-grid-toolbar'));
                        object.toolbar.addClass(object.toTP('jqx-widget-header'));
                        object.statusbar.addClass(object.toTP('jqx-grid-statusbar'));
                        object.statusbar.addClass(object.toTP('jqx-widget-header'));

                        object.render();
                    }
                    break;
                case "showtoolbar":
                case "toolbarheight":
                    if (oldvalue != value) {
                        object._arrange();
                        object.refresh();
                    }
                    break;
                case "showstatusbar":
                    if (oldvalue != value) {
                        if (object.statusbar) {
                            if (value) {
                                object.statusbar.show();
                            }
                            else {
                                object.statusbar.hide();
                            }
                        }

                        object._arrange();
                        object.refresh();
                    }
                    break;
                case "statusbarheight":
                    if (oldvalue != value) {
                        object._arrange();
                        object.refresh();
                    }
                    break;
                case "filterable":
                case "showfilterrow":
                    if (oldvalue != value) {
                        object.render();
                    }
                    break;
                case "autoshowfiltericon":
                case "showfiltercolumnbackground":
                case "showpinnedcolumnbackground":
                case "showsortcolumnbackground":
                    if (oldvalue != value) {
                        object.rendergridcontent();
                    }
                    break;
                case "showrowdetailscolumn":
                    if (oldvalue != value) {
                        object.render();
                    }
                    break;
                case "scrollbarsize":
                    if (oldvalue != value) {
                        object._arrange();
                    }
                    break;
                case "width":
                case "height":
                    if (oldvalue != value) {
                        object._updatesize(true, true);
                        object._resizeWindow();
                        if (object.virtualmode && !object._loading) {
                            object.vScrollInstance.setPosition(0);
                        }
                    }
                    break;
                case "altrows":
                case "altstart":
                case "altstep":
                    if (oldvalue != value) {
                        object._renderrows(object.virtualsizeinfo);
                    }
                    break;
                case "groupsheaderheight":
                    if (oldvalue != value) {
                        object._arrange();
                        if (object._initgroupsheader) {
                            object._initgroupsheader();
                        }
                    }
                    break;
                case "pagerheight":
                    if (oldvalue != value)
                        object._initpager();
                    break;
                case "selectedrowindex":
                    object.selectrow(value);
                    break;
                case "selectionmode":
                    if (oldvalue != value) {
                        if (value == 'none') {
                            object.selectedrowindexes = new Array();
                            object.selectedcells = new Array();
                            object.selectedrowindex = -1;
                        }
                        object._renderrows(object.virtualsizeinfo);
                    }
                    break;
                case "showheader":
                    if (value) {
                        object.columnsheader.css('display', 'block');
                    }
                    else {
                        object.columnsheader.css('display', 'none');
                    }
                    break;
                case "virtualmode":
                    if (oldvalue != value) {
                        object.dataview.virtualmode = object.virtualmode;
                        object.dataview.refresh(false);
                        object._render(false, false, false);
                    }
                    break;
                case "columnsmenu":
                    if (oldvalue != value) {
                        object.render();
                    }
                    break;
                case "columngroups":
                    object._render(true, true, true, false, false);
                    break;
                case "columns":
                    if (object._serializeObject(object._cachedcolumns) !== object._serializeObject(value)) {
                        var hasFilter = false;
                        if (object.filterable) {
                            if (oldvalue && oldvalue.records) {
                                $.each(oldvalue.records, function () {
                                    if (this.filter) hasFilter = true;
                                    object.dataview.removefilter(this.displayfield, this.filter);
                                });
                            }
                        }
                        object._columns = null;
                        object._filterrowcache = [];
                        object.render();
                        if (hasFilter) {
                            object.applyfilters();
                        }
                        object._cachedcolumns = object.columns;
                        if (object.removesort) {
                            object.removesort();
                        }
                    }
                    else object._initializeColumns();
                    break;
                case "autoheight":
                    if (oldvalue != value) {
                        object._render(false, false, true);
                    }
                    break;
                case "pagermode":
                case "pagerbuttonscount":
                    if (oldvalue != value) {
                        if (object._initpager) {
                            if (object.pagershowrowscombo) {
                                object.pagershowrowscombo.jqxDropDownList('destroy');
                                object.pagershowrowscombo = null;
                            }

                            if (object.pagerrightbutton) {
                                object.removeHandler(object.pagerrightbutton, 'mousedown');
                                object.removeHandler(object.pagerrightbutton, 'mouseup');
                                object.removeHandler(object.pagerrightbutton, 'click');
                                object.pagerrightbutton.jqxButton('destroy');
                                object.pagerrightbutton = null;
                            }

                            if (object.pagerleftbutton) {
                                object.removeHandler(object.pagerleftbutton, 'mousedown');
                                object.removeHandler(object.pagerleftbutton, 'mouseup');
                                object.removeHandler(object.pagerleftbutton, 'click');
                                object.pagerleftbutton.jqxButton('destroy');
                                object.removeHandler($(document), 'mouseup.pagerbuttons' + object.element.id);
                                object.pagerleftbutton = null;
                            }
                            object.pagerdiv.remove();
                            object._initpager();
                        }
                    }
                    break;
                case "pagesizeoptions":
                case "pageable":
                case "pagesize":
                    if (oldvalue != value) {
                        if (object._loading) {
                            throw new Error( 'jqxGrid: ' + object.loadingerrormessage);
                            return;
                        }
                        if (!object.host.jqxDropDownList || !object.host.jqxListBox) {
                            object._testmodules();
                            return;
                        }

                        if (object._initpager) {
                            if (key != "pageable" && key != "pagermode") {
                                if (typeof (value) == "string") {
                                    var message = "The expected value type is: Int.";
                                    if (key != "pagesize") {
                                        var message = "The expected value type is: Array of Int values.";
                                    }

                                    throw new Error("Invalid Value for: " + key + ". " + message);
                                }
                            }

                            object.dataview.pageable = object.pageable;
                            object.dataview.pagenum = 0;
                            object.dataview.pagesize = object._getpagesize();
                            if (object.virtualmode) {
                                object.updatebounddata();
                            }
                            object.dataview.refresh(true);
                            object._initpager();
                            if (key == "pagesizeoptions") {
                                if (value != null && value.length > 0) {                        
                                    object.pagesize = parseInt(value[0]);
                                    object.dataview.pagesize = parseInt(value[0]);
                                    object.prerenderrequired = true;
                                    object._requiresupdate = true;
                                    object.dataview.pagenum = -1;
                                    object.gotopage(0);
                                }
                            }
                        }
                        object._render(false, false, false);
                    }
                    break;
                case "groups":
                    if (object._serializeObject(oldvalue) !== object._serializeObject(value)) {
                        object.dataview.groups = value;
                        object._refreshdataview();
                        object._render(true, true, true, false);
                    }
                    break;
                case "groupable":
                    if (oldvalue != value) {
                        object.dataview.groupable = object.groupable;
                        object.dataview.pagenum = 0;
                        object.dataview.refresh(false);
                        object._render(false, false, true);
                    }
                    break;
                case "renderstatusbar":
                    if (value != null)
                    {
                        object.renderstatusbar(object.statusbar);
                    }
                    break;
                case "rendertoolbar":
                    if (value != null) {
                        object.rendertoolbar(object.toolbar);
                    }
                    break;
                case "disabled":
                    if (value) {
                        object.host.addClass(object.toThemeProperty('jqx-fill-state-disabled'));
                    }
                    else object.host.removeClass(object.toThemeProperty('jqx-fill-state-disabled'));
                    $.jqx.aria(object, "aria-disabled", object.disabled);
                    if (object.pageable) {
                        if (object.pagerrightbutton) {
                            object.pagerrightbutton.jqxButton({ disabled: value });
                            object.pagerleftbutton.jqxButton({ disabled: value });
                            object.pagershowrowscombo.jqxDropDownList({ disabled: value });
                            object.pagergotoinput.attr('disabled', value);
                        }
                    }
                    object.vScrollBar.jqxScrollBar({ disabled: value });
                    object.hScrollBar.jqxScrollBar({ disabled: value });
                    if (object.filterable && object.showfilterrow) {
                        object._updatefilterrowui(true);
                    }
                    break;
            }
        }
    });

    function jqxGridColumn(owner, data) {
        this.owner = owner;
        this.datafield = null;
        this.displayfield = null;
        this.text = '';
        this.sortable = true;
        this.hideable = true;
        this.editable = true;
        this.hidden = false;
        this.groupable = true;
        this.renderer = null;
        this.cellsrenderer = null;
        // checkbox column, number column, button column
        this.checkchange = null,
        this.threestatecheckbox = false;
        this.buttonclick = null,
        this.columntype = null;
        this.cellsformat = "";
        this.align = 'left';
        this.cellsalign = 'left';
        this.width = 'auto';
        this.minwidth = 25;
        this.maxwidth = 'auto';
        this.pinned = false;
        this.visibleindex = -1;
        this.filterable = true;
        // default, filter row, checked list
        this.filter = null;
        this.filteritems = [];
        this.resizable = true;
        this.initeditor = null;
        this.createeditor = null;
        this.destroyeditor = null;
        this.geteditorvalue = null;
        this.validation = null;
        this.classname = '';
        this.cellclassname = '';
        this.cellendedit = null;
        this.cellbeginedit = null;
        this.cellvaluechanging = null;
        this.aggregates = null;
        this.aggregatesrenderer = null;
        this.menu = true;
        this.createfilterwidget = null;
        this.filtertype = 'default';
        this.filtercondition = null;
        this.rendered = null;
        this.exportable = true;
        this.exporting = false;
        this.draggable = true;
        this.nullable = true;
        this.enabletooltips = true;
        this.columngroup = null;

        this.getcolumnproperties = function () {
            return {
                nullable: this.nullable,
                sortable: this.sortable, hideable: this.hideable,
                hidden: this.hidden, groupable: this.groupable, width: this.width, align: this.align, editable: this.editable,
                minwidth: this.minwidth, maxwidth: this.maxwidth, resizable: this.resizable, datafield: this.datafield, text: this.text,
                exportable: this.exportable, cellsalign: this.cellsalign, pinned: this.pinned, cellsformat: this.cellsformat, columntype: this.columntype, classname: this.classname, cellclassname: this.cellclassname, menu: this.menu
            };
        },

        this.setproperty = function (propertyname, value) {
            if (this[propertyname]) {
                var oldvalue = this[propertyname];
                this[propertyname] = value;
                this.owner._columnPropertyChanged(this, propertyname, value, oldvalue);
            }
            else {
                if (this[propertyname.toLowerCase()]) {
                    var oldvalue = this[propertyname.toLowerCase()];
                    this[propertyname.toLowerCase()] = value;
                    this.owner._columnPropertyChanged(this, propertyname.toLowerCase(), value, oldvalue);
                }
            }
        }

        this._initfields = function (data) {
            if (data != null) {
                var me = this.that;
                if ($.jqx.hasProperty(data, 'dataField')) {
                    this.datafield = $.jqx.get(data, 'dataField');
                }

                if ($.jqx.hasProperty(data, 'displayField')) {
                    this.displayfield = $.jqx.get(data, 'displayField');
                }
                else {
                    this.displayfield = this.datafield;
                }
                if ($.jqx.hasProperty(data, 'enableTooltips')) {
                    this.enabletooltips = $.jqx.get(data, 'enableTooltips');
                }
                if ($.jqx.hasProperty(data, 'text')) {
                    this.text = $.jqx.get(data, 'text');
                }
                if ($.jqx.hasProperty(data, 'sortable')) {
                    this.sortable = $.jqx.get(data, 'sortable');
                }
                if ($.jqx.hasProperty(data, 'hideable')) {
                    this.hideable = $.jqx.get(data, 'hideable');
                }
                if ($.jqx.hasProperty(data, 'hidden')) {
                    this.hidden = $.jqx.get(data, 'hidden');
                }
                if ($.jqx.hasProperty(data, 'groupable')) {
                    this.groupable = $.jqx.get(data, 'groupable');
                }
                if ($.jqx.hasProperty(data, 'renderer')) {
                    this.renderer = $.jqx.get(data, 'renderer');
                }
                if ($.jqx.hasProperty(data, 'align')) {
                    this.align = $.jqx.get(data, 'align');
                }
                if ($.jqx.hasProperty(data, 'cellsAlign')) {
                    this.cellsalign = $.jqx.get(data, 'cellsAlign');
                }
                if ($.jqx.hasProperty(data, 'cellsFormat')) {
                    this.cellsformat = $.jqx.get(data, 'cellsFormat');
                }
                if ($.jqx.hasProperty(data, 'width')) {
                    this.width = $.jqx.get(data, 'width');
                }
                if ($.jqx.hasProperty(data, 'minWidth')) {
                    this.minwidth = $.jqx.get(data, 'minWidth');
                }
                if ($.jqx.hasProperty(data, 'maxWidth')) {
                    this.maxwidth = $.jqx.get(data, 'maxWidth');
                }
                if ($.jqx.hasProperty(data, 'cellsRenderer')) {
                    this.cellsrenderer = $.jqx.get(data, 'cellsRenderer');
                }
                if ($.jqx.hasProperty(data, 'columnType')) {
                    this.columntype = $.jqx.get(data, 'columnType');
                }
                if ($.jqx.hasProperty(data, 'checkChange')) {
                    this.checkchange = $.jqx.get(data, 'checkChange');
                }
                if ($.jqx.hasProperty(data, 'buttonClick')) {
                    this.buttonclick = $.jqx.get(data, 'buttonClick');
                }
                if ($.jqx.hasProperty(data, 'pinned')) {
                    this.pinned = $.jqx.get(data, 'pinned');
                }
                if ($.jqx.hasProperty(data, 'visibleIndex')) {
                    this.visibleindex = $.jqx.get(data, 'visibleIndex');
                }
                if ($.jqx.hasProperty(data, 'filterable')) {
                    this.filterable = $.jqx.get(data, 'filterable');
                }
                if ($.jqx.hasProperty(data, 'filter')) {
                    this.filter = $.jqx.get(data, 'filter');
                }
                if ($.jqx.hasProperty(data, 'resizable')) {
                    this.resizable = $.jqx.get(data, 'resizable');
                }
                if ($.jqx.hasProperty(data, 'editable')) {
                    this.editable = $.jqx.get(data, 'editable');
                }
                if ($.jqx.hasProperty(data, 'initEditor')) {
                    this.initeditor = $.jqx.get(data, 'initEditor');
                }
                if ($.jqx.hasProperty(data, 'createEditor')) {
                    this.createeditor = $.jqx.get(data, 'createEditor');
                }
                if ($.jqx.hasProperty(data, 'destroyEditor')) {
                    this.destroyeditor = $.jqx.get(data, 'destroyEditor');
                }
                if ($.jqx.hasProperty(data, 'getEditorValue')) {
                    this.geteditorvalue = $.jqx.get(data, 'getEditorValue');
                }
                if ($.jqx.hasProperty(data, 'validation')) {
                    this.validation = $.jqx.get(data, 'validation');
                }
                if ($.jqx.hasProperty(data, 'cellBeginEdit')) {
                    this.cellbeginedit = $.jqx.get(data, 'cellBeginEdit');
                }
                if ($.jqx.hasProperty(data, 'cellEndEdit')) {
                    this.cellendedit = $.jqx.get(data, 'cellEndEdit');
                }
                if ($.jqx.hasProperty(data, 'className')) {
                    this.classname = $.jqx.get(data, 'className');
                }
                if ($.jqx.hasProperty(data, 'cellClassName')) {
                    this.cellclassname = $.jqx.get(data, 'cellClassName');
                }
                if ($.jqx.hasProperty(data, 'menu')) {
                    this.menu = $.jqx.get(data, 'menu');
                }
                if ($.jqx.hasProperty(data, 'aggregates')) {
                    this.aggregates = $.jqx.get(data, 'aggregates');
                }
                if ($.jqx.hasProperty(data, 'aggregatesRenderer')) {
                    this.aggregatesrenderer = $.jqx.get(data, 'aggregatesRenderer');
                }
                if ($.jqx.hasProperty(data, 'createFilterWidget')) {
                    this.createfilterwidget = $.jqx.get(data, 'createFilterWidget');
                }
                if ($.jqx.hasProperty(data, 'filterType')) {
                    this.filtertype = $.jqx.get(data, 'filterType');
                }
                if ($.jqx.hasProperty(data, 'rendered')) {
                    this.rendered = $.jqx.get(data, 'rendered');
                }
                if ($.jqx.hasProperty(data, 'exportable')) {
                    this.exportable = $.jqx.get(data, 'exportable');
                }
                if ($.jqx.hasProperty(data, 'filterItems')) {
                    this.filteritems = $.jqx.get(data, 'filterItems');
                }
                if ($.jqx.hasProperty(data, 'cellValueChanging')) {
                    this.cellvaluechanging = $.jqx.get(data, 'cellValueChanging');
                }
                if ($.jqx.hasProperty(data, 'draggable')) {
                    this.draggable = $.jqx.get(data, 'draggable');
                }
                if ($.jqx.hasProperty(data, 'filterCondition')) {
                    this.filtercondition = $.jqx.get(data, 'filterCondition');
                }
                if ($.jqx.hasProperty(data, 'threeStateCheckbox')) {
                    this.threestatecheckbox = $.jqx.get(data, 'threeStateCheckbox');
                }
                if ($.jqx.hasProperty(data, 'nullable')) {
                    this.nullable = $.jqx.get(data, 'nullable');
                }
                if ($.jqx.hasProperty(data, 'columnGroup')) {
                    this.columngroup = $.jqx.get(data, 'columnGroup');
                }

                if (!data instanceof String && !(typeof data == "string")) {
                    for (var obj in data) {
                        if (!me.hasOwnProperty(obj)) {
                            if (!me.hasOwnProperty(obj.toLowerCase())) {
                                owner.host.remove();
                                throw new Error("jqxGrid: Invalid property name - " + obj + ".");
                            }
                        }
                    }
                }
            }
        }

        this._initfields(data);
        return this;
    }

    function jqxGridRow(owner, data) {
        this.setdata = function (data) {
            if (data != null) {
                this.bounddata = data;
                this.boundindex = data.boundindex;
                this.visibleindex = data.visibleindex;
                this.group = data.group;
                this.parentbounddata = data.parentItem;
                this.uniqueid = data.uniqueid;
                this.level = data.level;
            }
        }
        this.setdata(data);
        this.parentrow = null;
        this.subrows = new Array();
        this.owner = owner;
        this.height = 25;
        this.hidden = false;
        this.rowdetails = null;
        this.rowdetailsheight = 100;
        this.rowdetailshidden = true;
        this.top = -1;

        //        this.getrowinfo = function () {
        //            return { hidden: this.hidden, rowdetails: this.rowdetails, rowdetailsheight: this.rowdetailsheight,
        //                showdetails: !this.rowdetailshidden, height: this.height, index: this.visibleindex
        //            };
        //        }

        this.setrowinfo = function (data) {
            this.hidden = data.hidden;
            this.rowdetails = data.rowdetails;
            this.rowdetailsheight = data.rowdetailsheight;
            this.rowdetailshidden = !data.showdetails;
            this.height = data.height;
        }

        return this;
    }

    $.jqx.collection = function (owner) {
        this.records = new Array();
        this.owner = owner;
        this.updating = false;
        this.beginupdate = function () {
            this.updating = true;
        }

        this.resumeupdate = function () {
            this.updating = false;
        }

        this._raiseEvent = function (args) {
        }

        this.clear = function () {
            this.records = new Array();
        }

        this.replace = function (index, object) {
            this.records[index] = object;
            if (!this.updating) {
                this._raiseEvent({ type: 'replace', element: object });
            }
        }

        this.isempty = function (index) {
            if (this.records[index] == undefined) {
                return true;
            }

            return false;
        }

        this.initialize = function (size) {
            if (size < 1) size = 1;
            this.records[size - 1] = -1;
        }

        this.length = function () {
            return this.records.length;
        }

        this.indexOf = function (object) {
            return this.records.indexOf(object);
        }

        this.add = function (object) {
            if (object == null)
                return false;

            this.records[this.records.length] = object;
            if (!this.updating) {
                this._raiseEvent({ type: 'add', element: object });
            }
            return true;
        }

        this.insertAt = function (index, object) {
            if (index == null || index == undefined)
                return false;

            if (object == null)
                return false;

            if (index >= 0) {
                if (index < this.records.length) {
                    this.records.splice(index, 0, object);
                    if (!this.updating) {
                        this._raiseEvent({ type: 'insert', index: index, element: object });
                    }
                    return true;
                }
                else return this.add(object);
            }

            return false;
        }

        this.remove = function (object) {
            if (object == null || object == undefined)
                return false;

            var index = this.records.indexOf(object);
            if (index != -1) {
                this.records.splice(index, 1);
                if (!this.updating) {
                    this._raiseEvent({ type: 'remove', element: object });
                }
                return true;
            }

            return false;
        }

        this.removeAt = function (index) {
            if (index == null || index == undefined)
                return false;

            if (index < 0)
                return false;

            if (index < this.records.length) {
                var object = this.records[index];
                this.records.splice(index, 1);
                if (!this.updating) {
                    this._raiseEvent({ type: 'removeAt', index: index, element: object });
                }
                return true;
            }

            return false;
        }

        return this;
    }

    $.jqx.dataview = function () {
        this.self = this;
        this.grid = null;
        this.uniqueId = "id";
        this.records = [];
        this.rows = [];
        this.columns = [];
        this.groups = [];
        this.filters = new Array();
        this.updated = null;
        this.update = null;
        this.suspend = false;
        this.pagesize = 0;
        this.pagenum = 0;
        this.totalrows = 0;
        this.totalrecords = 0;
        this.groupable = true;
        this.loadedrecords = [];
        this.loadedrootgroups = [];
        this.loadedgroups = [];
        this.loadedgroupsByKey = [];
        this.virtualmode = true;
        this._cachegrouppages = new Array();
        this.source = null;
        this.changedrecords = new Array();
        this.rowschangecallback = null;
        this.that = this;

        this.destroy = function()
        {
            delete this.self;
            delete this.grid;
            delete this.uniqueId;
            delete this.records;
            delete this.rows;
            delete this.columns;
            delete this.groups;
            delete this.filters;
            delete this.updated;
            delete this.update;
            delete this.suspend;
            delete this.pagesize;
            delete this.pagenum;
            delete this.totalrows;
            delete this.totalrecords;
            delete this.groupable;
            delete this.loadedrecords;
            delete this.loadedrootgroups;
            delete this.loadedgroups;
            delete this.loadedgroupsByKey;
            delete this.virtualmode;
            delete this._cachegrouppages;
            delete this.source;
            delete this.changedrecords;
            delete this.rowschangecallback;
            delete this.that;
        },

        this.suspendupdate = function () {
            this.suspend = true;
        },

        this.isupdating = function () {
            return this.suspend;
        },

        this.resumeupdate = function (refresh) {
            this.suspend = false;

            if (refresh == undefined)
                refresh = true;

            this.refresh(refresh);
        },

        this.getrecords = function () {
            return this.records;
        },

        this.clearrecords = function () {
            this.recordids = new Array();
        }

        this.databind = function (source, objectuniqueId) {
            var isdataadapter = source._source ? true : false;
            var dataadapter = null;

            if (isdataadapter) {
                dataadapter = source;
                source = source._source;
            }
            else {
                dataadapter = new $.jqx.dataAdapter(source,
                {
                    autoBind: false
                });
            }

            var initadapter = function (me) {
                dataadapter.recordids = [];
                dataadapter.records = new Array();
                dataadapter.cachedrecords = new Array();
                dataadapter.originaldata = new Array();
                dataadapter._options.virtualmode = me.virtualmode;
                dataadapter._options.totalrecords = me.totalrecords;
                dataadapter._options.originaldata = me.originaldata;
                dataadapter._options.recordids = me.recordids;
                dataadapter._options.cachedrecords = new Array();
                dataadapter._options.pagenum = me.pagenum;
                dataadapter._options.pageable = me.pageable;
                if (source.type != undefined) {
                    dataadapter._options.type = source.type;
                }
                if (source.formatdata != undefined) {
                    dataadapter._options.formatData = source.formatdata;
                }
                if (source.contenttype != undefined) {
                    dataadapter._options.contentType = source.contenttype;
                }
                if (source.async != undefined) {
                    dataadapter._options.async = source.async;
                }
                if (source.updaterow != undefined) {
                    dataadapter._options.updaterow = source.updaterow;
                }
                if (source.addrow != undefined) {
                    dataadapter._options.addrow = source.addrow;
                }
                if (source.deleterow != undefined) {
                    dataadapter._options.deleterow = source.deleterow;
                }

                if (me.pagesize == 0) me.pagesize = 10;
                dataadapter._options.pagesize = me.pagesize;
            }

            var updatefromadapter = function (me) {
                me.totalrecords = dataadapter.totalrecords;
                if (!me.virtualmode) {
                    me.originaldata = dataadapter.originaldata;
                    me.records = dataadapter.records;
                    me.recordids = dataadapter.recordids;
                    me.cachedrecords = dataadapter.cachedrecords;
                }
                else {
                    var rendergridrowsobj = { startindex: me.pagenum * me.pagesize, endindex: (me.pagenum * me.pagesize + me.pagesize) };
                    if (source.recordstartindex != undefined) {
                        rendergridrowsobj.startindex = parseInt(source.recordstartindex);
                    }
                    if (source.recordendindex != undefined) {
                        rendergridrowsobj.endindex = parseInt(source.recordendindex);
                    }
                    else if (!me.grid.pageable) {
                        rendergridrowsobj.endindex = rendergridrowsobj.startindex + 100;
                        if (me.grid.autoheight) {
                            rendergridrowsobj.endindex = rendergridrowsobj.startindex + me.totalrecords;
                        }
                    }
                    if (!source.recordendindex) {
                        if (!me.grid.pageable) {
                            rendergridrowsobj.endindex = rendergridrowsobj.startindex + 100;
                            if (me.grid.autoheight) {
                                rendergridrowsobj.endindex = rendergridrowsobj.startindex + me.totalrecords;
                            }
                        }
                        else {
                             rendergridrowsobj = { startindex: me.pagenum * me.pagesize, endindex: (me.pagenum * me.pagesize + me.pagesize) };
                        }
                    }

                    rendergridrowsobj.data = dataadapter.records;
                    if (me.grid.rendergridrows && me.totalrecords > 0) {
                        var recordscount = 0;
                        source.records = me.grid.rendergridrows(rendergridrowsobj);
                        if (source.records.length) {
                            recordscount = source.records.length;
                        }

                        if (source.records && !source.records[rendergridrowsobj.startindex]) {
                            var newArray = new Array();
                            var newArrayIndex = rendergridrowsobj.startindex;
                            $.each(source.records, function () {
                                newArray[newArrayIndex] = this;
                                newArrayIndex++;
                                recordscount++;
                            });
                            source.records = newArray;
                        }
                        if (recordscount == 0) {
                            if (source.records) {
                                $.each(source.records, function () {
                                    recordscount++;
                                });
                            }
                        }
                        if (recordscount > 0 && recordscount < rendergridrowsobj.endindex - rendergridrowsobj.startindex && !me.grid.groupable) {
                            var toClone = source.records[0];
                           
                            for (var i = 0; i < rendergridrowsobj.endindex - rendergridrowsobj.startindex - recordscount; i++) {
                                var newData = {};
                                for (obj in toClone) {
                                    newData[obj] = "";
                                }

                                if (source.records.push) {
                                    source.records.push(newData);
                                }
                            }
                        }
                    }

                    if (!source.records || me.totalrecords == 0) {
                        source.records = new Array();
                    }

                    me.originaldata = source.records;
                    me.records = source.records;
                    me.cachedrecords = source.records;
                }
            }

            initadapter(this);

            this.source = source;
            if (objectuniqueId !== undefined) {
                uniqueId = objectuniqueId;
            }

            var me = this.that;
            //if (this.virtualmode && !this.pageable) {
            //    var rendergridrowsobj = { startindex: me.pagenum * me.pagesize, endindex: (me.pagenum * me.pagesize + me.pagesize) };
            //    if (dataadapter.records && dataadapter.records[rendergridrowsobj.startindex]) {
            //        updatefromadapter(this);
            //        return;
            //    }
            //}

            switch (source.datatype) {
                case "local":
                case "array":
                default:
                    if (source.localdata == null) {
                        source.localdata = [];
                    }

                    if (source.localdata != null) {
                        dataadapter.unbindBindingUpdate(me.grid.element.id);
                        dataadapter.dataBind();

                        var updateFunc = function (changeType) {
                            if (changeType != undefined && changeType != "") {
                                var dataItem = dataadapter._changedrecords[0];
                                if (dataItem) {
                                    var ids = new Array();
                                    $.each(dataadapter._changedrecords, function (rowIndex) {
                                        var index = this.index;
                                        var item = this.record;

                                        me.grid._updateFromAdapter = true;
                                        switch (changeType) {
                                            case "update":
                                                var id = me.grid.getrowid(index);
                                                if (rowIndex == dataadapter._changedrecords.length - 1) {
                                                    me.grid.updaterow(id, item);
                                                }
                                                else {
                                                    me.grid.updaterow(id, item, false);
                                                }

                                                me.grid._updateFromAdapter = false;
                                                return;
                                            case "add":
                                                me.grid.addrow(null, item);
                                                me.grid._updateFromAdapter = false;
                                                return;
                                            case "remove":
                                                var id = me.grid.getrowid(index);
                                                ids.push(id);
                                                return;
                                        }
                                    });
                                    if (ids.length > 0) {
                                        me.grid.deleterow(ids, false);
                                        me.grid._updateFromAdapter = false;
                                    }
                                }
                                if (changeType == "update") {
                                    return;
                                }
                            }
                            var totalrecords = me.totalrecords;
                            updatefromadapter(me, changeType);

                            if (changeType == 'updateData') {
                                me.refresh();
                                me.grid._updateGridData();
                            }
                            else {
                                if (source.recordstartindex && this.virtualmode) {
                                    me.updateview(source.recordstartindex, source.recordstartindex + me.pagesize);
                                }
                                else {
                                    me.refresh();
                                }
                                me.update(totalrecords != me.totalrecords);
                            }
                        }

                        updateFunc();
                        dataadapter.bindBindingUpdate(me.grid.element.id, updateFunc);
                    }
                    break;
                case "json":
                case "jsonp":
                case "xml":
                case "xhtml":
                case "script":
                case "text":
                case "csv":
                case "tab":
                    {
                        if (source.localdata != null) {
                            dataadapter.unbindBindingUpdate(me.grid.element.id);
                            dataadapter.dataBind();

                            var updateFunc = function (changeType) {
                                var totalrecords = me.totalrecords;
                                updatefromadapter(me);

                                if (changeType == 'updateData') {
                                    me.refresh();
                                    me.grid._updateGridData();
                                }
                                else {
                                    if (source.recordstartindex) {
                                        me.updateview(source.recordstartindex, source.recordstartindex + me.pagesize);
                                    }
                                    else {
                                        me.refresh();
                                    }

                                    me.update(totalrecords != me.totalrecords);
                                }
                            }

                            updateFunc();
                            dataadapter.bindBindingUpdate(me.grid.element.id, updateFunc);
                            return;
                        }

                        var filterdata = {};
                        var filterslength = 0;
                        var postdata = {};
                        for (var x = 0; x < this.filters.length; x++) {
                            var filterdatafield = this.filters[x].datafield;
                            var filter = this.filters[x].filter;
                            var filters = filter.getfilters();
                            postdata[filterdatafield + "operator"] = filter.operator;
                            for (var m = 0; m < filters.length; m++) {
                                filters[m].datafield = filterdatafield;
                                var filtervalue = filters[m].value;
                                if (filters[m].type == "datefilter") {
                                    if (filters[m].value && filters[m].value.toLocaleString) {
                                        var column = this.grid.getcolumn(filters[m].datafield);
                                        if (column.cellsformat) {
                                            var value = this.grid.source.formatDate(filters[m].value, column.cellsformat, this.grid.gridlocalization);
                                            if (value) {
                                                postdata["filtervalue" + filterslength] = value;
                                            }
                                            else {
                                                postdata["filtervalue" + filterslength] = filters[m].value.toLocaleString();
                                            }
                                        }
                                        else {
                                            postdata["filtervalue" + filterslength] = filtervalue.toString();
                                        }
                                    }
                                    else {
                                        postdata["filtervalue" + filterslength] = filtervalue.toString();
                                    }
                                }
                                else {
                                    postdata["filtervalue" + filterslength] = filtervalue.toString();
                                }
                                postdata["filtercondition" + filterslength] = filters[m].condition;
                                postdata["filteroperator" + filterslength] = filters[m].operator;
                                postdata["filterdatafield" + filterslength] = filterdatafield;

                                filterslength++;
                            }
                        }

                        postdata.filterscount = filterslength;
                        postdata.groupscount = me.groups.length;
                        for (var x = 0; x < me.groups.length; x++) {
                            postdata["group" + x] = me.groups[x];
                        }

                        if (source.recordstartindex == undefined) source.recordstartindex = 0;
                        if (source.recordendindex == undefined || source.recordendindex == 0) {
                            if (me.grid.height && me.grid.height.toString().indexOf('%') == -1) {
                                source.recordendindex = parseInt(me.grid.height) / me.grid.rowsheight;
                                source.recordendindex += 2;
                            }
                            else {
                                source.recordendindex = $(window).height() / me.grid.rowsheight;
                            }
                            if (this.pageable) {
                                source.recordendindex = this.pagesize;
                            }
                        }

                        $.extend(postdata, { sortdatafield: me.sortfield, sortorder: me.sortfielddirection, pagenum: me.pagenum, pagesize: me.grid.pagesize, recordstartindex: source.recordstartindex, recordendindex: source.recordendindex });
                        var tmpdata = dataadapter._options.data;
                        if (dataadapter._options.data) {
                            $.extend(dataadapter._options.data, postdata);
                        }
                        else {
                            if (source.data) {
                                $.extend(postdata, source.data);
                            }
                            dataadapter._options.data = postdata;
                        }

                        var updateFunc = function () {
                            var ie = $.jqx.browser.msie && $.jqx.browser.version < 9;
                            var doUpdate = function () {
                                var totalrecords = me.totalrecords;
                                updatefromadapter(me);

                                if (source.recordstartindex) {
                                    me.updateview(source.recordstartindex, source.recordstartindex + me.pagesize);
                                }
                                else {
                                    me.refresh();
                                }

                                me.update(totalrecords != me.totalrecords);
                            }
                            if (ie) {
                                try {
                                    doUpdate();
                                }
                                catch (error) {
                                }
                            }
                            else {
                                doUpdate();
                            }
                        }

                        dataadapter.unbindDownloadComplete(me.grid.element.id);
                        dataadapter.bindDownloadComplete(me.grid.element.id, updateFunc);
                        dataadapter.dataBind();
                        dataadapter._options.data = tmpdata;
                    }
            }
        }

        this.getid = function (id, record, index) {
            if ($(id, record).length > 0) {
                return $(id, record).text();
            }

            if (id) {
                if (id.toString().length > 0) {
                    var result = $(record).attr(id);
                    if (result != null && result.toString().length > 0) {
                        return result;
                    }
                }
            }

            return index;
        }

        this.getvaluebytype = function (value, datafield) {
            var originalvalue = value;
            if (datafield.type == 'date') {
                var tmpvalue = new Date(value);

                if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                    if ($.jqx.dataFormat) {
                        value = $.jqx.dataFormat.tryparsedate(value);
                    }
                    else value = tmpvalue;
                }
                else {
                    value = tmpvalue;
                }

                if (value == null) {
                    value = originalvalue;
                }
            }
            else if (datafield.type == 'float') {
                var value = parseFloat(value);
                if (isNaN(value)) {
                    value = originalvalue;
                }
            }
            else if (datafield.type == 'int') {
                var value = parseInt(value);
                if (isNaN(value)) {
                    value = originalvalue;
                }
            }
            else if (datafield.type == 'bool') {
                if (value != null) {
                    if (value.toLowerCase() == 'false') {
                        value = false;
                    }
                    else if (value.toLowerCase() == 'true') {
                        value = true;
                    }
                }

                if (value == 1) {
                    value = true;
                }
                else if (value == 0) {
                    value = false;
                }
                else value = '';
            }

            return value;
        }

        this.setpaging = function (args) {
            if (args.pageSize != undefined) {
                this.pagesize = args.pageSize;
            }

            if (args.pageNum != undefined) {
                this.pagenum = Math.min(args.pageNum, Math.ceil(this.totalrows / this.pagesize));
            }

            this.refresh();
        }

        this.getpagingdetails = function () {
            return { pageSize: this.pagesize, pageNum: this.pagenum, totalrows: this.totalrows };
        }

        this._clearcaches = function () {
            this.sortcache = {};
            this.sortdata = null;
            this.changedrecords = new Array();
            this.records = new Array();
            this.rows = new Array();
            this.cacheddata = new Array();
            this.originaldata = new Array();
            this.bounditems = new Array();
            this.loadedrecords = new Array();
            this.loadedrootgroups = new Array();
            this.loadedgroups = new Array();
            this.loadedgroupsByKey = new Array();
            this._cachegrouppages = new Array();
            this.recordsbyid = new Array();
            this.cachedrecords = new Array();
            this.recordids = new Array();
        }

        this.addfilter = function (field, filter) {
            var filterindex = -1;
            for (var m = 0; m < this.filters.length; m++) {
                if (this.filters[m].datafield == field) {
                    filterindex = m;
                    break;
                }
            }

            if (filterindex == -1) {
                this.filters[this.filters.length] = { filter: filter, datafield: field };
            }
            else {
                this.filters[filterindex] = { filter: filter, datafield: field };
            }
        }

        this.removefilter = function (field) {
            for (var i = 0; i < this.filters.length; i++) {
                if (this.filters[i].datafield == field) {
                    this.filters.splice(i, 1);
                    break;
                }
            }
        }

        this.getItemFromIndex = function (i) {
            return this.records[i];
        }

        this.updaterow = function (rowid, rowdata, refresh) {
            var hasFilter = this.filters && this.filters.length > 0 && !this.virtualmode;

            if (!hasFilter && rowdata != undefined && rowid != undefined) {
                rowdata.uid = rowid;
                if (!(rowdata[this.source.id])) {
                    rowdata[this.source.id] = rowdata.uid;
                }

                var record = this.recordsbyid["id" + rowid];
                var recordindex = this.records.indexOf(record);
                if (recordindex == -1)
                    return false;

                this.records[recordindex] = rowdata;
                if (this.cachedrecords) {
                    this.cachedrecords[recordindex] = rowdata;
                }
                if (refresh == true || refresh == undefined) {
                    this.refresh();
                }
                this.changedrecords[rowdata.uid] = { Type: "Update", OldData: record, Data: rowdata };
                return true;
            }
            else if (this.filters && this.filters.length > 0) {
                var records = this.cachedrecords;
                var record = null;
                var recordindex = -1;
                for (var i = 0; i < records.length; i++) {
                    if (records[i].uid == rowid) {
                        record = records[i];
                        recordindex = i;
                        break;
                    }
                }
                if (record) {
                    var me = this.that;
                    for (var obj in rowdata) {
                        me.cachedrecords[recordindex][obj] = rowdata[obj];
                    }
                    if (refresh == true || refresh == undefined) {
                        this.refresh();
                    }
                    return true;
                }
            }

            return false;
        }

        this.addrow = function (rowid, rowdata, position, refresh) {
            if (rowdata != undefined) {
                if (!rowid) {
                    rowdata.uid = this.getid(this.source.id, rowdata, this.totalrecords);
                    var record = this.recordsbyid["id" + rowdata.uid];
                    while (record != null) {
                        var uid = Math.floor(Math.random() * 10000).toString();
                        rowdata.uid = uid;
                        record = this.recordsbyid["id" + uid];
                    }
                }
                else rowdata.uid = rowid;

                if (!(rowdata[this.source.id])) {
                    if (this.source.id != undefined) {
                        rowdata[this.source.id] = rowdata.uid;
                    }
                }

                if (position == 'last') {
                    this.records.push(rowdata);
                }
                else if (typeof position === 'number' && isFinite(position)) {
                    this.records.splice(position, 0, rowdata);
                }
                else {
                    this.records.splice(0, 0, rowdata);
                }
                if (this.filters && this.filters.length > 0) {
                    if (position == 'last') {
                        this.cachedrecords.push(rowdata);
                    }
                    else if (typeof position === 'number' && isFinite(position)) {
                        this.cachedrecords.splice(position, 0, rowdata);
                    }
                    else {
                        this.cachedrecords.splice(0, 0, rowdata);
                    }
                }

                this.totalrecords++;
                if (this.virtualmode) {
                    this.source.totalrecords = this.totalrecords;
                }
                if (refresh == true || refresh == undefined) {
                    this.refresh();
                }

                this.changedrecords[rowdata.uid] = { Type: "New", Data: rowdata };
                return true;
            }
            return false;
        }

        this.deleterow = function (rowid, refresh) {
            if (rowid != undefined) {
                var hasFilter = this.filters && this.filters.length > 0;
                if (this.recordsbyid["id" + rowid] && !hasFilter) {
                    var record = this.recordsbyid["id" + rowid];
                    var recordindex = this.records.indexOf(record);
                    this.changedrecords[rowid] = { Type: "Delete", Data: this.records[recordindex] };
                    this.records.splice(recordindex, 1);
                    this.totalrecords--;
                    if (this.virtualmode) {
                        this.source.totalrecords = this.totalrecords;
                    }
                    if (refresh == true || refresh == undefined) {
                        this.refresh();
                    }
                    return true;
                }
                else if (this.filters && this.filters.length > 0) {
                    var records = this.cachedrecords;
                    var record = null;
                    var recordindex = -1;
                    for (var i = 0; i < records.length; i++) {
                        if (records[i].uid == rowid) {
                            record = records[i];
                            recordindex = i;
                            break;
                        }
                    }
                    if (record) {
                        this.cachedrecords.splice(recordindex, 1);
                        if (refresh == true || refresh == undefined) {
                            this.totalrecords = 0;
                            this.records = this.cachedrecords;
                            this.refresh();
                        }
                        return true;
                    }
                }

                return false;
            }

            return false;
        }

        this.reload = function (_records, _rows, _filter, _updated, fullupdate, startindex, endindex) {
            var self = this.that;
            var diff = new Array();
            var records = _records;
            var rows = _rows;
            var filter = _filter;
            var updated = _updated;

            var rl = rows.length;
            var currentRowIndex = 0;
            var currentPageIndex = 0;
            var item, id;
            this.columns = [];
            this.bounditems = new Array();
            this.loadedrecords = new Array();
            this.loadedrootgroups = new Array();
            this.loadedgroups = new Array();
            this.loadedgroupsByKey = new Array();
            this._cachegrouppages = new Array();
            this.recordsbyid = {};

            if (this.totalrecords == 0) {
                Object.size = function (obj) {
                    var size = 0, key;
                    for (key in obj) {
                        if (obj.hasOwnProperty(key)) size++;
                    }
                    return size;
                };

                var totalrecords = Object.size(records);
                this.totalrecords = totalrecords;

                $.each(this.records, function (i) {
                    var item = this;
                    var index = 0;
                    $.each(item, function (columnName, value) {
                        self.columns[index++] = columnName;
                    });

                    return false;
                });
            }

            if (this.virtualmode) {
                if (this.pageable) {
                    this.updateview();
                    return;
                }

                var startindex = 0;
                if (!this.groupable) {
                    this.updateview();
                    return;
                }
                else {
                    var endindex = this.totalrecords;
                }
            }
            else {
                var startindex = 0;
                var endindex = this.totalrecords;
            }

            if (this.groupable && this.groups.length > 0 && this.loadgrouprecords) {
                var visualRows = startindex;
                visualRows = this.loadgrouprecords(0, startindex, endindex, filter, currentPageIndex, updated, rows, rl, diff);
            }
            else {
                currentRowIndex = this.loadflatrecords(startindex, endindex, filter, currentPageIndex, updated, rows, rl, diff);
            }

            if (rl > currentPageIndex)
                rows.splice(currentPageIndex, rl - currentPageIndex);


            if (this.groups.length > 0 && this.groupable) {
                this.totalrows = visualRows;
            }
            else {
                this.totalrows = currentRowIndex;
            }

            return diff;
        }

        this.loadflatrecords = function (startindex, endindex, filter, currentPageIndex, updated, rows, rl, diff) {
            var self = this.that;
            var i = startindex;
            var currentRowIndex = startindex;
            endindex = Math.min(endindex, this.totalrecords);

            var hassortdata = this.sortdata != null;
            var localdata = this.source.id && (this.source.datatype == 'local' || this.source.datatype == 'array' || this.source.datatype == '');

            var data = hassortdata ? this.sortdata : this.records;

            for (var obj = startindex; obj < endindex; obj++) {
                var item = {};
                if (!hassortdata) {
                    item = $.extend({}, data[obj]);
                    id = item[self.uniqueId];
                    item.boundindex = i;
                    self.loadedrecords[i] = item;

                    if (item.uid == undefined) {
                        item.uid = self.getid(self.source.id, item, i);
                    }
                    self.recordsbyid["id" + item.uid] = data[obj];
                    item.uniqueid = self.generatekey();
                    self.bounditems[this.bounditems.length] = item;
                }
                else {
                    item = $.extend({}, data[obj].value);
                    id = item[self.uniqueId];
                    item.boundindex = data[obj].index;
                    if (item.uid == undefined) {
                        item.uid = self.getid(self.source.id, item, item.boundindex);
                    }
                    self.recordsbyid["id" + item.uid] = data[obj].value;
                    self.loadedrecords[i] = item;
                    item.uniqueid = self.generatekey();
                    self.bounditems[item.boundindex] = item;
                }

                if (currentPageIndex >= rl || id != rows[currentPageIndex][self.uniqueId] || (updated && updated[id]))
                    diff[diff.length] = currentPageIndex;

                rows[currentPageIndex] = item;
                currentPageIndex++;

                item.visibleindex = currentRowIndex;
                currentRowIndex++;
                i++;
            }

            if (self.grid.summaryrows) {
                var rowindex = i;
                $.each(self.grid.summaryrows, function () {
                    var item = $.extend({}, this);
                    item.boundindex = endindex++;
                    self.loadedrecords[rowindex] = item;
                    item.uniqueid = self.generatekey();
                    self.bounditems[self.bounditems.length] = item;
                    rows[currentPageIndex] = item;
                    currentPageIndex++;
                    item.visibleindex = currentRowIndex;
                    currentRowIndex++;
                    rowindex++;
                });
            }

            return currentRowIndex;
        },

        this.updateview = function (from, to) {
            var self = this.that;
            var currentRowIndex = this.pagesize * this.pagenum;
            var currentPageIndex = 0;
            var rows = new Array();
            var filter = this.filters;
            var updated = this.updated;
            var rl = rows.length;

            if (this.pageable) {
                if (this.virtualmode) {
                    if (!this.groupable || this.groups.length == 0) {
                        this.loadflatrecords(this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), filter, currentPageIndex, updated, rows, rl, []);
                        this.totalrows = rows.length;
                    }
                    else if (this.groupable && this.groups.length > 0 && this.loadgrouprecords) {
                        if (this._cachegrouppages[this.pagenum + '_' + this.pagesize] != undefined) {
                            this.rows = this._cachegrouppages[this.pagenum + '_' + this.pagesize];
                            this.totalrows = this.rows.length;
                            return;
                        }

                        var endindex = this.pagesize * (1 + this.pagenum);
                        if (endindex > this.totalrecords) {
                            endindex = this.totalrecords;
                        }

                        this.loadgrouprecords(0, this.pagesize * this.pagenum, endindex, filter, currentPageIndex, updated, rows, rl, []);
                        this._cachegrouppages[this.pagenum + '_' + this.pagesize] = this.rows;
                        this.totalrows = this.rows.length;
                        return;
                    }
                }
            }
            else {
                if (this.virtualmode && (!this.groupable || this.groups.length == 0)) {
                    var pagesize = this.pagesize;
                    if (pagesize == 0) {
                        pagesize = Math.min(100, this.totalrecords);
                    }
                    var start = pagesize * this.pagenum;
                    if (this.loadedrecords.length == 0) start = 0;

                    if (from != null && to != null) {
                        this.loadflatrecords(from, to, filter, currentPageIndex, updated, rows, rl, []);
                    }
                    else {
                        this.loadflatrecords(this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum), filter, currentPageIndex, updated, rows, rl, []);
                    }
                    this.totalrows = this.loadedrecords.length;
                    this.rows = rows;
                    if (rows.length >= pagesize) {
                        return;
                    }
                }
            }

            if (this.groupable && this.pageable && this.groups.length > 0 && this._updategroupsinpage) {
                rows = this._updategroupsinpage(self, filter, currentRowIndex, currentPageIndex, rl, this.pagesize * this.pagenum, this.pagesize * (1 + this.pagenum));
            }
            else {
                for (var i = this.pagesize * this.pagenum; i < this.pagesize * (1 + this.pagenum); i++) {
                    var item = i < this.loadedrecords.length ? this.loadedrecords[i] : null;
                    if (item == null) continue;

                    if (!this.pagesize || (currentRowIndex >= this.pagesize * this.pagenum && currentRowIndex <= this.pagesize * (this.pagenum + 1))) {
                        rows[currentPageIndex] = item;
                        currentPageIndex++;
                    }

                    currentRowIndex++;
                }
            }

            if ((rows.length == 0 || rows.length < this.pagesize) && !this.pageable && this.virtualmode) {
                currentPageIndex = rows.length;
                var startlength = rows.length;
                for (var i = this.pagesize * this.pagenum; i < this.pagesize * (1 + this.pagenum) - startlength; i++) {
                    var item = {};
                    item.boundindex = i + startlength;
                    item.visibleindex = i + startlength;
                    item.uniqueid = self.generatekey();
                    item.empty = true;
                    self.bounditems[i + startlength] = item;
                    rows[currentPageIndex] = item;
                    currentPageIndex++;
                }
            }

            this.rows = rows;
        }

        this.generatekey = function () {
            var S4 = function () {
                return (((1 + Math.random()) * 0x10) | 0);
            };
            return ("" + S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
        }

        this.reloaddata = function () {
            this.reload(this.records, this.rows, this.filter, this.updated, true);
        }

        this.refresh = function (fullupdate) {
            if (this.suspend) return;

            if (fullupdate == undefined) {
                fullupdate = true;
            }

            var countBefore = this.rows.length;
            var totalrowsBefore = this.totalrows;

            if (this.filters.length > 0 && !this.virtualmode) {
                var filter = "";
                var length = this.cachedrecords.length;
                var filtereddata = new Array();
                this.totalrecords = 0;
                var data = this.cachedrecords;
                this._dataIndexToBoundIndex = new Array();
                var filterslength = this.filters.length;

                if (this.source != null && this.source.filter != undefined && this.source.localdata != undefined) {
                    filtereddata = this.source.filter(this.filters, data, length);
                    if (filtereddata == undefined) {
                        filtereddata = new Array();
                    }
                    this.records = filtereddata;
                }
                else if (this.source.filter == null || this.source.filter == undefined) {
                    for (var row = 0; row < length; row++) {
                        var datarow = data[row];
                        var filterresult = undefined;
                        for (var j = 0; j < filterslength; j++) {
                            var filter = this.filters[j].filter;
                            var value = datarow[this.filters[j].datafield];
                            var result = filter.evaluate(value);

                            if (filterresult == undefined) filterresult = result;
                            else {
                                if (filter.operator == 'or') {
                                    filterresult = filterresult || result;
                                }
                                else {
                                    filterresult = filterresult && result;
                                }
                            }
                        }

                        if (filterresult) {
                            filtereddata[filtereddata.length] = $.extend({ dataindex: row }, datarow);
                            this._dataIndexToBoundIndex[row] = { boundindex: filtereddata.length - 1 };
                        }
                        else this._dataIndexToBoundIndex[row] = null;
                    }
                    this.records = filtereddata;
                }
                if (this.sortdata) {
                    var lookupkey = this.sortfield;
                    if (this.sortcache[lookupkey]) {
                        this.sortdata = null;
                        var direction = this.sortcache[lookupkey].direction;
                        this.sortcache[lookupkey] = null;
                        this.sortby(this.sortfield, direction);
                        return;
                    }
                }
            }
            else if (this.filters.length == 0 && !this.virtualmode) {
                if (this.cachedrecords) {
                    this.totalrecords = 0;
                    var data = this.cachedrecords;
                    this.records = data;
                    if (this.sortdata) {
                        var lookupkey = this.sortfield;
                        if (this.sortcache[lookupkey]) {
                            this.sortdata = null;
                            var direction = this.sortcache[lookupkey].direction;
                            this.sortcache[lookupkey] = null;
                            this.sortby(this.sortfield, direction);
                            return;
                        }
                    }
                }
            }

            var diff = this.reload(this.records, this.rows, this.filter, this.updated, fullupdate);
            this.updated = null;

            if (this.rowschangecallback != null) {
                if (totalrowsBefore != totalrows) this.rowschangecallback({ type: "PagingChanged", data: getpagingdetails() });
                if (countBefore != rows.length) this.rowschangecallback({ type: "RowsCountChanged", data: { previous: countBefore, current: rows.length } });
                if (diff.length > 0 || countBefore != rows.length) {
                    this.rowschangecallback({ type: "RowsChanged", data: { previous: countBefore, current: rows.length, diff: diff } });
                }
            }
        }

        return this;
    }
})(jQuery);
/*
 * file from "src\jqxgrid.selection.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {

    $.extend($.jqx._jqxGrid.prototype, {
        // select all rows.
        selectallrows: function () {
            this._trigger = false;
            var length = this.virtualmode ? this.dataview.totalrecords : this.getboundrows().length;
            this.selectedrowindexes = new Array();
            for (var i = 0; i < length; i++) {
                this.selectedrowindexes[i] = i;
            }
            if (this.selectionmode == "checkbox" && !this._checkboxcolumnupdating) {
                if (this._checkboxcolumn) {
                    this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: true });
                }
            }
            this._renderrows(this.virtualsizeinfo);
            this._trigger = true;
            if (this.selectionmode == "checkbox") {
                this._raiseEvent(2, { rowindex: this.selectedrowindexes });
            }
        },

        // selects a row by index.
        selectrow: function (index, refresh) {
            this._applyrowselection(index, true, refresh);
            if (refresh !== false) {
                this._updatecheckboxselection();
            }
        },

        _updatecheckboxselection: function()
        {
            if (this.selectionmode == "checkbox") {
                var rows = this.getrows();
                if (rows && this._checkboxcolumn) {
                    if (rows.length === 0) {
                        this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: false });
                        return;
                    }
                    var length = rows.length;
                    if (this.virtualmode) length = this.source._source.totalrecords;

                    var checkedItemsCount = this.selectedrowindexes.length;
                    if (checkedItemsCount === length) {
                        this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: true });
                    }
                    else if (checkedItemsCount === 0) {
                        this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: false });
                    }
                    else this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: null });
                }
            }
        },

        // unselects a row by index.
        unselectrow: function (index, refresh) {
            this._applyrowselection(index, false, refresh);
            if (refresh !== false) {
                this._updatecheckboxselection();
            }
        },

        // selects a cell.
        selectcell: function (row, datafield) {
            this._applycellselection(row, datafield, true);
        },

        // unselects a cell.
        unselectcell: function (row, datafield) {
            this._applycellselection(row, datafield, false);
        },

        // clears the selection.
        clearselection: function (refresh, raiseEvent) {
            this._trigger = false;
            this.selectedrowindex = -1;

            if (raiseEvent !== false) {
                for (var i = 0; i < this.selectedrowindexes.length; i++) {
                    this._raiseEvent(3, { rowindex: this.selectedrowindexes[i] });
                }
            }

            this.selectedrowindexes = new Array();
            this.selectedcells = new Array();

            if (this.selectionmode == "checkbox" && !this._checkboxcolumnupdating ) {
                this._checkboxcolumn.checkboxelement.jqxCheckBox({ checked: false });
            }
         
            if (false === refresh) {
                this._trigger = true;
                return;
            }

            this._renderrows(this.virtualsizeinfo);
            this._trigger = true;
            if (this.selectionmode == "checkbox") {
                this._raiseEvent(3, { rowindex: this.selectedrowindexes });
            }
        },

        // gets the selected row index.
        getselectedrowindex: function () {
            if (this.selectedrowindex == -1) {
                for (var i = 0; i < this.selectedrowindexes.length; i++) {
                    return this.selectedrowindexes[i];
                }
            }

            return this.selectedrowindex;
        },

        // gets the selected row index.
        getselectedrowindexes: function () {
            return this.selectedrowindexes;
        },

        // gets the selected cell.
        getselectedcell: function () {
            if (!this.selectedcell) {
                return null;
            }

            var cell = this.selectedcell;
            cell.row = this.selectedcell.rowindex;
            cell.column = this.selectedcell.datafield;
            cell.value = this.getcellvalue(cell.row, cell.column);
            return cell;
        },

        // gets the selected cells.
        getselectedcells: function () {
            var cells = new Array();
            for (obj in this.selectedcells) {
                cells[cells.length] = this.selectedcells[obj];
            }

            return cells;
        },

        _getcellsforcopypaste: function () {
            var cells = new Array();
            if (this.selectionmode.indexOf('cell') == -1) {
                var rows = this.selectedrowindexes;
                for (var j = 0; j < rows.length; j++) {
                    var index = rows[j];
                    for (var i = 0; i < this.columns.records.length; i++) {
                        var uniquekey = index + "_" + this.columns.records[i].datafield;
                        var cell = { rowindex: index, datafield: this.columns.records[i].datafield };
                        cells.push(cell);
                    }
                }
            }
            return cells;
        },

        deleteselection: function () {
            var self = this;
            var cells = self.getselectedcells();
            if (this.selectionmode.indexOf('cell') == -1) {
                cells = this._getcellsforcopypaste();
            }
            if (cells != null && cells.length > 0) {
                for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {
                    var cell = cells[cellIndex];
                    var column = self.getcolumn(cell.datafield);
                    var cellValue = self.getcellvalue(cell.rowindex, cell.datafield);
                    if (!column) continue;

                    if (cellValue !== "") {
                        var newvalue = null;
                        if (column.columntype == "checkbox") {
                            if (!column.threestatecheckbox) {
                                newvalue = false;
                            }
                        }
                        self._raiseEvent(17, { rowindex: cell.rowindex, datafield: cell.datafield, value: cellValue });
                        if (cellIndex == cells.length - 1) {
                            self.setcellvalue(cell.rowindex, cell.datafield, newvalue, true);
                            if (column.displayfield != column.datafield) {
                                self.setcellvalue(cell.rowindex, column.displayfield, newvalue, true);
                            }
                        }
                        else {
                            self.setcellvalue(cell.rowindex, cell.datafield, newvalue, false);
                            if (column.displayfield != column.datafield) {
                                self.setcellvalue(cell.rowindex, column.displayfield, newvalue, true);
                            } 
                        }
                        self._raiseEvent(18, { rowindex: cell.rowindex, datafield: cell.datafield, oldvalue: cellValue, value: newvalue });
                    }
                }
                this.dataview.updateview();
                this._renderrows(this.virtualsizeinfo);
            }
        },

        copyselection: function () {
            var selectedtext = "";
            var self = this;
            this.clipboardselection = {};
            this._clipboardselection = [];
            var cells = self.getselectedcells();
            if (this.selectionmode.indexOf('cell') == -1) {
                cells = this._getcellsforcopypaste();
            }

            if (cells != null && cells.length > 0) {
                var minrowindex = 999999999999999;
                var maxrowindex = -1;
                for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {
                    var cell = cells[cellIndex];
                    var column = self.getcolumn(cell.datafield);
                    if (column != null) {
                        var cellValue = self.getcelltext(cell.rowindex, cell.datafield);
                        if (!this.clipboardselection[cell.rowindex]) this.clipboardselection[cell.rowindex] = {};
                        this.clipboardselection[cell.rowindex][cell.datafield] = cellValue;
                        minrowindex = Math.min(minrowindex, cell.rowindex);
                        maxrowindex = Math.max(maxrowindex, cell.rowindex);
                    }
                }
                for (var i = minrowindex; i <= maxrowindex; i++) {
                    var x = 0;
                    this._clipboardselection[this._clipboardselection.length] = new Array();
                    if (this.clipboardselection[i] != undefined) {
                        $.each(this.clipboardselection[i], function (index, value) {
                            if (x > 0) selectedtext += "\t";
                            var text = value;
                            if (value == null) text = "";
                            self._clipboardselection[self._clipboardselection.length - 1][x] = text;
                            x++;
                            selectedtext += text;
                        });
                    }
                    if (i < maxrowindex) {
                        selectedtext += '\n';
                    }
                }
            }
            this.clipboardselectedtext = selectedtext;
            return selectedtext;
        },

        pasteselection: function () {
            var cells = this.getselectedcells();
            if (this.selectionmode.indexOf('cell') == -1) {
                cells = this._getcellsforcopypaste();
            }
            if (cells != null && cells.length > 0) {
                var rowindex = cells[0].rowindex;
                var datafield = cells[0].datafield;
                var columnindex = this._getcolumnindex(datafield);
                var x = 0;
                this.selectedrowindexes = new Array();
                this.selectedcells = new Array();

                if (!this._clipboardselection) return;
                for (var row = 0; row < this._clipboardselection.length; row++) {
                    for (var c = 0; c < this._clipboardselection[row].length; c++) {
                        var column = this.getcolumnat(columnindex + c);
                        if (!column) continue;

                        var cell = this.getcell(rowindex + row, column.datafield);
                        var cellvalue = null;
                        cellvalue = this._clipboardselection[row][c];
                        if (cellvalue != null) {
                            if (column.cellsformat) {
                                if (column.cellsformat.indexOf('p') != -1 || column.cellsformat.indexOf('c') != -1 || column.cellsformat.indexOf('n') != -1 || column.cellsformat.indexOf('f') != -1) {
                                    if (cellvalue.indexOf(this.gridlocalization.currencysymbol) > -1) {
                                        // remove currency symbol
                                        cellvalue = cellvalue.replace(this.gridlocalization.currencysymbol, "");
                                    }

                                    var replaceAll = function (text, stringToFind, stringToReplace) {
                                        var temp = text;
                                        if (stringToFind == stringToReplace) return text;

                                        var index = temp.indexOf(stringToFind);
                                        while (index != -1) {
                                            temp = temp.replace(stringToFind, stringToReplace);
                                            index = temp.indexOf(stringToFind)
                                        }

                                        return temp;
                                    }

                                    cellvalue = replaceAll(cellvalue, this.gridlocalization.thousandsseparator, "");
                                    cellvalue = cellvalue.replace(this.gridlocalization.decimalseparator, ".");

                                    if (cellvalue.indexOf(this.gridlocalization.percentsymbol) > -1) {
                                        cellvalue = cellvalue.replace(this.gridlocalization.percentsymbol, "");
                                    }

                                    var val = "";
                                    for (var t = 0; t < cellvalue.length; t++) {
                                        var ch = cellvalue.substring(t, t + 1);
                                        if (ch === "-") val += "-";
                                        if (ch === ".") val += ".";
                                        if (ch.match(/^[0-9]+$/) != null) {
                                            val += ch;
                                        }
                                    }

                                    cellvalue = val;
                                    cellvalue = cellvalue.replace(/ /g, "");

                                    cellvalue = new Number(cellvalue);
                                    if (isNaN(cellvalue))
                                        cellvalue = "";
                                }
                            }
                            this._raiseEvent(17, { rowindex: rowindex + row, datafield: cell.datafield, value: cellvalue });
                            this.setcellvalue(cell.row, cell.column, cellvalue, false);
                            this._raiseEvent(18, { rowindex: rowindex + row, datafield: cell.datafield, oldvalue: this.getcellvalue(cell.rowindex, cell.datafield), value: cellvalue });
                            this._applycellselection(rowindex + row, cell.datafield, true, false);
                        }
                    }
                }

                this.dataview.updateview();
                this._renderrows(this.virtualsizeinfo);
            }
        },

        _applyrowselection: function (index, select, refresh, multiplerows, column) {
            if (index == null)
                return false;

            var oldindex = this.selectedrowindex;

            if (this.selectionmode == 'singlerow') {
                if (select) {
                    this._raiseEvent(2, { rowindex: index, row: this.getrowdata(index) });
                }
                else {
                    this._raiseEvent(3, { rowindex: index, row: this.getrowdata(index) });
                }

                this._raiseEvent(3, { rowindex: oldindex });
                this.selectedrowindexes = new Array();
                this.selectedcells = new Array();
            }

            if (multiplerows == true) {
                this.selectedrowindexes = new Array();
            }

            if (this.dataview.filters.length > 0) {
                var data = this.getrowdata(index);
                if (data && data.dataindex !== undefined) {
                    index = data.dataindex;
                }
                else if (data && data.dataindex === undefined) {
                    if (data.uid) {
                        index = this.getrowboundindexbyid(data.uid);

                    }
                }
            }

            var indexIn = this.selectedrowindexes.indexOf(index);

            if (select) {
                this.selectedrowindex = index;

                if (indexIn == -1) {
                    this.selectedrowindexes.push(index);

                    if (this.selectionmode != 'singlerow') {
                        this._raiseEvent(2, { rowindex: index, row: this.getrowdata(index) });
                    }
                }
                else if (this.selectionmode == 'multiplerows') {
                    this.selectedrowindexes.splice(indexIn, 1);
                    this._raiseEvent(3, { rowindex: this.selectedrowindex, row: this.getrowdata(index) });
                    this.selectedrowindex = this.selectedrowindexes.length > 0 ? this.selectedrowindexes[this.selectedrowindexes.length - 1] : -1;
                }
            }
            else if (indexIn >= 0 || this.selectionmode == 'singlerow' || this.selectionmode == 'multiplerowsextended' || this.selectionmode == 'multiplerowsadvanced') {
                var oldIndex = this.selectedrowindexes[indexIn];
                this.selectedrowindexes.splice(indexIn, 1);
                this._raiseEvent(3, { rowindex: oldIndex, row: this.getrowdata(index) });
                this.selectedrowindex = -1;
            }

            if (refresh == undefined || refresh) {
                this._rendervisualrows();
            }

            return true;
        },

        _applycellselection: function (index, column, select, refresh) {
            if (index == null)
                return false;

            if (column == null)
                return false;

            var oldindex = this.selectedrowindex;

            if (this.selectionmode == 'singlecell') {
                var oldcell = this.selectedcell;
                if (oldcell != null) {
                    this._raiseEvent(16, { rowindex: oldcell.rowindex, datafield: oldcell.datafield });
                }
                this.selectedcells = new Array();
            }

            if (this.selectionmode == 'multiplecellsextended' || this.selectionmode == 'multiplecellsadvanced') {
                var oldcell = this.selectedcell;
                if (oldcell != null) {
                    this._raiseEvent(16, { rowindex: oldcell.rowindex, datafield: oldcell.datafield });
                }
            }

            var uniquekey = index + "_" + column;
            if (this.dataview.filters.length > 0) {
                var data = this.getrowdata(index);
                if (data && data.dataindex !== undefined) {
                    index = data.dataindex;
                    var uniquekey = index + "_" + column;
                }
                else if (data && data.dataindex === undefined) {
                    if (data.uid) {
                        index = this.getrowboundindexbyid(data.uid);
                        var uniquekey = index + "_" + column;
                    }
                }
            }

            var cell = { rowindex: index, datafield: column };
            if (select) {
                this.selectedcell = cell;
                if (!this.selectedcells[uniquekey]) {
                    this.selectedcells[uniquekey] = cell;
                    this.selectedcells.length++;
                    this._raiseEvent(15, cell);
                }
                else if (this.selectionmode == "multiplecells" || this.selectionmode == 'multiplecellsextended' || this.selectionmode == 'multiplecellsadvanced') {
                    delete this.selectedcells[uniquekey];
                    if (this.selectedcells.length > 0) {
                        this.selectedcells.length--;
                    }
                    this._raiseEvent(16, cell);
                }
            }
            else {
                delete this.selectedcells[uniquekey];
                if (this.selectedcells.length > 0) {
                    this.selectedcells.length--;
                }

                this._raiseEvent(16, cell);
            }

            if (refresh == undefined || refresh) {
                this._rendervisualrows();
            }

            return true;
        },

        _getcellindex: function (uniquekey) {
            var id = -1;
            $.each(this.selectedcells, function () {
                id++;
                if (this[uniquekey]) {
                    return false;
                }
            });
            return id;
        },

        _clearhoverstyle: function () {
            if (undefined == this.hoveredrow || this.hoveredrow == -1)
                return;

            if (this.vScrollInstance.isScrolling())
                return;

            if (this.hScrollInstance.isScrolling())
                return;

            var cells = this.table.find('.jqx-grid-cell-hover');

            if (cells.length > 0) {
                cells.removeClass(this.toTP('jqx-grid-cell-hover'));
                cells.removeClass(this.toTP('jqx-fill-state-hover'));
            }
            this.hoveredrow = -1;
        },

        _clearselectstyle: function () {
            var rowscount = this.table[0].rows.length;
            var rows = this.table[0].rows;
            var selectclass = this.toTP('jqx-grid-cell-selected');
            var selectclass2 = this.toTP('jqx-fill-state-pressed');
            var hoverclass = this.toTP('jqx-grid-cell-hover');
            var hoverclass2 = this.toTP('jqx-fill-state-hover');

            for (var i = 0; i < rowscount; i++) {
                var tablerow = rows[i];
                var cellslength = tablerow.cells.length;
                var cells = tablerow.cells;
                for (var j = 0; j < cellslength; j++) {
                    var tablecell = cells[j];
                    var $tablecell = $(tablecell);
                    if (tablecell.className.indexOf('jqx-grid-cell-selected') != -1) {
                        $tablecell.removeClass(selectclass);
                        $tablecell.removeClass(selectclass2);
                    }

                    if (tablecell.className.indexOf('jqx-grid-cell-hover') != -1) {
                        $tablecell.removeClass(hoverclass);
                        $tablecell.removeClass(hoverclass2);
                    }
                }
            }
        },

        _selectpath: function (row, column) {
            var self = this;
            var minRow = this._lastClickedCell ? Math.min(this._lastClickedCell.row, row) : 0;
            var maxRow = this._lastClickedCell ? Math.max(this._lastClickedCell.row, row) : 0;
            if (minRow <= maxRow) {
                var index1 = this._getcolumnindex(this._lastClickedCell.column);
                var index2 = this._getcolumnindex(column);
                var minColumn = Math.min(index1, index2);
                var maxColumn = Math.max(index1, index2);
                this.selectedcells = new Array();
                var rows = this.dataview.loadedrecords;

                for (var r = minRow; r <= maxRow; r++) {
                    for (var c = minColumn; c <= maxColumn; c++) {
                        var row = rows[r];
                        this._applycellselection(self.getboundindex(row), self._getcolumnat(c).datafield, true, false);
                    }
                }
                this._rendervisualrows();
            }
        },

        _selectrowpath: function (row) {     
            if (this.selectionmode == 'multiplerowsextended') {
                var self = this;
                var minRow = this._lastClickedCell ? Math.min(this._lastClickedCell.row, row) : 0;
                var maxRow = this._lastClickedCell ? Math.max(this._lastClickedCell.row, row) : 0;
                var rows = this.dataview.loadedrecords;
                if (minRow <= maxRow) {
                    this.selectedrowindexes = new Array();
                    for (var r = minRow; r <= maxRow; r++) {
                        var row = rows[r];
                        var boundIndex = this.getrowboundindex(r);
                        this._applyrowselection(boundIndex, true, false);
                    }
                    this._rendervisualrows();
                }
            }
        },

        _selectrowwithmouse: function (self, rowinfo, oldindexes, column, ctrlKey, shiftKey) {
            var row = rowinfo.row;

            if (row == undefined)
                return;

            var index = rowinfo.index;

            if (this.hittestinfo[index] == undefined) {
                return;
            }

            var tablerow = this.hittestinfo[index].visualrow;

            if (this.hittestinfo[index].details) {
                return;
            }

            var cellclass = tablerow.cells[0].className;
            if (row.group) {
                return;
            }

            if (this.selectionmode == 'multiplerows' || this.selectionmode == 'multiplecells' || this.selectionmode == 'checkbox' || (this.selectionmode.indexOf('multiple') != -1 && (shiftKey == true || ctrlKey == true))) {
                var boundindex = this.getboundindex(row);
                if (this.dataview.filters.length > 0) {
                    var data = this.getrowdata(boundindex);
                    if (data) {
                        boundindex = data.dataindex;
                        if (boundindex == undefined) {
                            var boundindex = this.getboundindex(row);
                        }
                    }
                }

                var hasindex = oldindexes.indexOf(boundindex) != -1;
                var key = this.getboundindex(row) + "_" + column;

                if (this.selectionmode.indexOf('cell') != -1) {
                    var hascellindex = this.selectedcells[key] != undefined;
                    if (this.selectedcells[key] != undefined && hascellindex) {
                        this._selectcellwithstyle(self, false, index, column, tablerow);
                    }
                    else {
                        this._selectcellwithstyle(self, true, index, column, tablerow);
                    }
                    if (shiftKey && this._lastClickedCell == undefined) {
                        var cells = this.getselectedcells();
                        if (cells && cells.length > 0) {
                            this._lastClickedCell = { row: cells[0].rowindex, column: cells[0].datafield };
                        }
                    }
                    if (shiftKey && this._lastClickedCell) {
                        this._selectpath(row.visibleindex, column);
                        this.mousecaptured = false;
                        if (this.selectionarea.css('visibility') == 'visible') {
                            this.selectionarea.css('visibility', 'hidden');
                        }
                    }
                }
                else {
                    if (hasindex) {
                        if (ctrlKey) {
                            this._applyrowselection(this.getboundindex(row), false);
                        }
                        else {
                            this._selectrowwithstyle(self, tablerow, false, column);
                        }
                    }
                    else {
                        this._selectrowwithstyle(self, tablerow, true, column);
                    }

                    if (shiftKey && this._lastClickedCell == undefined) {
                        var indexes = this.getselectedrowindexes();
                        if (indexes && indexes.length > 0) {
                            this._lastClickedCell = { row: indexes[0], column: column };
                        }
                    }
                    if (shiftKey && this._lastClickedCell) {
                        this.selectedrowindexes = new Array();
                        var minRow = this._lastClickedCell ? Math.min(this._lastClickedCell.row, row.visibleindex) : 0;
                        var maxRow = this._lastClickedCell ? Math.max(this._lastClickedCell.row, row.visibleindex) : 0;
                        var rows = this.dataview.loadedrecords;

                        for (var r = minRow; r <= maxRow; r++) {
                            var row = rows[r];
                            this._applyrowselection(this.getboundindex(row), true, false, false);
                        }
                        this._rendervisualrows();
                    }
                }
            }
            else {
                this._clearselectstyle();
                this._selectrowwithstyle(self, tablerow, true, column);
                if (this.selectionmode.indexOf('cell') != -1) {
                    this._selectcellwithstyle(self, true, index, column, tablerow);
                }
            }
            if (!shiftKey) {
                this._lastClickedCell = { row: row.visibleindex, column: column };
            }
        },

        _selectcellwithstyle: function (self, select, row, column, tablerow) {
            var cell = $(tablerow.cells[self._getcolumnindex(column)]);
            cell.removeClass(this.toTP('jqx-grid-cell-hover'));
            cell.removeClass(this.toTP('jqx-fill-state-hover'));
            if (select) {
                cell.addClass(this.toTP('jqx-grid-cell-selected'));
                cell.addClass(this.toTP('jqx-fill-state-pressed'));
            }
            else {
                cell.removeClass(this.toTP('jqx-grid-cell-selected'));
                cell.removeClass(this.toTP('jqx-fill-state-pressed'));
            }
        },

        _selectrowwithstyle: function (self, tablerow, select, column) {
            var cellslength = tablerow.cells.length;

            var startindex = 0;
            if (self.rowdetails && self.showrowdetailscolumn) {
                if (!this.rtl) {
                    startindex = 1 + this.groups.length;
                }
                else {
                    cellslength -= 1;
                    cellslength -= this.groups.length;
                }
            }
            else if (this.groupable) {
                if (!this.rtl) {
                    startindex = this.groups.length;
                }
                else {
                    cellslength -= this.groups.length;
                }
            }

            for (var i = startindex; i < cellslength; i++) {
                var tablecell = tablerow.cells[i];
                if (select) {
                    $(tablecell).removeClass(this.toTP('jqx-grid-cell-hover'));
                    $(tablecell).removeClass(this.toTP('jqx-fill-state-hover'));

                    if (self.selectionmode.indexOf('cell') == -1) {
                        $(tablecell).addClass(this.toTP('jqx-grid-cell-selected'));
                        $(tablecell).addClass(this.toTP('jqx-fill-state-pressed'));
                    }
                }
                else {
                    $(tablecell).removeClass(this.toTP('jqx-grid-cell-hover'));
                    $(tablecell).removeClass(this.toTP('jqx-grid-cell-selected'));
                    $(tablecell).removeClass(this.toTP('jqx-fill-state-hover'));
                    $(tablecell).removeClass(this.toTP('jqx-fill-state-pressed'));
                }
            }
        },

        _handlemousemoveselection: function (event, self) {
            if ((self.selectionmode == 'multiplerowsextended' || self.selectionmode == 'multiplecellsextended' || self.selectionmode == 'multiplecellsadvanced') && self.mousecaptured) {
                if (self.multipleselectionbegins) {
                    var canSelectMultipleRows = self.multipleselectionbegins(event);
                    if (canSelectMultipleRows === false) {
                        return true;
                    }
                }

                var columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
                var groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
                var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
                groupsheaderheight += toolbarheight;
                var hostoffset = this.host.coord();
                if (this.hasTransform) {
                    hostoffset = $.jqx.utilities.getOffset(this.host);
                    var bodyOffset = this._getBodyOffset();
                    hostoffset.left -= bodyOffset.left;
                    hostoffset.top -= bodyOffset.top;
                }
                var x = event.pageX;
                var y = event.pageY - groupsheaderheight;

                if (Math.abs(this.mousecaptureposition.left - x) > 3 || Math.abs(this.mousecaptureposition.top - y) > 3) {
                    var columnheadertop = parseInt(this.columnsheader.coord().top);
                    if (this.hasTransform) {
                        columnheadertop = $.jqx.utilities.getOffset(this.columnsheader).top;
                    }
                    if (x < hostoffset.left) {
                        x = hostoffset.left;
                    }

                    if (x > hostoffset.left + this.host.width()) {
                        x = hostoffset.left + this.host.width();
                    }
                    var columnheaderbottom = hostoffset.top + columnheaderheight;
                    if (y < columnheaderbottom) y = columnheaderbottom + 5;
                    var rectleft = parseInt(Math.min(self.mousecaptureposition.left, x));
                    var recttop = -5 + parseInt(Math.min(self.mousecaptureposition.top, y));
                    var rectwidth = parseInt(Math.abs(self.mousecaptureposition.left - x));
                    var rectheight = parseInt(Math.abs(self.mousecaptureposition.top - y));
                    rectleft -= hostoffset.left;
                    recttop -= hostoffset.top;

                    this.selectionarea.css('visibility', 'visible');

                    if (self.selectionmode == 'multiplecellsadvanced') {
                        var x = rectleft;
                        var arearight = x + rectwidth;
                        var arealeft = x;
                        var hScrollInstance = self.hScrollInstance;
                        var horizontalscrollvalue = hScrollInstance.value;
                        if (this.rtl) {
                            if (this.hScrollBar.css('visibility') != 'hidden') {
                                horizontalscrollvalue = hScrollInstance.max - hScrollInstance.value;
                            }
                            if (this.vScrollBar[0].style.visibility != 'hidden') {
                          //      horizontalscrollvalue -= this.scrollbarsize + 4;
                            }
                        }
                        var tablerow = self.table[0].rows[0];
                        var p = 0;

                        var leftcellindex = self.mousecaptureposition.clickedcell;
                        var rightcellindex = leftcellindex;
                        var found = false;

                        var starti = 0;
                        var endi = tablerow.cells.length;
                        if (self.mousecaptureposition.left <= event.pageX) {
                            starti = leftcellindex;
                        }

                        for (var i = starti; i < endi; i++) {
                            var columnleft = parseInt($(this.columnsrow[0].cells[i]).css('left'));
                            var left = columnleft - horizontalscrollvalue;
                            if (self.columns.records[i].pinned) {
                                left = columnleft;
                                continue;
                            }

                            var column = this._getcolumnat(i);
                            if (column != null && column.hidden) {
                                continue;
                            }

                            if (self.groupable && self.groups.length > 0) {
                                if (i < self.groups.length) {
                                    continue;
                                }
                            }

                            var right = left + $(this.columnsrow[0].cells[i]).width();
                            if (self.mousecaptureposition.left > event.pageX) {
                                if (right >= x && x >= left) {
                                    rightcellindex = i;
                                    found = true;
                                    break;
                                }
                            }
                            else {
                                if (right >= arearight && arearight >= left) {
                                    rightcellindex = i;
                                    found = true;
                                    break;
                                }
                            }
                        }
                        if (!found) {
                            if (self.mousecaptureposition.left > event.pageX) {
                                $.each(this.columns.records, function (index, value) {
                                    if (self.groupable && self.groups.length > 0) {
                                        if (index < self.groups.length) {
                                            return true;
                                        }
                                    }

                                    if (!this.pinned && !this.hidden) {
                                        rightcellindex = index;
                                        return false;
                                    }
                                });
                            }
                            else {
                                if (!self.groupable || (self.groupable && !self.groups.length > 0)) {
                                    rightcellindex = tablerow.cells.length - 1;
                                }
                            }
                        }
                        var tmpindex = leftcellindex;
                        leftcellindex = Math.min(leftcellindex, rightcellindex);
                        rightcellindex = Math.max(tmpindex, rightcellindex);
                        recttop += 5;
                        recttop += groupsheaderheight;
                        var startrowindex = self.table[0].rows.indexOf(self.mousecaptureposition.clickedrow);
                        var increaseheight = 0;
                        var startrow = -1;
                        var endrow = -1;
                        var offsettop = 0;
                        for (var i = 0; i < self.table[0].rows.length; i++) {
                            var row = $(self.table[0].rows[i]);
                            if (i == 0) offsettop = row.coord().top;
                            var rowheight = row.height();
                            var rowtop = offsettop - hostoffset.top;
                            if (startrow == -1 && rowtop + rowheight >= recttop) {
                                var toContinue = false;
                                for (var q = 0; q < self.groups.length; q++) {
                                    var className = row[0].cells[q].className;
                                    if (className.indexOf('jqx-grid-group-collapse') != -1 || className.indexOf('jqx-grid-group-expand') != -1) {
                                        toContinue = true;
                                        break;
                                    }
                                }
                                if (toContinue) continue;


                                startrow = i;
                            }
                            offsettop += rowheight;

                            if (self.groupable && self.groups.length > 0) {
                                var toContinue = false;
                                for (var q = 0; q < self.groups.length; q++) {
                                    var className = row[0].cells[q].className;
                                    if (className.indexOf('jqx-grid-group-collapse') != -1 || className.indexOf('jqx-grid-group-expand') != -1) {
                                        toContinue = true;
                                        break;
                                    }
                                }
                                if (toContinue) continue;

                                var p = 0;
                                for (var k = self.groups.length; k < row[0].cells.length; k++) {
                                    var cell = row[0].cells[k];
                                    if ($(cell).html() == "") {
                                        p++;
                                    }
                                }
                                if (p == row[0].cells.length - self.groups.length) {
                                    continue;
                                }
                            }

                            if (startrow != -1) {
                                increaseheight += rowheight;
                            }

                            if (rowtop + rowheight > recttop + rectheight) {
                                endrow = i;
                                break;
                            }
                        }


                        if (startrow != -1) {
                            recttop = $(self.table[0].rows[startrow]).coord().top - hostoffset.top - groupsheaderheight - 2;
                            var additionalHeight = 0;
                            if (this.filterable && this.showfilterrow) {
                                additionalHeight = this.filterrowheight;
                            }

                            if (parseInt(self.table[0].style.top) < 0 && recttop < this.rowsheight + additionalHeight) {
                                recttop -= parseInt(self.table[0].style.top);
                                increaseheight += parseInt(self.table[0].style.top);
                            }

                            rectheight = increaseheight;
                            var leftcell = $(this.columnsrow[0].cells[leftcellindex]);
                            var rightcell = $(this.columnsrow[0].cells[rightcellindex]);
                            rectleft = parseInt(leftcell.css('left'));
                            rectwidth = parseInt(rightcell.css('left')) - parseInt(rectleft) + rightcell.width() - 2;
                            rectleft -= horizontalscrollvalue;
                            if (self.editcell && self.editable && self.endcelledit && (leftcellindex != rightcellindex || startrow != endrow)) {
                                if (self.editcell.validated == false) return;
                                self.endcelledit(self.editcell.row, self.editcell.column, true, true);
                            }
                        }
                    }

                    this.selectionarea.width(rectwidth);
                    this.selectionarea.height(rectheight);
                    this.selectionarea.css('left', rectleft);
                    this.selectionarea.css('top', recttop);
                }
            }
        },

        _handlemouseupselection: function (event, self) {
            if (!this.selectionarea) return;

            if (this.selectionarea.css('visibility') != 'visible') {
                self.mousecaptured = false;
                return true;
            }

            if (self.mousecaptured && (self.selectionmode == 'multiplerowsextended' || self.selectionmode == 'multiplerowsadvanced' || self.selectionmode == 'multiplecellsextended' || self.selectionmode == 'multiplecellsadvanced')) {
                self.mousecaptured = false;
                if (this.selectionarea.css('visibility') == 'visible') {
                    this.selectionarea.css('visibility', 'hidden');

                    var columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
                    var groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
                    var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
                    groupsheaderheight += toolbarheight;
                    var areaoffset = this.selectionarea.coord();
                    var hostoffset = this.host.coord();
                    if (this.hasTransform) {
                        hostoffset = $.jqx.utilities.getOffset(this.host);
                        areaoffset = $.jqx.utilities.getOffset(this.selectionarea);
                    }

                    var x = areaoffset.left - hostoffset.left;
                    var y = areaoffset.top - columnheaderheight - hostoffset.top - groupsheaderheight;
                    var m = y;
                    var arearight = x + this.selectionarea.width();
                    var arealeft = x;

                    var rows = new Array();
                    var indexes = new Array();

                    if (self.selectionmode == 'multiplerowsextended') {
                        while (y < m + this.selectionarea.height()) {
                            var rowinfo = this._hittestrow(x, y);
                            var row = rowinfo.row;
                            var index = rowinfo.index;
                            if (index != -1) {
                                if (!indexes[index]) {
                                    indexes[index] = true;
                                    rows[rows.length] = rowinfo;
                                }
                            }
                            y += 20;
                        }
                        var m = 0;
                        $.each(rows, function () {
                            var rowinfo = this;
                            var row = this.row;
                            if (self.selectionmode != 'none' && self._selectrowwithmouse) {
                                if (event.ctrlKey) {
                                    self._applyrowselection(self.getboundindex(row), true, false, false);
                                }
                                else {
                                    if (m == 0) {
                                        self._applyrowselection(self.getboundindex(row), true, false, true);
                                    }
                                    else {
                                        self._applyrowselection(self.getboundindex(row), true, false, false);
                                    }
                                }
                                m++;
                            }
                        });
                    }
                    else {
                        if (self.selectionmode == 'multiplecellsadvanced') {
                            y += 2;
                        }
                        var hScrollInstance = self.hScrollInstance;
                        var horizontalscrollvalue = hScrollInstance.value;
                        if (this.rtl) {
                            if (this.hScrollBar.css('visibility') != 'hidden') {
                                horizontalscrollvalue = hScrollInstance.max - hScrollInstance.value;
                            }
                            if (this.vScrollBar[0].style.visibility != 'hidden') {
                                horizontalscrollvalue -= this.scrollbarsize + 4;
                            }
                        }
                        var tablerow = self.table[0].rows[0];
                        var selectionheight = self.selectionarea.height();
                        if (!event.ctrlKey && selectionheight > 0) {
                            self.selectedcells = new Array();
                        }

                        var selectionHeight = selectionheight;
                        while (y < m + selectionHeight) {
                            var rowinfo = self._hittestrow(x, y);
                            if (!rowinfo) {
                                y += 5;
                                continue;
                            }
                            var row = rowinfo.row;
                            var index = rowinfo.index;
                            if (index != -1) {
                                if (!indexes[index]) {
                                    indexes[index] = true;
                                    for (var i = 0; i < tablerow.cells.length; i++) {
                                        var left = parseInt($(self.columnsrow[0].cells[i]).css('left')) - horizontalscrollvalue;
                                        var right = left + $(self.columnsrow[0].cells[i]).width();
                                        if ((arealeft >= left && arealeft <= right) || (arearight >= left && arearight <= right)
                                        || (left >= arealeft && left <= arearight)) {
                                            self._applycellselection(self.getboundindex(row), self._getcolumnat(i).datafield, true, false);
                                        }
                                    }
                                }
                            }
                            y += 5;
                        }
                    }
                    if (self.autosavestate) {
                        if (self.savestate) self.savestate();
                    }
                    self._renderrows(self.virtualsizeinfo);
                }
            }
        },

        selectprevcell: function (row, datafield) {
            var columnindex = this._getcolumnindex(datafield);
            var columnscount = this.columns.records.length;
            var prevcolumn = this._getprevvisiblecolumn(columnindex);
            if (prevcolumn != null) {
                this.clearselection();
                this.selectcell(row, prevcolumn.datafield);
            }
        },

        selectnextcell: function (row, datafield) {
            var columnindex = this._getcolumnindex(datafield);
            var columnscount = this.columns.records.length;
            var nextcolumn = this._getnextvisiblecolumn(columnindex);
            if (nextcolumn != null) {
                this.clearselection();
                this.selectcell(row, nextcolumn.datafield);
            }
        },

        _getfirstvisiblecolumn: function () {
            var self = this;
            var length = this.columns.records.length;
            for (var i = 0; i < length; i++) {
                var column = this.columns.records[i];
                if (!column.hidden && column.datafield != null)
                    return column;
            }

            return null;
        },

        _getlastvisiblecolumn: function () {
            var self = this;
            var length = this.columns.records.length;
            for (var i = length - 1; i >= 0; i--) {
                var column = this.columns.records[i];
                if (!column.hidden && column.datafield != null)
                    return column;
            }

            return null;
        },

        _handlekeydown: function (event, self) {
            if (self.groupable && self.groups.length > 0) {
                return true;
            }
            if (self.disabled) {
                return false;
            }
            var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
            if (self.editcell && self.selectionmode != 'multiplecellsadvanced') {
                return true;
            }
            else if (self.editcell && self.selectionmode == 'multiplecellsadvanced') {
                if (key >= 33 && key <= 40) {
                    if (!event.altKey) {
                        if (self._cancelkeydown == undefined || self._cancelkeydown == false) {
                            if (self.editmode !== "selectedrow") {
                                self.endcelledit(self.editcell.row, self.editcell.column, false, true);
                                self._cancelkeydown = false;
                                if (self.editcell && !self.editcell.validated) {
                                    self._rendervisualrows();
                                    self.endcelledit(self.editcell.row, self.editcell.column, false, true);
                                    return false;
                                }
                            }
                            else {
                                return true;
                            }
                        }
                        else {
                            self._cancelkeydown = false;
                            return true;
                        }
                    }
                    else {
                        self._cancelkeydown = false;
                        return true;
                    }
                }
                else return true;
            }

            if (self.selectionmode == 'none')
                return true;

            if (self.showfilterrow && self.filterable) {
                if (this.filterrow) {
                    if ($(event.target).ischildof(this.filterrow))
                        return true;
                }
            }

            if (self.pageable) {
                if ($(event.target).ischildof(this.pager)) {
                    return true;
                }
            }

            if (this.showtoolbar) {
                if ($(event.target).ischildof(this.toolbar)) {
                    return true;
                }
            }
            if (this.showstatusbar) {
                if ($(event.target).ischildof(this.statusbar)) {
                    return true;
                }
            }

            var selectionchanged = false;
            if (event.altKey) {
                return true;
            }

            if (event.ctrlKey) {
                if (this.clipboard) {
                    var pressedkey = String.fromCharCode(key).toLowerCase();

                    if (pressedkey == 'c' || pressedkey == 'x') {
                        var text = this.copyselection();
                        if (window.clipboardData) {
                            window.clipboardData.setData("Text", text);
                        }
                        else {
                            var copyFrom = $('<textarea style="position: absolute; left: -1000px; top: -1000px;"/>');
                            copyFrom.val(text);
                            $('body').append(copyFrom);
                            copyFrom.select();
                            setTimeout(function () {
                                document.designMode = 'off';
                                copyFrom.select();
                                copyFrom.remove();
                            }, 100);
                        }
                    }
                    else if (pressedkey == 'v') {
                        if (window.clipboardData && this._clipboardselection && this._clipboardselection.length > 0) {
                            this.pasteselection();
                        }
                        else {
                            var pasteFrom = $('<textarea style="position: absolute; left: -1000px; top: -1000px;"/>');
                            $('body').append(pasteFrom);
                            pasteFrom.select();       
                            var that = this;
                            setTimeout(function () {
                                that._clipboardselection = new Array();
                                var value = pasteFrom.val();
                                var rows = value.split('\n');
                                for (var i = 0; i < rows.length; i++) {
                                    if (rows[i].split('\t').length > 0) {
                                        var values = rows[i].split('\t');
                                        if (values.length == 1 && i == rows.length - 1 && values[0] == "") {
                                            continue;
                                        }

                                        if (values.length > 0) {
                                            that._clipboardselection.push(values);
                                        }
                                    }
                                }
                                that.pasteselection();
                                pasteFrom.remove();
                            }, 100);
                        }
                    }
                    if (pressedkey == 'x') {
                        this.deleteselection();
                    }
                }
            }

            var hostHeight = Math.round(self._gettableheight());
            // get records per page.
            var pagesize = Math.round(hostHeight / self.rowsheight);
            var datainfo = self.getdatainformation();

            switch (self.selectionmode) {
                case 'singlecell':
                case 'multiplecells':
                case 'multiplecellsextended':
                case 'multiplecellsadvanced':
                    var selectedcell = self.getselectedcell();

                    if (selectedcell != null) {
                        var visibleindex = this.getrowvisibleindex(selectedcell.rowindex);
                        var rowindex = visibleindex;
                        var datafield = selectedcell.datafield;
                        var columnindex = self._getcolumnindex(datafield);
                        var columnscount = self.columns.records.length;
                        var selectgridcell = function (row, datafield, clearselection) {
                            var tryselect = function (row, datafield) {
                                var datarow = self.dataview.loadedrecords[row];
                                if (datarow != undefined && datafield != null) {
                                    if (clearselection || clearselection == undefined) {
                                        self.clearselection();
                                    }
                                    var visibleindex = self.getboundindex(datarow);
                                    self.selectcell(visibleindex, datafield);
                                    self._oldselectedcell = self.selectedcell;
                                    selectionchanged = true;
                                    self.ensurecellvisible(row, datafield);
                                    return true;
                                }
                                return false;
                            }

                            if (!tryselect(row, datafield)) {
                                self.ensurecellvisible(row, datafield);
                                tryselect(row, datafield);
                                if (self.virtualmode) {
                                    self.host.focus();
                                }
                            }

                            if (event.shiftKey && key != 9) {
                                if (self.selectionmode == 'multiplecellsextended' || self.selectionmode == 'multiplecellsadvanced') {
                                    if (self._lastClickedCell) {
                                        self._selectpath(row, datafield);
                                        self.selectedcell = { rowindex: row, datafield: datafield };
                                        return;
                                    }
                                }
                            }
                            else if (!event.shiftKey) {
                                self._lastClickedCell = { row: row, column: datafield };
                            }
                        }
                        var shift = event.shiftKey && self.selectionmode != 'singlecell' && self.selectionmode != 'multiplecells';
                        var home = function () {
                            selectgridcell(0, datafield, !shift);
                        }
                        var end = function () {
                            var newindex = datainfo.rowscount - 1;
                            selectgridcell(newindex, datafield, !shift);
                        }

                        var tab = key == 9 && !event.shiftKey;
                        var shifttab = key == 9 && event.shiftKey;
                        if (tab || shifttab) shift = false;
                        var ctrl = event.ctrlKey;
                        if (ctrl && key == 37) {
                            var previouscolumn = self._getfirstvisiblecolumn(columnindex);
                            if (previouscolumn != null) {
                                selectgridcell(rowindex, previouscolumn.datafield);
                            }
                        }
                        else if (ctrl && key == 39) {
                            var next = self._getlastvisiblecolumn(columnindex);
                            if (next != null) {
                                selectgridcell(rowindex, next.datafield);
                            }
                        }
                        else if (key == 39 || tab) {
                            var nextcolumn = self._getnextvisiblecolumn(columnindex);
                            if (nextcolumn != null) {
                                selectgridcell(rowindex, nextcolumn.datafield, !shift);
                            }
                            else {
                                if (!tab) {
                                    selectionchanged = true;
                                }
                            }
                        }
                        else if (key == 37 || shifttab) {
                            var previouscolumn = self._getprevvisiblecolumn(columnindex);
                            if (previouscolumn != null) {
                                selectgridcell(rowindex, previouscolumn.datafield, !shift);
                            }
                            else {
                                if (!shifttab) {
                                    selectionchanged = true;
                                }
                            }
                        }
                        else if (key == 36) {
                            home();
                        }
                        else if (key == 35) {
                            end();
                        }
                        else if (key == 33) {
                            if (rowindex - pagesize >= 0) {
                                var newindex = rowindex - pagesize;
                                selectgridcell(newindex, datafield, !shift);
                            }
                            else {
                                home();
                            }
                        }
                        else if (key == 34) {
                            if (datainfo.rowscount > rowindex + pagesize) {
                                var newindex = rowindex + pagesize;
                                selectgridcell(newindex, datafield, !shift);
                            }
                            else {
                                end();
                            }
                        }
                        else if (key == 38) {
                            if (ctrl) {
                                home();
                            }
                            else {
                                if (rowindex > 0) {
                                    selectgridcell(rowindex - 1, datafield, !shift);
                                }
                                else selectionchanged = true;
                            }
                        }
                        else if (key == 40) {
                            if (ctrl) {
                                end();
                            }
                            else {
                                if (datainfo.rowscount > rowindex + 1) {
                                    selectgridcell(rowindex + 1, datafield, !shift);
                                }
                                else selectionchanged = true;
                            }
                        }
                    }
                    break;
                case 'singlerow':
                case 'multiplerows':
                case 'multiplerowsextended':
                case 'multiplerowsadvanced':
                    var rowindex = self.getselectedrowindex();
                    if (rowindex == null || rowindex == -1)
                        return true;

                    rowindex = this.getrowvisibleindex(rowindex);
                    var selectgridrow = function (index, clearselection) {
                        var tryselect = function (index) {
                            var datarecord = self.dataview.loadedrecords[index];

                            if (datarecord != undefined) {
                                var visibleindex = self.getboundindex(datarecord);
                                var tmpindex = self.selectedrowindex;
                                if (clearselection || clearselection == undefined) {
                                    self.clearselection();
                                }
                                self.selectedrowindex = tmpindex;
                                self.selectrow(visibleindex, false);
                                var scrolled = self.ensurerowvisible(index);
                                if (!scrolled || self.autoheight || self.groupable) {
                                    self._rendervisualrows();
                                }
                                selectionchanged = true;
                                return true;
                            }

                            return false;
                        }
                        if (!tryselect(index)) {
                            self.ensurerowvisible(index);
                            tryselect(index, clearselection);
                            if (self.virtualmode) {
                                self.host.focus();
                            }
                        }
                        if (event.shiftKey && key != 9) {
                            if (self.selectionmode == 'multiplerowsextended') {
                                if (self._lastClickedCell) {
                                    self._selectrowpath(index);
                                    self.selectedrowindex = self.getrowboundindex(index);
                                    return;
                                }
                            }
                        }
                        else if (!event.shiftKey) {
                            self._lastClickedCell = { row: index };
                            self.selectedrowindex = self.getrowboundindex(index);
                        }
                    }
                    var shift = event.shiftKey && self.selectionmode != 'singlerow' && self.selectionmode != 'multiplerows';

                    var home = function () {
                        selectgridrow(0, !shift);
                    }
                    var end = function () {
                        var newindex = datainfo.rowscount - 1;
                        selectgridrow(newindex, !shift);
                    }

                    var ctrl = event.ctrlKey;
                    if (key == 36 || (ctrl && key == 38)) {
                        home();
                    }
                    else if (key == 35 || (ctrl && key == 40)) {
                        end();
                    }
                    else if (key == 33) {
                        if (rowindex - pagesize >= 0) {
                            var newindex = rowindex - pagesize;
                            selectgridrow(newindex, !shift);
                        }
                        else {
                            home();
                        }
                    }
                    else if (key == 34) {
                        if (datainfo.rowscount > rowindex + pagesize) {
                            var newindex = rowindex + pagesize;
                            selectgridrow(newindex, !shift);
                        }
                        else {
                            end();
                        }
                    }
                    else if (key == 38) {
                        if (rowindex > 0) {
                            selectgridrow(rowindex - 1, !shift);
                        }
                        else selectionchanged = true;
                    }
                    else if (key == 40) {
                        if (datainfo.rowscount > rowindex + 1) {
                            selectgridrow(rowindex + 1, !shift);
                        }
                        else selectionchanged = true;
                    }
                    break;
            }

            if (selectionchanged) {
                if (self.autosavestate) {
                    if (self.savestate) self.savestate();
                }

                //if (self.editcell != null && self.endcelledit) {
                //    self.endcelledit(self.editcell.row, self.editcell.column, true, true);
                //}
                return false;
            }
            return true;
        },

        _handlemousemove: function (event, self) {
            if (self.vScrollInstance.isScrolling())
                return;

            if (self.hScrollInstance.isScrolling())
                return;

            var columnheaderheight;
            var groupsheaderheight;
            var hostoffset;
            var x;
            var y;

            if (self.enablehover || self.selectionmode == 'multiplerows') {
                columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
                groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
                var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
                groupsheaderheight += toolbarheight;
                hostoffset = this.host.coord();
                if (this.hasTransform) {
                    hostoffset = $.jqx.utilities.getOffset(this.host);
                    var bodyOffset = this._getBodyOffset();
                    hostoffset.left -= bodyOffset.left;
                    hostoffset.top -= bodyOffset.top;
                }
                x = event.pageX - hostoffset.left;
                y = event.pageY - columnheaderheight - hostoffset.top - groupsheaderheight;
            }

            if (self.selectionmode == 'multiplerowsextended' || self.selectionmode == 'multiplecellsextended' || self.selectionmode == 'multiplecellsadvanced') {
                if (self.mousecaptured == true) {
                    return;
                }
            }

            if (self.enablehover) {
                if (self.disabled) {
                    return;
                }

                if (this.vScrollInstance.isScrolling() || this.hScrollInstance.isScrolling()) {
                    return;
                }

                var rowinfo = this._hittestrow(x, y);
                if (!rowinfo)
                    return;

                var row = rowinfo.row;
                var index = rowinfo.index;

                // if the new index is the same as the last, do nothing.
                if (this.hoveredrow != -1 && index != -1 && this.hoveredrow == index && this.selectionmode.indexOf('cell') == -1 && this.selectionmode != 'checkbox') {
                    return;
                }

                this._clearhoverstyle();

                if (index == -1 || row == undefined)
                    return;

                var tablerow = this.hittestinfo[index].visualrow;
                if (tablerow == null)
                    return;

                if (this.hittestinfo[index].details) {
                    return;
                }

                if (event.clientX > $(tablerow).width() + $(tablerow).coord().left) return;

                var startindex = 0;
                var cellslength = tablerow.cells.length;
                if (self.rowdetails && self.showrowdetailscolumn) {
                    if (!this.rtl) {
                        startindex = 1 + this.groups.length;
                    }
                    else {
                        cellslength -= 1;
                        cellslength -= this.groups.length;
                    }
                }
                else if (this.groupable) {
                    if (!this.rtl) {
                        startindex = this.groups.length;
                    }
                    else {
                        cellslength -= this.groups.length;
                    }
                }

                if (tablerow.cells.length == 0)
                    return;

                var cellclass = tablerow.cells[startindex].className;
                if (row.group || (this.selectionmode.indexOf('row') >= 0 && cellclass.indexOf('jqx-grid-cell-selected') != -1))
                    return;

                this.hoveredrow = index;

                if (this.selectionmode.indexOf('cell') != -1 || this.selectionmode == "checkbox") {
                    var cellindex = -1;
                    var hScrollInstance = this.hScrollInstance;
                    var horizontalscrollvalue = hScrollInstance.value;
                    if (this.rtl) {
                        if (this.hScrollBar.css('visibility') != 'hidden') {
                            horizontalscrollvalue = hScrollInstance.max - hScrollInstance.value;
                        }
                    }
   
                    for (var i = startindex; i < cellslength; i++) {
                        var left = parseInt($(this.columnsrow[0].cells[i]).css('left')) - horizontalscrollvalue;
                        var right = left + $(this.columnsrow[0].cells[i]).width();
                        if (right >= x && x >= left) {
                            cellindex = i;
                            break;
                        }
                    }

                    if (cellindex != -1) {
                        var tablecell = tablerow.cells[cellindex];
                        if (tablecell.className.indexOf('jqx-grid-cell-selected') == -1) {
                     //       if (tablecell.className.indexOf('jqx-grid-group') == -1) {
                            if (this.editcell) {
                                var column = this._getcolumnat(cellindex);
                                if (column) {
                                    if (this.editcell.row == index && this.editcell.column == column.datafield) {
                                        return;
                                    }
                                }
                            }
                                $(tablecell).addClass(this.toTP('jqx-grid-cell-hover'));
                                $(tablecell).addClass(this.toTP('jqx-fill-state-hover'));
                                if (this.cellhover) {
                                    this.cellhover(tablecell, event.pageX, event.pageY);
                                }
                     //       }
                        }
                    }
                    return;
                }

                for (var i = startindex; i < cellslength; i++) {
                    var tablecell = tablerow.cells[i];
               //     if (tablecell.className.indexOf('jqx-grid-group') == -1) {
                        $(tablecell).addClass(this.toTP('jqx-grid-cell-hover'));
                        $(tablecell).addClass(this.toTP('jqx-fill-state-hover'));
                        if (this.cellhover) {
                            this.cellhover(tablecell, event.pageX, event.pageY);
                        }
                    //     }
                }
            }
            else return true;
        }
    });
})(jQuery);



/*
 * file from "src\jqxgrid.columnsresize.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {

    $.extend($.jqx._jqxGrid.prototype, {
        autoresizecolumns: function (resizetype, additionalwidth) {
            if (resizetype != 'cells' && resizetype != 'all' && resizetype != 'column') resizetype = 'all';
            var me = this.that;
            var rows = this.getrows();
            if (this.pageable) {
                rows = this.dataview.rows;
                if (this.groupable) {
                    rows = this.dataview.records;
                }
            }
            if (additionalwidth == undefined) additionalwidth = 0;
            else additionalwidth = parseInt(additionalwidth);

            var length = rows.length;
            if (length == undefined && rows != undefined) {
                var rowsArr = new Array();
                $.each(rows, function (index) {
                    rowsArr.push(this);
                });
                rows = rowsArr;
                length = rows.length;
            }

            var span = $("<span></span>");
            span.addClass(this.toThemeProperty('jqx-widget'));
            span.addClass(this.toThemeProperty('jqx-grid-cell'));
            $(document.body).append(span);
            var textlength = [];
            var maxLength = [];
            var maxText = [];
            var maxUppers = [];
            var hostwidth = me.host.width();
            if (me.vScrollBar[0].style.visibility != 'hidden') {
                hostwidth -= this.scrollbarsize + 5;
            }
            if (hostwidth < 0) hostwidth = 0;

            for (var i = 0; i < length; i++) {
                var row = rows[i];

                for (var j = 0; j < this.columns.records.length; j++) {
                    var column = this.columns.records[j];
                    if (column.hidden) continue;

                    if (maxLength[column.displayfield] == undefined) {
                        maxLength[column.displayfield] = 0;
                    }

                    if (maxText[column.displayfield] == undefined) {
                        maxText[column.displayfield] = "";
                    }

                    var text = row[column.displayfield];
                    if (column.cellsformat != '') {
                        if ($.jqx.dataFormat) {
                            if ($.jqx.dataFormat.isDate(text)) {
                                text = $.jqx.dataFormat.formatdate(text, column.cellsformat, this.gridlocalization);
                            }
                            else if ($.jqx.dataFormat.isNumber(text)) {
                                text = $.jqx.dataFormat.formatnumber(text, column.cellsformat, this.gridlocalization);
                            }
                        }
                    }
                    else if (column.cellsrenderer) {
                        var defaultcellsrenderer = me._defaultcellsrenderer(text, column);

                        var result = column.cellsrenderer(i, column.datafield, text, defaultcellsrenderer, column.getcolumnproperties(), row);
                        if (result != undefined) {
                            text = $(result).text();
                        }
                    }

                    if (resizetype == undefined || resizetype == 'cells' || resizetype == 'all') {
                        if (text != null) {
                            var textlength = text.toString().length;
                            var str = text.toString();
                            var charslength = str.replace(/[^A-Z]/g, "").length;
                        
                            if (textlength > maxLength[column.displayfield]) {
                                maxLength[column.displayfield] = textlength;
                                maxText[column.displayfield] = text;
                                maxUppers[column.displayfield] = charslength;
                            }

                            if (textlength > 0 && textlength >= charslength) {
                                var k1 = charslength * 20 + (textlength - charslength) * 15
                                var k2 = maxUppers[column.displayfield] * 20 + (maxLength[column.displayfield] - maxUppers[column.displayfield]) * 15;
                                if (k1 > k2 && k1 > 0 && k2 > 0) {
                                    maxLength[column.displayfield] = textlength;
                                    maxText[column.displayfield] = text;
                                    maxUppers[column.displayfield] = charslength;
                                }
                            }
                        }
                    }

                    if (resizetype == 'column' || resizetype == 'all') {
                        if (column.text.toString().length > maxLength[column.displayfield]) {
                            maxText[column.displayfield] = column.text;
                            maxLength[column.displayfield] = column.text.length;
                            var str = column.text.toString();
                            var charslength = str.replace(/[^A-Z]/g, "").length;
                            maxUppers[column.displayfield] = charslength;
                        }
                        var text = column.text;
                        var textlength = text.toString().length;
                        var str = text.toString();
                        var charslength = str.replace(/[^A-Z]/g, "").length;

                        if (textlength > 0 && textlength >= charslength) {
                            var k1 = charslength * 20 + (textlength - charslength) * 15
                            var k2 = maxUppers[column.displayfield] * 20 + (maxLength[column.displayfield] - maxUppers[column.displayfield]) * 15;
                            if (k1 > k2 && k1 > 0 && k2 > 0) {
                                maxLength[column.displayfield] = textlength;
                                maxText[column.displayfield] = text;
                                maxUppers[column.displayfield] = charslength;
                            }
                        }
                    }
                }
            }
            if (!this.columns.records) {
                return;
            }

            for (var j = 0; j < this.columns.records.length; j++) {
                var column = this.columns.records[j];
                if (maxText[column.displayfield] == undefined) {
                    maxText[column.displayfield] = column.text;
                }

                span[0].innerHTML = maxText[column.displayfield].toString();
                var maxWidth = span.outerWidth() + 10;
                if (span.children().length > 0) {
                    maxWidth = span.children().outerWidth() + 10;
                }
                if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                    maxWidth += 10;
                }
                if (this.filterable && this.showfilterrow) {
                    maxWidth += 5;
                }
                maxWidth += additionalwidth;

                if (maxWidth > column.maxwidth) maxWidth = column.maxwidth;

                if (column._width != undefined) column.__width = column._width;
                column._width = null;
                if (column.maxwidth == 'auto' || maxWidth <= column.maxwidth) {
                    var oldwidth = column.width;
                    if (maxWidth < column.minwidth) {
                        maxWidth = column.minwidth;
                    }

                    column.width = maxWidth;
                    if (column._percentagewidth != undefined) {
                        column._percentagewidth = null;
                    }
                    this._raiseEvent(14, { columntext: column.text, column: column.getcolumnproperties(), datafield: column.datafield, displayfield: column.displayfield, oldwidth: oldwidth, newwidth: maxWidth });
                }
            }

            span.remove();
            this._updatecolumnwidths();
            this._updatecellwidths();
            this._renderrows(this.virtualsizeinfo);
            for (var j = 0; j < this.columns.records.length; j++) {
                var column = this.columns.records[j];
                if (column.__width != undefined) {
                    column._width = column.__width;
                }
            }
        },

        autoresizecolumn: function (datafield, resizetype, additionalwidth) {
            if (resizetype != 'cells' && resizetype != 'all' && resizetype != 'column') resizetype = 'all';
            if (datafield == undefined) {
                return false;
            }

            var rows = this.getrows();
            if (this.pageable) {
                rows = this.dataview.rows;
                if (this.groupable) {
                    rows = this.dataview.records;
                }
            }

            var column = this.getcolumn(datafield);
            if (column == undefined) {
                return false;
            }

            if (additionalwidth == undefined) additionalwidth = 0;
            else additionalwidth = parseInt(additionalwidth);

            var length = rows.length;
            var span = $("<span></span>");
            span.addClass(this.toThemeProperty('jqx-widget'));
            span.addClass(this.toThemeProperty('jqx-grid-cell'));
            $(document.body).append(span);
            var maxLength = 0;
            var maxText = "";
            var maxUppers = 0;

            var me = this.that;
            var hostwidth = me.host.width();
            if (me.vScrollBar[0].style.visibility != 'hidden') {
                hostwidth -= this.scrollbarsize + 5;
            }
            if (hostwidth < 0) hostwidth = 0;

            if (resizetype == undefined || resizetype == 'cells' || resizetype == 'all') {
                for (var i = 0; i < length; i++) {
                    var text = rows[i][column.displayfield];
                    if (column.cellsformat != '') {
                        if ($.jqx.dataFormat) {
                            if ($.jqx.dataFormat.isDate(text)) {
                                text = $.jqx.dataFormat.formatdate(text, column.cellsformat, this.gridlocalization);
                            }
                            else if ($.jqx.dataFormat.isNumber(text)) {
                                text = $.jqx.dataFormat.formatnumber(text, column.cellsformat, this.gridlocalization);
                            }
                        }
                    } else if (column.cellsrenderer) {
                        var result = column.cellsrenderer(i, column, text);
                        if (result != undefined) {
                            text = $(result).text();
                        }
                    }

                    if (text != null) {
                        var textlength = text.toString().length;
                        var str = text.toString();
                        var charslength = str.replace(/[^A-Z]/g, "").length;
                        if (textlength > maxLength) {
                            maxLength = textlength;
                            maxText = text;
                            maxUppers = charslength;
                        }
                        if (textlength > 0 && textlength >= charslength) {
                            var k1 = charslength * 20 + (textlength - charslength) * 15
                            var k2 = maxUppers * 20 + (maxLength - maxUppers) * 15;
                            if (k1 > k2 && k1 > 0 && k2 > 0) {
                                maxLength= textlength;
                                maxText = text;
                                maxUppers = charslength;
                            }
                        }
                    }
                }
            }

            if (resizetype == 'column' || resizetype == 'all') {
                if (column.text.toString().length > maxLength) {
                    maxText = column.text;
                }

                var text = column.text.toString();
                var textlength = text.toString().length;
                var str = text.toString();
                var charslength = str.replace(/[^A-Z]/g, "").length;

                if (textlength > 0 && textlength >= charslength) {
                    var k1 = charslength * 20 + (textlength - charslength) * 15
                    var k2 = maxUppers * 20 + (maxLength - maxUppers) * 15;
                    if (k1 > k2 && k1 > 0 && k2 > 0) {
                        maxLength = textlength;
                        maxText = text;
                        maxUppers = charslength;
                    }
                }
            }
            if (maxText == undefined) {
                maxText = column.text;
            }

            span[0].innerHTML = maxText;
            var maxWidth = span.outerWidth() + 10;
            if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                maxWidth += 5;
            }
            if (this.filterable && this.showfilterrow) {
                maxWidth += 5;
            }
            maxWidth += additionalwidth;

            span.remove();
            if (maxWidth > column.maxwidth) maxWidth = column.maxwidth;

            if (column.maxwidth == 'auto' || maxWidth <= column.maxwidth) {
                var oldwidth = column.width;
                if (maxWidth < column.minwidth) maxWidth = column.minwidth;
                column.width = maxWidth;
                if (column._width != undefined) column.__width = column._width;
                column._width = null;
                if (column._percentagewidth != undefined) {
                    column._percentagewidth = null;
                }
                this._updatecolumnwidths();
                this._updatecellwidths();
                this._raiseEvent(14, { columntext: column.text, column: column.getcolumnproperties(), datafield: datafield, displayfield: column.displayfield, oldwidth: oldwidth, newwidth: maxWidth });
                this._renderrows(this.virtualsizeinfo);
                if (column._width != undefined)
                    column._width = column.__width;
            }
        },

        _handlecolumnsresize: function () {
            var self = this.that;
            if (this.columnsresize) {
                var touchdevice = false;
                if (self.isTouchDevice() && self.touchmode !== true) {
                    touchdevice = true;
                }
                var mousemove = 'mousemove.resize' + this.element.id;
                var mousedown = 'mousedown.resize' + this.element.id;
                var mouseup = 'mouseup.resize' + this.element.id;
                if (touchdevice) {
                    var mousemove = $.jqx.mobile.getTouchEventName('touchmove') + '.resize' + this.element.id;
                    var mousedown = $.jqx.mobile.getTouchEventName('touchstart') + '.resize' + this.element.id;
                    var mouseup = $.jqx.mobile.getTouchEventName('touchend') + '.resize' + this.element.id;
                }

                this.removeHandler($(document), mousemove);
                this.addHandler($(document), mousemove, function (event) {
                    var openedmenu = $.data(document.body, "contextmenu" + self.element.id);
                    if (openedmenu != null && self.autoshowcolumnsmenubutton)
                        return true;

                    if (self.resizablecolumn != null && !self.disabled && self.resizing) {
                        if (self.resizeline != null) {
                            var resizeElement = self.resizablecolumn.columnelement;

                            var hostoffset = self.host.coord();
                            var startleft = parseInt(self.resizestartline.coord().left);

                            var minleft = startleft - self._startcolumnwidth
                            var mincolumnwidth = self.resizablecolumn.column.minwidth;
                            if (mincolumnwidth == 'auto') mincolumnwidth = 0;
                            else mincolumnwidth = parseInt(mincolumnwidth);
                            var maxcolumnwidth = self.resizablecolumn.column.maxwidth;
                            if (maxcolumnwidth == 'auto') maxcolumnwidth = 0;
                            else maxcolumnwidth = parseInt(maxcolumnwidth);
                            var pageX = event.pageX;
                            if (touchdevice) {
                                var touches = self.getTouches(event);
                                var touch = touches[0];
                                pageX = touch.pageX;
                            }

                            minleft += mincolumnwidth;

                            var maxleft = maxcolumnwidth > 0 ? startleft + maxcolumnwidth : 0;
                            var canresize = maxcolumnwidth == 0 ? true : self._startcolumnwidth + pageX - startleft < maxcolumnwidth ? true : false;
                            if (self.rtl) {
                                var canresize = true;
                            }

                            if (canresize) {
                                if (!self.rtl) {
                                    if (pageX >= hostoffset.left && pageX >= minleft) {
                                        if (maxleft != 0 && event.pageX < maxleft) {
                                            self.resizeline.css('left', pageX);
                                        }
                                        else if (maxleft == 0) {
                                            self.resizeline.css('left', pageX);
                                        }

                                        if (touchdevice)
                                            return false;
                                    }
                                }
                                else {
                                    if (pageX >= hostoffset.left && pageX <= hostoffset.left + self.host.width()) {
                                        self.resizeline.css('left', pageX);

                                        if (touchdevice)
                                            return false;
                                    }
                                }
                            }
                        }
                    }

                    if (!touchdevice && self.resizablecolumn != null)
                        return false;
                });

                this.removeHandler($(document), mousedown);
                this.addHandler($(document), mousedown, function (event) {
                    var openedmenu = $.data(document.body, "contextmenu" + self.element.id);
                    if (openedmenu != null && self.autoshowcolumnsmenubutton)
                        return true;

                    if (self.resizablecolumn != null && !self.disabled) {
                        var resizeElement = self.resizablecolumn.columnelement;
                        if (resizeElement.coord().top + resizeElement.height() + 5 < event.pageY) {
                            self.resizablecolumn = null;
                            return;
                        }

                        if (resizeElement.coord().top - 5 > event.pageY) {
                            self.resizablecolumn = null;
                            return;
                        }

                        self._startcolumnwidth = self.resizablecolumn.column.width;
                        self.resizablecolumn.column._width = null;
                        $(document.body).addClass('jqx-disableselect');
                        $(document.body).addClass('jqx-position-reset');
                        self.host.addClass('jqx-disableselect');
                        self.content.addClass('jqx-disableselect');

                        self._mouseDownResize = new Date();
                        self.resizing = true;

                        self._resizecolumn = self.resizablecolumn.column;
                        self.resizeline = self.resizeline || $('<div style="position: absolute;"></div>');
                        self.resizestartline = self.resizestartline || $('<div style="position: absolute;"></div>');

                        self.resizebackground = self.resizebackground || $('<div style="position: absolute; left: 0; top: 0; background: #000;"></div>');
                        self.resizebackground.css('opacity', 0.01);
                        self.resizebackground.css('cursor', "col-resize");
                        self.resizeline.css('cursor', 'col-resize');
                        self.resizestartline.css('cursor', 'col-resize');

                        self.resizeline.addClass(self.toThemeProperty('jqx-grid-column-resizeline'));
                        self.resizestartline.addClass(self.toThemeProperty('jqx-grid-column-resizestartline'));

                        $(document.body).append(self.resizeline);
                        $(document.body).append(self.resizestartline);
                        $(document.body).append(self.resizebackground);
                        var resizelineoffset = self.resizablecolumn.columnelement.coord();
                        self.resizebackground.css('left', self.host.coord().left);
                        self.resizebackground.css('top', self.host.coord().top);
                        self.resizebackground.width(self.host.width());
                        self.resizebackground.height(self.host.height());
                        self.resizebackground.css('z-index', 9999);

                        var positionline = function (resizeline) {
                            if (!self.rtl) {
                                resizeline.css('left', parseInt(resizelineoffset.left) + self._startcolumnwidth);
                            }
                            else {
                                resizeline.css('left', parseInt(resizelineoffset.left));
                            }

                            var hasgroups = self._groupsheader();
                            var groupsheaderheight = hasgroups ? self.groupsheader.height() : 0;
                            var toolbarheight = self.showtoolbar ? self.toolbarheight : 0;
                            groupsheaderheight += toolbarheight;
                            var statusbarheight = self.showstatusbar ? self.statusbarheight : 0;
                            groupsheaderheight += statusbarheight;

                            var pagerheight = 0;
                            if (self.pageable) {
                                pagerheight = self.pagerheight;
                            }
                            var scrollbaroffset = self.hScrollBar.css('visibility') == 'visible' ? 17 : 0;

                            resizeline.css('top', parseInt(resizelineoffset.top));
                            resizeline.css('z-index', 99999);
                            if (self.columngroups) {
                                resizeline.height(self.host.height() +self.resizablecolumn.columnelement.height()  - pagerheight - groupsheaderheight - scrollbaroffset - self.columngroupslevel * self.columnsheight);
                            }
                            else {
                                resizeline.height(self.host.height() - pagerheight - groupsheaderheight - scrollbaroffset);
                            }
                            if (self.enableanimations) {
                                resizeline.show('fast');
                            }
                            else {
                                resizeline.show();
                            }
                        }
                        positionline(self.resizeline);
                        positionline(self.resizestartline);
                        self.dragmousedown = null;
                    }
                });

                var doresize = function () {
                    $(document.body).removeClass('jqx-disableselect');
                    $(document.body).removeClass('jqx-position-reset');

                    if (self.showfilterrow || self.showstatusbar || self.showtoolbar || self.enablebrowserselection) {
                        self.host.removeClass('jqx-disableselect');
                        self.content.removeClass('jqx-disableselect');
                    }

                    if (!self.resizing)
                        return;

                    self._mouseUpResize = new Date();
                    var timeout = self._mouseUpResize - self._mouseDownResize;
                    if (timeout < 200) {
                        self.resizing = false;
                        if (self._resizecolumn != null && self.resizeline != null && self.resizeline.css('display') == 'block') {
                            self._resizecolumn = null;
                            self.resizeline.hide();
                            self.resizestartline.hide();
                            self.resizebackground.remove();
                        }
                        return;
                    }

                    self.resizing = false;

                    if (self.disabled)
                        return;

                    var hostwidth = self.host.width();
                    if (self.vScrollBar[0].style.visibility != 'hidden') hostwidth -= 20;
                    if (hostwidth < 0) hostwidth = 0;

                    if (self._resizecolumn != null && self.resizeline != null && self.resizeline.css('display') == 'block') {
                        var resizelineleft = parseInt(self.resizeline.css('left'));
                        var resizestartlineleft = parseInt(self.resizestartline.css('left'));

                        var newwidth = self._startcolumnwidth + resizelineleft - resizestartlineleft;
                        if (self.rtl) {
                            var newwidth = self._startcolumnwidth - resizelineleft + resizestartlineleft;
                        }

                        var oldwidth = self._resizecolumn.width;
                        self._closemenu();
                        self._resizecolumn.width = newwidth;
                        if (self._resizecolumn._percentagewidth != undefined) {
                            self._resizecolumn._percentagewidth = (newwidth / hostwidth) * 100;
                        }
                        for (var m = 0; m < self._columns.length; m++) {
                            if (self._columns[m].datafield === self._resizecolumn.datafield) {
                                self._columns[m].width = self._resizecolumn.width;
                                break;
                            }
                        }

                        var scrollVisibility = self.hScrollBar[0].style.visibility;

                        self._updatecolumnwidths();
                        self._updatecellwidths();
                        self._raiseEvent(14, { columntext: self._resizecolumn.text, column: self._resizecolumn.getcolumnproperties(), datafield: self._resizecolumn.datafield, oldwidth: oldwidth, newwidth: newwidth });
                        self._renderrows(self.virtualsizeinfo);
                        if (self.autosavestate) {
                            if (self.savestate) self.savestate();
                        }
                        if (scrollVisibility != self.hScrollBar[0].style.visibility) {
                            self.hScrollInstance.setPosition(0);
                        }
                        if (self.rtl) {
                            self._arrange();
                        }

                        self._resizecolumn = null;

                        self.resizeline.hide();
                        self.resizestartline.hide();
                        self.resizebackground.remove();
                        self.resizablecolumn = null;
                    }
                    else {
                        self.resizablecolumn = null;
                    }
                }

                try {
                    if (document.referrer != "" || window.frameElement) {
                        var parentLocation = null;
                        if (window.top != null && window.top != window.self) {
                            if (window.parent && document.referrer) {
                                parentLocation = document.referrer;
                            }
                        }

                        if (parentLocation && parentLocation.indexOf(document.location.host) != -1) {
                            var eventHandle = function (event) {
                                doresize();
                            };

                            if (window.top.document.addEventListener) {
                                window.top.document.addEventListener('mouseup', eventHandle, false);

                            } else if (window.top.document.attachEvent) {
                                window.top.document.attachEvent("on" + 'mouseup', eventHandle);
                            }
                        }
                    }
                }
                catch (error) {
                }

                this.removeHandler($(document), mouseup);
                this.addHandler($(document), mouseup, function (event) {
                    var openedmenu = $.data(document.body, "contextmenu" + self.element.id);
                    if (openedmenu != null && self.autoshowcolumnsmenubutton)
                        return true;

                    doresize();
                });
            }
        }
    });
})(jQuery);



/*
 * file from "src\jqxgrid.filter.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {

    $.extend($.jqx._jqxGrid.prototype, {
        _updatefilterrowui: function (forceupdateui) {
            var columnslength = this.columns.records.length;
            var left = 0;
            var me = this;
            for (var j = 0; j < columnslength; j++) {
                var columnrecord = this.columns.records[j];
                var width = columnrecord.width;
                if (width < columnrecord.minwidth) width = columnrecord.minwidth;
                if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;
                var tablecolumn = $(this.filterrow[0].cells[j]);
                tablecolumn.css('left', left);
                var updateui = true;
                if (tablecolumn.width() == width) {
                    updateui = false;
                }
                if (forceupdateui) {
                    updateui = true;
                }
                tablecolumn.width(width);
                tablecolumn[0].left = left;
                if (!(columnrecord.hidden && columnrecord.hideable)) {
                    left += width;
                }
                else {
                    tablecolumn.css('display', 'none');
                }
                if (!updateui)
                    continue;

                if (columnrecord.createfilterwidget && columnrecord.filtertype == 'custom') {
                    columnrecord.createfilterwidget(columnrecord, tablecolumn);
                }
                else {
                    if (columnrecord.filterable) {
                        var addtextfilter = function (me, tablecolumn) {
                            var textbox = $(tablecolumn.children()[0]);
                            textbox.width(width - 10);
                            textbox.attr('disabled', me.disabled);
                        }

                        switch (columnrecord.filtertype) {
                            case 'number':
                                $(tablecolumn.children()[0]).width(width);
                                tablecolumn.find('input').width(width - 30);
                                tablecolumn.find('input').attr('disabled', me.disabled);
                                $(tablecolumn.find('.jqx-dropdownlist-state-normal')).jqxDropDownList({ disabled: me.disabled });
                                break;
                            case 'date':
                                if (this.host.jqxDateTimeInput) {
                                    $(tablecolumn.children()[0]).jqxDateTimeInput({ disabled: me.disabled, width: width - 10 });
                                }
                                else addtextfilter(this, tablecolumn);
                                break;
                            case 'textbox':
                            case 'default':
                                addtextfilter(this, tablecolumn);
                                break;
                            case 'list':
                            case 'checkedlist':
                                if (this.host.jqxDropDownList) {
                                    $(tablecolumn.children()[0]).jqxDropDownList({ disabled: me.disabled, width: width - 10 });
                                }
                                else addtextfilter(this, tablecolumn);
                                break;
                            case 'bool':
                            case 'boolean':
                                if (!this.host.jqxCheckBox) {
                                    addtextfilter(this, tablecolumn);
                                }
                                else {
                                    $(tablecolumn.children()[0]).jqxCheckBox({ disabled: me.disabled });
                                }
                                break;
                        }
                    }
                }
            }
            var tablerow = $(this.filterrow.children()[0]);
            tablerow.width(parseInt(left) + 2);
            tablerow.height(this.filterrowheight);
        },

        clearfilterrow: function () {
            this._disablefilterrow = true;
            if (!this.columns.records)
                return;

            var columnslength = this.columns.records.length;
            var left = 0;
            for (var j = 0; j < columnslength; j++) {
                var columnrecord = this.columns.records[j];
                var tablecolumn = $(this.filterrow[0].cells[j]);

                if (columnrecord.filterable) {
                    var addtextfilter = function (me, tablecolumn) {
                        var textbox = $(tablecolumn.children()[0]);
                        textbox.val("");
                        if (textbox[0]) {
                            me["_oldWriteText" + textbox[0].id] = "";
                        }
                    }

                    switch (columnrecord.filtertype) {
                        case 'number':
                            tablecolumn.find('input').val("");
                            break;
                        case 'date':
                            if (this.host.jqxDateTimeInput) {
                                $(tablecolumn.children()[0]).jqxDateTimeInput('setDate', null);
                            }
                            else addtextfilter(this, tablecolumn);
                            break;
                        case 'textbox':
                        case 'default':
                            addtextfilter(this, tablecolumn);
                            break;
                        case 'list':
                            if (this.host.jqxDropDownList) {
                                $(tablecolumn.children()[0]).jqxDropDownList('clearSelection');
                            }
                            else addtextfilter(this, tablecolumn);
                            break;
                        case 'checkedlist':
                            if (this.host.jqxDropDownList) {
                                $(tablecolumn.children()[0]).jqxDropDownList('checkAll', false);
                            }
                            else addtextfilter(this, tablecolumn);
                            break;
                        case 'bool':
                        case 'boolean':
                            if (!this.host.jqxCheckBox) {
                                addtextfilter(this, tablecolumn);
                            }
                            else $(tablecolumn.children()[0]).jqxCheckBox({ checked: null });
                            break;
                    }

                }
            }
            this._disablefilterrow = false;
        },

        _applyfilterfromfilterrow: function () {
            if (this._disablefilterrow == true)
                return;
            if (this.disabled) {
                return;
            }

            var columnslength = this.columns.records.length;
            var me = this.that;

            for (var j = 0; j < columnslength; j++) {
                var filtergroup = new $.jqx.filter();
                var columnrecord = this.columns.records[j];
                if (!columnrecord.filterable) continue;
                if (columnrecord.datafield === null) continue;

                var type = me._getcolumntypebydatafield(columnrecord);
                var filtertype = me._getfiltertype(type);
                var filter_or_operator = 1;
                var hasFilter = true;
                var columnrecordfiltertype = columnrecord.filtertype;
                var addstringfilter = function (columnrecord, filtertype, filtergroup) {
                    var result = true;
                    if (columnrecord._filterwidget) {
                        var filtervalue = columnrecord._filterwidget.val();
                        if (filtervalue != "") {
                            var filtercondition = 'equal';
                            if (filtertype == 'stringfilter') {
                                var filtercondition = 'contains';
                            }
                            if (filtertype == "numericfilter") {
                                if (me.gridlocalization.decimalseparator == ',') {
                                    if (filtervalue.indexOf(me.gridlocalization.decimalseparator) >= 0) {
                                        filtervalue = filtervalue.replace(me.gridlocalization.decimalseparator, '.');
                                    }
                                }
                            }

                            if (filtertype != 'stringfilter') {
                                var hasoperator = 0;
                                if (filtervalue.indexOf('>') != -1) {
                                    filtercondition = "greater_than";
                                    hasoperator = 1;
                                }
                                if (filtervalue.indexOf('<') != -1) {
                                    filtercondition = "less_than";
                                    hasoperator = 1;
                                }
                                if (filtervalue.indexOf('=') != -1) {
                                    if (filtercondition == "greater_than") {
                                        filtercondition = "greater_than_or_equal";
                                        hasoperator = 2;
                                    }
                                    else if (filtercondition == "less_than") {
                                        filtercondition = "less_than_or_equal";
                                        hasoperator = 2;
                                    }
                                    else {
                                        filtercondition = "equal";
                                        hasoperator = 1;
                                    }
                                }
                                if (hasoperator != 0) {
                                    filtervalue = filtervalue.substring(hasoperator);
                                    if (filtervalue.length < 1) return false;
                                }
                            }

                            if (columnrecord.filtercondition != undefined) filtercondition = columnrecord.filtercondition;

                            if (filtertype == "datefilter") {
                                var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition, null, columnrecord.cellsformat, me.gridlocalization);
                            }
                            else {
                                var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition);
                            }

                            filtergroup.addfilter(filter_or_operator, filter);
                        }
                        else result = false;
                    }
                    return result;
                }

                switch (columnrecord.filtertype) {
                    case 'date':
                        if (columnrecord._filterwidget.jqxDateTimeInput) {
                            var filtervalue = columnrecord._filterwidget.jqxDateTimeInput('getRange');
                            if (filtervalue != null && filtervalue.from != null && filtervalue.to != null) {
                                var filtercondition = 'GREATER_THAN_OR_EQUAL';
                                var date1 = new Date(0);
                                date1.setHours(0);
                                date1.setFullYear(filtervalue.from.getFullYear(), filtervalue.from.getMonth(), filtervalue.from.getDate());
                                var date2 = new Date(0);
                                date2.setHours(0);
                                date2.setFullYear(filtervalue.to.getFullYear(), filtervalue.to.getMonth(), filtervalue.to.getDate());
                                date2.setHours(filtervalue.to.getHours());
                                date2.setMinutes(filtervalue.to.getMinutes());
                                date2.setSeconds(filtervalue.to.getSeconds());

                                var filter1 = filtergroup.createfilter(filtertype, date1, filtercondition);
                                filtergroup.addfilter(0, filter1);

                                var filtercondition2 = 'LESS_THAN_OR_EQUAL';
                                var filter2 = filtergroup.createfilter(filtertype, date2, filtercondition2);
                                filtergroup.addfilter(0, filter2);
                            }
                            else hasFilter = false;
                        }
                        else {
                            hasFilter = addstringfilter(columnrecord, filtertype, filtergroup);
                        }
                        break;
                    case 'number':
                        if (columnrecord._filterwidget) {
                            var filtervalue = columnrecord._filterwidget.find('input').val();
                            if (me.gridlocalization.decimalseparator == ',') {
                                if (filtervalue.indexOf(me.gridlocalization.decimalseparator) >= 0) {
                                    filtervalue = filtervalue.replace(me.gridlocalization.decimalseparator, '.');
                                }
                            }
                            var index = columnrecord._filterwidget.find('.filter').jqxDropDownList('selectedIndex');
                            var condition = filtergroup.getoperatorsbyfiltertype(filtertype)[index];
                            if (me.updatefilterconditions) {
                                var newfilterconditions = me.updatefilterconditions(filtertype, filtergroup.getoperatorsbyfiltertype(filtertype));
                                if (newfilterconditions != undefined) {
                                    filtergroup.setoperatorsbyfiltertype(filtertype, newfilterconditions);
                                }
                                var condition = filtergroup.getoperatorsbyfiltertype(filtertype)[index];
                            }
                            var nullcondition1 = condition == "NULL" || condition == "NOT_NULL";
                            var emptycondition1 = condition == "EMPTY" || condition == "NOT_EMPTY";
                            if (filtervalue != undefined && filtervalue.length > 0 || nullcondition1 || emptycondition1) {
                                filter1 = filtergroup.createfilter(filtertype, new Number(filtervalue), condition, null, columnrecord.cellsformat, me.gridlocalization);
                                filtergroup.addfilter(0, filter1);
                            }
                            else hasFilter = false;
                        }
                        else {
                            hasFilter = false;
                        }
                        break;
                    case 'textbox':
                    case 'default':
                        hasFilter = addstringfilter(columnrecord, filtertype, filtergroup);
                        break;
                    case 'bool':
                    case 'boolean':
                        if (columnrecord._filterwidget.jqxCheckBox) {
                            var filtervalue = columnrecord._filterwidget.jqxCheckBox('checked');
                            if (filtervalue != null) {
                                var filtercondition = 'equal';
                                var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition);
                                filtergroup.addfilter(filter_or_operator, filter);
                            }
                            else hasFilter = false;
                        } else hasFilter = addstringfilter(columnrecord, filtertype, filtergroup);
                        break;
                    case 'list':
                        var widget = columnrecord._filterwidget.jqxDropDownList('listBox');
                        if (widget.selectedIndex > 0) {
                            var selectedItem = widget.getItem(widget.selectedIndex);
                            var filtervalue = selectedItem.label;
                            var filtercondition = 'equal';
                            if (filtervalue === "") {
                                filtercondition = 'NULL';
                            }
                            var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition);
                            filtergroup.addfilter(filter_or_operator, filter);
                        } else {
                            hasFilter = false;
                        }
                        break;
                    case 'checkedlist':
                        if (columnrecord._filterwidget.jqxDropDownList) {
                            var widget = columnrecord._filterwidget.jqxDropDownList('listBox');
                            var checkedItems = widget.getCheckedItems();
                            if (checkedItems.length == 0) {
                                for (var i = 1; i < widget.items.length; i++) {
                                    var filtervalue = widget.items[i].label;
                                    var filtercondition = 'not_equal';
                                    if (filtervalue === "") {
                                        filtercondition = 'NULL';
                                    }
                                    var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition);
                                    filtergroup.addfilter(0, filter);
                                }

                                hasFilter = true;
                            }
                            else {
                                if (checkedItems.length != widget.items.length) {
                                    for (var i = 0; i < checkedItems.length; i++) {
                                        var filtervalue = checkedItems[i].label;
                                        var filtercondition = 'equal';
                                        if (filtervalue === "") {
                                            filtercondition = 'NULL';
                                        }
                                        var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition);
                                        filtergroup.addfilter(filter_or_operator, filter);
                                    }
                                }
                                else hasFilter = false;
                            }
                        }
                        else hasFilter = addstringfilter(columnrecord, filtertype, filtergroup);
                        break;
                }

                if (!this._loading) {
                    if (hasFilter) {
                        this.addfilter(columnrecord.displayfield, filtergroup, false);
                    }
                    else {
                        this.removefilter(columnrecord.displayfield, false);
                    }
                }
            }
            if (!this._loading) {
                this.applyfilters('filterrow');
            }
        },

        _updatefilterrow: function () {
            var tablerow = $('<div style="position: relative;" id="row00' + this.element.id + '"></div>');
            var left = 0;
            var columnslength = this.columns.records.length;
            var cellclass = this.toThemeProperty('jqx-grid-cell');
            cellclass += ' ' + this.toThemeProperty('jqx-grid-cell-pinned');
            cellclass += ' ' + this.toThemeProperty('jqx-grid-cell-filter-row');
            var zindex = columnslength + 10;
            var cells = new Array();
            var me = this.that;
            this.filterrow[0].cells = cells;
            tablerow.height(this.filterrowheight);
            this.filterrow.children().detach();
            this.filterrow.append(tablerow);
            if (!this._filterrowcache)
                this._filterrowcache = new Array();

            this._initcolumntypes();

            var usefromcache = false;
            var _newfilterrowcache = new Array();
            for (var j = 0; j < columnslength; j++) {
                var columnrecord = this.columns.records[j];
                var width = columnrecord.width;
                if (width < columnrecord.minwidth) width = columnrecord.minwidth;
                if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;

                var tablecolumn = $('<div style="overflow: hidden; position: absolute; height: 100%;" class="' + cellclass + '"></div>');
                tablerow.append(tablecolumn);
                tablecolumn.css('left', left);
                if (this.rtl) {
                    tablecolumn.css('z-index', zindex++);
                    tablecolumn.css('border-left-width', '1px');
                }
                else {
                    tablecolumn.css('z-index', zindex--);
                }
                tablecolumn.width(width);
                tablecolumn[0].left = left;
                if (!(columnrecord.hidden && columnrecord.hideable)) {
                    left += width;
                }
                else {
                    tablecolumn.css('display', 'none');
                }
                cells[cells.length] = tablecolumn[0];

                var addFilterWidget = true;
                if (!this.rtl) {
                    if (this.groupable) {
                        var detailsoffset = (this.showrowdetailscolumn && this.rowdetails) ? 1 : 0;
                        if (this.groups.length + detailsoffset > j) {
                            addFilterWidget = false;
                        }
                    }
                    if (this.showrowdetailscolumn && this.rowdetails && j == 0) addFilterWidget = false;
                }
                else {
                    if (this.groupable) {
                        var detailsoffset = (this.showrowdetailscolumn && this.rowdetails) ? 1 : 0;
                        if (this.groups.length + detailsoffset + j > columnslength - 1) {
                            addFilterWidget = false;
                        }
                    }
                    if (this.showrowdetailscolumn && this.rowdetails && j == columnslength-1) addFilterWidget = false;
                }

                if (addFilterWidget) {
                    if (columnrecord.filtertype == 'custom' && columnrecord.createfilterwidget) {
                        var applyfilter = function () {
                            me._applyfilterfromfilterrow();
                        }
                        columnrecord.createfilterwidget(columnrecord, tablecolumn, applyfilter);
                    }
                    else {
                        if (columnrecord.filterable) {
                            if (this._filterrowcache[columnrecord.datafield]) {
                                usefromcache = true;
                                tablecolumn.append(this._filterrowcache[columnrecord.datafield]);
                                columnrecord._filterwidget = this._filterrowcache[columnrecord.datafield];
                            }
                            else {
                                this._addfilterwidget(columnrecord, tablecolumn, width);
                                _newfilterrowcache[columnrecord.datafield] = columnrecord._filterwidget;
                            }
                        }
                    }
                }
            }
            this._filterrowcache = _newfilterrowcache;
            if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                tablerow.css('z-index', zindex--);
            }

            tablerow.width(parseInt(left) + 2);
            this.filterrow.addClass(cellclass);
            this.filterrow.css('border-top-width', '1px');
            this.filterrow.css('border-right-width', '0px');
            if (usefromcache) {
                this._updatefilterrowui(true);
            }
        },

        _addfilterwidget: function (columnrecord, tablecolumn, width) {
            var me = this.that;
            var filtervalue = "";
            for (var f = 0; f < me.dataview.filters.length; f++) {
                var currentfilter = me.dataview.filters[f];
                if (currentfilter.datafield && currentfilter.datafield == columnrecord.datafield) {
                    filtervalue = currentfilter.filter.getfilters()[0].value;
                    break;
                }
            }

            var addtextfilter = function (me, tablecolumn) {
                var textbox = $('<input autocomplete="off" type="textarea"/>');
                textbox[0].id = $.jqx.utilities.createId();
                textbox.addClass(me.toThemeProperty('jqx-widget'));
                textbox.addClass(me.toThemeProperty('jqx-input'));
                textbox.addClass(me.toThemeProperty('jqx-rc-all'));
                textbox.addClass(me.toThemeProperty('jqx-widget-content'));
                if (me.rtl) {
                    textbox.css('direction', 'rtl');
                }
                if (me.disabled) {
                    textbox.attr('disabled', true);
                }
                textbox.attr('disabled', false);

                textbox.appendTo(tablecolumn);
                textbox.width(width - 10);
                textbox.height(me.filterrowheight - 10);
                textbox.css('margin', '4px');
                if (columnrecord.createfilterwidget) {
                    columnrecord.createfilterwidget(columnrecord, tablecolumn, textbox);
                }
                columnrecord._filterwidget = textbox;

                textbox.focus(function () {
                    me.content[0].scrollLeft = 0;
                    setTimeout(function () {
                        me.content[0].scrollLeft = 0;
                    }, 10);

                    me.focusedfilter = textbox;
                    textbox.addClass(me.toThemeProperty('jqx-fill-state-focus'));
                    return false;
                });
                textbox.blur(function () {
                    textbox.removeClass(me.toThemeProperty('jqx-fill-state-focus'));
                });

                
                textbox.keydown(function (event) {
                    if (event.keyCode == '13')
                        me._applyfilterfromfilterrow();
                    if (textbox[0]._writeTimer) clearTimeout(textbox[0]._writeTimer);
                    textbox[0]._writeTimer = setTimeout(function () {
                        if (!me._loading) {
                            if (me["_oldWriteText" + textbox[0].id] != textbox.val()) {
                                me._applyfilterfromfilterrow();
                                me["_oldWriteText" + textbox[0].id] = textbox.val();
                            }
                        }
                    }, 800);
                    me.focusedfilter = textbox;
                });
                me.host.removeClass('jqx-disableselect');
                me.content.removeClass('jqx-disableselect');
                textbox.val(filtervalue);
            }

            if (columnrecord.datatype != null) {
                if (columnrecord.filtertype == "number") {
                    if (columnrecord.datatype == "string" || columnrecord.datatype == "date" || columnrecord.datatype == "bool") {
                        columnrecord.filtertype = "textbox";
                    }
                }
                if (columnrecord.filtertype == "date") {
                    if (columnrecord.datatype == "string" || columnrecord.datatype == "number" || columnrecord.datatype == "bool") {
                        columnrecord.filtertype = "textbox";
                    }
                }
                if (columnrecord.filtertype == "bool") {
                    if (columnrecord.datatype == "string" || columnrecord.datatype == "number" || columnrecord.datatype == "date") {
                        columnrecord.filtertype = "textbox";
                    }
                }
            }

            switch (columnrecord.filtertype) {
                case 'number':
                    var numberwidget = $("<div></div>");
                    numberwidget.width(tablecolumn.width());
                    numberwidget.height(this.filterrowheight);
                    tablecolumn.append(numberwidget);
                    var width = tablecolumn.width() - 20;
                    var addInput = function (element, width, sign) {
                        var textbox = $('<input style="float: left;" autocomplete="off" type="textarea"/>');
                        if (me.rtl) {
                            textbox.css('float', 'right');
                            textbox.css('direction', 'rtl');
                        }
                        textbox[0].id = $.jqx.utilities.createId();
                        textbox.addClass(me.toThemeProperty('jqx-widget'));
                        textbox.addClass(me.toThemeProperty('jqx-input'));
                        textbox.addClass(me.toThemeProperty('jqx-rc-all'));
                        textbox.addClass(me.toThemeProperty('jqx-widget-content'));
                        textbox.appendTo(element);
                        textbox.width(width - 10);
                        if (me.disabled) {
                            textbox.attr('disabled', true);
                        }
                        textbox.attr('disabled', false);

                        textbox.height(me.filterrowheight - 10);
                        textbox.css('margin', '4px');
                        textbox.css('margin-right', '2px');
                        textbox.focus(function () {
                            me.focusedfilter = textbox;
                            textbox.addClass(me.toThemeProperty('jqx-fill-state-focus'));
                        });
                        textbox.blur(function () {
                            textbox.removeClass(me.toThemeProperty('jqx-fill-state-focus'));
                        });
                        textbox.keydown(function (event) {
                            if (event.keyCode == '13')
                                me._applyfilterfromfilterrow();
                            if (textbox[0]._writeTimer) clearTimeout(textbox[0]._writeTimer);
                            textbox[0]._writeTimer = setTimeout(function () {
                                if (!me._loading) {
                                    if (me["_oldWriteText" + textbox[0].id] != textbox.val()) {
                                        me._applyfilterfromfilterrow();
                                        me["_oldWriteText" + textbox[0].id] = textbox.val();
                                    }
                                }
                            }, 800);
                            me.focusedfilter = textbox;
                        });
                        textbox.val(filtervalue);
                        return textbox;
                    }

                    addInput(numberwidget, width);
                    var source = me._getfiltersbytype('number');
                    var dropdownlist = $("<div class='filter' style='float: left;'></div>");
                    dropdownlist.css('margin-top', '4px');
                    dropdownlist.appendTo(numberwidget);
                    if (me.rtl) {
                        dropdownlist.css('float', 'right');
                    }

                    var selectedIndex = 0;
                    if (columnrecord.filtercondition != null) {
                        var newIndex = source.indexOf(columnrecord.filtercondition);
                        if (newIndex != -1)
                            selectedIndex = newIndex;
                    }

                    dropdownlist.jqxDropDownList({disabled: me.disabled, touchMode: me.touchmode, rtl: me.rtl, dropDownHorizontalAlignment: 'right', enableBrowserBoundsDetection: true, selectedIndex: selectedIndex, width: 18, height: 21, dropDownHeight: 150, dropDownWidth: 170, source: source, theme: me.theme });
                    dropdownlist.jqxDropDownList({
                        selectionRenderer: function (element) {
                            return "";
                        }
                    });
                    dropdownlist.jqxDropDownList('setContent', "");
                    dropdownlist.find('.jqx-dropdownlist-content').hide();
                    if (columnrecord.createfilterwidget) {
                        columnrecord.createfilterwidget(columnrecord, tablecolumn, numberwidget);
                    }
                    columnrecord._filterwidget = numberwidget;

                    var lastSelectedItem = null;
                    this.addHandler(dropdownlist, 'select', function () {
                        var selectedItem = dropdownlist.jqxDropDownList('getSelectedItem').label;
                        if (columnrecord._filterwidget.find('input').val().length > 0 && !me.refreshingfilter) {
                            me._applyfilterfromfilterrow();
                        }
                        else if (columnrecord._filterwidget.find('input').val().length == 0 && !me.refreshingfilter) {
                            if (lastSelectedItem == 'null' || lastSelectedItem == 'not null' || selectedItem == 'null' || selectedItem == 'not null') {
                                me._applyfilterfromfilterrow();
                            }
                        }
                        lastSelectedItem = selectedItem;
                    });
                    break;
                case 'textbox':
                case 'default':
                default:
                    addtextfilter(this, tablecolumn);
                    break;
                case 'none':
                    break;
                case 'date':
                    if (this.host.jqxDateTimeInput) {
                        var datetimeinput = $("<div></div>");
                        datetimeinput.css('margin', '4px');
                        datetimeinput.appendTo(tablecolumn);
                        var localization = { calendar: this.gridlocalization, todayString: this.gridlocalization.todaystring, clearString: this.gridlocalization.clearstring };
                        datetimeinput.jqxDateTimeInput({disabled: me.disabled, localization: localization, rtl: me.rtl, showFooter: true, formatString: columnrecord.cellsformat, selectionMode: 'range', value: null, theme: this.theme, width: width - 10, height: this.filterrowheight - 10 });
                        if (columnrecord.createfilterwidget) {
                            columnrecord.createfilterwidget(columnrecord, tablecolumn, datetimeinput);
                        }
                        columnrecord._filterwidget = datetimeinput;
                        this.addHandler(datetimeinput, 'valuechanged', function (event) {
                            if (!me.refreshingfilter) {
                                me._applyfilterfromfilterrow();
                                me.focusedfilter = null;
                            }
                        });
                    }
                    else addtextfilter(this, tablecolumn);
                    break;
                case 'list':
                case 'checkedlist':
                    if (this.host.jqxDropDownList) {
                        var dataadapter = this._getfilterdataadapter(columnrecord);

                        var autoheight = false;
                        var dropdownlist = $("<div></div>");
                        dropdownlist.css('margin', '4px');
                        var datafield = columnrecord.datafield;
                        var checkboxes = columnrecord.filtertype == 'checkedlist' ? true : false;
                        var dropDownWidth = width < 150 ? 220 : 'auto';
                        dataadapter.dataBind();
                        var dropdownitems = dataadapter.records;
                        var autoDropDownHeight = dropdownitems.length < 8 ? true : false;
                        autoheight = autoDropDownHeight;
                        dropdownlist.appendTo(tablecolumn);
                        dropdownlist.jqxDropDownList({disabled: me.disabled, touchMode: me.touchmode, rtl: me.rtl, checkboxes: checkboxes, dropDownWidth: dropDownWidth, source: dataadapter.records, autoDropDownHeight: autoDropDownHeight, theme: this.theme, width: width - 10, height: this.filterrowheight - 10, displayMember: columnrecord.displayfield, valueMember: datafield });
                        var listbox = dropdownlist.jqxDropDownList('listBox');
                        if (checkboxes) {
                            dropdownlist.jqxDropDownList({
                                selectionRenderer: function () {
                                    return me.gridlocalization.filterselectstring;
                                }
                            });
                            var spanElement = $('<span style="top: 2px; position: relative; color: inherit; border: none; background-color: transparent;">' + me.gridlocalization.filterselectstring + '</span>');
                            spanElement.addClass(this.toThemeProperty('jqx-item'));
                            if (listbox != undefined) {
                                if (!autoheight) {
                                    listbox.host.height(200);
                                }
                                listbox.insertAt(me.gridlocalization.filterselectallstring, 0);
                                dropdownlist.jqxDropDownList('setContent', spanElement);
                                var handleCheckChange = true;
                                var checkedItems = new Array();
                                listbox.checkAll(false);
                                me.addHandler(listbox.host, 'checkChange', function (event) {
                                    dropdownlist[0]._selectionChanged = true;
                                    if (!handleCheckChange)
                                        return;

                                    if (event.args.label != me.gridlocalization.filterselectallstring) {
                                        handleCheckChange = false;
                                        listbox.host.jqxListBox('checkIndex', 0, true, false);
                                        var checkedItems = listbox.host.jqxListBox('getCheckedItems');
                                        var items = listbox.host.jqxListBox('getItems');

                                        if (checkedItems.length == 1) {
                                            listbox.host.jqxListBox('uncheckIndex', 0, true, false);
                                        }
                                        else if (items.length != checkedItems.length) {
                                            listbox.host.jqxListBox('indeterminateIndex', 0, true, false);
                                        }
                                        handleCheckChange = true;
                                    }
                                    else {
                                        handleCheckChange = false;
                                        if (event.args.checked) {
                                            listbox.host.jqxListBox('checkAll', false);
                                        }
                                        else {
                                            listbox.host.jqxListBox('uncheckAll', false);
                                        }

                                        handleCheckChange = true;
                                    }
                                });
                            }
                        }
                        else {
                            listbox.insertAt({ label: this.gridlocalization.filterchoosestring, value: "" }, 0);
                            dropdownlist.jqxDropDownList({ selectedIndex: 0 });
                        }

                        if (columnrecord.createfilterwidget) {
                            columnrecord.createfilterwidget(columnrecord, tablecolumn, dropdownlist);
                        }
                        columnrecord._filterwidget = dropdownlist;

                        var dropdownlistWrapper = dropdownlist.jqxDropDownList('dropdownlistWrapper');
                        if (columnrecord.filtertype == 'list') {
                            this.addHandler(dropdownlist, 'select', function (event) {
                                if (!me.refreshingfilter) {
                                    if (event.args && event.args.type != 'none') {
                                        me._applyfilterfromfilterrow();
                                        me.focusedfilter = null;
                                    }
                                }
                            });
                        }
                        else {
                            this.addHandler(dropdownlist, 'close', function (event) {
                                if (dropdownlist[0]._selectionChanged) {
                                    me._applyfilterfromfilterrow();
                                    me.focusedfilter = null;
                                    dropdownlist[0]._selectionChanged = false;
                                }
                            });
                        }
                    }
                    else addtextfilter(this, tablecolumn);
                    break;
                case 'bool':
                case 'boolean':
                    if (this.host.jqxCheckBox) {
                        var checkbox = $('<div tabIndex=0 style="opacity: 0.99; position: absolute; top: 50%; left: 50%; margin-top: -7px; margin-left: -10px;"></div>');
                        checkbox.appendTo(tablecolumn);
                        checkbox.jqxCheckBox({ disabled: me.disabled, enableContainerClick: false, animationShowDelay: 0, animationHideDelay: 0, hasThreeStates: true, theme: this.theme, checked: null });
                        if (columnrecord.createfilterwidget) {
                            columnrecord.createfilterwidget(columnrecord, tablecolumn, checkbox);
                        }
                        if (filtervalue === true || filtervalue == "true") {
                            checkbox.jqxCheckBox({ checked: true });
                        }
                        else if (filtervalue === false || filtervalue == "false") {
                            checkbox.jqxCheckBox({ checked: false });
                        }

                        columnrecord._filterwidget = checkbox;
                        this.addHandler(checkbox, 'change', function (event) {
                            if (!me.refreshingfilter) {
                                if (event.args) {
                                    me.focusedfilter = null;
                                    me._applyfilterfromfilterrow();
                                }
                            }
                        });
                    }
                    else addtextfilter(this, tablecolumn);
                    break;
            }
        },

        _getfilterdataadapter: function (columnrecord) {
            var isdataadapter = this.source._source ? true : false;

            if (!isdataadapter) {
                dataadapter = new $.jqx.dataAdapter(this.source,
                            {
                                autoBind: false,
                                uniqueDataFields: [columnrecord.displayfield],
                                autoSort: true,
                                autoSortField: columnrecord.displayfield,
                                async: false
                            });
            }
            else {
                var dataSource =
                {
                    localdata: this.source.records,
                    datatype: this.source.datatype,
                    async: false
                }
                var that = this;
                dataadapter = new $.jqx.dataAdapter(dataSource,
                {
                    autoBind: false,
                    autoSort: true,
                    autoSortField: columnrecord.displayfield,
                    async: false,
                    uniqueDataFields: [columnrecord.displayfield],
                    beforeLoadComplete: function (records) {
                        var data = new Array();
                        if (columnrecord.cellsformat) {
                            var columntype = that._getcolumntypebydatafield(columnrecord);

                            for (var i = 0; i < records.length; i++) {
                                data.push(records[i]);
                                var value = records[i][columnrecord.displayfield];
                                records[i][columnrecord.displayfield + "JQValue"] = value;
                                if (columntype === "date") {
                                    records[i][columnrecord.displayfield] = dataadapter.formatDate(value, columnrecord.cellsformat, that.gridlocalization);
                                }
                                else if (columntype === "number" || columntype === "float" || columntype === "int") {
                                    records[i][columnrecord.displayfield] = dataadapter.formatNumber(value, columnrecord.cellsformat, that.gridlocalization);
                                }
                            }
                            return data;
                        }
                        else return records;
                    }
                });
            }
            if (columnrecord.filteritems && columnrecord.filteritems.length > 0) {
                var dataSource =
                {
                    localdata: columnrecord.filteritems,
                    datatype: this.source.datatype,
                    async: false
                }

                dataadapter = new $.jqx.dataAdapter(dataSource,
                {
                    autoBind: false,
                    async: false
                });
            }
            else if (columnrecord.filteritems) {
                if (columnrecord.filteritems._source) {
                    columnrecord.filteritems._options.autoBind = false;
                    columnrecord.filteritems._options.async = false;

                    return columnrecord.filteritems;
                }
                else if ($.isFunction(columnrecord.filteritems)) {
                    return columnrecord.filteritems();
                }
            }

            return dataadapter;
        },

        refreshfilterrow: function () {
            if (!this.showfilterrow) {
                return;
            }

            this.refreshingfilter = true;
            this._updatefilterrowui();
            this._updatelistfilters(true, true);
            var me = this.that;
            var columnslength = this.columns.records.length;
            for (var j = 0; j < columnslength; j++) {
                var column = this.columns.records[j];
                if (column.filterable) {
                    if (column.filter) {
                        var filters = column.filter.getfilters();
                        if (filters.length > 0) {
                            var value = filters[0].value;
                            var widget = column._filterwidget;
                            var tablecolumn = column._filterwidget.parent();
                            if (widget != null) {
                                switch (column.filtertype) {
                                    case 'number':
                                        tablecolumn.find('input').val(value);
                                        if (this.host.jqxDropDownList) {
                                            var conditions = column.filter.getoperatorsbyfiltertype('numericfilter');
                                            widget.find('.filter').jqxDropDownList('selectIndex', conditions.indexOf(filters[0].condition));
                                        }
                                        break;
                                    case 'date':
                                        if (this.host.jqxDateTimeInput) {
                                            var value = column.filter.getfilterat(0).filtervalue;
                                            if (value != undefined) {
                                                if (column.filter.getfilterat(1)) {
                                                    var value2 = column.filter.getfilterat(1).filtervalue;
                                                }
                                                else {
                                                    value2 = value;
                                                }

                                                $(tablecolumn.children()[0]).jqxDateTimeInput('setRange', new Date(value), new Date(value2));
                                            }
                                        }
                                        else {
                                            widget.val(value);
                                        }
                                        break;
                                    case 'textbox':
                                    case 'default':
                                        widget.val(value);
                                        me["_oldWriteText" + widget[0].id] = value;
                                        break;
                                    case 'bool':
                                    case 'boolean':
                                        if (!this.host.jqxCheckBox) {
                                            widget.val(value);
                                        }
                                        else $(tablecolumn.children()[0]).jqxCheckBox({ checked: value });
                                        break;
                                }
                            }
                        }
                    }
                }
            }
            this.refreshingfilter = false;
        },

        _destroyedfilters: function ()
        {
                var me = this.that;
                var columnslength = this.columns.records.length;
                for (var j = 0; j < columnslength; j++) {
                    var columnrecord = this.columns.records[j];
                    if (columnrecord.filterable) {
                        var widget = columnrecord._filterwidget;
                        if (columnrecord.filtertype == 'list' || columnrecord.filtertype == 'checkedlist') {
                            this.removeHandler(widget, 'select');
                            this.removeHandler(widget, 'close');
                            widget.jqxDropDownList('destroy');
                        }
                        else if (columnrecord.filtertype == 'date') {
                            this.removeHandler(widget, 'valuechanged');
                            widget.jqxDateTimeInput('destroy');
                        }
                        else if (columnrecord.filtertype == 'bool') {
                            this.removeHandler(widget, 'change');
                            widget.jqxCheckBox('destroy');
                        }
                        else if (columnrecord.filtertype == 'number') {
                            var input = widget.find('.jqx-input');
                            this.removeHandler(input, 'keydown');
                            var dropdownlist = $(widget.children()[1]);
                            dropdownlist.jqxDropDownList('destroy');
                        }
                        else {
                            this.removeHandler(widget, 'keydown');
                        }
                        widget.remove();
                    }
                }
        },

        _updatelistfilters: function (endcelledit, updatecheckstates) {
            var me = this.that;
            var columnslength = this.columns.records.length;
            for (var j = 0; j < columnslength; j++) {
                var columnrecord = this.columns.records[j];
                if (columnrecord.filterable) {
                    if (columnrecord.filtertype == 'list' || columnrecord.filtertype == 'checkedlist') {
                        var dropdownlist = columnrecord._filterwidget;
                        if (!endcelledit) {
                            if (columnrecord.filter == undefined) {
                                dropdownlist.jqxDropDownList('renderSelection');
                                continue;
                            }
                        }
                        else {
                            var dataadapter = this._getfilterdataadapter(columnrecord);
                            dropdownlist.jqxDropDownList({ source: dataadapter });
                            var dropdownitems = dropdownlist.jqxDropDownList('getItems');
                            var equalSources = true;
                            if (dropdownitems.length != dataadapter.records.length + 1)
                                equalSources = false;

                            if (equalSources) {
                                for (var i = 1; i < dropdownitems.length; i++) {
                                    if (dropdownitems[i].label != dataadapter.records[i - 1][columnrecord.displayfield]) {
                                        equalSources = false;
                                        break;
                                    }
                                }
                            }
                            if (equalSources && !updatecheckstates)
                                continue;
                        }

                        var checkboxes = columnrecord.filtertype == 'checkedlist' ? true : false;
                        var dropdownitems = dropdownlist.jqxDropDownList('getItems');
                        var listbox = dropdownlist.jqxDropDownList('listBox');
                        dropdownlist.jqxDropDownList('dataBind');
                     
                        if (checkboxes) {
                            dropdownlist.jqxDropDownList({
                                selectionRenderer: function () {
                                    return me.gridlocalization.filterselectstring;
                                }
                            });
                            listbox.insertAt(this.gridlocalization.filterselectallstring, 0);
                            dropdownlist.jqxDropDownList('setContent', this.gridlocalization.filterselectstring);
                            listbox.checkAll(false);
                            if (columnrecord.filter) {
                                var filters = columnrecord.filter.getfilters();

                                for (var i = 0; i < listbox.items.length; i++) {
                                    var label = listbox.items[i].label;
                                    $.each(filters, function () {
                                        if (this.condition == "NOT_EQUAL") {
                                            if (label == this.value) {
                                                listbox.uncheckIndex(i, false, false);
                                            }
                                            else {
                                                listbox.checkIndex(i, false, false);
                                            }
                                        }
                                        else if (this.condition == "EQUAL") {
                                            if (label == this.value) {
                                                listbox.checkIndex(i, false, false);
                                            }
                                            else {
                                                listbox.uncheckIndex(i, false, false);
                                            }
                                        }
                                    });
                                }
                                listbox._updateCheckedItems();
                                var checkedItemsLength = listbox.getCheckedItems().length;
                                if (listbox.items.length != checkedItemsLength && checkedItemsLength > 0) {
                                    listbox.host.jqxListBox('indeterminateIndex', 0, true, false);
                                }
                            }
                        }
                        else {
                            listbox.insertAt({ label: this.gridlocalization.filterchoosestring, value: "" }, 0);
                            dropdownlist.jqxDropDownList({ selectedIndex: 0 });
                            if (columnrecord.filter) {
                                var filters = columnrecord.filter.getfilters();
                                var selectedIndex = -1;
                                for (var i = 0; i < listbox.items.length; i++) {
                                    var label = listbox.items[i].label;
                                    $.each(filters, function () {
                                        if (this.condition == "NOT_EQUAL") return true;
                                        if (label == this.value) {
                                            selectedIndex = i;
                                            return false;
                                        }
                                    });
                                }
                                if (selectedIndex != -1) {
                                    listbox.selectIndex(selectedIndex);
                                }
                            }
                        }
                        if (dropdownitems.length < 8) {
                            dropdownlist.jqxDropDownList('autoDropDownHeight', true);
                        }
                        else {
                            dropdownlist.jqxDropDownList('autoDropDownHeight', false);
                        }
                    }
                }
            }
        },

        _renderfiltercolumn: function () {
            var self = this.that;

            if (this.filterable) {
                $.each(this.columns.records, function (i, value) {
                    var filtered = false;
                    if (self.autoshowfiltericon) {
                        if (this.filter) {
                            $(this.filtericon).show();
                            filtered = true;
                        }
                        else {
                            $(this.filtericon).hide();
                        }
                    }
                    else {
                        if (this.filterable) {
                            $(this.filtericon).show();
                            filtered = true;
                        }
                    }
                    if (this.align == "right" && !this.renderer) {
                        if (!filtered) {
                            this.element.firstChild.firstChild.style.marginRight = '2px';
                        }
                        else {
                            this.element.firstChild.firstChild.style.marginRight = '18px';
                        }
                    }
                });
            }
        },

        _initcolumntypes: function()
        {
            if (this.columns && this.columns.records) {
                var datafields = this.source._source.datafields;
                if (datafields) {
                    for (var i = 0; i < this.columns.records.length; i++) {
                        var column = this.columns.records[i];
                        if (column.datatype) continue;
                        var foundType = "";
                        $.each(datafields, function () {
                            if (this.name == column.displayfield) {
                                if (this.type) {
                                    foundType = this.type;
                                }
                                return false;
                            }
                        });
                        if (foundType != "")
                            column.datatype = foundType;
                        else column.datatype = "";
                    }
                }
            }
        },

        _getcolumntypebydatafield: function (column) {
            var me = this.that;
            var type = 'string';
            var datafields = me.source.datafields || ((me.source._source) ? me.source._source.datafields : null);

            if (datafields) {
                var foundType = "";
                $.each(datafields, function () {
                    if (this.name == column.displayfield) {
                        if (this.type) {
                            foundType = this.type;
                        }
                        return false;
                    }
                });
                if (foundType)
                    return foundType;
            }

            if (column != null) {
                if (this.dataview.cachedrecords == undefined) {
                    return type;
                }

                var cell = null;

                if (!this.virtualmode) {
                    if (this.dataview.cachedrecords.length == 0)
                        return type;

                    cell = this.dataview.cachedrecords[0][column.displayfield];
                    if (cell != null && cell.toString() == "") {
                        return "string";
                    }
                }
                else {
                    $.each(this.dataview.cachedrecords, function () {
                        cell = this[column.displayfield];
                        return false;
                    });
                }

                if (cell != null) {
                    if (typeof cell == 'boolean') {
                        type = 'boolean';
                    }
                    else if ($.jqx.dataFormat.isNumber(cell)) {
                        type = 'number';
                    }
                    else {
                        var tmpvalue = new Date(cell);

                        if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                            if ($.jqx.dataFormat) {
                                tmpvalue = $.jqx.dataFormat.tryparsedate(cell);
                                if (tmpvalue != null) {
                                    if (tmpvalue && tmpvalue.getFullYear()) {
                                        if (tmpvalue.getFullYear() == 1970 && tmpvalue.getMonth() == 0 && tmpvalue.getDate() == 1) {
                                            var num = new Number(cell);
                                            if (!isNaN(num))
                                                return 'number';

                                            return 'string';
                                        }
                                    }

                                    return 'date';
                                }
                                else {
                                    type = 'string';
                                }
                            }
                            else type = 'string';
                        }
                        else {
                            type = 'date';
                        }
                    }
                }
            }
            return type;
        },

        _getfiltersbytype: function (type) {
            var me = this.that;
            var source = '';
            switch (type) {
                case "number":
                case "float":
                case "int":
                    source = me.gridlocalization.filternumericcomparisonoperators;
                    break;
                case "date":
                    source = me.gridlocalization.filterdatecomparisonoperators;
                    break;
                case "boolean":
                case "bool":
                    source = me.gridlocalization.filterbooleancomparisonoperators;
                    break;
                case "string":
                default:
                    source = me.gridlocalization.filterstringcomparisonoperators;
                    break;

            }
            return source;
        },

        _updatefilterpanel: function (me, element, column) {
            if (me == null || me == undefined) me = this;
            var type = me._getcolumntypebydatafield(column);
            var source = me._getfiltersbytype(type);

            if (!me.host.jqxDropDownList) {
                throw new Error('jqxGrid: Missing reference to jqxdropdownlist.js.');
                return;
            }

            var $element = $(element);
            var clearbutton = $element.find('#filterclearbutton' + me.element.id);
            var filterbutton = $element.find('#filterbutton' + me.element.id);
            var condition = $element.find('#filter1' + me.element.id);
            var filteroperator = $element.find('#filter2' + me.element.id);
            var condition2 = $element.find('#filter3' + me.element.id);
            var input1 = $element.find('.filtertext1' + me.element.id);
            var input2 = $element.find('.filtertext2' + me.element.id);
            input1.val('');
            input2.val('');

            this.removeHandler(filterbutton, 'click');
            this.addHandler(filterbutton, 'click', function () {
                me._buildfilter(me, element, column);
                me._closemenu();
            });

            this.removeHandler(clearbutton, 'click');
            this.addHandler(clearbutton, 'click', function () {
                me._clearfilter(me, element, column);
                me._closemenu();
            });

            if (this.filtermode === "default") {
                if (condition.jqxDropDownList('source') != source) {
                    condition.jqxDropDownList({ enableBrowserBoundsDetection: false, source: source });
                    condition2.jqxDropDownList({ enableBrowserBoundsDetection: false, source: source });
                }

                if (type == 'boolean' || type == 'bool') {
                    condition.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: 0 });
                    condition2.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: 0 });
                }
                else {
                    var autoDropDownHeight = false;
                    if (source && source.length) {
                        if (source.length < 5) {
                            autoDropDownHeight = true;
                        }
                    }

                    condition.jqxDropDownList({ autoDropDownHeight: autoDropDownHeight, selectedIndex: 2 });
                    condition2.jqxDropDownList({ autoDropDownHeight: autoDropDownHeight, selectedIndex: 2 });
                }
                filteroperator.jqxDropDownList({ selectedIndex: 0 });

                var filter = column.filter;
                var filtergroup = new $.jqx.filter();
                var filtertype = "";
                switch (type) {
                    case "number":
                    case "int":
                    case "float":
                    case "decimal":
                        filtertype = 'numericfilter';
                        conditions = filtergroup.getoperatorsbyfiltertype('numericfilter');
                        break;
                    case "boolean":
                    case "bool":
                        filtertype = 'booleanfilter';
                        conditions = filtergroup.getoperatorsbyfiltertype('booleanfilter');
                        break;
                    case "date":
                    case "time":
                        filtertype = 'datefilter';
                        conditions = filtergroup.getoperatorsbyfiltertype('datefilter');
                        break;
                    case "string":
                        filtertype = 'stringfilter';
                        conditions = filtergroup.getoperatorsbyfiltertype('stringfilter');
                        break;
                }
                if (filter != null) {
                    var filter1 = filter.getfilterat(0);
                    var filter2 = filter.getfilterat(1);
                    var operator = filter.getoperatorat(0);
                 
                    if (me.updatefilterconditions) {
                        var conditions = [];
                        var newfilterconditions = me.updatefilterconditions(filtertype, conditions);
                        if (newfilterconditions != undefined) {
                            for (var c = 0; c < newfilterconditions.length; c++) {
                                newfilterconditions[c] = newfilterconditions[c].toUpperCase();
                            }
                            filter.setoperatorsbyfiltertype(filtertype, newfilterconditions);
                            conditions = newfilterconditions;
                        }
                    }

                    var animationtype = this.enableanimations ? 'default' : 'none';
                    if (filter1 != null) {
                        var index1 = conditions.indexOf(filter1.comparisonoperator);
                        var value1 = filter1.filtervalue;
                        input1.val(value1);
                        condition.jqxDropDownList({ selectedIndex: index1, animationType: animationtype });
                    }
                    if (filter2 != null) {
                        var index2 = conditions.indexOf(filter2.comparisonoperator);
                        var value2 = filter2.filtervalue;
                        input2.val(value2);
                        condition2.jqxDropDownList({ selectedIndex: index2, animationType: animationtype });
                    }
                    if (filter.getoperatorat(0) == undefined) {
                        filteroperator.jqxDropDownList({ selectedIndex: 0, animationType: animationtype });
                    }
                    else {
                        if (filter.getoperatorat(0) == 'and' || filter.getoperatorat(0) == 0) {
                            filteroperator.jqxDropDownList({ selectedIndex: 0 });
                        }
                        else {
                            filteroperator.jqxDropDownList({ selectedIndex: 1 });
                        }
                    }
                }
                if (me.updatefilterpanel) {
                    me.updatefilterpanel(condition, condition2, filteroperator, input1, input2, filterbutton, clearbutton, filter, filtertype, conditions);
                }

                input1.focus();
                setTimeout(function () {
                    input1.focus();
                }, 10);
            }
            else {
                var dataadapter = me._getfilterdataadapter(column);
                var filtertype = me._getfiltertype(type);
                if (column.cellsformat) {
                    condition.jqxListBox({ displayMember: column.displayfield, valueMember: column.displayfield + "JQValue", source: dataadapter });
                }
                else {
                    condition.jqxListBox({ displayMember: column.displayfield, valueMember: column.displayfield, source: dataadapter });
                }

                condition.jqxListBox('insertAt', me.gridlocalization.filterselectallstring, 0);
                var listbox = condition.data().jqxListBox.instance;
                listbox.checkAll(false);
                var that = this;
                if (column.filter) {
                    listbox.uncheckAll(false);
                    var filters = column.filter.getfilters();
                    for (var i = 0; i < listbox.items.length; i++) {
                        var label = listbox.items[i].value;

                        $.each(filters, function () {
                            if (this.condition == "NOT_EQUAL") {
                                if (label != this.value) {
                                    listbox.uncheckIndex(i, false, false);
                                    return false;
                                }
                            }
                            else if (this.condition == "EQUAL") {
                                if (label == this.value) {
                                    listbox.checkIndex(i, false, false);
                                    return false;
                                }
                            }
                        });
                    }

                    listbox._updateCheckedItems();
                    var checkedItemsLength = listbox.getCheckedItems().length;
                    if (listbox.items.length != checkedItemsLength && checkedItemsLength > 0) {
                        listbox.host.jqxListBox('indeterminateIndex', 0, true, false);
                    }
                    if (checkedItemsLength === listbox.items.length - 1) {
                        listbox.host.jqxListBox('checkIndex', 0, true, false);
                    }
                }
            } 
        },

        _getfiltertype: function (type) {
            var filtertype = "stringfilter";
            switch (type) {
                case "number":
                case "int":
                case "float":
                case "decimal":
                    filtertype = 'numericfilter';
                    break;
                case "boolean":
                case "bool":
                    filtertype = 'booleanfilter';
                    break;
                case "date":
                case "time":
                    filtertype = 'datefilter';
                    break;
                case "string":
                    filtertype = 'stringfilter';
                    break;
            }
            return filtertype;
        },

        _buildfilter: function (me, element, column) {
            var condition = $(element).find('#filter1' + me.element.id);
            var operator = $(element).find('#filter2' + me.element.id);
            var condition2 = $(element).find('#filter3' + me.element.id);
            var input1 = $(element).find('.filtertext1' + me.element.id);
            var input2 = $(element).find('.filtertext2' + me.element.id);
            var value1 = input1.val();
            var value2 = input2.val();
            var type = me._getcolumntypebydatafield(column);
            var source = me._getfiltersbytype(type);

            var filtergroup = new $.jqx.filter();
            var filtertype = me._getfiltertype(type);
            if (me.filtermode === "default") {
                var index1 = condition.jqxDropDownList('selectedIndex');
                var operatorindex = operator.jqxDropDownList('selectedIndex');
                var index2 = condition2.jqxDropDownList('selectedIndex');
              
                var filter1 = null;
                var filter2 = null;
               
                if (me.updatefilterconditions) {
                    var newfilterconditions = me.updatefilterconditions(filtertype, filtergroup.getoperatorsbyfiltertype(filtertype));
                    if (newfilterconditions != undefined) {
                        filtergroup.setoperatorsbyfiltertype(filtertype, newfilterconditions);
                    }
                }

                var isvalidfilter = false;
                var condition1 = filtergroup.getoperatorsbyfiltertype(filtertype)[index1];
                var condition2 = filtergroup.getoperatorsbyfiltertype(filtertype)[index2];
                var nullcondition1 = condition1 == "NULL" || condition1 == "NOT_NULL";
                var emptycondition1 = condition1 == "EMPTY" || condition1 == "NOT_EMPTY";

                if (condition1 == undefined) condition1 = filtergroup.getoperatorsbyfiltertype(filtertype)[0];
                if (condition2 == undefined) condition2 = filtergroup.getoperatorsbyfiltertype(filtertype)[0];

                if (value1.length > 0 || nullcondition1 || emptycondition1) {
                    filter1 = filtergroup.createfilter(filtertype, value1, condition1, null, column.cellsformat, me.gridlocalization);
                    filtergroup.addfilter(operatorindex, filter1);
                    isvalidfilter = true;
                }

                var nullcondition2 = condition2 == "NULL" || condition2 == "NOT_NULL";
                var emptycondition2 = condition2 == "EMPTY" || condition2 == "NOT_EMPTY";

                if (value2.length > 0 || nullcondition2 || emptycondition2) {
                    filter2 = filtergroup.createfilter(filtertype, value2, condition2, null, column.cellsformat, me.gridlocalization);
                    filtergroup.addfilter(operatorindex, filter2);
                    isvalidfilter = true;
                }

                if (isvalidfilter) {
                    var datafield = column.displayfield;
                    this.addfilter(datafield, filtergroup, true);
                }
                else {
                    this._clearfilter(me, element, column);
                }
            }
            else {
                var that = this;
                var hasFilter = false;
                var widget = condition.data().jqxListBox.instance;
                var checkedItems = widget.getCheckedItems();
                if (checkedItems.length == 0) {
                    for (var i = 1; i < widget.items.length; i++) {
                        var filtervalue = widget.items[i].value;
                        var filtercondition = 'not_equal';
                    
                        var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition, null);
                        filtergroup.addfilter(0, filter);
                    }

                    hasFilter = true;
                }
                else {
                    if (checkedItems.length != widget.items.length) {
                        hasFilter = true;
                        for (var i = 0; i < checkedItems.length; i++) {
                            if (me.gridlocalization.filterselectallstring === checkedItems[i].value)
                                continue;

                            var filtervalue = checkedItems[i].value;
                            var filtercondition = 'equal';
            
                            var filter = filtergroup.createfilter(filtertype, filtervalue, filtercondition, null);
                            var filter_or_operator = 1;
                            filtergroup.addfilter(filter_or_operator, filter);
                        }
                    }
                    else hasFilter = false;
                }
                if (hasFilter) {
                    var datafield = column.displayfield;
                    this.addfilter(datafield, filtergroup, true);
                }
                else {
                    var datafield = column.displayfield;
                    this.removefilter(datafield, true);
                }
            }     
        },

        _clearfilter: function (me, element, column) {
            var datafield = column.displayfield;
            this.removefilter(datafield, true);
        },

        addfilter: function (datafield, filter, apply) {
            if (this._loading) {
                throw new Error('jqxGrid: ' + this.loadingerrormessage);
                return false;
            }

            var columnbydatafield = this.getcolumn(datafield);
            var _columnbydatafield = this._getcolumn(datafield);
            if (columnbydatafield == undefined || columnbydatafield == null)
                return;

            columnbydatafield.filter = filter;
            _columnbydatafield.filter = filter;

            this.dataview.addfilter(datafield, filter);
            if (apply == true && apply != undefined) {
                this.applyfilters('add');
            }
        },

        // removes a filter.
        removefilter: function (datafield, apply) {
            if (this._loading) {
                throw new Error('jqxGrid: ' + this.loadingerrormessage);
                return false;
            }

            var columnbydatafield = this.getcolumn(datafield);
            var _columnbydatafield = this._getcolumn(datafield);
            if (columnbydatafield == undefined || columnbydatafield == null)
                return;

            if (columnbydatafield.filter == null)
                return;

            this.dataview.removefilter(datafield, columnbydatafield.filter);
            columnbydatafield.filter = null;
            _columnbydatafield.filter = null;

            if (apply == true || apply !== false) {
                this.applyfilters('remove');
            }
        },

        applyfilters: function (reason) {
            var customfilter = false;

            if (this.dataview.filters.length >= 0 && (this.virtualmode || !this.source.localdata)) {
                if (this.source != null && this.source.filter) {
                    var tmppage = -1;
                    if (this.pageable) {
                        tmppage = this.dataview.pagenum;
                        this.dataview.pagenum = 0;
                    }
                    else {
                        this.vScrollInstance.setPosition(0);
                        this.loadondemand = true;
                        this._renderrows(this.virtualsizeinfo);
                    }

                    if (this.pageable && this.virtualmode) {
                        this.dataview.pagenum = 0;
                    }
                    this.source.filter(this.dataview.filters, this.dataview.records, this.dataview.records.length);
                    if (this.pageable && !this.virtualmode) {
                        this.dataview.pagenum = tmppage;
                    }
                }
            }
            if (this.dataview.clearsortdata) {
                this.dataview.clearsortdata();
            }
            if (!this.virtualmode) {
                var selectedrowindexes = this.selectedrowindexes;
                var me = this.that;
                this.dataview.refresh();
                if (this.dataview.clearsortdata) {
                    if (this.sortcolumn && this.sortdirection) {
                        var sortdirection = this.sortdirection.ascending ? "asc" : "desc";
                        if (!this._loading) {
                            this.sortby(this.sortcolumn, sortdirection, null, false);
                        }
                        else {
                            this.sortby(this.sortcolumn, sortdirection, null, false, false);
                        }
                    }
                }

            }
            else {
                if (this.pageable) {
                    this.dataview.updateview();
                    if (this.gotopage) {
                        this.gotopage(0);
                    }
                }
                this.rendergridcontent(false, false);
                if (this.showfilterrow) {
                    if (typeof reason != 'string' && $.isEmptyObject(reason)) {
                        this.refreshfilterrow();
                    }
                }
                this._raiseEvent(13, { filters: this.dataview.filters });
                return;
            }

            if (this.pageable) {
                this.dataview.updateview();
                if (this.gotopage) {
                    this.gotopage(0);
                    this.updatepagerdetails();
                }
            }
            this._updaterowsproperties();
            if (!this.groupable || (this.groupable && this.groups.length == 0)) {
                this._rowdetailscache = new Array();
                this.virtualsizeinfo = null;
                this._pagescache = new Array();
                if (this.columns && this.columns.records && this.columns.records.length > 0 && !this.columns.records[0].filtericon) {
                    this.prerenderrequired = true;
                }
                // it is not necessary to update the columns and that's why the second param is false.
                this.rendergridcontent(true, false);
                this._updatecolumnwidths();
                this._updatecellwidths();
                this._renderrows(this.virtualsizeinfo);
                if (this.showaggregates && this._updatecolumnsaggregates) {
                    this._updatecolumnsaggregates();
                }
            }
            else {
                this._rowdetailscache = new Array();
                this._render(true, true, false, false, false);
                if (this.showfilterrow) this._updatefocusedfilter();
                this._updatecolumnwidths();
                this._updatecellwidths();
                this._renderrows(this.virtualsizeinfo);
            }
            if (this.showfilterrow) {
                if (typeof reason != 'string' && $.isEmptyObject(reason)) {
                    this.refreshfilterrow();
                }
            }

            this._raiseEvent(13, { filters: this.dataview.filters });
        },

        getfilterinformation: function () {
            var filters = new Array();
            for (var i = 0; i < this.dataview.filters.length; i++) {
                var column = this.getcolumn(this.dataview.filters[i].datafield);
                filters[i] = { filter: this.dataview.filters[i].filter, filtercolumn: column.datafield, filtercolumntext: column.text };
            }
            return filters;
        },

        clearfilters: function (apply) {
            var me = this.that;
            if (this.showfilterrow) {
                this.clearfilterrow();
            }

            if (this.columns.records) {
                var canApply = apply == true || apply !== false;
                $.each(this.columns.records, function () {
                    me.removefilter(this.displayfield, !canApply);
                });
            }

            if (apply === false)
                return;

            if (apply == true || apply !== false) {
                this.applyfilters('clear');
            }
        },

        _destroyfilterpanel: function () {
            var clearbutton = $($.find('#filterclearbutton' + this.element.id));
            var filterbutton = $($.find('#filterbutton' + this.element.id));
            var condition = $($.find('#filter1' + this.element.id));
            var filteroperator = $($.find('#filter2' + this.element.id));
            var condition2 = $($.find('#filter3' + this.element.id));
            var input1 = $($.find('.filtertext1' + this.element.id));
            var input2 = $($.find('.filtertext2' + this.element.id));
            if (input1.length > 0 && input2.length > 0) {
                input1.removeClass();
                input2.removeClass();
                input1.remove();
                input2.remove();
            }

            if (clearbutton.length > 0) {
                clearbutton.jqxButton('destroy');
                filterbutton.jqxButton('destroy');
                this.removeHandler(clearbutton, 'click');
                this.removeHandler(filterbutton, 'click');
            }

            if (condition.length > 0) {
                condition.jqxDropDownList('destroy');
            }
            if (filteroperator.length > 0) {
                filteroperator.jqxDropDownList('destroy');
            }
            if (condition2.length > 0) {
                condition2.jqxDropDownList('destroy');
            }
        },

        _initfilterpanel: function (me, element, column, width) {
            if (me == null || me == undefined) me = this;
            element[0].innerHTML = "";
            var filterpanelcontainer = $("<div class='filter' style='margin-left: 7px;'></div>");

            element.append(filterpanelcontainer);
            var showwhere = $("<div class='filter' style='margin-top: 3px; margin-bottom: 3px;'></div>");
            showwhere.text(me.gridlocalization.filtershowrowstring);
            var condition = $("<div class='filter' id='filter1" + me.element.id + "'></div>");
            var operator = $("<div class='filter' id='filter2" + me.element.id + "' style='margin-bottom: 3px;'></div>");
            var condition2 = $("<div class='filter' id='filter3" + me.element.id + "'></div>");
            var type = me._getcolumntypebydatafield(column);

            if (!condition.jqxDropDownList) {
                throw new Error('jqxGrid: jqxdropdownlist.js is not loaded.');
                return;
            }

            var source = me._getfiltersbytype(type);

            var input = $("<div class='filter'><input class='filtertext1" + me.element.id + "' style='height: 20px; margin-top: 3px; margin-bottom: 3px;' type='text'></input></div>");
            var textField = input.find('input');
            textField.addClass(this.toThemeProperty('jqx-input'));
            textField.addClass(this.toThemeProperty('jqx-widget-content'));
            textField.addClass(this.toThemeProperty('jqx-rc-all'));
            textField.width(width - 15);
            var input2 = $("<div class='filter'><input class='filtertext2" + me.element.id + "' style='height: 20px; margin-top: 3px;' type='text'></input></div>");
            var textField2 = input2.find('input');
            textField2.addClass(this.toThemeProperty('jqx-input'));
            textField2.addClass(this.toThemeProperty('jqx-widget-content'));
            textField2.addClass(this.toThemeProperty('jqx-rc-all'));
            textField2.width(width - 15);

            if (me.rtl) {
                textField.css('direction', 'rtl');
                textField2.css('direction', 'rtl');
            }

            var applyinput = $("<div class='filter' style='height: 25px; margin-left: 20px; margin-top: 7px;'></div>");
            var filterbutton = $('<span tabIndex=0 id="filterbutton' + me.element.id + '" class="filterbutton" style="padding: 4px 12px; margin-left: 2px;">' + me.gridlocalization.filterstring + '</span>');
            applyinput.append(filterbutton);
            var filterclearbutton = $('<span tabIndex=0 id="filterclearbutton' + me.element.id + '" class="filterclearbutton" style="padding: 4px 12px; margin-left: 5px;">' + me.gridlocalization.filterclearstring + '</span>');
            applyinput.append(filterclearbutton);

            filterbutton.jqxButton({ height: 20, theme: me.theme });
            filterclearbutton.jqxButton({ height: 20, theme: me.theme });

            var selectionrenderer = function (selectionelement) {
                if (selectionelement) {
                    if (selectionelement.text().indexOf("case sensitive") != -1) {
                        var selectiontext = selectionelement.text();
                        selectiontext = selectiontext.replace("case sensitive", "match case");
                        selectionelement.text(selectiontext);
                    }
                    selectionelement.css('font-family', me.host.css('font-family'));
                    selectionelement.css('font-size', me.host.css('font-size'));

                    return selectionelement;
                }
                return "";
            }

            if (this.filtermode === "default") {
                filterpanelcontainer.append(showwhere);
                filterpanelcontainer.append(condition);
                condition.jqxDropDownList({ _checkForHiddenParent: false, rtl: me.rtl, enableBrowserBoundsDetection: false, selectedIndex: 2, width: width - 15, height: 20, dropDownHeight: 150, dropDownWidth: width - 15, selectionRenderer: selectionrenderer, source: source, theme: me.theme });
                filterpanelcontainer.append(input);
                var operators = new Array();
                operators[0] = me.gridlocalization.filterandconditionstring;
                operators[1] = me.gridlocalization.filterorconditionstring;
                operator.jqxDropDownList({ _checkForHiddenParent: false, rtl: me.rtl, enableBrowserBoundsDetection: false, autoDropDownHeight: true, selectedIndex: 0, width: 60, height: 20, source: operators, selectionRenderer: selectionrenderer, theme: me.theme });
                filterpanelcontainer.append(operator);
                condition2.jqxDropDownList({ _checkForHiddenParent: false, rtl: me.rtl, enableBrowserBoundsDetection: false, selectedIndex: 2, width: width - 15, height: 20, dropDownHeight: 150, dropDownWidth: width - 15, selectionRenderer: selectionrenderer, source: source, theme: me.theme });
                filterpanelcontainer.append(condition2);
                filterpanelcontainer.append(input2);
            }
            else {
                filterpanelcontainer.append(showwhere);
                filterpanelcontainer.append(condition);
                condition.jqxListBox({ rtl: me.rtl, _checkForHiddenParent: false, checkboxes: true, selectedIndex: 2, width: width - 15, height: 120, theme: me.theme });
                var handleCheckChange = true;
                me.addHandler(condition, 'checkChange', function (event) {
                    if (!handleCheckChange)
                        return;

                    if (event.args.label != me.gridlocalization.filterselectallstring) {
                        handleCheckChange = false;
                        condition.jqxListBox('checkIndex', 0, true, false);
                        var checkedItems = condition.jqxListBox('getCheckedItems');
                        var items = condition.jqxListBox('getItems');

                        if (checkedItems.length == 1) {
                            condition.jqxListBox('uncheckIndex', 0, true, false);
                        }
                        else if (items.length != checkedItems.length) {
                            condition.jqxListBox('indeterminateIndex', 0, true, false);
                        }
                        handleCheckChange = true;
                    }
                    else {
                        handleCheckChange = false;
                        if (event.args.checked) {
                            condition.jqxListBox('checkAll', false);
                        }
                        else {
                            condition.jqxListBox('uncheckAll', false);
                        }

                        handleCheckChange = true;
                    }
                });
            }

            filterpanelcontainer.append(applyinput);
            if (me.updatefilterpanel) {
                me.updatefilterpanel(condition, condition2, operator, input, input2, filterbutton, filterclearbutton, null, null, source);
            }
        }
    });
})(jQuery);



/*
 * file from "src\jqxgrid.sort.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
    $.jqx.dataview.sort = function () {
        this.sortby = function (field, ascending, comparer) {
            var tmpToString = Object.prototype.toString;
            if (ascending == null) {
                this.sortdata = null;
                this.refresh();
                return;
            }

            if (ascending == undefined) {
                ascending = true;
            }

            if (ascending == 'a' || ascending == 'asc' || ascending == 'ascending' || ascending == true) {
                ascending = true;
            }
            else {
                ascending = false;
            }

            var lookupkey = field;
            this.sortfield = field;
            this.sortfielddirection = ascending ? "asc" : "desc";

            if (this.sortcache == undefined) {
                this.sortcache = {};
            }

            this.sortdata = [];
            var _sortdata = [];
            var sorted = false;
            if (lookupkey == 'constructor') lookupkey = "";

            if (!this.virtualmode && this.sortcache[lookupkey] != null) {
                var cache = this.sortcache[lookupkey];
                _sortdata = cache._sortdata;

                if (cache.direction == ascending) {
                    _sortdata.reverse();
                }
                else {
                    if (!cache.direction && ascending) {
                        _sortdata.reverse();
                    }

                    sorted = true;
                }

                if (_sortdata.length < this.totalrecords) {
                    this.sortcache = {};
                    sorted = false;
                    _sortdata = [];
                }
            }

            Object.prototype.toString = (typeof field == "function") ? field : function () { return this[field] };
            var records = this.records;

            var me = this.that;

            var datatype = '';

            if (this.source.datafields) {
                $.each(this.source.datafields, function () {
                    if (this.name == field) {
                        if (this.type) {
                            datatype = this.type;
                        }
                        return false;
                    }
                });
            }

            if (_sortdata.length == 0) {
                if (records.length) {
                    var length = records.length;
                    // tries to loop through the records with for loop for better performance.
                    for (var i = 0; i < length; i++) {
                        var record = records[i];
                        if (record != null) {
                            var recordvalue = record;
                            var sortkey = recordvalue.toString();
                            _sortdata.push({ sortkey: sortkey, value: recordvalue, index: i });
                        }
                    }
                }
                else {
                    var caniterate = false;
                    // tries to loop through the records with for..in for better performance.
                    for (obj in records) {
                        var record = records[obj];
                        if (record == undefined) {
                            caniterate = true;
                            break;
                        }

                        var recordvalue = record;
                        _sortdata.push({ sortkey: recordvalue.toString(), value: recordvalue, index: obj });
                    }

                    if (caniterate) {
                        $.each(records, function (i, value) {
                            _sortdata.push({ sortkey: value.toString(), value: value, index: i });
                        });
                    }
                }
            }

            if (!sorted) {
                if (comparer == null) {
                    this._sortcolumntype = datatype;
                    var that = this;
                    _sortdata.sort(function (value1, value2) {
                        return that._compare(value1, value2, datatype);
                    });
                }
                else {
                    _sortdata.sort(comparer);
                }
            }

            if (!ascending) {
                _sortdata.reverse();
            }

            Object.prototype.toString = tmpToString;
            this.sortdata = _sortdata;

            this.sortcache[lookupkey] = { _sortdata: _sortdata, direction: ascending };
            this.reload(this.records, this.rows, this.filters, this.updated, true);
        },

        this.clearsortdata = function () {
            this.sortcache = {};
            this.sortdata = null;
        }

        this._compare = function (value1, value2, type) {
            var value1 = value1.sortkey;
            var value2 = value2.sortkey;
            if (value1 === undefined) { value1 = null; }
            if (value2 === undefined) { value2 = null; }
            if (value1 === null && value2 === null) {
                return 0;
            }
            if (value1 === null && value2 !== null) {
                return -1;
            }
            if (value1 !== null && value2 === null) {
                return 1;
            }

            if ($.jqx.dataFormat) {
                if (type && type != "") {
                    switch (type) {
                        case "number":
                        case "int":
                        case "float":
                            if (value1 < value2) { return -1; }
                            if (value1 > value2) { return 1; }
                            return 0;
                        case "date":
                        case "time":
                            if (value1 < value2) { return -1; }
                            if (value1 > value2) { return 1; }
                            return 0;
                        case "string":
                        case "text":
                            value1 = String(value1).toLowerCase();
                            value2 = String(value2).toLowerCase();
                            break;
                    }
                }
                else {
                    if ($.jqx.dataFormat.isNumber(value1) && $.jqx.dataFormat.isNumber(value2)) {
                        if (value1 < value2) { return -1; }
                        if (value1 > value2) { return 1; }
                        return 0;
                    }
                    else if ($.jqx.dataFormat.isDate(value1) && $.jqx.dataFormat.isDate(value2)) {
                        if (value1 < value2) { return -1; }
                        if (value1 > value2) { return 1; }
                        return 0;
                    }
                    else if (!$.jqx.dataFormat.isNumber(value1) && !$.jqx.dataFormat.isNumber(value2)) {
                        value1 = String(value1).toLowerCase();
                        value2 = String(value2).toLowerCase();
                    }
                }
            }
            try {
                if (value1 < value2) { return -1; }
                if (value1 > value2) { return 1; }
            }
            catch (error) {
                var er = error;
            }

            return 0;
        };

        this._equals = function (value1, value2) {
            return (this._compare(value1, value2) === 0);
        };
    }

    $.extend($.jqx._jqxGrid.prototype, {
        //[optimize]
        _rendersortcolumn: function () {
            var self = this.that;
            var sortcolumn = this.getsortcolumn();

            if (this.sortdirection) {
                var ariaFunc = function (column, direction) {
                    var sortc = self.getcolumn(column);
                    if (sortc) {
                        if (direction.ascending) {
                            $.jqx.aria(sortc.element, "aria-sort", "ascending");
                        }
                        else if (direction.descending) {
                            $.jqx.aria(sortc.element, "aria-sort", "descending");
                        } else {
                            $.jqx.aria(sortc.element, "aria-sort", "none");
                        }
                    }
                }
                if (this._oldsortinfo) {
                    if (this._oldsortinfo.column) {
                        ariaFunc(this._oldsortinfo.column, { ascending: false, descending: false });
                    }
                }
                ariaFunc(sortcolumn, this.sortdirection);

            }
            this._oldsortinfo = { column: sortcolumn, direction: this.sortdirection };

            if (this.sortdirection) {
                $.each(this.columns.records, function (i, value) {
                    var groupingsortelements = $.data(document.body, "groupsortelements" + this.displayfield);

                    if (sortcolumn == null || this.displayfield != sortcolumn) {
                        $(this.sortasc).hide();
                        $(this.sortdesc).hide();

                        if (groupingsortelements != null) {
                            groupingsortelements.sortasc.hide();
                            groupingsortelements.sortdesc.hide();
                        }
                    }
                    else {
                        if (self.sortdirection.ascending) {
                            $(this.sortasc).show();
                            $(this.sortdesc).hide();
                            if (groupingsortelements != null) {
                                groupingsortelements.sortasc.show();
                                groupingsortelements.sortdesc.hide();
                            }
                        }
                        else {
                            $(this.sortasc).hide();
                            $(this.sortdesc).show();
                            if (groupingsortelements != null) {
                                groupingsortelements.sortasc.hide();
                                groupingsortelements.sortdesc.show();
                            }
                        }
                    }
                });
            }
        },

        // gets the sort column.
        getsortcolumn: function () {
            if (this.sortcolumn != undefined) {
                return this.sortcolumn;
            }

            return null;
        },
        // removes the sorting.
        removesort: function () {
            this.sortby(null);
        },

        // sorts by a column.
        sortby: function (datafield, sortdirection, comparer, refresh, checkloading) {
            if (this._loading && checkloading !== false) {
                throw new Error('jqxGrid: ' + this.loadingerrormessage);
                return false;
            }

            // clear the sorting.
            if (datafield == null) {
                sortdirection = null;
                datafield = this.sortcolumn;
            }

            if (datafield != undefined) {
                var self = this.that;
                if (comparer == undefined && self.source.sortcomparer != null) {
                    comparer = self.source.sortcomparer;
                }

                if (sortdirection == 'a' || sortdirection == 'asc' || sortdirection == 'ascending' || sortdirection == true) {
                    ascending = true;
                }
                else {
                    ascending = false;
                }

                //var columnbydatafield = self.getcolumn(datafield);
                //if (columnbydatafield == undefined || columnbydatafield == null)
                //    return;

                if (sortdirection != null) {
                    self.sortdirection = { 'ascending': ascending, 'descending': !ascending };
                }
                else {
                    self.sortdirection = { 'ascending': false, 'descending': false };
                }

                if (sortdirection != null) {
                    self.sortcolumn = datafield;
                }
                else {
                    self.sortcolumn = null;
                }

                if (self.source.sort || self.virtualmode) {
                    self.dataview.sortfield = datafield;
                    if (sortdirection == null) {
                        self.dataview.sortfielddirection = "";
                    }
                    else {
                        self.dataview.sortfielddirection = ascending ? "asc" : "desc";
                    }
                    if (self.source.sort && !this._loading) {
                        self.source.sort(datafield, sortdirection);
                        self._raiseEvent(6, { sortinformation: self.getsortinformation() });
                        return;
                    }
                }
                else {
                    self.dataview.sortby(datafield, sortdirection, comparer);
                }

                if (refresh === false) {
                    return;
                }

                // if grouping is enabled, we need to refresh the groups too.
                if (self.groupable && self.groups.length > 0) {
                    self._render(true, false, false);
                    if (self._updategroupheadersbounds && self.showgroupsheader) {
                        self._updategroupheadersbounds();
                    }
                }
                else {
                    if (self.pageable) {
                        self.dataview.updateview();
                    }
                    self._updaterowsproperties();
                    self.rendergridcontent(true);
                }
                self._raiseEvent(6, { sortinformation: self.getsortinformation() });
            }
        },

        _togglesort: function (column) {
            var self = this.that;
            if (this.disabled) {
                return;
            }

            if (column.sortable && self.sortable) {
                var sortinformation = self.getsortinformation();
                var checked = null;
                if (sortinformation.sortcolumn != null && sortinformation.sortcolumn == column.displayfield) {
                    checked = sortinformation.sortdirection.ascending;
                    if (self.sorttogglestates > 1) {
                        if (checked == true) {
                            checked = false;
                        }
                        else {
                            checked = null;
                        }
                    }
                    else {
                        checked = !checked;
                    }
                }
                else {
                    checked = true;
                }

                self.sortby(column.displayfield, checked, null);
            }
        }
    });
})(jQuery);



/*
 * file from "src\jqxgrid.pager.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
    $.extend($.jqx._jqxGrid.prototype, {
        _initpager: function () {
            var me = this.that;
            var pagergotopagestring = this.gridlocalization.pagergotopagestring;
            var pagerrangestring = this.gridlocalization.pagerrangestring;
            var pagershowrowsstring = this.gridlocalization.pagershowrowsstring;

            var top = (this.pagerheight - 17) / 2;

            this.pagerdiv = this.pagerdiv || $('<div style="width: 100%; height: 100%; position: relative;"></div>');
            if (!this.pageable) {
                this.pagerdiv.remove();
                this.vScrollBar.jqxScrollBar({ thumbSize: 0 });
                return;
            }

            if (!this.pagerrenderer) {
                this.pagerdiv.css('top', top);
                this.pager.append(this.pagerdiv);
                this.pagergotoinput = this.pagergotoinput || $('<div style="margin-right: 7px; width: 27px; height: 17px; float: right;"><input style="margin-top: 0px; text-align: right; width: 27px;" type="text"/></div>');
                this.pagergoto = this.pagergoto || $('<div style="float: right; margin-right: 7px;"></div>');
                this.pagerrightbutton = this.pagerrightbutton || $('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>');
                this.pagerleftbutton = this.pagerleftbutton || $('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>');
                this.pagerdetails = this.pagerdetails || $('<div style="margin-right: 7px; float: right;"></div>');
                this.pagershowrows = this.pagershowrows || $('<div style="margin-right: 7px; float: right;"></div>');
                this.pagerbuttons = $('<div style="margin-right: 3px; float: right;"></div>');
                if (this.pagershowrowscombo && this.pagershowrowscombo.jqxDropDownList) {
                    this.pagershowrowscombo.remove();
                    this.pagershowrowscombo = null;
                }
                this.pagergotoinput.attr('disabled', this.disabled);
                this.pagerfirstbutton = $('<div type="button" style="padding: 0px; margin-top: 0px; margin-left: 3px; margin-right: 3px; width: 27px; float: right;"></div>');
                this.pagerlastbutton = $('<div type="button" style="padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;"></div>');

                this.pagershowrowscombo = this.pagershowrowscombo || $('<div id="gridpagerlist" style="margin-top: 0px; margin-right: 7px; float: right;"></div>');
                this.pagerdiv.children().remove();
                this.pagershowrowscombo[0].id = "gridpagerlist" + this.element.id;
                this.removeHandler(this.pagerrightbutton, 'mousedown');
                this.removeHandler(this.pagerrightbutton, 'mouseup');
                this.removeHandler(this.pagerrightbutton, 'click');
                this.removeHandler(this.pagerleftbutton, 'mousedown');
                this.removeHandler(this.pagerleftbutton, 'mouseup');
                this.removeHandler(this.pagerleftbutton, 'click');
                this.removeHandler(this.pagerfirstbutton, 'mousedown');
                this.removeHandler(this.pagerfirstbutton, 'mouseup');
                this.removeHandler(this.pagerfirstbutton, 'click');
                this.removeHandler(this.pagerlastbutton, 'mousedown');
                this.removeHandler(this.pagerlastbutton, 'mouseup');
                this.removeHandler(this.pagerlastbutton, 'click');

                this.pagerleftbutton.attr('title', this.gridlocalization.pagerpreviousbuttonstring);
                this.pagerrightbutton.attr('title', this.gridlocalization.pagernextbuttonstring);

                if (this.pagermode == "simple") {
                    if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                        this.pagerbuttons.css('overflow', 'visible');
                        this.pagerbuttons.css('padding', '3px');
                    }

                    this.pagerfirstbutton.attr('title', this.gridlocalization.pagerfirstbuttonstring);
                    this.pagerlastbutton.attr('title', this.gridlocalization.pagerlastbuttonstring);
                    var firstarrow = $("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>");
                    firstarrow.addClass(this.toThemeProperty('jqx-icon-arrow-first'));
                    this.pagerfirstbutton.wrapInner(firstarrow);

                    var lastarrow = $("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>");
                    lastarrow.addClass(this.toThemeProperty('jqx-icon-arrow-last'));
                    this.pagerlastbutton.wrapInner(lastarrow);
                    if (!this.rtl) {
                        this.pagerdiv.append(this.pagerfirstbutton);
                        this.pagerdiv.append(this.pagerleftbutton);
                        this.pagerdiv.append(this.pagerbuttons);
                        this.pagerdiv.append(this.pagerrightbutton);
                        this.pagerdiv.append(this.pagerlastbutton);
                    }
                    else {
                        this.pagerdiv.append(this.pagerlastbutton);
                        this.pagerdiv.append(this.pagerrightbutton);
                        this.pagerdiv.append(this.pagerbuttons);
                        this.pagerdiv.append(this.pagerleftbutton);
                        this.pagerdiv.append(this.pagerfirstbutton);
                    }
                    this.pagerlastbutton.jqxButton({ cursor: 'pointer', disabled: this.disabled, theme: this.theme });
                    this.pagerfirstbutton.jqxButton({ cursor: 'pointer', disabled: this.disabled, theme: this.theme });
                    var floatMode = !this.rtl ? 'left' : 'right';
                    this.pagerbuttons.css('float', floatMode);
                    this.pagerlastbutton.css('float', floatMode);
                    this.pagerfirstbutton.css('float', floatMode);
                    this.pagerrightbutton.css('float', floatMode);
                    this.pagerleftbutton.css('float', floatMode);

                    this.pagerdetails.css('float', this.rtl ? 'left' : 'right');
                    if (this.rtl) {
                        this.pagerdetails.css('margin-left', '7px');
                        this.pagerdetails.css('margin-right', '0px');
                    }
                    else {
                        this.pagerdetails.css('margin-left', '0px');
                        this.pagerdetails.css('margin-right', '7px');
                    }

                    this.pagergotoinput.hide();
                    this.pagershowrowscombo.hide();
                    this.pagergoto.hide();
                    this.pagershowrows.hide();
                }
                else {
                    this.pagergotoinput.show();
                    this.pagershowrowscombo.show();
                    this.pagergoto.show();
                    this.pagershowrows.show();
                    if (!this.rtl) {
                        this.pagerdiv.append(this.pagerrightbutton);
                        this.pagerdiv.append(this.pagerleftbutton);
                    }
                }

                this.pagerrightbutton.jqxButton({ cursor: 'pointer', disabled: this.disabled, theme: this.theme });
                this.pagerleftbutton.jqxButton({ cursor: 'pointer', disabled: this.disabled, theme: this.theme });

                this.pagerleftbutton.find('.jqx-icon-arrow-left').remove();
                this.pagerrightbutton.find('.jqx-icon-arrow-right').remove();

                var leftarrow = $("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>");
                leftarrow.addClass(this.toThemeProperty('jqx-icon-arrow-left'));
                this.pagerleftbutton.wrapInner(leftarrow);

                var rightarrow = $("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>");
                rightarrow.addClass(this.toThemeProperty('jqx-icon-arrow-right'));
                this.pagerrightbutton.wrapInner(rightarrow);

                if (!this.rtl) {
                    this.pagerdiv.append(this.pagerdetails);
                }
                if (this.pagermode != "simple") {
                    if (!this.rtl) {
                        this.pagerdiv.append(this.pagershowrowscombo);
                        this.pagerdiv.append(this.pagershowrows);
                        this.pagerdiv.append(this.pagergotoinput);
                        this.pagerdiv.append(this.pagergoto);
                    }
                    else {
                        this.pagerdiv.append(this.pagergoto);
                        this.pagerdiv.append(this.pagergotoinput);
                        this.pagerdiv.append(this.pagershowrows);
                        this.pagerdiv.append(this.pagershowrowscombo);
                        this.pagerdiv.append(this.pagerdetails);
                        this.pagerdiv.append(this.pagerrightbutton);
                        this.pagerdiv.append(this.pagerleftbutton);

                    }
                }

                var source = this.pagesizeoptions;
                if (!this.pagershowrowscombo.jqxDropDownList) {
                    throw new Error('jqxGrid: jqxdropdownlist.js is not loaded.');
                    return;
                }

                this.pagershowrowscombo.jqxDropDownList({rtl: this.rtl, disabled: this.disabled, source: source, enableBrowserBoundsDetection: true, keyboardSelection: false, autoDropDownHeight: true, width: 'auto', height: 16, theme: this.theme });
                var selectedindex = 0;
                for (var i = 0; i < source.length; i++) {
                    if (this.pagesize >= source[i]) {
                        selectedindex = i;
                    }
                }
                this.pagershowrows[0].innerHTML = pagershowrowsstring;
                this.pagergoto[0].innerHTML = pagergotopagestring;
                this.updatepagerdetails();
                this.pagershowrowscombo.jqxDropDownList({ selectedIndex: selectedindex });
                this.pagerpageinput = this.pagergotoinput.find('input');
                this.pagerpageinput.addClass(this.toThemeProperty('jqx-input'));
                this.pagerpageinput.addClass(this.toThemeProperty('jqx-widget-content'));
                if (this.rtl) {
                    this.pagerpageinput.css('direction', 'rtl');
                }

                var me = this.that;
                this.removeHandler(this.pagershowrowscombo, 'select');
                this.addHandler(this.pagershowrowscombo, 'select', function (event) {
                    if (event.args) {
                        if (me.vScrollInstance) {
                            me.vScrollInstance.setPosition(0);
                        }

                        if (me.editcell != null && me.endcelledit) {
                            me.endcelledit(me.editcell.row, me.editcell.column, true, false);
                        }

                        var index = event.args.index;
                        var recordindex = me.dataview.pagenum * me.dataview.pagesize;
                        var pagesize = source[index];
                        var oldpagesize = me.pagesize;
                        me.pagesize = parseInt(pagesize);
                        if (isNaN(me.pagesize)) {
                            me.pagesize = 10;
                        }
                        if (pagesize >= 100) {
                            me.pagershowrowscombo.jqxDropDownList({ width: 'auto' });
                        }
                        else {
                            me.pagershowrowscombo.jqxDropDownList({ width: 44 });
                        }

                        me.dataview.pagesize = me.pagesize;
                        var pagenum = Math.floor(recordindex / me.dataview.pagesize);
                        me.prerenderrequired = true;
                        me._requiresupdate = true;
                        me._raiseEvent(10, { pagenum: pagenum, oldpagesize: oldpagesize, pagesize: me.dataview.pagesize });
                        me.gotopage(pagenum);
                        if (me.autoheight && me._updatesizeonwindowresize) {
                            me._updatesize(true);
                            setTimeout(function () {
                                me._updatesize(true);
                            }, 500);
                        }
                    }
                });

                var input = this.pagergotoinput.find('input');
                input.addClass(this.toThemeProperty('jqx-grid-pager-input'));
                input.addClass(this.toThemeProperty('jqx-rc-all'));
                this.removeHandler(input, 'keydown');
                this.removeHandler(input, 'change');
        
                this.addHandler(input, 'keydown', function (event) {
                    if (event.keyCode >= 65 && event.keyCode <= 90)
                        return false;

                    if (event.keyCode == '13') {
                        var val = input.val();
                        val = parseInt(val);
                        if (!isNaN(val)) {
                            me.gotopage(val - 1);
                        }
                        return false;
                    }
                });
                this.addHandler(input, 'change', function () {
                    var val = input.val();
                    val = parseInt(val);
                    if (!isNaN(val)) {
                        me.gotopage(val - 1);
                    }
                });

                this.addHandler(this.pagerrightbutton, 'mouseenter', function () {
                    rightarrow.addClass(me.toThemeProperty('jqx-icon-arrow-right-hover'));
                });

                this.addHandler(this.pagerleftbutton, 'mouseenter', function () {
                    leftarrow.addClass(me.toThemeProperty('jqx-icon-arrow-left-hover'));
                });

                this.addHandler(this.pagerrightbutton, 'mouseleave', function () {
                    rightarrow.removeClass(me.toThemeProperty('jqx-icon-arrow-right-hover'));
                });

                this.addHandler(this.pagerleftbutton, 'mouseleave', function () {
                    leftarrow.removeClass(me.toThemeProperty('jqx-icon-arrow-left-hover'));
                });

                this.addHandler(this.pagerrightbutton, 'mousedown', function () {
                    rightarrow.addClass(me.toThemeProperty('jqx-icon-arrow-right-selected'));
                });

                this.addHandler(this.pagerrightbutton, 'mouseup', function () {
                    rightarrow.removeClass(me.toThemeProperty('jqx-icon-arrow-right-selected'));
                });

                this.addHandler(this.pagerleftbutton, 'mousedown', function () {
                    leftarrow.addClass(me.toThemeProperty('jqx-icon-arrow-left-selected'));
                });

                this.addHandler(this.pagerleftbutton, 'mouseup', function () {
                    leftarrow.removeClass(me.toThemeProperty('jqx-icon-arrow-left-selected'));
                });

                this.addHandler($(document), 'mouseup.pagerbuttons' + this.element.id, function () {
                    rightarrow.removeClass(me.toThemeProperty('jqx-icon-arrow-right-selected'));
                    leftarrow.removeClass(me.toThemeProperty('jqx-icon-arrow-left-selected'));
                });

                this.addHandler(this.pagerrightbutton, 'click', function () {
                    if (!me.pagerrightbutton.jqxButton('disabled')) {
                        if (!me.rtl) {
                            me.gotonextpage();
                        }
                        else {
                            me.gotoprevpage();
                        }
                    }
                });
                this.addHandler(this.pagerleftbutton, 'click', function () {
                    if (!me.pagerleftbutton.jqxButton('disabled')) {
                        if (!me.rtl) {
                            me.gotoprevpage();
                        }
                        else {
                            me.gotonextpage();
                        }
                    }
                });

                var that = this;
                if (this.pagermode === "simple") {
                    var first = this.pagerfirstbutton;
                    var last = this.pagerlastbutton;

                    this.addHandler(last, 'mouseenter', function () {
                        lastarrow.addClass(that.toThemeProperty('jqx-icon-arrow-last-hover'));
                    });

                    this.addHandler(first, 'mouseenter', function () {
                        firstarrow.addClass(that.toThemeProperty('jqx-icon-arrow-first-hover'));
                    });

                    this.addHandler(last, 'mouseleave', function () {
                        lastarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-last-hover'));
                    });

                    this.addHandler(first, 'mouseleave', function () {
                        firstarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-first-hover'));
                    });

                    this.addHandler(last, 'mousedown', function () {
                        lastarrow.addClass(that.toThemeProperty('jqx-icon-arrow-last-selected'));
                    });

                    this.addHandler(first, 'mousedown', function () {
                        firstarrow.addClass(that.toThemeProperty('jqx-icon-arrow-first-selected'));
                    });

                    this.addHandler(last, 'mouseup', function () {
                        lastarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-last-selected'));
                    });

                    this.addHandler(first, 'mouseup', function () {
                        firstarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-first-selected'));
                    });
                    this.addHandler($(document), 'mouseup.pagerbuttons' + name + this.element.id, function () {
                        rightarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-right-selected'));
                        leftarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-left-selected'));
                        if (lastarrow) {
                            lastarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-last-selected'));
                            firstarrow.removeClass(that.toThemeProperty('jqx-icon-arrow-first-selected'));
                        }
                    });
                    this.addHandler(first, 'click', function () {
                        if (!first.jqxButton('disabled')) {
                            if (!that.rtl) {
                                that.gotopage(0);
                            }
                            else {
                                var totalrecords = that.dataview.totalrecords;
                                var pages = Math.ceil(totalrecords / that.pagesize);
                                that.gotopage(pages - 1);
                            }
                        }
                    });
                    this.addHandler(last, 'click', function () {
                        if (!last.jqxButton('disabled')) {
                            if (!that.rtl) {
                                var totalrecords = that.dataview.totalrecords;
                                var pages = Math.ceil(totalrecords / that.pagesize);
                                that.gotopage(pages - 1);
                            }
                            else {
                                that.gotopage(0);
                            }
                        }
                    });
                }
            }
            else {
                this.pagerdiv.children().remove();
                var element = this.pagerrenderer();
                if (element != null) {
                    this.pagerdiv.append($(element));
                }
                this.pager.append(this.pagerdiv);
            }

        //    this.vScrollBar.jqxScrollBar({ thumbSize: this.host.height() / 5 });
            this.vScrollBar.jqxScrollBar('refresh');
            this._arrange();
        },

        _updatepagertheme: function () {
            if (this.pagershowrowscombo == null)
                return;

            this.pagershowrowscombo.jqxDropDownList({ theme: this.theme });
            this.pagerrightbutton.jqxButton({ theme: this.theme });
            this.pagerleftbutton.jqxButton({ theme: this.theme });

            this.pagerpageinput.removeClass();

            var input = this.pagergotoinput.find('input');
            input.removeClass();
            input.addClass(this.toThemeProperty('jqx-grid-pager-input'));
            input.addClass(this.toThemeProperty('jqx-rc-all'));
            this.pagerpageinput.addClass(this.toThemeProperty('jqx-input'));
            this.pagerpageinput.addClass(this.toThemeProperty('jqx-widget-content'));

            this.pagerleftbutton.find('.jqx-icon-arrow-left').remove();
            this.pagerrightbutton.find('.jqx-icon-arrow-right').remove();

            var leftarrow = $("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>");
            leftarrow.addClass(this.toThemeProperty('jqx-icon-arrow-left'));
            this.pagerleftbutton.wrapInner(leftarrow);

            var rightarrow = $("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>");
            rightarrow.addClass(this.toThemeProperty('jqx-icon-arrow-right'));
            this.pagerrightbutton.wrapInner(rightarrow);

            if (this.pagermode == "simple") {
                if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                    this.pagerbuttons.css('overflow', 'visible');
                    this.pagerbuttons.css('padding', '3px');
                }

                this.pagerfirstbutton.attr('title', this.gridlocalization.pagerfirstbuttonstring);
                this.pagerlastbutton.attr('title', this.gridlocalization.pagerlastbuttonstring);
                var firstarrow = $("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>");
                firstarrow.addClass(this.toThemeProperty('jqx-icon-arrow-first'));
                this.pagerfirstbutton.wrapInner(firstarrow);

                var lastarrow = $("<div style='margin-left: 6px; width: 15px; height: 15px;'></div>");
                lastarrow.addClass(this.toThemeProperty('jqx-icon-arrow-last'));
                this.pagerlastbutton.wrapInner(lastarrow);
                this.pagerdiv.append(this.pagerfirstbutton);
                this.pagerdiv.append(this.pagerleftbutton);
                this.pagerdiv.append(this.pagerbuttons);
                this.pagerdiv.append(this.pagerrightbutton);
                this.pagerdiv.append(this.pagerlastbutton);
                this.pagerlastbutton.jqxButton({ cursor: 'pointer', disabled: this.disabled, theme: this.theme });
                this.pagerfirstbutton.jqxButton({ cursor: 'pointer', disabled: this.disabled, theme: this.theme });
                this.pagerbuttons.css('float', 'left');
                this.pagerlastbutton.css('float', 'left');
                this.pagerfirstbutton.css('float', 'left');
                this.pagerrightbutton.css('float', 'left');
                this.pagerleftbutton.css('float', 'left');
                this.pagergotoinput.hide();
                this.pagershowrowscombo.hide();
                this.pagergoto.hide();
                this.pagershowrows.hide();
            }
            else {
                this.pagergotoinput.show();
                this.pagershowrowscombo.show();
                this.pagergoto.show();
                this.pagershowrows.show();
            }

            var removeHandlers = function (me, button) {
                me.removeHandler(button, 'mouseenter');
                me.removeHandler(button, 'mouseleave');
                me.removeHandler(button, 'mousedown');
                me.removeHandler(button, 'mouseup');
            }
            removeHandlers(this, this.pagerrightbutton);
            removeHandlers(this, this.pagerleftbutton);
            var me = this.that;
            this.addHandler(this.pagerrightbutton, 'mouseenter', function () {
                rightarrow.addClass(me.toThemeProperty('jqx-icon-arrow-right-hover'));
            });

            this.addHandler(this.pagerleftbutton, 'mouseenter', function () {
                leftarrow.addClass(me.toThemeProperty('jqx-icon-arrow-left-hover'));
            });

            this.addHandler(this.pagerrightbutton, 'mouseleave', function () {
                rightarrow.removeClass(me.toThemeProperty('jqx-icon-arrow-right-hover'));
            });

            this.addHandler(this.pagerleftbutton, 'mouseleave', function () {
                leftarrow.removeClass(me.toThemeProperty('jqx-icon-arrow-left-hover'));
            });

            this.addHandler(this.pagerrightbutton, 'mousedown', function () {
                rightarrow.addClass(me.toThemeProperty('jqx-icon-arrow-right-selected'));
            });

            this.addHandler(this.pagerrightbutton, 'mouseup', function () {
                rightarrow.removeClass(me.toThemeProperty('jqx-icon-arrow-right-selected'));
            });

            this.addHandler(this.pagerleftbutton, 'mousedown', function () {
                leftarrow.addClass(me.toThemeProperty('jqx-icon-arrow-left-selected'));
            });

            this.addHandler(this.pagerleftbutton, 'mouseup', function () {
                leftarrow.removeClass(me.toThemeProperty('jqx-icon-arrow-left-selected'));
            });
        },

        gotopage: function (pagenum) {
            if (pagenum == null || pagenum == undefined)
                pagenum = 0;

            if (pagenum == -1)
                pagenum = 0;

            if (pagenum < 0)
                return;

            var totalrecords = this.dataview.totalrecords;
            if (this.summaryrows) {
                totalrecords += this.summaryrows.length;
            }

            var oldpagenum = this.pagenum;
            this._raiseEvent(25, { oldpagenum: this.dataview.pagenum, pagenum: pagenum, pagesize: this.dataview.pagesize });

            var pages = Math.ceil(totalrecords / this.pagesize);
            if (pagenum >= pages) {
                if (this.dataview.totalrecords == 0) {
                    this.dataview.pagenum = 0;
                    this.updatepagerdetails();
                }
                if (pagenum > 0) {
                    pagenum = pages - 1;
                }
            }

            if (this.dataview.pagenum != pagenum || this._requiresupdate) {
                if (this.pageable) {
                    if (this.source.pager) {
                        this.source.pager(pagenum, this.dataview.pagesize, this.dataview.pagenum);
                    }

                    this.dataview.pagenum = pagenum;

                    if (this.virtualmode) {
                        this.hiddens = new Array();
                        this.expandedgroups = new Array();
                        if (this.rendergridrows) {
                            var startboundindex = pagenum * this.dataview.pagesize;
                            var endboundindex = startboundindex + this.dataview.pagesize;
                            if (startboundindex != null && endboundindex != null) {
                                if (this.pagerrightbutton) {
                                    this.pagerrightbutton.jqxButton({ disabled: true });
                                    this.pagerleftbutton.jqxButton({ disabled: true });
                                    this.pagershowrowscombo.jqxDropDownList({ disabled: true });
                                }
                                this.updatebounddata('pagechanged');
                                this._raiseEvent(9, { pagenum: pagenum, oldpagenum: oldpagenum, pagesize: this.dataview.pagesize });
                                this.updatepagerdetails();
                                if (this.autosavestate) {
                                    if (this.savestate) this.savestate();
                                }
                                return;
                            }
                        }
                    }
                    else this.dataview.updateview();

                    this._loadrows();

                    this._updatepageviews();
                    this.tableheight = null;
                    this._updatecolumnwidths();
                    this._updatecellwidths();
                    this._renderrows(this.virtualsizeinfo);
                    this.updatepagerdetails();
                    if (this.autoheight || this.autorowheight) {
                        var newheight = this.host.height() - this._gettableheight();
                        height = newheight + this._pageviews[0].height;
                        if (height != this.host.height()) {
                            this._arrange();
                            this._updatepageviews();
                            if (this.autorowheight) {
                                this._renderrows(this.virtualsizeinfo);
                            }
                        }
                    }

                    if (this.editcell != null && this.endcelledit) {
                        this.endcelledit(this.editcell.row, this.editcell.column, true, false);
                    }

                    this._raiseEvent(9, { pagenum: pagenum, oldpagenum: oldpagenum, pagesize: this.dataview.pagesize });
                    if (this.autosavestate) {
                        if (this.savestate) this.savestate();
                    }
                }
            }
        },

        // goes to a previous page.
        gotoprevpage: function () {
            if (this.dataview.pagenum > 0) {
                this.gotopage(this.dataview.pagenum - 1);
            }
            else {
                if (this.pagermode != "simple") {
                    var totalrecords = this.dataview.totalrecords;
                    if (this.summaryrows) {
                        totalrecords += this.summaryrows.length;
                    }
                    var pages = Math.ceil(totalrecords / this.pagesize);
                    this.gotopage(pages - 1);
                }
            }
        },

        // goes to a next page.
        gotonextpage: function () {
            var totalrecords = this.dataview.totalrecords;
            if (this.summaryrows) {
                totalrecords += this.summaryrows.length;
            }
            var pages = Math.ceil(totalrecords / this.pagesize);
            if (this.dataview.pagenum < pages - 1) {
                this.gotopage(this.dataview.pagenum + 1);
            }
            else {
                if (this.pagermode != "simple") {
                    this.gotopage(0);
                }
            }
        },

        // updates a pager details.
        updatepagerdetails: function () {
            if (this.pagerdetails != null && this.pagerdetails.length > 0) {
                var currentrecord = this.dataview.pagenum * this.pagesize;
                var lastrecord = (this.dataview.pagenum + 1) * this.pagesize;
                if (lastrecord >= this.dataview.totalrecords) {
                    lastrecord = this.dataview.totalrecords;
                }
                var totalrecords = this.dataview.totalrecords;
                if (this.summaryrows) {
                    totalrecords += this.summaryrows.length;
                    if ((this.dataview.pagenum + 1) * this.pagesize > this.dataview.totalrecords)
                    { lastrecord = totalrecords; }
                }

                currentrecord++;
                var pagescount = Math.ceil(totalrecords / this.dataview.pagesize);
                if (pagescount >= 1) pagescount--;
                pagescount++;

                if (this.pagermode !== 'simple') {
                    var input = this.pagergotoinput.find('input');
                    input.val(this.dataview.pagenum + 1);
                }
                else {
                    var anchors = "";
                    var buttonsCount = this.pagerbuttonscount;
                    if (buttonsCount == 0 || !buttonsCount) {
                        buttonsCount = 5;
                    }

                    var i = 0;
                    if (this.rtl) {
                        i = buttonsCount - 1;
                    }
                    while ((this.rtl && i >= 0) || (!this.rtl && i < buttonsCount)) {
                        var page = 1 + i;

                        var division = this.dataview.pagenum / buttonsCount;
                        var step = Math.floor(division);
                        page += step * buttonsCount;
                        var className = this.toTP('jqx-grid-pager-number');
                        className += " " + this.toTP('jqx-rc-all');
                        if (page > pagescount)
                            break;

                        if (!this.rtl) {
                            if (i == 0 && page > buttonsCount) {
                                anchors += "<a class='" + className + "' tabindex=-1 href='javascript:;' data-page='" + (-1 + page) + "'>" + "..." + "</a>";
                            }
                        }

                        if (this.dataview.pagenum === page - 1) {
                            className += " " + this.toTP('jqx-fill-state-pressed');
                        }

                        if (!this.rtl) {
                            anchors += "<a class='" + className + "' tabindex=-1 href='javascript:;' data-page='" + page + "'>" + page + "</a>";

                            if (i === buttonsCount - 1) {
                                var className = this.toTP('jqx-grid-pager-number');
                                if (pagescount >= 1 + page) {
                                    anchors += "<a class='" + className + "' tabindex=-1 href='javascript:;' data-page='" + (1 + page) + "'>" + "..." + "</a>";
                                }
                            }
                        }
                        else {
                            if (i === buttonsCount - 1) {
                                var className = this.toTP('jqx-grid-pager-number');
                                if (pagescount >= 1 + page) {
                                    anchors += "<a class='" + className + "' tabindex=-1 href='javascript:;' data-page='" + (1 + page) + "'>" + "..." + "</a>";
                                }
                            }
                            if (this.dataview.pagenum === page - 1) {
                                className += " " + this.toTP('jqx-fill-state-pressed');
                            }
                            anchors += "<a class='" + className + "' tabindex=-1 href='javascript:;' data-page='" + page + "'>" + page + "</a>";
                        }

                        if (this.rtl) {
                            var className = this.toTP('jqx-grid-pager-number');
                            if (i == 0 && page > buttonsCount) {
                                anchors += "<a class='" + className + "' tabindex=-1 href='javascript:;' data-page='" + (-1 + page) + "'>" + "..." + "</a>";
                            }
                        }

                        if (!this.rtl) {
                            i++;
                        }
                        else {
                            i--;
                        }
                    }
                    var numbers = this["pagerbuttons"].find('a');
                    this.removeHandler(numbers, 'click');
                    this.removeHandler(numbers, 'mouseenter');
                    this.removeHandler(numbers, 'mouseleave');

                    this["pagerbuttons"][0].innerHTML = anchors;
                    var that = this;
                    var initAnchors = function () {
                        that.addHandler(numbers, 'click', function (event) {
                            var page = $(event.target).attr("data-page");
                            that.gotopage(parseInt(page) - 1);
                            return false;
                        });
                        that.addHandler(numbers, 'mouseenter', function (event) {
                            $(event.target).addClass(that.toTP("jqx-fill-state-hover"));
                        });
                        that.addHandler(numbers, 'mouseleave', function (event) {
                            $(event.target).removeClass(that.toTP("jqx-fill-state-hover"));
                        });
                    }

                    var numbers = this["pagerbuttons"].find('a');
                    initAnchors(numbers);
                }
              
                this.pagergotoinput.attr('title', '1 - ' + pagescount);
                if (lastrecord == 0 && lastrecord < currentrecord) {
                    currentrecord = 0;
                }

                if (!this.rtl) {
                    this.pagerdetails[0].innerHTML = currentrecord + '-' + lastrecord + this.gridlocalization.pagerrangestring + totalrecords;
                }
                else {
                    this.pagerdetails[0].innerHTML = totalrecords + this.gridlocalization.pagerrangestring + lastrecord + '-' + currentrecord;
                }

                if (currentrecord > lastrecord) {
                    this.gotoprevpage();
                }
            }
        },

        _updatepagedview: function (totalrows, virtualheight, currentheight) {
            var self = this.that;
            if (this.dataview.rows.length != this.dataview.pagesize) {
                this.dataview.updateview();
            }

            var rowslength = this.dataview.rows.length;
            for (var i = 0; i < rowslength; i++) {
                var index = this.dataview.rows[i].visibleindex;
                var rowinfo = { index: index, height: this.heights[index], hidden: this.hiddens[index], details: this.details[index] }
                if (this.heights[index] == undefined) {
                    this.heights[index] = this.rowsheight;
                    rowinfo.height = this.rowsheight;
                }
                if (this.hiddens[index] == undefined) {
                    this.hiddens[index] = false;
                    rowinfo.hidden = false;
                }
                if (this.details[index] == undefined) {
                    this.details[index] = null;
                }
                if (rowinfo.height != self.rowsheight) {
                    virtualheight -= self.rowsheight;
                    virtualheight += rowinfo.height;
                }

                if (rowinfo.hidden) {
                    virtualheight -= rowinfo.height;
                }
                else {
                    currentheight += rowinfo.height;
                    var detailsheight = 0;
                    if (this.rowdetails) {
                        if (rowinfo.details && rowinfo.details.rowdetails && !rowinfo.details.rowdetailshidden) {
                            detailsheight = rowinfo.details.rowdetailsheight;
                            currentheight += detailsheight;
                            virtualheight += detailsheight;
                        }
                    }
                }
            }
            this._pageviews[0] = { top: 0, height: currentheight };
            return virtualheight;
        }
    });
})(jQuery);
/*
 * file from "src\jqxgrid.edit.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {

    $.extend($.jqx._jqxGrid.prototype, {
        _handledblclick: function (event, self) {
            if (event.target == null) {
                return;
            }

            if (self.disabled) {
                return;
            }

            if ($(event.target).ischildof(this.columnsheader)) {
                return;
            }

            var rightclick;
            if (event.which) rightclick = (event.which == 3);
            else if (event.button) rightclick = (event.button == 2);

            if (rightclick) {
                return;
            }

            var middleclick;
            if (event.which) middleclick = (event.which == 2);
            else if (event.button) middleclick = (event.button == 1);

            if (middleclick) {
                return;
            }

            var columnheaderheight = this.showheader ? this.columnsheader.height() + 2 : 0;
            var groupsheaderheight = this._groupsheader() ? this.groupsheader.height() : 0;
            var toolbarheight = this.showtoolbar ? this.toolbarheight : 0;
            groupsheaderheight += toolbarheight;

            var hostoffset = this.host.offset();
            var x = event.pageX - hostoffset.left;
            var y = event.pageY - columnheaderheight - hostoffset.top - groupsheaderheight;
            var rowinfo = this._hittestrow(x, y);
            var row = rowinfo.row;
            var index = rowinfo.index;
            var targetclassname = event.target.className;
            var tablerow = this.table[0].rows[index];
            if (tablerow == null)
                return;

            self.mousecaptured = true;
            self.mousecaptureposition = { left: event.pageX, top: event.pageY - groupsheaderheight };

            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var cellindex = 0;
            var groupslength = this.groupable ? this.groups.length : 0;

            for (var i = 0; i < tablerow.cells.length; i++) {
                var columnleft = parseInt($(this.columnsrow[0].cells[i]).css('left'));
                var left = columnleft - horizontalscrollvalue;
                if (self.columns.records[i].pinned) {
                    left = columnleft;
                }

                var column = this._getcolumnat(i);
                if (column != null && column.hidden) {
                    continue;
                }

                var right = left + $(this.columnsrow[0].cells[i]).width();
                if (right >= x && x >= left) {
                    cellindex = i;
                    break;
                }
            }

            if (row != null) {
                var column = this._getcolumnat(cellindex);
                if (!(targetclassname.indexOf('jqx-grid-group-expand') != -1 || targetclassname.indexOf('jqx-grid-group-collapse') != -1)) {
                    if (row.boundindex != -1) {
                        self.begincelledit(self.getboundindex(row), column.datafield, column.defaulteditorvalue);
                    }
                }
            }
        },

        _getpreveditablecolumn: function (index) {
            var self = this;
            while (index > 0) {
                index--;
                var column = self.getcolumnat(index);
                if (!column)
                    return null;

                if (!column.editable)
                    continue;

                if (!column.hidden)
                    return column;
            }
            return null;
        },

        _getnexteditablecolumn: function (index) {
            var self = this;
            while (index < this.columns.records.length) {
                index++;
                var column = self.getcolumnat(index);

                if (!column)
                    return null;

                if (!column.editable)
                    continue;

                if (!column.hidden)
                    return column;
            }
            return null;
        },

        _handleeditkeydown: function (event, self) {
            if (self.handlekeyboardnavigation) {
                var handled = self.handlekeyboardnavigation(event);
                if (handled == true) {
                    return true;
                }
            }

            var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;

            if (self.showfilterrow && self.filterable) {
                if (this.filterrow) {
                    if ($(event.target).ischildof(this.filterrow))
                        return true;
                }
            }

            if (self.pageable) {
                if ($(event.target).ischildof(this.pager)) {
                    return true;
                }
            }

            if (this.showtoolbar) {
                if ($(event.target).ischildof(this.toolbar)) {
                    return true;
                }
            }
            if (this.showstatusbar) {
                if ($(event.target).ischildof(this.statusbar)) {
                    return true;
                }
            }

            if (this.rowdetails) {
                if ($(event.target).ischildof(this.content.find("[role='rowgroup']"))) {
                    return true;
                }
            }

            if (this.editcell) {
                if (this.editmode === "selectedrow") {
                    if (key === 13) {
                        this.endrowedit(this.editcell.row, false);
                    }
                    else if (key === 27) {
                        this.endrowedit(this.editcell.row, true);
                    }
                    if (key === 9) {
                        return false;
                    }

                    return true;
                }

                if (this.editcell.columntype == null || this.editcell.columntype == 'textbox' || this.editcell.columntype == 'numberinput' || this.editcell.columntype == 'combobox' || this.editcell.columntype == 'datetimeinput') {
                    if (key >= 33 && key <= 40 && self.selectionmode == 'multiplecellsadvanced') {
                        var editor = this.editcell.columntype == 'textbox' || this.editcell.columntype == null ? this.editcell.editor : this.editcell.editor.find('input');
                        var selection = self._selection(editor);
                        var strlength = editor.val().length;
                        if (selection.length > 0 && this.editcell.columntype != 'datetimeinput') {
                            self._cancelkeydown = true;
                        }

                        if (selection.start > 0 && key == 37) {
                            self._cancelkeydown = true;
                        }
                        if (selection.start < strlength && key == 39 && this.editcell.columntype != 'datetimeinput') {
                            self._cancelkeydown = true;
                        }
                        if (this.editcell.columntype == 'datetimeinput' && key == 39) {
                            if (selection.start + selection.length < strlength) {
                                self._cancelkeydown = true;
                            }
                        }
                    }
                }
                else if (this.editcell.columntype == 'dropdownlist') {
                    if (key == 37 || key == 39 && self.selectionmode == 'multiplecellsadvanced') {
                        self._cancelkeydown = false;
                    }
                }
                else if (this.selectionmode == 'multiplecellsadvanced' && this.editcell.columntype != 'textbox' && this.editcell.columntype != 'numberinput') {
                    self._cancelkeydown = true;
                }

                if (key == 32) {
                    if (self.editcell.columntype == 'checkbox') {
                        var column = self.getcolumn(self.editcell.datafield);
                        if (column.editable) {
                            var checked = !self.getcellvalue(self.editcell.row, self.editcell.column);
                            if (column.cellbeginedit) {
                                var beginEdit = column.cellbeginedit(self.editcell.row, column.datafield, column.columntype, !checked);
                                if (beginEdit == false) {
                                    return false;
                                }
                            }
                            self.setcellvalue(self.editcell.row, self.editcell.column, checked, true);
                            self._raiseEvent(18, { rowindex: self.editcell.row, datafield: self.editcell.column, oldvalue: !checked, value: checked, columntype: 'checkbox' });
                            return false;
                        }
                    }
                }
                if (key == 9) {
                    var rowindex = this.editcell.row;
                    var datafield = this.editcell.column;
                    var initialdatafield = datafield;
                    var columnindex = self._getcolumnindex(datafield);
                    var canedit = false;
                    var visibleindex = self.getrowvisibleindex(rowindex);
                    this.editchar = "";
     
                    if (this.editcell.validated != false) {
                        if (event.shiftKey) {
                            var column = self._getpreveditablecolumn(columnindex);
                            if (column) {
                                datafield = column.datafield;
                                canedit = true;
                                if (self.selectionmode.indexOf('cell') != -1) {
                                    self.selectprevcell(rowindex, initialdatafield);
                                    setTimeout(function () {
                                        self.ensurecellvisible(visibleindex, datafield);
                                    }, 10);
                                }
                            }
                        }
                        else {
                            var column = self._getnexteditablecolumn(columnindex);
                            if (column) {
                                datafield = column.datafield;
                                canedit = true;
                                if (self.selectionmode.indexOf('cell') != -1) {
                                    self.selectnextcell(rowindex, initialdatafield);
                                    self._oldselectedcell = self.selectedcell;
                                    setTimeout(function () {
                                        self.ensurecellvisible(visibleindex, datafield);
                                    }, 10);
                                }
                            }
                        }

                        if (canedit) {
                            self.begincelledit(rowindex, datafield);
                            if (this.editcell != null && this.editcell.columntype == 'checkbox') {
                                this._renderrows(this.virtualsizeinfo);
                            }
                        }
                        else {
                            if (this.editcell != null) {
                                self.endcelledit(rowindex, datafield, false);
                                this._renderrows(this.virtualsizeinfo);
                            }
                            return true;
                        }
                    }
                    return false;
                }
                else if (key == 13) {
                    var oldselectedcell = this.selectedcell;
                    if (oldselectedcell) {
                        var oldvisibleindex = this.getrowvisibleindex(oldselectedcell.rowindex);
                    }
                    this.endcelledit(this.editcell.row, this.editcell.column, false, true);
                    if (this.selectionmode == 'multiplecellsadvanced') {
                        var cell = self.getselectedcell();
                        if (cell != null) {
                            if (self.selectcell) {
                                if (this.editcell == null) {
                                    if (cell.rowindex + 1 < this.dataview.totalrecords) {
                                        if (this.sortcolumn != cell.datafield) {
                                            var visibleindex = this.getrowvisibleindex(cell.rowindex);
                                            var visiblerow = this.dataview.loadedrecords[visibleindex + 1];
                                            if (visiblerow) {
                                                if (!this.pageable || (this.pageable && visibleindex + 1 < (this.dataview.pagenum + 1 ) * this.pagesize)) {
                                                    this.clearselection(false);
                                                    this.selectcell(this.getboundindex(visiblerow), cell.datafield);
                                                    var cell = this.getselectedcell();
                                                    this.ensurecellvisible(visiblerow.visibleindex, cell.datafield);
                                                }
                                            }
                                        }
                                        else {
                                            if (oldselectedcell != null) {
                                                var oldvisiblerow = this.dataview.loadedrecords[oldvisibleindex + 1];
                                                if (oldvisiblerow) {
                                                    if (!this.pageable || (this.pageable && oldvisibleindex + 1 < this.pagesize)) {
                                                        this.clearselection(false);
                                                        this.selectcell(this.getboundindex(oldvisiblerow), cell.datafield);
                                                    }
                                                    else if (this.pageable && oldvisibleindex + 1 >= this.pagesize) {
                                                        this.clearselection(false);
                                                        var oldvisiblerow = this.dataview.loadedrecords[oldvisibleindex];
                                                        this.selectcell(this.getboundindex(oldvisiblerow), cell.datafield);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return false;
                }
                else if (key == 27) {
                    this.endcelledit(this.editcell.row, this.editcell.column, true, true);
                    return false;
                }
            }
            else {
                var startedit = false;
                if (key == 113) {
                    startedit = true;
                }
                if (!event.ctrlKey && !event.altKey) {
                    if (key >= 48 && key <= 57) {
                        this.editchar = String.fromCharCode(key);
                        startedit = true;
                    }
                    if (key >= 65 && key <= 90) {
                        this.editchar = String.fromCharCode(key);
                        var shifton = false;
                        if (event.shiftKey) {
                            shifton = event.shiftKey;
                        } else if (event.modifiers) {
                            shifton = !!(event.modifiers & 4);
                        }
                        if (!shifton) {
                            this.editchar = this.editchar.toLowerCase();
                        }
                        startedit = true;
                    }
                    else if (key >= 96 && key <= 105) {
                        this.editchar = key - 96;
                        this.editchar = this.editchar.toString();
                        startedit = true;
                    }
                    var gridscount = $('.jqx-grid').length;
                    startedit = startedit && (gridscount == 1 || (gridscount > 1 && self.focused));
                    var editID = $.data(document.body, 'jqxgrid.edit');
                    if (editID !== undefined && editID !== "") {
                        if (key === 13 || startedit) {
                            if (editID != self.element.id) {
                                return true;
                            }
                        }
                    }
                }

                if (key == 13 || startedit) {
                    if (self.getselectedrowindex) {
                        var rowindex = self.getselectedrowindex();

                        switch (self.selectionmode) {
                            case 'singlerow':
                            case 'multiplerows':
                            case 'multiplerowsextended':
                                {
                                    if (rowindex >= 0) {
                                        var datafield = "";
                                        for (var m = 0; m < self.columns.records.length; m++) {
                                            var column = self.getcolumnat(m);
                                            if (column.editable) {
                                                datafield = column.datafield;
                                                break;
                                            }
                                        }

                                        self.begincelledit(rowindex, datafield);
                                    }
                                    break;
                                }
                            case 'singlecell':
                            case 'multiplecells':
                            case 'multiplecellsextended':
                                var cell = self.getselectedcell();
                                if (cell != null) {
                                    var column = self._getcolumnbydatafield(cell.datafield);
                                    if (column.columntype != 'checkbox') {
                                        self.begincelledit(cell.rowindex, cell.datafield);
                                    }
                                }
                                break;
                            case "multiplecellsadvanced":
                                var cell = self.getselectedcell();
                                if (cell != null) {
                                    if (key == 13) {
                                        if (self.selectcell) {
                                            if (cell.rowindex + 1 < self.dataview.totalrecords) {
                                                var visibleindex = this.getrowvisibleindex(cell.rowindex);
                                                var visiblerow = this.dataview.loadedrecords[visibleindex + 1];
                                                if (visiblerow) {
                                                    this.clearselection(false);
                                                    this.selectcell(this.getboundindex(visiblerow), cell.datafield);
                                                    var cell = this.getselectedcell();
                                                    this.ensurecellvisible(visiblerow.visibleindex, cell.datafield);
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (self.editmode !== "selectedrow") {
                                            self.begincelledit(cell.rowindex, cell.datafield);
                                        }
                                    }
                                }

                                break;
                        }
                        return false;
                    }
                }
                if (key == 46) {
                    var cells = self.getselectedcells();
                    if (self.selectionmode.indexOf('cell') == -1) {
                        if (self._getcellsforcopypaste) {
                            cells = self._getcellsforcopypaste();
                        }
                    }
                    if (cells != null && cells.length > 0) {
                        for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {
                            var cell = cells[cellIndex];
                            if (!cell.datafield) continue;
                            var column = self.getcolumn(cell.datafield);
                            var cellValue = self.getcellvalue(cell.rowindex, cell.datafield);
                            if (cellValue !== "" && column.editable && self.enablekeyboarddelete) {
                                var newvalue = null;
                                if (column.columntype == "checkbox") {
                                    if (!column.threestatecheckbox) {
                                        newvalue = false;
                                    }
                                }
                                if (column.cellbeginedit) {
                                    var beginEdit = column.cellbeginedit(cell.rowindex, column.datafield, column.columntype, newvalue);
                                    if (beginEdit == false) {
                                        return false;
                                    }
                                }
                                self._raiseEvent(17, { rowindex: cell.rowindex, datafield: cell.datafield, value: cellValue });
                                if (cellIndex == cells.length - 1) {
                                    self.setcellvalue(cell.rowindex, cell.datafield, newvalue, true);
                                    if (column.displayfield != column.datafield) {
                                        self.setcellvalue(cell.rowindex, column.displayfield, newvalue, true);
                                    }
                                }
                                else {
                                    self.setcellvalue(cell.rowindex, cell.datafield, newvalue, false);
                                    if (column.displayfield != column.datafield) {
                                        self.setcellvalue(cell.rowindex, column.displayfield, newvalue, true);
                                    }
                                }
                                if (column.cellendedit) {
                                    var cellendeditresult = column.cellendedit(cell.rowindex, column.datafield, column.columntype, newvalue);
                                }
                                self._raiseEvent(18, { rowindex: cell.rowindex, datafield: cell.datafield, oldvalue: cellValue, value: newvalue });
                            }
                        }
                        this.dataview.updateview();
                        this._renderrows(this.virtualsizeinfo);
                        return false;
                    }
                }
                if (key == 32) {
                    var cell = self.getselectedcell();
                    if (cell != null) {
                        var column = self.getcolumn(cell.datafield);
                        if (column.columntype == 'checkbox' && column.editable) {
                            var checked = !self.getcellvalue(cell.rowindex, cell.datafield);
                            if (column.cellbeginedit) {
                                var beginEdit = column.cellbeginedit(cell.rowindex, column.datafield, column.columntype, !checked);
                                if (beginEdit == false) {
                                    return false;
                                }
                            }

                            self._raiseEvent(17, { rowindex: cell.rowindex, datafield: cell.datafield, value: !checked, columntype: 'checkbox' });
                            self.setcellvalue(cell.rowindex, cell.datafield, checked, true);
                            self._raiseEvent(18, { rowindex: cell.rowindex, datafield: cell.datafield, oldvalue: !checked, value: checked, columntype: 'checkbox' });
                            return false;
                        }
                    }
                }
            }

            return true;
        },

        // begins cell editing.
        begincelledit: function (row, datafield, defaultvalue, ensurevisible, render) {
            var column = this.getcolumn(datafield);
            this._cellscache = new Array();

            if (datafield == null)
                return;

            if (column.columntype == "number" || column.columntype == "button") {
                return;
            }

            if (this.groupable) {
                if (this.groups.indexOf(datafield) >= 0) {
                    return;
                }
                if (this.groups.indexOf(column.displayfield) >= 0) {
                    return;
                }
            }

            if (this.editrow != undefined) return;

            if (this.editcell) {
                if (this.editcell.row == row && this.editcell.column == datafield) {
                    return true;
                }
                if (this.editmode === "selectedrow") {
                    if (this.editcell.row == row) {
                        return;
                    }
                }

                var validated = this.endcelledit(this.editcell.row, this.editcell.column, false, true, false);
                if (false == validated)
                    return;
            }

            var isembeddededitor = column.columntype == 'checkbox' || column.columntype == 'button';
            this.host.removeClass('jqx-disableselect');
            this.content.removeClass('jqx-disableselect');

            if (column.editable) {
                if (column.cellbeginedit) {
                    var cell = this.getcell(row, datafield);
                    var beginEdit = column.cellbeginedit(row, datafield, column.columntype, cell != null ? cell.value : null);
                    if (beginEdit == false)
                        return;
                }

                var visiblerowindex = this.getrowvisibleindex(row);
                this.editcell = this.getcell(row, datafield);
                if (this.editcell) {
                    this.editcell.visiblerowindex = visiblerowindex;
                    if (!this.editcell.editing) {
                        if (!isembeddededitor) {
                            this.editcell.editing = true;
                        }
                        this.editcell.columntype = column.columntype;
                        this.editcell.defaultvalue = defaultvalue;
                        if (column.defaultvalue != undefined) {
                            this.editcell.defaultvalue = column.defaultvalue;
                        }
                        this.editcell.init = true;
                        // raise begin cell edit event.
                        if (column.columntype != "checkbox" && this.editmode != "selectedrow") {
                            this._raiseEvent(17, { rowindex: row, datafield: column.datafield, value: this.editcell.value, columntype: column.columntype });
                        }
                        $.data(document.body, 'jqxgrid.edit', this.element.id);

                        if (!isembeddededitor) {
                            var visibleindex = this.getrowvisibleindex(row);
                            if (ensurevisible !== false) {
                                this.ensurecellvisible(visibleindex, column.datafield);
                            }
                            if (render !== false) {
                                this._renderrows(this.virtualsizeinfo);
                            }
                        }
                        if (this.editcell) {
                            this.editcell.init = false;
                            return true;
                        }
                    }
                }
            }
            else {
                if (!this.editcell) {
                    return;
                }
                this.editcell.editor = null;
                this.editcell.editing = false;
                if (render !== false) {
                    this._renderrows(this.virtualsizeinfo);
                }
                this.editcell = null;
            }
        },

        getScrollTop: function () {
            if (this._py) {
                return pageYOffset;
            }

            this._py = typeof pageYOffset != 'undefined';
            if (this._py) {
                //most browsers
                return pageYOffset;
            }
            else{
                    var B= document.body; //IE 'quirks'
                var D= document.documentElement; //IE with doctype
                D= (D.clientHeight)? D: B;
                return D.scrollTop;
            }
        },

        getScrollLeft: function () {
            if (typeof pageXOffset != 'undefined') {
                //most browsers
                return pageXOffset;
            }
            else {
                var B = document.body; //IE 'quirks'
                var D = document.documentElement; //IE with doctype
                D = (D.clientHeight) ? D : B;
                return D.scrollLeft;
            }
        },

        endcelledit: function (row, datafield, cancelchanges, refresh, focus) {
            if (row == undefined || datafield == undefined) {
                if (this.editcell) {
                    row = this.editcell.row;
                    datafield = this.editcell.column;
                }
                if (cancelchanges == undefined) {
                    cancelchanges = true;
                }
            }

            if (!this.editcell) {
                return;
            }

            var column = this.getcolumn(datafield);
            var me = this;

            if (me.editmode === "selectedrow") {
                this.endrowedit(row, cancelchanges);
                return;
            }

            var setfocus = function () {
                if (focus != false) {
                    if (me.isTouchDevice()) {
                        return;
                    }

                    if (!me.isNestedGrid) {
                        var topPos = me.getScrollTop();
                        var leftPos = me.getScrollLeft();

                        try
                        {
                            me.element.focus();
                            me.content.focus();
                            if (topPos != me.getScrollTop()) {
                                window.scrollTo(leftPos, topPos);
                            }

                            setTimeout(function () {
                                me.element.focus();
                                me.content.focus();
                                if (topPos != me.getScrollTop()) {
                                    window.scrollTo(leftPos, topPos);
                                }
                            }, 10);
                        }
                        catch (error) {
                        }
                    }
                }
            }

            if (column.columntype == 'checkbox' || column.columntype == 'button') {
                if (this.editcell) {
                    this.editcell.editor = null;
                    this.editcell.editing = false;
                    this.editcell = null;
                }
                return true;
            }

            var editorvalue = this._geteditorvalue(column);

            var cancelchangesfunc = function (me) {
                me._hidecelleditor();
                if (column.cellendedit) {
                    column.cellendedit(row, datafield, column.columntype, me.editcell.value, editorvalue);           
                }
                me.editchar = null;
                if (column.displayfield != column.datafield) {
                    var label = me.getcellvalue(me.editcell.row, column.displayfield);
                    var value = me.editcell.value;
                    oldvalue = { value: value, label: label };
                }
                else oldvalue = me.editcell.value;

                me._raiseEvent(18, { rowindex: row, datafield: datafield, displayfield: column.displayfield, oldvalue: editorvalue, value: editorvalue, columntype: column.columntype });

                me.editcell.editor = null;
                me.editcell.editing = false;
                me.editcell = null;
                if (refresh || refresh == undefined) {
                    me._renderrows(me.virtualsizeinfo);
                }
                setfocus();
                if (!me.enablebrowserselection) {
                    me.host.addClass('jqx-disableselect');
                    me.content.addClass('jqx-disableselect');
                }
            }

            if (cancelchanges) {
                cancelchangesfunc(this);
                return false;
            }

            if (this.validationpopup) {
                this.validationpopup.hide();
                this.validationpopuparrow.hide();
            }

            if (column.cellvaluechanging) {
                var newcellvalue = column.cellvaluechanging(row, datafield, column.columntype, this.editcell.value, editorvalue);
                if (newcellvalue != undefined) {
                    editorvalue = newcellvalue;
                }
            }

            if (column.validation) {
                var cell = this.getcell(row, datafield);
                try {
                    var validationobj = column.validation(cell, editorvalue);
                    var validationmessage = this.gridlocalization.validationstring;
                    if (validationobj.message != undefined) {
                        validationmessage = validationobj.message;
                    }
                    var result = typeof validationobj == "boolean" ? validationobj : validationobj.result;

                    if (!result) {
                        if (validationobj.showmessage == undefined || validationobj.showmessage == true) {
                            this._showvalidationpopup(row, datafield, validationmessage);
                        }
                        this.editcell.validated = false;
                        return false;
                    }
                }
                catch (error) {
                    this._showvalidationpopup(row, datafield, this.gridlocalization.validationstring);
                    this.editcell.validated = false;
                    return false;
                }
            }

            if (column.displayfield != column.datafield) {
                var label = this.getcellvalue(this.editcell.row, column.displayfield);
                var value = this.editcell.value;
                oldvalue = { value: value, label: label };
            }
            else oldvalue = this.editcell.value;

            if (column.cellendedit) {
                var cellendeditresult = column.cellendedit(row, datafield, column.columntype, this.editcell.value, editorvalue);
                if (cellendeditresult == false) {
                    this._raiseEvent(18, { rowindex: row, datafield: datafield, displayfield: column.displayfield, oldvalue: oldvalue, value: oldvalue, columntype: column.columntype });
                    cancelchangesfunc(this);
                    return false;
                }
            }

            this._raiseEvent(18, { rowindex: row, datafield: datafield, displayfield: column.displayfield, oldvalue: oldvalue, value: editorvalue, columntype: column.columntype });

            this._hidecelleditor(false);
            if (this.editcell != undefined) {
                this.editcell.editor = null;
                this.editcell.editing = false;
            }
            this.editcell = null;
            this.editchar = null;
            this.setcellvalue(row, datafield, editorvalue, refresh);
            if (!this.enablebrowserselection) {
                this.host.addClass('jqx-disableselect');
                this.content.addClass('jqx-disableselect');
            }
            setfocus();
            $.data(document.body, 'jqxgrid.edit', "");

            // raise end cell edit event.
            return true;
        },

        beginrowedit: function (row) {
            var me = this;
            var lastIndex = -1;
            me._oldselectedrow = row;
            this._cellscache = new Array();
            $.each(this.columns.records, function (index, value) {
                if (me.editable && this.editable) {
                    var cell = me.getcell(row, this.datafield);
                    me.begincelledit(row, this.datafield, null, false, false);
                    me._raiseEvent(17, { rowindex: row, datafield: this.datafield, value: cell.value, columntype: this.columntype });
                }
            });
            if (me.editcell) {
                me.editcell.init = true;
            }
            this._renderrows(this.virtualsizeinfo);
        },

        endrowedit: function (row, cancelchanges) {
            var me = this;
            if (!this.editcell) {
                return false;
            }

            if (this.editcell.editor == undefined) {
                return false;
            }

            var setfocus = function () {
                if (focus != false) {
                    if (me.isTouchDevice()) {
                        return;
                    }

                    if (!me.isNestedGrid) {
                        var topPos = me.getScrollTop();
                        var leftPos = me.getScrollLeft();

                        try {
                            me.element.focus();
                            me.content.focus();
                            if (topPos != me.getScrollTop()) {
                                window.scrollTo(leftPos, topPos);
                            }

                            setTimeout(function () {
                                me.element.focus();
                                me.content.focus();
                                if (topPos != me.getScrollTop()) {
                                    window.scrollTo(leftPos, topPos);
                                }
                            }, 10);
                        }
                        catch (error) {
                        }
                    }
                }
            }

            var hasInvalidColumns = false;
            var values = {};
            if (this.validationpopup) {
                this.validationpopup.hide();
                this.validationpopuparrow.hide();
            }

            for (var i = 0; i < this.columns.records.length; i++) {
                var column = this.columns.records[i];
                if (!column.editable) {
                    continue;
                }

                if (column.columntype == "checkbox") {
                    continue;
                }
                var editorvalue = this._geteditorvalue(column);

                var cancelchangesfunc = function (me) {
                    me._hidecelleditor();
                    var oldval = me.getcellvalue(me.editcell.row, column.displayfield);
                    if (column.cellendedit) {
                        column.cellendedit(row, datafield, column.columntype, oldval, editorvalue);
                    }
                    me.editchar = null;
                    if (column.displayfield != column.datafield) {
                        var label = me.getcellvalue(me.editcell.row, column.displayfield);
                        var value = oldval;
                        oldvalue = { value: value, label: label };
                    }
                    else oldvalue = oldval;

                    me._raiseEvent(18, { rowindex: row, datafield: datafield, displayfield: column.displayfield, oldvalue: oldval, value: oldval, columntype: column.columntype });

                    me.editcell.editing = false;
                }

                if (cancelchanges) {
                    cancelchangesfunc(this);
                    continue;
                }

                if (column.cellvaluechanging) {
                    var oldvalue = this.getcellvalue(this.editcell.row, column.displayfield);
                    var newcellvalue = column.cellvaluechanging(row, datafield, column.columntype, oldvalue, editorvalue);
                    if (newcellvalue != undefined) {
                        editorvalue = newcellvalue;
                    }
                }

                var datafield = column.datafield;
                if (column.validation) {
                    var cell = this.getcell(row, column.datafield);
                    try {
                        var validationobj = column.validation(cell, editorvalue);
                        var validationmessage = this.gridlocalization.validationstring;
                        if (validationobj.message != undefined) {
                            validationmessage = validationobj.message;
                        }
                        var result = typeof validationobj == "boolean" ? validationobj : validationobj.result;

                        if (!result) {
                            if (validationobj.showmessage == undefined || validationobj.showmessage == true) {
                                this._showvalidationpopup(row, datafield, validationmessage);
                            }
                            hasInvalidColumns = true;
                            this.editcell[column.datafield].validated = false;
                            continue;
                        }
                    }
                    catch (error) {
                        this._showvalidationpopup(row, datafield, this.gridlocalization.validationstring);
                        this.editcell[column.datafield].validated = false;
                        hasInvalidColumns = true;
                        continue;
                    }
                }

                if (column.displayfield != column.datafield) {
                    var label = this.getcellvalue(this.editcell.row, column.displayfield);
                    var value = this.editcell.value;
                    oldvalue = { value: value, label: label };
                }
                else oldvalue = this.getcellvalue(this.editcell.row, column.displayfield);
                values[column.datafield] = { newvalue: editorvalue, oldvalue: oldvalue };
               // raise end cell edit event.
            }

            var rowvalues = {};
            if (!hasInvalidColumns) {
                this._hidecelleditor(false);
             
                for (var i = 0; i < this.columns.records.length; i++) {
                    var column = this.columns.records[i];
                    var datafield = column.datafield;
                    if (!column.editable) {
                        continue;
                    }

                    if (column.columntype == "checkbox") {
                        var editorvalue = this.getcellvalue(row, column.displayfield);
                        this._raiseEvent(18, { rowindex: row, datafield: column.datafield, displayfield: column.displayfield, oldvalue: editorvalue, value: editorvalue, columntype: column.columntype });
                        continue;
                    }

                    if (!values[column.datafield]) {
                        continue;
                    }

                    var editorvalue = values[column.datafield].newvalue;
                    var oldvalue = values[column.datafield].oldvalue;

                    if (column.cellendedit) {
                        var cellendeditresult = column.cellendedit(row, datafield, column.columntype, oldvalue, editorvalue);
                        if (cellendeditresult == false) {
                            this._raiseEvent(18, { rowindex: row, datafield: datafield, displayfield: column.displayfield, oldvalue: oldvalue, value: oldvalue, columntype: column.columntype });
                            cancelchangesfunc(this);
                            continue;
                        }
                    }

                    this._raiseEvent(18, { rowindex: row, datafield: column.datafield, displayfield: column.displayfield, oldvalue: oldvalue, value: editorvalue, columntype: column.columntype });

                    rowvalues[column.datafield] = editorvalue;
                }
                var rowid = this.getrowid(row);
                var datarow = this.getrowdata(row);
                $.each(rowvalues, function (index, value) {
                    if (value && value.label != undefined) {
                        var column = me.getcolumn(index);
                        datarow[column.displayfield] = value.label;
                        datarow[column.datafield] = value.value;
                    }
                    else {
                        datarow[index] = value;
                    }
                });

         
                if (!this.enablebrowserselection) {
                    this.host.addClass('jqx-disableselect');
                    this.content.addClass('jqx-disableselect');
                }
                $.data(document.body, 'jqxgrid.edit', "");
                this.editcell = null;
                this.editchar = null;
                this.updaterow(rowid, datarow);
            }
 
            return hasInvalidColumns;
        },

        _selection: function (textbox) {
            if ('selectionStart' in textbox[0]) {
                var e = textbox[0];
                var selectionLength = e.selectionEnd - e.selectionStart;
                return { start: e.selectionStart, end: e.selectionEnd, length: selectionLength, text: e.value };
            }
            else {
                var r = document.selection.createRange();
                if (r == null) {
                    return { start: 0, end: e.value.length, length: 0 }
                }

                var re = textbox[0].createTextRange();
                var rc = re.duplicate();
                re.moveToBookmark(r.getBookmark());
                rc.setEndPoint('EndToStart', re);
                var selectionLength = r.text.length;

                return { start: rc.text.length, end: rc.text.length + r.text.length, length: selectionLength, text: r.text };
            }
        },

        _setSelection: function (start, end, textbox) {
            if ('selectionStart' in textbox[0]) {
                textbox[0].focus();
                textbox[0].setSelectionRange(start, end);
            }
            else {
                var range = textbox[0].createTextRange();
                range.collapse(true);
                range.moveEnd('character', end);
                range.moveStart('character', start);
                range.select();
            }
        },

        // finds the index to select in the jqxDropDownList editor.
        findRecordIndex: function (value, datafield, records) {
            var records = records;

            if (datafield) {
                var length = records.length;

                // loop through all records.
                for (var urec = 0; urec < length; urec++) {
                    var datarow = records[urec];
                    var currentValue = datarow['label'];
                    if (value == currentValue)
                        return urec;
                }
            }

            return -1;
        },

        _destroyeditors: function () {
            var me = this;
            $.each(this.columns.records, function (i, value) {
                var datafieldname = $.trim(this.datafield).split(" ").join("");

                switch (this.columntype) {
                    case "dropdownlist":
                        var dropdownlist = me.editors["dropdownlist" + "_" + datafieldname];
                        if (dropdownlist) {
                            dropdownlist.jqxDropDownList('destroy');
                            me.editors["dropdownlist" + "_" + datafieldname] = null;
                        }
                        break;
                    case "combobox":
                        var combobox = me.editors["combobox" + "_" + datafieldname];
                        if (combobox) {
                            combobox.jqxComboBox('destroy');
                            me.editors["combobox" + "_" + datafieldname] = null;
                        }
                        break;
                    case "datetimeinput":
                        var datetimeinput = me.editors["datetimeinput" + "_" + this.datafield];
                        if (datetimeinput) {
                            datetimeinput.jqxDateTimeInput('destroy');
                            me.editors["datetimeinput" + "_" + datafieldname] = null;
                        }
                        break;
                    case "numberinput":
                        var numberinput = me.editors["numberinput" + "_" + datafieldname];
                        if (numberinput) {
                            numberinput.jqxNumberInput('destroy');
                            me.editors["numberinput" + "_" + datafieldname] = null;
                        }
                        break;
                    case "custom":
                    case "template":
                        if (this.destroycustomeditor) {
                            this.destroycustomeditor(me.editors["customeditor" + "_" + datafieldname]);
                            me.editors["customeditor" + "_" + datafieldname] = null;
                        }
                        if (this.destrotemplateeditor) {
                            var rows = me.getrows.length();
                            for (var t = 0; t < rows; t++) {
                                this.destrotemplateeditor(me.editors["templateeditor" + "_" + datafieldname + "_" + t]);
                                me.editors["templateeditor" + "_" + datafieldname + "_" + t] = null;
                            }
                        }
                        break;
                    case "textbox":
                    default:
                        var textbox = me.editors["textboxeditor" + "_" + datafieldname];
                        if (textbox) {
                            me.removeHandler(textbox, 'keydown');
                            me.editors["textbox" + "_" + datafieldname] = null;
                        }
                        break;
                }
            });
            me.editors = new Array();
        },

        _showcelleditor: function (row, column, element, init, focusable) {
            if (element == undefined)
                return;

            if (this.editcell == null)
                return;

            if (column.columntype == 'checkbox' && column.editable) {
                return;
            }

            if (focusable == undefined) focusable = true;
            if (this.editmode == "selectedrow") {
                this.editchar = "";
                focusable = false;
            }

            var datafield = column.datafield;
            var $element = $(element);
            var me = this;
            var editor = this.editcell.editor;
            var cellvalue = this.getcellvalue(row, datafield);
            var celltext = this.getcelltext(row, datafield);
            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var left = parseInt(horizontalscrollvalue);
            var columnIndex = this.columns.records.indexOf(column);
            this.editcell.element = element;

            if (this.editcell.validated == false) {
                this._showvalidationpopup();
            }

            var focuseditor = function (editor) {
                if (me.hScrollInstance.isScrolling() || me.vScrollInstance.isScrolling())
                    return;

                if (!focusable)
                    return;

                if (me.isTouchDevice()) {
                    return;
                }

                if (!me.isNestedGrid) {
                    editor.focus();
                }

                if (me.gridcontent[0].scrollTop != 0) {
                    me.scrolltop(Math.abs(me.gridcontent[0].scrollTop));
                    me.gridcontent[0].scrollTop = 0;
                }

                if (me.gridcontent[0].scrollLeft != 0) {
                    me.gridcontent[0].scrollLeft = 0;
                }
            }

            switch (column.columntype) {
                case "dropdownlist":
                    if (this.host.jqxDropDownList) {
                        element.innerHTML = "";
                        var datafieldname = $.trim(column.datafield).split(" ").join("");
                        var displayfield = $.trim(column.displayfield).split(" ").join("");

                        if (datafieldname.indexOf('.') != -1) {
                            datafieldname = datafieldname.replace('.', "");
                        }
                        if (displayfield.indexOf('.') != -1) {
                            displayfield = displayfield.replace('.', "");
                        }

                        var dropdownlisteditor = this.editors["dropdownlist" + "_" + datafieldname];
                        editor = dropdownlisteditor == undefined ? $("<div style='border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='dropdownlisteditor'></div>") : dropdownlisteditor;
                        editor.css('top', $(element).parent().position().top);
                        if (this.oldhscroll) {
                            editor.css('left', -left + parseInt($(element).position().left));
                        }
                        else {
                            editor.css('left', parseInt($(element).position().left));
                        }
                   
                        if (column.pinned) {
                            editor.css('left', left + parseInt($(element).position().left));
                        }


                        if (dropdownlisteditor == undefined) {
                            editor.prependTo(this.table);
                            editor[0].id = "dropdownlisteditor" + this.element.id + datafieldname;
                            var isdataadapter = this.source._source ? true : false;
                            var dataadapter = null;

                            if (!isdataadapter) {
                                dataadapter = new $.jqx.dataAdapter(this.source,
                                {
                                    autoBind: false,
                                    uniqueDataFields: [displayfield],
                                    async: false,
                                    autoSort: true,
                                    autoSortField: displayfield
                                });
                            }
                            else {
                                var dataSource =
                                {
                                    localdata: this.source.records,
                                    datatype: this.source.datatype,
                                    async: false
                                }

                                dataadapter = new $.jqx.dataAdapter(dataSource,
                                {
                                    autoBind: false,
                                    async: false,
                                    uniqueDataFields: [displayfield],
                                    autoSort: true,
                                    autoSortField: displayfield
                                });
                            }

                            var autoheight = !column.createeditor ? true : false;
                            editor.jqxDropDownList({ enableBrowserBoundsDetection: true, keyboardSelection: false, source: dataadapter, rtl: this.rtl, autoDropDownHeight: autoheight, theme: this.theme, width: $element.width() - 2, height: $element.height() - 2, displayMember: displayfield, valueMember: datafield });
                            this.editors["dropdownlist" + "_" + datafieldname] = editor;
                            if (column.createeditor) {
                                column.createeditor(row, cellvalue, editor);
                            }
                        }
                        if (column._requirewidthupdate) {
                            editor.jqxDropDownList({ width: $element.width() - 2 });
                        }

                        var dropdownitems = editor.jqxDropDownList('listBox').visibleItems;
                        if (!column.createeditor) {
                            if (dropdownitems.length < 8) {
                                editor.jqxDropDownList('autoDropDownHeight', true);
                            }
                            else {
                                editor.jqxDropDownList('autoDropDownHeight', false);
                            }
                        }
                        var cellvalue = this.getcellvalue(row, displayfield);
                        var selectedIndex = this.findRecordIndex(cellvalue, displayfield, dropdownitems);
                        if (init) {
                            if (cellvalue != "") {
                                editor.jqxDropDownList('selectIndex', selectedIndex, true);
                            }
                            else {
                                editor.jqxDropDownList('selectIndex', -1);
                            }
                        }

                        if (this.editcell.defaultvalue != undefined) {
                            editor.jqxDropDownList('selectIndex', this.editcell.defaultvalue, true);
                        }
                  
                        if (focusable) {
                            editor.jqxDropDownList('focus');
                        }
                    }
                    break;
                case "combobox":
                    if (this.host.jqxComboBox) {
                        element.innerHTML = "";
                        var datafieldname = $.trim(column.datafield).split(" ").join("");
                        var displayfield = $.trim(column.displayfield).split(" ").join("");
                        if (datafieldname.indexOf('.') != -1) {
                            datafieldname = datafieldname.replace('.', "");
                        }
                        if (displayfield.indexOf('.') != -1) {
                            displayfield = displayfield.replace('.', "");
                        }

                        var comboboxeditor = this.editors["combobox" + "_" + datafieldname];
                        editor = comboboxeditor == undefined ? $("<div style='border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='comboboxeditor'></div>") : comboboxeditor;
                        editor.css('top', $(element).parent().position().top);
                        if (this.oldhscroll) {
                            editor.css('left', -left + parseInt($(element).position().left));
                        }
                        else {
                            editor.css('left', parseInt($(element).position().left));
                        }
                        if (column.pinned) {
                            editor.css('left', left + parseInt($(element).position().left));
                        }

                        if (comboboxeditor == undefined) {
                            editor.prependTo(this.table);
                            editor[0].id = "comboboxeditor" + this.element.id + datafieldname;
                            var isdataadapter = this.source._source ? true : false;
                            var dataadapter = null;
                            if (!isdataadapter) {
                                dataadapter = new $.jqx.dataAdapter(this.source,
                                {
                                    autoBind: false,
                                    uniqueDataFields: [displayfield],
                                    async: false,
                                    autoSort: true,
                                    autoSortField: displayfield
                                });
                            }
                            else {
                                var dataSource =
                                {
                                    localdata: this.source.records,
                                    datatype: this.source.datatype,
                                    async: false
                                }

                                dataadapter = new $.jqx.dataAdapter(dataSource,
                                {
                                    autoBind: false,
                                    async: false,
                                    uniqueDataFields: [displayfield],
                                    autoSort: true,
                                    autoSortField: displayfield
                                });
                            }
                     
                            var autoheight = !column.createeditor ? true: false;
                            editor.jqxComboBox({ enableBrowserBoundsDetection: true, keyboardSelection: false, source: dataadapter, rtl: this.rtl, autoDropDownHeight: autoheight, theme: this.theme, width: $element.width() - 2, height: $element.height() - 2, displayMember: displayfield, valueMember: datafield });
                            editor.removeAttr('tabindex');
                            editor.find('div').removeAttr('tabindex');
                            this.editors["combobox" + "_" + datafieldname] = editor;
                            if (column.createeditor) {
                                column.createeditor(row, cellvalue, editor);
                            }
                        }
                        if (column._requirewidthupdate) {
                            editor.jqxComboBox({ width: $element.width() - 2 });
                        }

                        var dropdownitems = editor.jqxComboBox('listBox').visibleItems;
                        if (!column.createeditor) {
                            if (dropdownitems.length < 8) {
                                editor.jqxComboBox('autoDropDownHeight', true);
                            }
                            else {
                                editor.jqxComboBox('autoDropDownHeight', false);
                            }
                        }

                        var cellvalue = this.getcellvalue(row, displayfield);
                        var selectedIndex = this.findRecordIndex(cellvalue, displayfield, dropdownitems);
                        if (init) {
                            if (cellvalue != "") {
                                editor.jqxComboBox('selectIndex', selectedIndex, true);
                                editor.jqxComboBox('val', cellvalue);
                            }
                            else {
                                editor.jqxComboBox('selectIndex', -1);
                                editor.jqxComboBox('val', cellvalue);
                            }
                        }

                        if (this.editcell.defaultvalue != undefined) {
                            editor.jqxComboBox('selectIndex', this.editcell.defaultvalue, true);
                        }

                        if (this.editchar && this.editchar.length > 0) {
                            editor.jqxComboBox('input').val(this.editchar);
                        }

                        if (focusable) {
                            setTimeout(function () {
                                focuseditor(editor.jqxComboBox('input'));
                                editor.jqxComboBox('_setSelection', 0, 0);
                                if (me.editchar) {
                                    editor.jqxComboBox('_setSelection', 1, 1);
                                    me.editchar = null;
                                }
                                else {
                                    var val = editor.jqxComboBox('input').val();
                                    editor.jqxComboBox('_setSelection', 0, val.length);
                                }
                            }, 10);
                        }
                    }
                    break;
                case "datetimeinput":
                    if (this.host.jqxDateTimeInput) {
                        element.innerHTML = "";
                        var datafieldname = $.trim(column.datafield).split(" ").join("");
                        if (datafieldname.indexOf('.') != -1) {
                            datafieldname = datafieldname.replace('.', "");
                        }

                        var dateeditor = this.editors["datetimeinput" + "_" + datafieldname];
                        editor = dateeditor == undefined ? $("<div style='border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='datetimeeditor'></div>") : dateeditor;
                        editor.show();
                        editor.css('top', $(element).parent().position().top);
                        if (this.oldhscroll) {
                            editor.css('left', -left + parseInt($(element).position().left));
                        }
                        else {
                            editor.css('left', parseInt($(element).position().left));
                        }
                        if (column.pinned) {
                            editor.css('left', left + parseInt($(element).position().left));
                        }

                        if (dateeditor == undefined) {
                            editor.prependTo(this.table);
                            editor[0].id = "datetimeeditor" + this.element.id + datafieldname;
                            var localization = { calendar: this.gridlocalization };
                            editor.jqxDateTimeInput({ enableBrowserBoundsDetection: true, localization: localization, _editor: true, theme: this.theme, rtl: this.rtl, width: $element.width(), height: $element.height(), formatString: column.cellsformat });
                            this.editors["datetimeinput" + "_" + datafieldname] = editor;
                            if (column.createeditor) {
                                column.createeditor(row, cellvalue, editor);
                            }
                        }
                        if (column._requirewidthupdate) {
                            editor.jqxDateTimeInput({ width: $element.width() - 2 });
                        }
                        if (init) {
                            if (cellvalue != "" && cellvalue != null) {
                                var date = new Date(cellvalue);
                                if (date == "Invalid Date") {
                                    if (this.source.getvaluebytype) {
                                        date = this.source.getvaluebytype(cellvalue, { name: column.datafield, type: 'date' });
                                    }
                                }

                                editor.jqxDateTimeInput('setDate', date);
                            }
                            else {
                                editor.jqxDateTimeInput('setDate', null);
                            }

                            if (this.editcell.defaultvalue != undefined) {
                                editor.jqxDateTimeInput('setDate', this.editcell.defaultvalue);
                            }
                        }
                        if (focusable) {
                            setTimeout(function () {
                                focuseditor(editor.jqxDateTimeInput('dateTimeInput'));
                            }, 10);
                        }
                    }
                    break;
                case "numberinput":
                    if (this.host.jqxNumberInput) {
                        element.innerHTML = "";
                        var datafieldname = $.trim(column.datafield).split(" ").join("");
                        if (datafieldname.indexOf('.') != -1) {
                            datafieldname = datafieldname.replace('.', "");
                        }
                        var numbereditor = this.editors["numberinput" + "_" + datafieldname];
                        editor = numbereditor == undefined ? $("<div style='border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='numbereditor'></div>") : numbereditor;
                        editor.show();
                        editor.css('top', $(element).parent().position().top);
                        if (this.oldhscroll) {
                            editor.css('left', -left + parseInt($(element).position().left));
                        }
                        else {
                            editor.css('left', parseInt($(element).position().left));
                        }
                        if (column.pinned) {
                            editor.css('left', left + parseInt($(element).position().left));
                        }

                        if (numbereditor == undefined) {
                            editor.prependTo(this.table);
                            editor[0].id = "numbereditor" + this.element.id + datafieldname;
                            var symbol = '';
                            var symbolPosition = 'left';
                            var digits = 2;
                            if (column.cellsformat) {
                                if (column.cellsformat.indexOf('c') != -1) {
                                    symbol = this.gridlocalization.currencysymbol;
                                    symbolPosition = this.gridlocalization.currencysymbolposition;
                                    if (symbolPosition == 'before') symbolPosition = 'left';
                                    else symbolPosition = 'right';
                                    if (column.cellsformat.length > 1)
                                    {
                                        digits = parseInt(column.cellsformat.substring(1), 10);
                                    }
                                }
                                else if (column.cellsformat.indexOf('p') != -1) {
                                    symbol = this.gridlocalization.percentsymbol;
                                    symbolPosition = 'right';
                                    if (column.cellsformat.length > 1) {
                                        digits = parseInt(column.cellsformat.substring(1), 10);
                                    }
                                }
                            }
                            else digits = 0;

                            editor.jqxNumberInput({decimalSeparator: this.gridlocalization.decimalseparator, decimalDigits: digits, inputMode: 'simple', theme: this.theme, rtl: this.rtl, width: $element.width() - 1, height: $element.height() - 1, spinButtons: true, symbol: symbol, symbolPosition: symbolPosition });
                            this.editors["numberinput" + "_" + datafieldname] = editor;
                            if (column.createeditor) {
                                column.createeditor(row, cellvalue, editor);
                            }
                        }
                        if (column._requirewidthupdate) {
                            editor.jqxNumberInput({ width: $element.width() - 2 });
                        }
                        if (init) {
                            if (cellvalue != "" && cellvalue != null) {
                                var decimal = cellvalue;
                                editor.jqxNumberInput('setDecimal', decimal);
                            }
                            else {
                                editor.jqxNumberInput('setDecimal', 0);
                            }

                            if (this.editcell.defaultvalue != undefined) {
                                editor.jqxNumberInput('setDecimal', this.editcell.defaultvalue);
                            }

                            if (this.editchar && this.editchar.length > 0) {
                                var digit = parseInt(this.editchar);
                                if (!isNaN(digit)) {
                                    editor.jqxNumberInput('setDecimal', digit);
                                }
                            }

                            if (focusable) {
                                setTimeout(function () {
                                    focuseditor(editor.jqxNumberInput('numberInput'));
                                    editor.jqxNumberInput('_setSelectionStart', 0);
                                    if (me.editchar) {
                                        if (column.cellsformat.length > 0) {
                                            editor.jqxNumberInput('_setSelectionStart', 2);
                                        }
                                        else {
                                            editor.jqxNumberInput('_setSelectionStart', 1);
                                        }
                                        me.editchar = null;
                                    }
                                    else {
                                        var spinbuttons = editor.jqxNumberInput('spinButtons');
                                        if (spinbuttons) {
                                            var val = editor.jqxNumberInput('numberInput').val();
                                            me._setSelection(editor.jqxNumberInput('numberInput')[0], val.length, val.length);
                                        }
                                        else {
                                            var val = editor.jqxNumberInput('numberInput').val();
                                            me._setSelection(editor.jqxNumberInput('numberInput')[0], 0, val.length);
                                        }
                                    }
                                }, 10);
                            }
                        }
                    }
                    break;
                case "custom":
                    element.innerHTML = "";
                    var datafieldname = $.trim(column.datafield).split(" ").join("");
                    if (datafieldname.indexOf('.') != -1) {
                        datafieldname = datafieldname.replace('.', "");
                    }
                    var customeditor = this.editors["customeditor" + "_" + datafieldname + "_" + row];
                    editor = customeditor == undefined ? $("<div style='overflow: hidden; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='customeditor'></div>") : customeditor;
                    editor.show();
                    editor.css('top', $(element).parent().position().top);
                    if (this.oldhscroll) {
                        editor.css('left', -left + parseInt($(element).position().left));
                    }
                    else {
                        editor.css('left', parseInt($(element).position().left));
                    }
                    if (column.pinned) {
                        editor.css('left', left + parseInt($(element).position().left));
                    }

                    if (customeditor == undefined) {
                        editor.prependTo(this.table);
                        editor[0].id = "customeditor" + this.element.id + datafieldname + "_" + row;
                        this.editors["customeditor" + "_" + datafieldname + "_" + row] = editor;
                        var width = $element.width() - 1;
                        var height = $element.height() - 1;
                        editor.width(width);
                        editor.height(height);

                        if (column.createeditor) {
                            column.createeditor(row, cellvalue, editor, celltext, width, height, this.editchar);
                        }
                    }
                    if (column._requirewidthupdate) {
                        editor.width($element.width() - 2);
                    }
                    break;
                case "template":
                    element.innerHTML = "";
                    var datafieldname = $.trim(column.datafield).split(" ").join("");
                    if (datafieldname.indexOf('.') != -1) {
                        datafieldname = datafieldname.replace('.', "");
                    }
                    var templateeditor = this.editors["templateeditor" + "_" + datafieldname];
                    editor = templateeditor == undefined ? $("<div style='overflow: hidden; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 99999; top: 0px; left: 0px; position: absolute;' id='templateeditor'></div>") : templateeditor;
                    editor.show();
                    editor.css('top', $(element).parent().position().top);
                    if (this.oldhscroll) {
                        editor.css('left', -left + parseInt($(element).position().left));
                    }
                    else {
                        editor.css('left', parseInt($(element).position().left));
                    }
                    if (column.pinned) {
                        editor.css('left', left + parseInt($(element).position().left));
                    }

                    if (templateeditor == undefined) {
                        editor.prependTo(this.table);
                        editor[0].id = "templateeditor" + this.element.id + datafieldname;
                        this.editors["templateeditor" + "_" + datafieldname] = editor;
                        var width = $element.width() - 1;
                        var height = $element.height() - 1;
                        editor.width(width);
                        editor.height(height);
                  
                        if (column.createeditor) {
                            column.createeditor(row, cellvalue, editor, celltext, width, height, this.editchar);
                        }
                    }
                    if (column._requirewidthupdate) {
                        editor.width($element.width() - 2);
                    }
                    break;
                case "textbox":
                default:
                    element.innerHTML = "";
                    editor = this.editors["textboxeditor" + "_" + column.datafield] || $("<input autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' type='textbox' id='textboxeditor'/>");
                    editor[0].id = "textboxeditor" + this.element.id + column.datafield;
                    editor.appendTo($element);

                    if (this.rtl) {
                        editor.css('direction', 'rtl');
                    }

                    if (init || editor[0].className == "") {
                        editor.addClass(this.toThemeProperty('jqx-input'));
                        editor.addClass(this.toThemeProperty('jqx-widget-content'));
                        if (this.editchar && this.editchar.length > 0) {
                            editor.val(this.editchar);
                        }
                        else {
                            if (column.cellsformat != "") {
                                cellvalue = this.getcelltext(row, datafield);
                            }
                            if (cellvalue == undefined) {
                                cellvalue = "";
                            }
                            editor.val(cellvalue);
                        }

                        if (this.editcell.defaultvalue != undefined) {
                            editor.val(this.editcell.defaultvalue);
                        }
                        editor.width($element.width()+1);
                        editor.height($element.height()+1);

                        if (column.createeditor) {
                            column.createeditor(row, cellvalue, editor);
                        }

                        if (column.cellsformat != "") {
                            if (column.cellsformat.indexOf('p') != -1 || column.cellsformat.indexOf('c') != -1 || column.cellsformat.indexOf('n') != -1 || column.cellsformat.indexOf('f') != -1) {
                                if (!this.editors["textboxeditor" + "_" + column.datafield]) {
                                    editor.keydown(function (event) {
                                        var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
                                        var letter = String.fromCharCode(key);
                                        var charDigit = parseInt(letter);
                                        if (isNaN(charDigit))
                                            return true;
                                        if (me._selection(editor).length > 0)
                                            return true;
                                       
                                        var val = "";
                                        var cellvalue = editor.val();
                                        if (column.cellsformat.length > 1) {
                                            var decimalOffset = parseInt(column.cellsformat.substring(1));
                                            if (isNaN(decimalOffset)) decimalOffset = 0;
                                        }
                                        else {
                                            var decimalOffset = 0;
                                        }

                                        if (decimalOffset > 0) {
                                            if (cellvalue.indexOf(me.gridlocalization.decimalseparator) != -1) {
                                                if (me._selection(editor).start > cellvalue.indexOf(me.gridlocalization.decimalseparator)) {
                                                    return true;
                                                }
                                            }
                                        }

                                        for (var t = 0; t < cellvalue.length - decimalOffset; t++) {
                                            var ch = cellvalue.substring(t, t + 1);
                                            if (ch.match(/^[0-9]+$/) != null) {
                                                val += ch;
                                            }
                                        }
                                        if (val.length >= 11) {
                                            return false;
                                        }
                                    });
                                }
                            }
                        }
                    }

                    this.editors["textboxeditor" + "_" + column.datafield] = editor;

                    if (init) {
                        if (focusable) {
                            setTimeout(function () {
                                focuseditor(editor);
                                if (me.editchar) {
                                    me._setSelection(editor[0], 1, 1);
                                    me.editchar = null;
                                }
                                else {
                                    me._setSelection(editor[0], 0, editor.val().length);
                                }
                            }, 25);
                        }
                    }
                    break;
            }

            if (init) {
                if (column.initeditor) {
                    column.initeditor(row, cellvalue, editor, celltext, this.editchar);
                }
            }

            if (editor) {
                editor[0].style.zIndex = 1 + element.style.zIndex;
                if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                    editor[0].style.zIndex = 1+this.columns.records.length + element.style.zIndex;
                }
                editor.css('display', 'block');
                this.editcell.editor = editor;
                if (!this.editcell[datafield]) {
                    this.editcell[datafield] = {};
                    this.editcell[datafield].editor = editor;
                }
                else {
                    this.editcell[datafield].editor = editor;
                }
            }
            if (me.isTouchDevice()) {
                return;
            }

            setTimeout(function () {
                if (me.content) {
                    me.content[0].scrollTop = 0;
                    me.content[0].scrollLeft = 0;
                }
                if (me.gridcontent) {
                    me.gridcontent[0].scrollLeft = 0;
                    me.gridcontent[0].scrollTop = 0;
                }
            }, 10);
        },

        _setSelection: function (textbox, start, end) {
            try {
                if ('selectionStart' in textbox) {
                    textbox.setSelectionRange(start, end);
                }
                else {
                    var range = textbox.createTextRange();
                    range.collapse(true);
                    range.moveEnd('character', end);
                    range.moveStart('character', start);
                    range.select();
                }
            }
            catch (error) {
                var err = error;
            }
        },

        _hideeditors: function () {
            if (this.editcells != null) {
                var me = this;
                for (var obj in this.editcells) {
                    me.editcell = me.editcells[obj];
                    me._hidecelleditor();
                }
            }
        },

        _hidecelleditor: function (focus) {
            if (!this.editcell) {
                return;
            }
      
            if (this.editmode === "selectedrow") {
                for (var i = 0; i < this.columns.records.length; i++) {
                    var column = this.columns.records[i];
                    if (this.editcell[column.datafield] && this.editcell[column.datafield].editor) {
                        this.editcell[column.datafield].editor.hide();
                        var editor = this.editcell[column.datafield].editor;
                        switch (column.columntype) {
                            case "dropdownlist":
                                editor.jqxDropDownList({ closeDelay: 0 });
                                editor.jqxDropDownList('hideListBox');
                                editor.jqxDropDownList({ closeDelay: 300 });
                                break;
                            case "combobox":
                                editor.jqxComboBox({ closeDelay: 0 });
                                editor.jqxComboBox('hideListBox');
                                editor.jqxComboBox({ closeDelay: 300 });
                                break;
                            case "datetimeinput":
                                if (editor.jqxDateTimeInput('isOpened')) {
                                    editor.jqxDateTimeInput({ closeDelay: 0 });
                                    editor.jqxDateTimeInput('hideCalendar');
                                    editor.jqxDateTimeInput({ closeDelay: 300 });
                                }
                                break;
                        }
                    }
                }
                if (this.validationpopup) {
                    this.validationpopup.hide();
                    this.validationpopuparrow.hide();
                }
                return;
            }

            if (this.editcell.columntype == 'checkbox') {
                return;
            }

            if (this.editcell.editor) {
                this.editcell.editor.hide();
                switch (this.editcell.columntype) {
                    case "dropdownlist":
                        this.editcell.editor.jqxDropDownList({ closeDelay: 0 });
                        this.editcell.editor.jqxDropDownList('hideListBox');
                        this.editcell.editor.jqxDropDownList({ closeDelay: 300 });
                        break;
                    case "combobox":
                        this.editcell.editor.jqxComboBox({ closeDelay: 0 });
                        this.editcell.editor.jqxComboBox('hideListBox');
                        this.editcell.editor.jqxComboBox({ closeDelay: 300 });
                        break;
                    case "datetimeinput":
                        var datetimeeiditor = this.editcell.editor;
                        if (datetimeeiditor.jqxDateTimeInput('isOpened')) {
                            datetimeeiditor.jqxDateTimeInput({ closeDelay: 0 });
                            datetimeeiditor.jqxDateTimeInput('hideCalendar');
                            datetimeeiditor.jqxDateTimeInput({ closeDelay: 300 });
                        }
                        break;
                }
            }

            if (this.validationpopup) {
                this.validationpopup.hide();
                this.validationpopuparrow.hide();
            }
            if (!this.isNestedGrid) {
                if (focus != false) {
                    this.element.focus();
                }
            }
        },

        _geteditorvalue: function (column) {
            var value = new String();
            if (!this.editcell) {
                return null;
            }

            var editor = this.editcell.editor;
            if (this.editmode == "selectedrow") {
                if (this.editcell[column.datafield]) {
                    var editor = this.editcell[column.datafield].editor;
                }
            }

            if (editor) {
                switch (column.columntype) {
                    case "textbox":
                    default:
                        value = editor.val();
                        if (column.cellsformat != "") {
                            var type = 'string';
                            var datafields = this.source.datafields || ((this.source._source) ? this.source._source.datafields : null);

                            if (datafields) {
                                var foundType = "";
                                $.each(datafields, function () {
                                    if (this.name == column.displayfield) {
                                        if (this.type) {
                                            foundType = this.type;
                                        }
                                        return false;
                                    }
                                });
                                if (foundType)
                                    type = foundType;
                            }

                            var number = type === "number" || type === "float" || type === "int" || type === "integer";
                            var date = type === "date" || type === "time";
                            if (number || (type === "string" && (column.cellsformat.indexOf('p') != -1 || column.cellsformat.indexOf('c') != -1 || column.cellsformat.indexOf('n') != -1 || column.cellsformat.indexOf('f') != -1))) {
                                if (value === "" && column.nullable)
                                    return "";

                                if (value.indexOf(this.gridlocalization.currencysymbol) > -1) {
                                    // remove currency symbol
                                    value = value.replace(this.gridlocalization.currencysymbol, "");
                                }
                               
                                var replaceAll = function(text, stringToFind, stringToReplace) {
                                    var temp = text;
                                    if (stringToFind == stringToReplace) return text;

                                    var index = temp.indexOf(stringToFind);
                                    while (index != -1) {
                                        temp = temp.replace(stringToFind, stringToReplace);
                                        index = temp.indexOf(stringToFind)
                                    }
                              
                                    return temp;
                                }

                                value = replaceAll(value, this.gridlocalization.thousandsseparator, "");
                                value = value.replace(this.gridlocalization.decimalseparator, ".");

                                if (value.indexOf(this.gridlocalization.percentsymbol) > -1) {
                                    value = value.replace(this.gridlocalization.percentsymbol, "");
                                }

                                var val = "";
                                for (var t = 0; t < value.length; t++) {
                                    var ch = value.substring(t, t + 1);
                                    if (ch === "-") val += "-";
                                    if (ch === ".") val += ".";
                                    if (ch.match(/^[0-9]+$/) != null) {
                                        val += ch;
                                    }
                                }

                                value = val;
                                value = value.replace(/ /g, "");

                                value = new Number(value);
                                if (isNaN(value))
                                    value = "";
                            }
                            if (date || (type === "string" && (column.cellsformat.indexOf('H') != -1 || column.cellsformat.indexOf('m') != -1 || column.cellsformat.indexOf('M') != -1 || column.cellsformat.indexOf('y') != -1
                                || column.cellsformat.indexOf('h') != -1 || column.cellsformat.indexOf('d') != -1))) {
                                if (value === "" && column.nullable)
                                    return "";

                                var tmpValue = value;
                                value = new Date(value);
                                if (value == "Invalid Date" || value == null) {
                                    if ($.jqx.dataFormat) {
                                        value = $.jqx.dataFormat.tryparsedate(tmpValue, this.gridlocalization);
                                    }
                                    if (value == "Invalid Date" || value == null) {
                                        value = "";
                                    }
                                }
                            }

                        }
                        if (column.displayfield != column.datafield) {
                            value = { label: value, value: value };
                        }
                        break;
                    case "checkbox":
                        if (editor.jqxCheckBox) {
                            value = editor.jqxCheckBox('checked');
                        }
                        break;
                    case "datetimeinput":
                        if (editor.jqxDateTimeInput) {
                            editor.jqxDateTimeInput({ isEditing: false });
                            editor.jqxDateTimeInput('_validateValue');
                            value = editor.jqxDateTimeInput('getDate');
                            if (value == null) return null;
                            value = new Date(value.toString());
                            if (column.displayfield != column.datafield) {
                                value = { label: value, value: value };
                            }
                        }
                        break;
                    case "dropdownlist":
                        if (editor.jqxDropDownList) {
                            var selectedIndex = editor.jqxDropDownList('selectedIndex');
                            var item = editor.jqxDropDownList('listBox').getVisibleItem(selectedIndex);
                            if (column.displayfield != column.datafield) {
                                if (item) {
                                    value = { label: item.label, value: item.value };
                                }
                                else value = "";
                            }
                            else {
                                if (item) value = item.label;
                                else value = "";
                            }

                            if (value == null) {
                                value = "";
                            }
                        }
                        break;
                    case "combobox":
                        if (editor.jqxComboBox) {
                            value = editor.jqxComboBox('val');
                            if (column.displayfield != column.datafield) {
                                var item = editor.jqxComboBox('getSelectedItem');
                                if (item != null) {
                                    value = { label: item.label, value: item.value };
                                }
                            }

                            if (value == null) {
                                value = "";
                            }
                        }
                        break;
                    case "numberinput":
                        if (editor.jqxNumberInput) {
                            if (this.touchdevice) {
                                editor.jqxNumberInput('_doTouchHandling');
                            }
                            var decimal = editor.jqxNumberInput('getDecimal');
                            value = new Number(decimal);
                            value = parseFloat(value);
                            if (isNaN(value)) {
                                value = 0;
                            }
                            if (column.displayfield != column.datafield) {
                                value = { label: value, value: value };
                            }
                        }
                        break;
                }
                if (column.geteditorvalue) {
                    if (this.editmode == "selectedrow") {
                        value = column.geteditorvalue(this.editcell.row, this.getcellvalue(this.editcell.row, column.datafield), editor);
                    }
                    else {
                        value = column.geteditorvalue(this.editcell.row, this.editcell.value, editor);
                    }
                }
            }
            return value;
        },

        hidevalidationpopups: function () {
            if (this.popups) {
                $.each(this.popups, function () {
                    this.validation.remove();
                    this.validationrow.remove();
                });
                this.popups = new Array();
            }
            if (this.validationpopup) {
                this.validationpopuparrow.hide();
                this.validationpopup.hide();
            }
        },


        showvalidationpopup: function (row, datafield, message) {
            if (message == undefined) {
                var message = this.gridlocalization.validationstring;
            }

            var validationpopup = $("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;'></div>");
            var validationpopuparrow = $("<div style='width: 20px; height: 20px; z-index: 999999; top: 0px; left: 0px; position: absolute;'></div>");
            validationpopup.html(message);
            validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));
            validationpopup.addClass(this.toThemeProperty('jqx-grid-validation'));
            validationpopup.addClass(this.toThemeProperty('jqx-rc-all'));
            validationpopup.prependTo(this.table);
            validationpopuparrow.prependTo(this.table);

            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var left = parseInt(horizontalscrollvalue);
            var element = this.getcolumn(datafield).uielement;
            var rowElement = $(this.hittestinfo[row].visualrow);
            validationpopup.css('top', parseInt(rowElement.position().top) + 30 + 'px');

            var topposition = parseInt(validationpopup.css('top'));

            validationpopuparrow.css('top', topposition - 12);
            validationpopuparrow.removeClass();
            validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));

            var negativePosition = false;
            if (topposition >= this._gettableheight()) {
                validationpopuparrow.removeClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));
                validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-down'));
                topposition = parseInt(rowElement.position().top) - this.rowsheight - 5;
                if (topposition < 0) {
                    topposition = 0;
                    this.validationpopuparrow.removeClass(this.toThemeProperty('jqx-grid-validation-arrow-down'));
                    negativePosition = true;
                }
                validationpopup.css('top', topposition + 'px');
                validationpopuparrow.css('top', topposition + validationpopup.outerHeight() - 9);
            }
            var leftposition = -left + parseInt($(element).position().left);

            validationpopuparrow.css('left', left + leftposition + 30);

            var width = validationpopup.width();
            if (width + leftposition > this.host.width() - 20) {
                var offset = width + leftposition - this.host.width() + 40;
                leftposition -= offset;
            }

            if (!negativePosition) {
                validationpopup.css('left', left + leftposition);
            } else {
                validationpopup.css('left', left + parseInt($(element).position().left) - validationpopup.outerWidth());
            }

            validationpopup.show();
            validationpopuparrow.show();
            if (!this.popups) {
                this.popups = new Array();
            }
            this.popups[this.popups.length] = { validation: validationpopup, validationrow: validationpopuparrow };
        },

        _showvalidationpopup: function (row, datafield, message) {
            var editor = this.editcell.editor;
            if (this.editmode == "selectedrow") {
                var editcell = this.editcell[datafield];
                if (editcell && editcell.editor) {
                    editor = editcell.editor;
                    editcell.element = editor;
                }
            }

            if (!editor)
                return;

            if (this.validationpopup && $.jqx.isHidden(this.validationpopup)) {
                if (this.validationpopup.remove) {
                    this.validationpopup.remove();
                    this.validationpopuparrow.remove();
                }
                this.validationpopup = null;
                this.validationpopuparrow = null;
                if (datafield === undefined && message === undefined && this.editors && this.editors.length === 0) {
                    return;
                }
            }

            if (!this.validationpopup) {
                var validationpopup = $("<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;'></div>");
                var validationpopuparrow = $("<div style='width: 20px; height: 20px; z-index: 999999; top: 0px; left: 0px; position: absolute;'></div>");
                validationpopup.html(message);
                validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));
                validationpopup.addClass(this.toThemeProperty('jqx-grid-validation'));
                validationpopup.addClass(this.toThemeProperty('jqx-rc-all'));
                validationpopup.prependTo(this.table);
                validationpopuparrow.prependTo(this.table);
                this.validationpopup = validationpopup;
                this.validationpopuparrow = validationpopuparrow;
            }
            else {
                this.validationpopup.html(message);
            }

            var hScrollInstance = this.hScrollInstance;
            var horizontalscrollvalue = hScrollInstance.value;
            var left = parseInt(horizontalscrollvalue);

            this.validationpopup.css('top', parseInt($(this.editcell.element).parent().position().top) + (this.rowsheight + 5) + 'px');

            var topposition = parseInt(this.validationpopup.css('top'));

            this.validationpopuparrow.css('top', topposition - 12);
            this.validationpopuparrow.removeClass();
            this.validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));
            var height = this._gettableheight();

            var negativePosition = false;
            if (topposition >= height) {
                this.validationpopuparrow.removeClass(this.toThemeProperty('jqx-grid-validation-arrow-up'));
                this.validationpopuparrow.addClass(this.toThemeProperty('jqx-grid-validation-arrow-down'));
                topposition = parseInt($(this.editcell.element).parent().position().top) - this.rowsheight - 5;
                if (topposition < 0) {
                    topposition = 0;
                    this.validationpopuparrow.removeClass(this.toThemeProperty('jqx-grid-validation-arrow-down'));
                    negativePosition = true;
                }

                this.validationpopup.css('top', topposition + 'px');
                this.validationpopuparrow.css('top', topposition + this.validationpopup.outerHeight() - 9);
            }
            var leftposition = -left + parseInt($(this.editcell.element).position().left);

            this.validationpopuparrow.css('left', left + leftposition + 30);

            var width = this.validationpopup.width();
            if (width + leftposition > this.host.width() - 20) {
                var offset = width + leftposition - this.host.width() + 40;
                leftposition -= offset;
            }

            if (!negativePosition) {
                this.validationpopup.css('left', left + leftposition);
            }
            else {
                this.validationpopup.css('left', left + parseInt($(this.editcell.element).position().left) - this.validationpopup.outerWidth());
            }

            this.validationpopup.show();
            this.validationpopuparrow.show();
        }
    });
})(jQuery);



/*
 * file from "src\jqxgrid.grouping.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
    $.jqx.dataview.grouping = function () {
        this.loadgrouprecords = function (startvisibleindex, startindex, endindex, filter, currentPageIndex, updated, rows, rl, diff) {
            var visualRows = startvisibleindex;
            var self = this;
            var groupHashCodes = new Array();
            for (var iGroupColumn = 0; iGroupColumn < self.groups.length; iGroupColumn++) {
                groupHashCodes[iGroupColumn] = self.generatekey();
            }
            var grouprecords = new Array();
            var grouprecordsindex = 0;
            var groupHashCodes = groupHashCodes;
            var hashRowGroups = new Array();

            var i = startindex;
            var currentRowIndex = startindex;
            var groupslength = self.groups.length;
            this.loadedrecords = new Array();

            this.bounditems = new Array();
            this.loadedrecords = new Array(); // all data records ready for rendering.
            this.loadedrootgroups = new Array(); // all groups ready for rendering
            this.loadedgroups = new Array(); // all groups ready for rendering
            this.loadedgroupsByKey = new Array(); // all groups ready for rendering
            this.sortedgroups = new Array();

            var hassortdata = this.sortdata != null;
            var data = hassortdata ? this.sortdata : this.records;
            if (this.pageable) {
                var tmpToString = Object.prototype.toString;
                var field = this.groups[0];
                Object.prototype.toString = (typeof field == "function") ? field : function () { return this[field] };
                    var items = new Array();
                    var index = 0;
                    $.each(data, function () {
                        items[startindex + index++] = this;
                    });
                    data = items;
          
                if (!hassortdata) {
                    data.sort(function (value1, value2) {
                        if (value1 === undefined) { value1 = null; }
                        if (value2 === undefined) { value2 = null; }
                        if (value1 === null && value2 === null) {
                            return 0;
                        }
                        if (value1 === null && value2 !== null) {
                            return 1;
                        }
                        if (value1 !== null && value2 === null) {
                            return -1;
                        }

                        value1 = value1.toString();
                        value2 = value2.toString();

                        if ($.jqx.dataFormat.isNumber(value1) && $.jqx.dataFormat.isNumber(value2)) {
                            if (value1 < value2) { return -1; }
                            if (value1 > value2) { return 1; }
                            return 0;
                        }
                        else if ($.jqx.dataFormat.isDate(value1) && $.jqx.dataFormat.isDate(value2)) {
                            if (value1 < value2) { return -1; }
                            if (value1 > value2) { return 1; }
                            return 0;
                        }
                        else if (!$.jqx.dataFormat.isNumber(value1) && !$.jqx.dataFormat.isNumber(value2)) {
                            value1 = String(value1).toLowerCase();
                            value2 = String(value2).toLowerCase();
                        }

                        try {
                            if (value1 < value2) { return -1; }
                            if (value1 > value2) { return 1; }
                        }
                        catch (error) {
                            var er = error;
                        }

                        return 0;
                    });
                }
                else {
                    data.sort(function (value1, value2) {
                        var value1 = value1.value;
                        var value2 = value2.value;
                        if (value1 === undefined) { value1 = null; }
                        if (value2 === undefined) { value2 = null; }
                        if (value1 === null && value2 === null) {
                            return 0;
                        }
                        if (value1 === null && value2 !== null) {
                            return 1;
                        }
                        if (value1 !== null && value2 === null) {
                            return -1;
                        }

                        if ($.jqx.dataFormat.isNumber(value1) && $.jqx.dataFormat.isNumber(value2)) {
                            if (value1 < value2) { return -1; }
                            if (value1 > value2) { return 1; }
                            return 0;
                        }
                        else if ($.jqx.dataFormat.isDate(value1) && $.jqx.dataFormat.isDate(value2)) {
                            if (value1 < value2) { return -1; }
                            if (value1 > value2) { return 1; }
                            return 0;
                        }
                        else if (!$.jqx.dataFormat.isNumber(value1) && !$.jqx.dataFormat.isNumber(value2)) {
                            value1 = String(value1).toLowerCase();
                            value2 = String(value2).toLowerCase();
                        }

                        try {
                            if (value1 < value2) { return -1; }
                            if (value1 > value2) { return 1; }
                        }
                        catch (error) {
                            var er = error;
                        }

                        return 0;
                    });
                }
                Object.prototype.toString = tmpToString;
            }

            if (this.virtualmode) {
                var items = new Array();
                var index = 0;
                for (var i = 0; i < endindex - startindex; i++) {
                    items[startindex + index++] = data[i];
                }
                i = 0;
                data = items;
            }

            for (var obj = startindex; obj < endindex; obj++) {
                var item = {};

                if (!hassortdata) {
                    item = $.extend({}, data[obj]);
                }
                else {
                    item = $.extend({}, data[obj].value);
                }

                id = item[self.uniqueId];


                if (currentPageIndex >= rl || id != rows[currentPageIndex][self.uniqueId] || (updated && updated[id]))
                    diff[diff.length] = currentPageIndex;

                var itemKeysHierarchy = new Array();
                var keys = 0;
                for (var iGroupColumn = 0; iGroupColumn < groupslength; iGroupColumn++) {
                    var group = self.groups[iGroupColumn];
                    var value = item[group];
                    if (value == null) value = "";
                    itemKeysHierarchy[keys++] = { value: value, hash: groupHashCodes[iGroupColumn] };
                }

                if (itemKeysHierarchy.length != groupslength)
                    break;

                var parentItem = null;

                var lookupKey = "";
                var iLevel = -1;

                for (var q = 0; q < itemKeysHierarchy.length; q++) {
                    iLevel++;
                    var itemKey = itemKeysHierarchy[q].value;
                    var columnHash = itemKeysHierarchy[q].hash;
                    lookupKey = lookupKey + "_" + columnHash + "_" + itemKey;

                    if (hashRowGroups[lookupKey] != undefined && hashRowGroups[lookupKey] != null) {
                        parentItem = hashRowGroups[lookupKey];
                        continue;
                    }

                    if (parentItem == null) {
                        parentItem = { group: itemKey, subItems: new Array(), subGroups: new Array(), level: 0 };
                        grouprecords[grouprecordsindex++] = parentItem;
                        parentItem.uniqueid = self.generatekey();
                        self.loadedgroupsByKey[itemKey] = parentItem;
                    }
                    else {
                        var subItem = { group: itemKey, subItems: new Array(), subGroups: new Array(), parentItem: parentItem, level: parentItem.level + 1 };
                        self.loadedgroupsByKey[parentItem.uniqueid + '_' + itemKey] = subItem;
                        subItem.uniqueid = self.generatekey();
                        parentItem.subGroups[parentItem.subGroups.length++] = subItem;
                        parentItem = subItem;
                    }

                    hashRowGroups[lookupKey] = parentItem;
                }

                if (parentItem != null) {
                    if (!item.uid) {
                        item.uid = this.getid(this.source.id, item, i);
                    }

                    if (!hassortdata) {
                        item.boundindex = i;
                        this.recordsbyid["id" + item.uid] = data[obj];
                    }
                    else {
                        item.boundindex = data[obj].index;
                        this.recordsbyid["id" + item.uid] = data[obj].value;
                    }

                    this.bounditems[item.boundindex] = item;
                    this.sortedgroups[i] = item;
                    item.uniqueid = self.generatekey();
                    item.parentItem = parentItem;
                    item.level = parentItem.level + 1;

                    parentItem.subItems[parentItem.subItems.length++] = item;
                }
                else {
                    if (!item.uid) {
                        item.uid = this.getid(this.source.id, item, i);
                    }

                    if (!hassortdata) {
                        item.boundindex = i;
                        this.recordsbyid["id" + item.uid] = data[obj];
                    }
                    else {
                        item.boundindex = data[obj].index;
                        this.recordsbyid["id" + item.uid] = data[obj].value;
                    }

                    this.sortedgroups[i] = item;
                    this.bounditems[item.boundindex] = item;
                    item.uniqueid = self.generatekey();
                }

                currentPageIndex++;

                i++;
                currentRowIndex++;
            };

            var loopitems = function (self, group, visualRows) {
                for (var m = 0; m < group.subItems.length; m++) {
                    group.subItems[m].visibleindex = startvisibleindex + visualRows;
                    self.rows[visualRows] = group.subItems[m];
                    self.loadedrecords[visualRows] = group.subItems[m];
                    visualRows++;
                }
                return visualRows
            }

            var loopGroups = function (self, group, visualRows) {
                var totals = function (group) {
                    if (self.aggregates == true) {
                        var olditem = group;

                        var item = {};
                        if (olditem != null) {
                            item.level = olditem.level;
                            item.visibleindex = startvisibleindex + visualRows;
                            item.uniqueid = self.generatekey();
                            self.rows[visualRows] = item;
                            self.loadedrecords[visualRows++] = item;
                            item.totalsrow = true;

                            if (group.subItems.length > 0) {
                                olditem = group.subItems[group.subItems.length - 1];
                                item.parentItem = olditem.parentItem;
                                if (item.parentItem.subItems) {
                                    item.parentItem.subItems[item.parentItem.subItems.length] = item;
                                }
                            }
                            else if (group.subGroups.length > 0) {
                                olditem = group.subGroups[group.subGroups.length - 1];
                                item.level = olditem.level;
                                item.parentItem = group;
                                group.subGroups[group.subGroups.length] = item;
                            }
                        }
                    }
                }
                for (subGroup in group.subGroups) {
                    var currentGroup = group.subGroups[subGroup];
                    if (currentGroup.subGroups) {
                        self.loadedgroups[self.loadedgroups.length] = currentGroup;
                        currentGroup.visibleindex = startvisibleindex + visualRows;
                        self.rows[visualRows] = currentGroup;
                        self.loadedrecords[visualRows] = currentGroup;
                        visualRows++;
                        if (currentGroup.subGroups.length > 0) {
                            visualRows = loopGroups(self, currentGroup, visualRows);
                        }
                        else if (currentGroup.subItems.length > 0) {
                            visualRows = loopitems(self, currentGroup, visualRows);
                        }
                        totals(currentGroup);
                    }
                }
                if (group.subItems.length > 0) {
                    visualRows = loopitems(self, group, visualRows);
                }
                totals(group);
                return visualRows;
            }

            var grouprecordslength = grouprecords.length;
            this.loadedgroups = new Array();
            this.rows = new Array();
            var visualRows = 0;

            for (var i = 0; i < grouprecordslength; i++) {
                var group = grouprecords[i];
                this.loadedrootgroups[i] = group;
                this.loadedgroups[this.loadedgroups.length] = group;
                group.visibleindex = startvisibleindex + visualRows;
                this.rows[visualRows] = group;
                this.loadedrecords[visualRows] = group;
                visualRows++;
                visualRows = loopGroups(this, group, visualRows);
            }


            return visualRows;
        }


        this._updategroupsinpage = function (self, filter, currentRowIndex, currentPageIndex, rl, start, end) {
            // create rows.
            var rows = new Array();

            var diff = [];
            if (this.groupable && this.groups.length > 0) {
                var visualrows = 0;
                var hashRowGroups = new Array();
                var groupHashCodes = new Array();
                for (var iGroupColumn = 0; iGroupColumn < self.groups.length; iGroupColumn++) {
                    groupHashCodes[iGroupColumn] = self.generatekey();
                }
                var i = 0;
                var grouprecords = new Array();
                var grouprecordsindex = 0;
                if (end > this.totalrecords) {
                    end = this.totalrecords;
                }
           
                for (var obj = start; obj < end; obj++) {
                    var item = $.extend({}, self.sortedgroups[obj]);
                    id = item[self.uniqueId];

                    if (!self.pagesize || (currentRowIndex >= self.pagesize * self.pagenum && currentRowIndex < self.pagesize * (self.pagenum + 1))) {
                        if (currentPageIndex >= rl || id != rows[currentPageIndex][self.uniqueId] || (updated && updated[id]))
                            diff[diff.length] = currentPageIndex;

                        var itemKeysHierarchy = new Array();
                        var keys = 0;
                        for (var iGroupColumn = 0; iGroupColumn < self.groups.length; iGroupColumn++) {
                            var group = self.groups[iGroupColumn];
                            var value = item[group];

                            if (null == value)
                                value = "";

                            itemKeysHierarchy[keys++] = { value: value, hash: groupHashCodes[iGroupColumn] };
                        }

                        if (itemKeysHierarchy.length != self.groups.length)
                            break;

                        var parentItem = null;

                        var lookupKey = "";
                        var iLevel = -1;

                        for (var q = 0; q < itemKeysHierarchy.length; q++) {
                            iLevel++;
                            var itemKey = itemKeysHierarchy[q].value;
                            var columnHash = itemKeysHierarchy[q].hash;
                            lookupKey = lookupKey + "_" + columnHash + "_" + itemKey;

                            if (hashRowGroups[lookupKey] != undefined && hashRowGroups[lookupKey] != null) {
                                parentItem = hashRowGroups[lookupKey];
                                continue;
                            }

                            if (parentItem == null) {
                                parentItem = { group: itemKey, subItems: new Array(), subGroups: new Array(), level: 0 };
                                grouprecords[grouprecordsindex++] = parentItem;
                                var initialgroup = self.loadedgroupsByKey[itemKey];
                                if (initialgroup != undefined) {
                                    parentItem.visibleindex = initialgroup.visibleindex;
                                    parentItem.uniqueid = initialgroup.uniqueid;
                                }
                            }
                            else {
                                var subItem = { group: itemKey, subItems: new Array(), subGroups: new Array(), parentItem: parentItem, level: parentItem.level + 1 };
                                var initialgroup = self.loadedgroupsByKey[parentItem.uniqueid + '_' + itemKey];
                                subItem.visibleindex = initialgroup.visibleindex;
                                subItem.uniqueid = initialgroup.uniqueid;
                                parentItem.subGroups[parentItem.subGroups.length++] = subItem;
                                parentItem = subItem;
                            }

                            hashRowGroups[lookupKey] = parentItem;
                        }

                        if (parentItem != null) {
                            item.parentItem = parentItem;
                            item.level = parentItem.level + 1;
                            parentItem.subItems[parentItem.subItems.length++] = item;
                        }

                        currentPageIndex++;
                    }
                    i++;
                    currentRowIndex++;
                };

                var loopitems = function (self, group, visualrows) {
                    for (var m = 0; m < group.subItems.length; m++) {
                        rows[visualrows] = $.extend({}, group.subItems[m]);
                        visualrows++;
                    }
                    return visualrows;
                }

                var anysubitems = function (group) {
                    var hasitems = false;

                    for (subGroup in group.subGroups) {
                        var currentGroup = group.subGroups[subGroup];
                        if (currentGroup.subGroups) {
                            if (currentGroup.subGroups.length > 0) {
                                var result = anysubitems(currentGroup);
                                if (result) {
                                    hasitems = true;
                                    return true;
                                }
                            }
                            if (currentGroup.subItems.length > 0) {
                                hasitems = true;
                                return true;
                            }
                        }
                    }
                    if (group.subItems.length > 0) {
                        hasitems = true;
                        return true;
                    }
                    return hasitems;
                }

                var loopGroups = function (self, group, visualrows) {
                    for (subGroup in group.subGroups) {
                        var currentGroup = group.subGroups[subGroup];

                        if (currentGroup.subGroups) {
                            if (anysubitems(currentGroup)) {
                                rows[visualrows] = currentGroup;
                                visualrows++;
                                if (currentGroup.subGroups.length > 0) {
                                    visualrows = loopGroups(self, currentGroup, visualrows);
                                }
                                else if (currentGroup.subItems.length > 0) {
                                    visualrows = loopitems(self, currentGroup, visualrows);
                                }
                            }
                        }
                    }
                    if (group.subItems.length > 0) {
                        visualrows = loopitems(self, group, visualrows);
                    }
                    return visualrows;
                }

                var parentgroup = 0;
                for (var i = 0; i < grouprecords.length; i++) {
                    var group = grouprecords[i];

                    if (anysubitems(group)) {
                        rows[visualrows] = group;
                        visualrows++;
                        visualrows = loopGroups(this, group, visualrows);
                    }
                }
            }

            return rows;
        }
    }

    $.extend($.jqx._jqxGrid.prototype, {
        _initgroupsheader: function () {
            this.groupsheader.css('visibility', 'hidden');
            if (this._groupsheader()) {
                this.groupsheader.css('visibility', 'inherit');
                var me = this;
                var groupsheaderstring = this.gridlocalization.groupsheaderstring;
                this.groupsheaderdiv = this.groupsheaderdiv || $('<div style="width: 100%; position: relative;"></div>');
                this.groupsheaderdiv.height(this.groupsheaderheight);
                this.groupsheaderdiv.css('top', 0);
                this.groupsheader.append(this.groupsheaderdiv);
                this.groupheadersbounds = new Array();

                var groupslength = this.groups.length;

                // remove handlers and children.
                this.groupsheaderdiv.children().remove();
                this.groupsheaderdiv[0].innerHTML = '';

                var groups = new Array();
                if (groupslength > 0) {
                    $.each(this.groups, function (index) {
                        var groupcolumn = this;
                        var groupcolumninfo = me._getColumnText(this);
                        var text = groupcolumninfo.label;
                        var group = me._rendergroupcolumn(text, groupcolumn);
                        group.addClass(me.toThemeProperty('jqx-grid-group-column'));
                        me.groupsheaderdiv.append(group);
                        if (me.closeablegroups) {
                            var closebutton = $(group.find('.jqx-icon-close'));
                            if (me.isTouchDevice() && me.touchmode !== true) {
                                me.addHandler(closebutton, 'touchstart', function () {
                                    me.removegroupat(index);
                                    return false;
                                });
                            }
                            else {
                                me.addHandler(closebutton, 'click', function () {
                                    me.removegroupat(index);
                                    return false;
                                });
                            } 
                        }
                        if (me.sortable) {
                            me.addHandler(group, 'click', function () {
                                var columnitem = me.getcolumn(groupcolumn);
                                if (columnitem != null) {
                                    me._togglesort(columnitem);
                                }
                                return false;
                            });
                        }
                        groups[groups.length] = group;
                        me._handlegroupstocolumnsdragdrop(this, group);
                        if (index < groupslength - 1) {
                            var height = group.height();
                            var line = $('<div style="float: left; position: relative;"></div>');
                            if (me.rtl) {
                                line.css('float', 'right');
                            }

                            line.width(me.groupindentwidth / 3);
                            line.height(1);
                            line.css('top', height / 2);
                            line.addClass(me.toThemeProperty('jqx-grid-group-column-line'));
                            me.groupsheaderdiv.append(line);
                        }
                    });
                }
                else {
                    var emptygroupselement = $('<div style="position: relative;">' + groupsheaderstring + '</div>');
                    this.groupsheaderdiv.append(emptygroupselement);
                    if (this.rtl) {
                        emptygroupselement.addClass(this.toThemeProperty('jqx-rtl'));
                    }
                }

                this._groupheaders = groups;
                this._updategroupheadersbounds();
            }
        },

        _updategroupheadersbounds: function () {
            var me = this;
            var headerdivheight = this.groupsheaderdiv.children().outerHeight();
            var top = (this.groupsheader.height() - headerdivheight) / 2;
            this.groupsheaderdiv.css('top', top);
            if (!this.rtl) {
                this.groupsheaderdiv.css('left', top);
            }
            else {
                this.groupsheaderdiv.css('right', top);
            }

            if (this.rtl) this._groupheaders.reverse();
            $.each(this._groupheaders, function (index) {
                var groupoffset = this.coord();
                me.groupheadersbounds[index] = { left: groupoffset.left, top: groupoffset.top, width: this.outerWidth(), height: this.outerHeight(), index: index };
            });

        },

        // adds a group.
        addgroup: function (datafield) {
            if (datafield) {
                var self = this;
                if (self.groups !== self.dataview.groups) {
                    self.dataview.groups = self.groups;
                }
                self.groups[self.groups.length] = datafield;
                self.refreshgroups();
                this._raiseEvent(12, { type: "Add", index: self.groups[self.groups.length], groups: self.groups });
            }
        },

        // inserts a new group.
        insertgroup: function (index, datafield) {
            if (index != undefined && index != null && index >= 0 && index <= this.groups.length) {
                if (datafield) {
                    var self = this;
                    if (self.groups !== self.dataview.groups) {
                        self.dataview.groups = self.groups;
                    }
                    self.groups.splice(index, 0, datafield.toString());
                    self.refreshgroups();
                    this._raiseEvent(12, { type: "Insert", index: index, groups: self.groups });
                }
            }
        },

        refreshgroups: function () {
            this._refreshdataview();
            this._render(true, true, true, false);
        },

        _insertaftergroup: function (groupfield, datafield) {
            var index = this._getGroupIndexByDataField(groupfield);
            this.insertgroup(index + 1, datafield);
        },

        _insertbeforegroup: function (groupfield, datafield) {
            var index = this._getGroupIndexByDataField(groupfield);
            this.insertgroup(index, datafield);
        },

        // removes a group by index.
        removegroupat: function (index) {
            if (index >= 0 && index != null && index != undefined) {
                var self = this;
                if (self.groups !== self.dataview.groups) {
                    self.dataview.groups = self.groups;
                }
                self.groups.splice(index, 1);
                self.refreshgroups();
                if (self.virtualmode) {
                    self.updatebounddata();
                }
                this._raiseEvent(12, { type: "Remove", index: index, groups: self.groups });
                return true;
            }
            return false;
        },

        cleargroups: function () {
            var self = this;
            self.groups = [];
            self.dataview.groups = self.groups;
            self.refreshgroups();
            this._raiseEvent(12, { type: "Clear", groups: self.groups });
            return true;
        },

        // removes a group by datafield
        removegroup: function (datafield) {
            if (datafield == null)
                return false;

            var index = this.groups.indexOf(datafield.toString());
            return this.removegroupat(index);
        },


        // gets the number of root groups.
        getrootgroupscount: function () {
            var count = this.dataview.loadedrootgroups.length;
            return count;
        },

        // collapses a group.
        collapsegroup: function (index) {
            return this._setrootgroupstate(index, false);
        },

        // expands a group.
        expandgroup: function (index) {
            return this._setrootgroupstate(index, true);
        },

        // collapses all groups.
        collapseallgroups: function (refresh) {
            this._setbatchgroupstate(false, refresh);
        },

        // expands all groups.
        expandallgroups: function (refresh) {
            this._setbatchgroupstate(true, refresh);
        },

        // gets a group by index.
        getgroup: function (index) {
            var group = this.dataview.loadedrootgroups[index];
            if (group == null)
                return null;

            var expanded = this.expandedgroups[group.uniqueid].expanded;
            var groupname = group.group;
            var level = group.level;

            var subgroups = new Array();
            this._getsubgroups(subgroups, group);
            var me = this;
            var obj = { group: groupname, level: level, expanded: expanded, subgroups: subgroups };
            if (group.subItems) {
                var items = new Array();
                $.each(group.subItems, function () {
                    var index = this.boundindex;
                    items[items.length] = me.getrowdata(index);
                });
                if (items.length > 0) {
                    obj.subrows = items;
                }
            }

            return obj;
        },

        getrootgroups: function () {
            var count = this.dataview.loadedrootgroups.length;
            var groups = new Array();
            for (var m = 0; m < count; m++) {
                groups[m] = this.getgroup(m);
            }
            return groups;
        },
    
        _getsubgroups: function (subgroups, group) {
            var me = this;
            for (obj in group.subGroups) {
                var subGroup = group.subGroups[obj];
                var expanded = me.expandedgroups[subGroup.uniqueid].expanded;
                var groupname = subGroup.group;
                var level = subGroup.level;
                subgroups[subgroups.length] = { group: groupname, level: level, expanded: expanded };
                if (subGroup.subItems) {
                    var items = new Array();
                    $.each(subGroup.subItems, function () {
                        var index = this.boundindex;
                        items[items.length] = me.getrowdata(index);
                    });
                    subgroups[subgroups.length - 1].subrows = items;
                }
                if (subGroup.subGroups) {
                    var childsubgroups = new Array();
                    me._getsubgroups(childsubgroups, subGroup);
                }
            }

            return subgroups;
        },

        _setbatchgroupstate: function (expanded, update) {
            var me = this;
            for (obj in this.dataview.loadedrootgroups) {
                me._setrootgroupstate(obj, expanded, false, true);
            }

            if (update == false) {
                me._requiresupdate = true;
                me._renderrows(me.virtualsizeinfo);
                return true;
            }

            var scrollBarVisibility = this.vScrollBar[0].style.visibility;
            this.rendergridcontent(true, false);
            if (scrollBarVisibility != this.vScrollBar[0].style.visibility || this._hiddencolumns) {
                this._updatecolumnwidths();
                this._updatecellwidths();
                this._renderrows(this.virtualsizeinfo);
            }

            return true;
        },

        _setrootgroupstate: function (index, expanded, refresh, applytosubgroups) {
            if (index == undefined || index == null || index < 0)
                return false;

            if (!this.groupable || this.groups.length == 0)
                return false;

            var update = refresh != undefined ? refresh : true;

            if (index >= 0 && index < this.dataview.loadedrootgroups.length) {
                var group = this.dataview.loadedrootgroups[index];
                if (this.pageable) {
                    var rootgroups = new Array();
                    for (var i = 0; i < this.dataview.rows.length; i++) {
                        if (this.dataview.rows[i].group != null && this.dataview.rows[i].level === 0) {
                            rootgroups.push(this.dataview.rows[i]);
                        }
                    }

                    group = rootgroups[index];
                    if (!group) {
                        return;
                    }
                }

                return this._setgroupstate(group, expanded, update, applytosubgroups);
            }

            return false;
        },

        _togglegroupstate: function (group, update) {
            if (group == null || group == undefined)
                return false;

            var scrollPosition = this.vScrollInstance.value;
            var groupstate = this.expandedgroups[group.uniqueid];
            if (groupstate == undefined) {
                groupstate = false;
            }
            else {
                groupstate = groupstate.expanded;
            }
            groupstate = !groupstate;
            var result = this._setgroupstate(group, groupstate, update);
            if (scrollPosition !== 0 && this.vScrollBar.css('visibility') !== 'hidden') {
                if (scrollPosition <= this.vScrollInstance.max) {
                    this.vScrollInstance.setPosition(scrollPosition);
                }
                else {
                    this.vScrollInstance.setPosition(this.vScrollInstance.max);
                }
            } return result;
        },

        _setgroupstate: function (group, expanded, update, applytosubgroups) {
            if (group == null || group == undefined)
                return false;

            var isDirty = false;
                
            if (this.editable && this.editcell) {
                this.endcelledit(this.editcell.row, this.editcell.column, false, false);
            }

            var groupstate = this.expandedgroups[group.uniqueid];
            if (groupstate == undefined) {
                groupstate = { expanded: false };
                isDirty = true;
            }

            if (groupstate.expanded != expanded) {
                isDirty = true;
            }

            if (isDirty) {
                this.expandedgroups[group.uniqueid] = { expanded: expanded, group: group };
                this._setsubgroupsvisibility(this, group, !expanded, applytosubgroups);
                if (update) {
                    var scrollBarVisibility = this.vScrollBar[0].style.visibility;
                    this.rendergridcontent(true, false);
                    if (scrollBarVisibility != this.vScrollBar[0].style.visibility || this._hiddencolumns) {
                        this._updatecolumnwidths();
                        this._updatecellwidths();
                        this._renderrows(this.virtualsizeinfo);
                    }
                }

                if (undefined == this.suspendgroupevents || this.suspendgroupevents == false) {
                    if (expanded) {
                        this._raiseEvent(4, { group: group.group, parentgroup: group.parentItem ? group.parentItem.group : null, level: group.level, visibleindex: group.visibleindex });
                    }
                    else {
                        this._raiseEvent(5, { group: group.group, parentgroup: group.parentItem ? group.parentItem.group : null, level: group.level, visibleindex: group.visibleindex });
                    }
                }

                return true;
            }

            return false;
        },

        _setgroupitemsvisibility: function (self, group, hidden) {
            for (var m = 0; m < group.subItems.length; m++) {
                self._setrowvisibility(group.subItems[m].visibleindex, hidden, false);
            }
        }, 
        
        _setsubgroupsvisibility: function (self, group, hidden, applytosubgroups) {
            if (group.parentItem != null) {
                if (this.hiddens[group.parentItem.visibleindex])
                    return;
            }
            else if (group.parentItem == null) {
                if (this.hiddens[group.visibleindex])
                    return;
            }

            for (subGroup in group.subGroups) {
                var currentGroup = group.subGroups[subGroup];

                if (!hidden) {
                    self._setrowvisibility(currentGroup.visibleindex, hidden, false);
                }

                var expanded = !hidden;

                if (!applytosubgroups) {
                    if (self.expandedgroups[currentGroup.uniqueid] == undefined) {
                        expanded = false;
                    }
                    else {
                        expanded = self.expandedgroups[currentGroup.uniqueid].expanded;
                    }
                }
                else {
                    this.expandedgroups[currentGroup.uniqueid] = { expanded: expanded, group: currentGroup };
                }

                if (currentGroup.subGroups) {
                    if (currentGroup.subGroups.length > 0) {
                        self._setsubgroupsvisibility(self, currentGroup, !expanded || hidden, applytosubgroups);
                    }
                    else if (currentGroup.subItems.length > 0) {
                        self._setgroupitemsvisibility(self, currentGroup, !expanded || hidden);
                    }
                }

                if (hidden) {
                    self._setrowvisibility(currentGroup.visibleindex, hidden, false);
                }
            }
            if (group.subItems && group.subItems.length > 0) {
                self._setgroupitemsvisibility(self, group, hidden);
            }
        },


        
        _handlecolumnsdragdrop: function () {
            var self = this;
            var dropindex = -1;
            var candrop = false;

            if (!self.groupable)
                return;

            var mousemove = 'mousemove.grouping' + this.element.id;
            var mousedown = 'mousedown.grouping' + this.element.id;
            var mouseup = 'mouseup.grouping' + this.element.id;

            var touchdevice = false;
            if (this.isTouchDevice() && this.touchmode !== true) {
                touchdevice = true;
                mousemove = $.jqx.mobile.getTouchEventName('touchmove') + '.grouping' + this.element.id;
                mousedown = $.jqx.mobile.getTouchEventName('touchstart') + '.grouping' + this.element.id;
                mouseup = $.jqx.mobile.getTouchEventName('touchend') + '.grouping' + this.element.id;
            }

            this.removeHandler($(document), mousemove);
            this.addHandler($(document), mousemove, function (event) {
                if (!self.showgroupsheader)
                    return true;

                if (self.dragcolumn != null) {
                    var left = parseInt(event.pageX);
                    var top = parseInt(event.pageY);
                    if (touchdevice) {
                        var touches = self.getTouches(event);
                        var touch = touches[0];
                        left = parseInt(touch.pageX);
                        top = parseInt(touch.pageY);
                    }
                    var hostoffset = self.host.coord();
                    var hostleft = parseInt(hostoffset.left);
                    var hosttop = parseInt(hostoffset.top);
                    if (self.dragmousedownoffset == undefined || self.dragmousedownoffset == null) {
                        self.dragmousedownoffset = { left: 0, top: 0 };
                    }

                    var leftposition = parseInt(left) - parseInt(self.dragmousedownoffset.left);
                    var topposition = parseInt(top) - parseInt(self.dragmousedownoffset.top);

                    self.dragcolumn.css({ left: leftposition + 'px', top: topposition + 'px' });
                    candrop = false;
                    if (left >= hostleft && left <= hostleft + self.host.width()) {
                        if (top >= hosttop && top <= hosttop + self.host.height()) {
                            candrop = true;
                        }
                    }
                    dropindex = -1;
                    if (candrop) {
                        self.dragcolumnicon.removeClass(self.toThemeProperty('jqx-grid-dragcancel-icon'));
                        self.dragcolumnicon.addClass(self.toThemeProperty('jqx-grid-drag-icon'));
                        var groupsheaderoffset = self.groupsheader.coord();
                        var groupsheaderbottom = groupsheaderoffset.top + self.groupsheader.height();
                        var datarecord = $.data(self.dragcolumn[0], 'datarecord');
                        if (datarecord) {
                            var indexingroups = self.groups.indexOf(datarecord.toString());
                        }
                        else {
                            var indexingroups = -1;
                        }

                        var candrag = (indexingroups == -1) || (self.groups.length > 1 && indexingroups > -1);

                        if (self.dropline != null) {
                            if (top >= groupsheaderoffset.top && top <= groupsheaderbottom) {
                                if (candrag) {
                                    dropindex = self._handlegroupdroplines(left);
                                }
                            }
                            else {
                                self.dropline.fadeOut('slow');
                            }
                        }
                    }
                    else {
                        if (self.dropline != null) {
                            self.dropline.fadeOut('slow');
                        }

                        self.dragcolumnicon.removeClass(self.toThemeProperty('jqx-grid-drag-icon'));
                        self.dragcolumnicon.addClass(self.toThemeProperty('jqx-grid-dragcancel-icon'));
                    }
                    if (touchdevice) {
                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    }
                    //   return false;
                }
            });

            this.removeHandler($(document), mouseup);
            this.addHandler($(document), mouseup, function (event) {
                if (!self.showgroupsheader)
                    return true;

                self.__drag = false;

                $(document.body).removeClass('jqx-disableselect');
                var left = parseInt(event.pageX);
                var top = parseInt(event.pageY);
                if (touchdevice) {
                    var touches = self.getTouches(event);
                    var touch = touches[0];
                    left = parseInt(touch.pageX);
                    top = parseInt(touch.pageY);
                }
                var hostoffset = self.host.coord();
                var hostleft = parseInt(hostoffset.left);
                var hosttop = parseInt(hostoffset.top);
                var groupsheaderheight = self.groupsheader.height();
                if (self.showtoolbar) {
                    hosttop += self.toolbarheight;
                }

                self.dragstarted = false;
                self.dragmousedown = null;
                if (self.dragcolumn != null) {
                    var datafield = $.data(self.dragcolumn[0], 'datarecord');
                    self.dragcolumn.remove();
                    self.dragcolumn = null;

                    if (datafield != null) {
                        if (!self.getcolumn(datafield).groupable) {
                            if (self.dropline != null) {
                                self.dropline.remove();
                                self.dropline = null;
                            }
                            return;
                        }

                        if (candrop) {
                            if (dropindex != -1) {
                                var index = dropindex.index;
                                var targetgroup = self.groups[index];
                            
                                var indexInGroups = self._getGroupIndexByDataField(datafield);
                                if (indexInGroups != index) {
                                    if (indexInGroups != undefined && indexInGroups >= 0) {
                                        self.groups.splice(indexInGroups, 1);
                                    }

                                    if (dropindex.position == 'before') {
                                        if (!self.rtl) {
                                            self._insertbeforegroup(targetgroup, datafield);
                                        }
                                        else {
                                            self._insertaftergroup(targetgroup, datafield);
                                        }
                                    }
                                    else {
                                        if (!self.rtl) {
                                            self._insertaftergroup(targetgroup, datafield);
                                        }
                                        else {
                                            self._insertbeforegroup(targetgroup, datafield);
                                        }
                                    }
                                }
                            }
                            else if (self.groups.length == 0) {
                                if (top > hosttop && top <= hosttop + groupsheaderheight) {
                                    self.addgroup(datafield);
                                }
                            }
                            else if (top > hosttop + groupsheaderheight) {
                                var indexInGroups = self._getGroupIndexByDataField(datafield);
                                self.removegroupat(indexInGroups);
                            }
                        }

                        if (self.dropline != null) {
                            self.dropline.remove();
                            self.dropline = null;
                        }
                    }
                    //  return false;
                }
            });
        },

        _getGroupIndexByDataField: function (datafield) {
            for (var i = 0; i < this.groups.length; i++) {
                if (this.groups[i] == datafield)
                    return i;
            }
            return -1;
        },

        _isColumnInGroups: function (column) {
            for (var i = 0; i < this.groups.length; i++) {
                if (this.groups[i] == column)
                    return true;
            }
            return false;
        },

        
        _handlegroupdroplines: function (left) {
            var self = this;
            var dropindex = -1;

            $.each(self.groupheadersbounds, function (index) {
                if (left <= this.left + this.width / 2) {
                    var groupleft = this.left - 3;
                    if (index > 0) {
                        groupleft = this.left - 1 - self.groupindentwidth / 6;
                    }

                    self.dropline.css('left', groupleft);
                    self.dropline.css('top', this.top);
                    self.dropline.height(this.height);
                    self.dropline.fadeIn('slow');
                    
                    dropindex = { index: index, position: 'before' };
                    if (self.rtl) {
                        dropindex = { index: self.groupheadersbounds.length - 1 - index, position: 'before' };                      
                    }

                    return false;
                }
                else if (left >= this.left + this.width / 2) {
                    self.dropline.css('left', 1 + this.left + this.width);
                    self.dropline.css('top', this.top);
                    self.dropline.height(this.height);
                    self.dropline.fadeIn('slow');
                    dropindex = { index: index, position: 'after' };
                    if (self.rtl) {
                        dropindex = { index: self.groupheadersbounds.length - 1 - index, position: 'after' };
                    }
                }
            });

            return dropindex;
        },

        
        _handlegroupstocolumnsdragdrop: function (datafield, column) {
            this.dragmousedown = null;
            this.dragmousedownoffset = null;
            this.dragstarted = false;
            this.dragcolumn = null;
            var me = this;
            var mousemove;

            var mousedownevent = 'mousedown';
            var mousemoveevent = 'mousemove';

            var touchdevice = false;
            if (this.isTouchDevice() && this.touchmode !== true) {
                touchdevice = true;
                mousedownevent = $.jqx.mobile.getTouchEventName('touchstart');
                mousemoveevent = $.jqx.mobile.getTouchEventName('touchmove');
            }
            this.addHandler(column, 'dragstart', function (event) {
                return false;
            });

            this.addHandler(column, mousedownevent, function (event) {
                if (!me.showgroupsheader)
                    return true;

                var left = event.pageX;
                var top = event.pageY;

                me.__drag = true;
                me.dragmousedown = { left: left, top: top };
                if (touchdevice) {
                    var touches = me.getTouches(event);
                    var touch = touches[0];
                    left = touch.pageX;
                    top = touch.pageY;
                    me.dragmousedown = { left: left, top: top };
                    if (event.preventDefault) {
                        event.preventDefault();
                    }
                }

                var offsetposition = $(event.target).coord();
                me.dragmousedownoffset = { left: parseInt(left) - parseInt(offsetposition.left), top: parseInt(top - offsetposition.top) };
            });

            this.addHandler(column, mousemoveevent, function (event) {
                if (!me.showgroupsheader)
                    return true;

                if (me.dragmousedown) {
                    mousemove = { left: event.pageX, top: event.pageY };
                    if (touchdevice) {
                        var touches = me.getTouches(event);
                        var touch = touches[0];
                        mousemove = { left: touch.pageX, top: touch.pageY };
                    }
                    if (!me.dragstarted && me.dragcolumn == null) {
                        var xoffset = Math.abs(mousemove.left - me.dragmousedown.left);
                        var yoffset = Math.abs(mousemove.top - me.dragmousedown.top);
                        if (xoffset > 3 || yoffset > 3) {
                            me._createdragcolumn(column, mousemove, true);
                            $(document.body).addClass('jqx-disableselect');
                            $.data(me.dragcolumn[0], 'datarecord', datafield);
                            if (event.preventDefault) {
                                event.preventDefault();
                            }
                        }
                    }
                }
            });
        },

        
        _createdragcolumn: function (column, position, hasdropline) {
            var me = this;
            var mousemove = position;

            me.dragcolumn = $('<div></div>');
            var columnclone = column.clone();
            me.dragcolumn.css('z-index', 999999);
            columnclone.css('border-width', '1px');
            columnclone.css('opacity', '0.4');
            var menubutton = $(columnclone.find('.' + me.toThemeProperty('jqx-grid-column-menubutton')));
            if (menubutton.length > 0) {
                menubutton.css('display', 'none');
            }
            var closebutton = $(columnclone.find('.jqx-icon-close'));
            if (closebutton.length > 0) {
                closebutton.css('display', 'none');
            }

            me.dragcolumnicon = $('<div style="z-index: 9999; position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -7px;"></div>');
            me.dragcolumnicon.addClass(me.toThemeProperty('jqx-grid-drag-icon'));
            me.dragcolumn.css('float', 'left');

            me.dragcolumn.css('position', 'absolute');
            var hostoffset = me.host.coord();
            columnclone.width(column.width() + 16);
            me.dragcolumn.append(columnclone);
            me.dragcolumn.height(column.height());
            me.dragcolumn.width(columnclone.width());
            me.dragcolumn.append(me.dragcolumnicon);
            $(document.body).append(me.dragcolumn);

            columnclone.css('margin-left', 0);
            columnclone.css('left', 0);
            columnclone.css('top', 0);
            me.dragcolumn.css('left', mousemove.left + me.dragmousedown.left);
            me.dragcolumn.css('top', mousemove.top + me.dragmousedown.top);

            if (hasdropline != undefined && hasdropline) {
                me.dropline = $('<div style="display: none; position: absolute;"></div>');

                me.dropline.width(2);
                me.dropline.addClass(me.toThemeProperty('jqx-grid-group-drag-line'));
                $(document.body).append(me.dropline);
            }
        },

        // gets column's groupable.
        iscolumngroupable: function (datafield) {
            return this._getcolumnproperty(datafield, 'groupable');
        },

        
        _handlecolumnstogroupsdragdrop: function (record, column) {
            this.dragmousedown = null;
            this.dragmousedownoffset = null;
            this.dragstarted = false;
            this.dragcolumn = null;

            var me = this;
            var mousemove;
            var touchdevice = false;
            if (this.isTouchDevice() && this.touchmode !== true) {
                touchdevice = true;
            }

            var mousedown = 'mousedown.drag';
            var mousemove = 'mousemove.drag';
            if (touchdevice) {
                mousedown = $.jqx.mobile.getTouchEventName('touchstart') + '.drag';
                mousemove = $.jqx.mobile.getTouchEventName('touchmove') + '.drag';
            }
            else {
                this.addHandler(column, 'dragstart', function (event) {
                    return false;
                });
            }

            this.addHandler(column, mousedown, function (event) {
                if (!me.showgroupsheader)
                    return true;

                me.__drag = true;

                if (me._isColumnInGroups(record.displayfield)) {
                    if (column.css('cursor') != 'col-resize') {
                        return true;
                    }
                    else return true;
                }
                if (false == record.groupable) {
                    return true;
                }

                var pagex = event.pageX;
                var pagey = event.pageY;
                if (touchdevice) {
                    var touches = me.getTouches(event);
                    var touch = touches[0];
                    pagex = touch.pageX;
                    pagey = touch.pageY;
                }

                me.dragmousedown = { left: pagex, top: pagey };
                if (touchdevice) {
                    if (event.preventDefault) event.preventDefault();
                }

                var offsetposition = $(event.target).coord();
                me.dragmousedownoffset = { left: parseInt(pagex) - parseInt(offsetposition.left), top: parseInt(pagey - offsetposition.top) };
            });

            this.addHandler(column, mousemove, function (event) {
                if (!me.showgroupsheader)
                    return true;

                if (me._isColumnInGroups(record.displayfield))
                    if (column.css('cursor') != 'col-resize') {
                        return true;
                    }
                    else {
                        return true;
                    }

                if (me.dragmousedown) {
                    var pagex = event.pageX;
                    var pagey = event.pageY;
                    if (touchdevice) {
                        var touches = me.getTouches(event);
                        var touch = touches[0];
                        pagex = touch.pageX;
                        pagey = touch.pageY;
                    }
                    mousemove = { left: pagex, top: pagey };
                    if (!me.dragstarted && me.dragcolumn == null) {
                        var xoffset = Math.abs(mousemove.left - me.dragmousedown.left);
                        var yoffset = Math.abs(mousemove.top - me.dragmousedown.top);
                        if (xoffset > 3 || yoffset > 3) {
                            me._createdragcolumn(column, mousemove, true);
                            $.data(me.dragcolumn[0], 'datarecord', record.displayfield);
                            if (event.preventDefault) {
                                event.preventDefault();
                            }
                        }
                    }
                }
            });
        },

        
        _rendergroupcolumn: function (text, groupcolumn) {
            var group = $('<div style="float: left; position: relative;"></div>');
            if (this.rtl) {
                group.css('float', 'right');
            }

            if (this.groupcolumnrenderer != null) {
                group[0].innerHTML = this.groupcolumnrenderer(text);
                group.addClass(this.toThemeProperty('jqx-grid-group-column'));
                group.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            }

            if (this.closeablegroups) {
                if (group[0].innerHTML == '') {
                    group[0].innerHTML = '<a style="float: left;" href="#">' + text + '</a>';
                }
                if (this.rtl) {
                    group[0].innerHTML = '<a style="float: right;" href="#">' + text + '</a>';
                }
                var fl = !this.rtl ? 'right' : 'left';

                var closebutton = '<div style="float: ' + fl + '; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-icon-close') + '"></div></div>';
                if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                    closebutton = '<div style="float: left; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-icon-close') + '"></div></div>';
                }
                if (this.rtl) {
                    var closebutton = '<div style="float: ' + fl + '; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 0px; top: 50%; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-icon-close') + '"></div></div>';
                    if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                        closebutton = '<div style="float: left; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 0px; top: 50%; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-icon-close') + '"></div></div>';
                    }
                }

                group[0].innerHTML += closebutton;
            }
            else {
                if (group[0].innerHTML == '') {
                    group[0].innerHTML = '<a href="#">' + text + '</a>';
                }
            }

            if (this.sortable) {
                var sortasc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -16px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortascbutton') + '"></div></div>');
                var sortdesc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -16px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortdescbutton') + '"></div></div>');
                if (this.closeablegroups) {
                    var sortasc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -32px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortascbutton') + '"></div></div>');
                    var sortdesc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 100%; top: 50%; margin-left: -32px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortdescbutton') + '"></div></div>');
                }
                if (this.rtl) {
                    var sortasc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 0px; top: 50%; margin-left: 0px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortascbutton') + '"></div></div>');
                    var sortdesc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 0px; top: 50%; margin-left: 0px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortdescbutton') + '"></div></div>');
                    if (this.closeablegroups) {
                        var sortasc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 0px; top: 50%; margin-left: 16px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortascbutton') + '"></div></div>');
                        var sortdesc = $('<div style="float: right; min-height: 16px; min-width: 18px;"><div style="position: absolute; left: 0px; top: 50%; margin-left: 16px; margin-top: -8px; float: none; width: 16px; height: 16px;" class="' + this.toThemeProperty('jqx-grid-column-sortdescbutton') + '"></div></div>');
                    }
                }
                sortasc.css('display', 'none');
                sortdesc.css('display', 'none');
                if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                    sortasc.css('float', 'left');
                    sortdesc.css('float', 'left');
                }
                group.append(sortasc);
                group.append(sortdesc);
                $.data(document.body, "groupsortelements" + groupcolumn, { sortasc: sortasc, sortdesc: sortdesc });
            }

            group.addClass(this.toThemeProperty('jqx-fill-state-normal'));
            group.addClass(this.toThemeProperty('jqx-grid-group-column'));
            return group;
        },

        _rendergroup: function (groupslength, tablerow, renderrow, columnstart, columnend, renderedrows, tablewidth) {
            var visualrow = tablerow;
            var tablecell = tablerow.cells[renderrow.level];
            if (this.rtl) {
                tablecell = tablerow.cells[tablerow.cells.length - 1 - renderrow.level];
            }

            var expanded = this._findgroupstate(renderrow.uniqueid);
            if (renderrow.bounddata.subGroups.length > 0 || renderrow.bounddata.subItems.length > 0) {
                var rtl = this.rtl ? "-rtl" : "";
                var iconClassName = this.toThemeProperty('jqx-icon-arrow-right');
                if (rtl) iconClassName = this.toThemeProperty('jqx-icon-arrow-left');

                if (expanded) {
                    tablecell.className += " " + this.toThemeProperty('jqx-grid-group-expand' + rtl) + " " + this.toThemeProperty('jqx-icon-arrow-down');
                }
                else {
                    tablecell.className += " " + this.toThemeProperty('jqx-grid-group-collapse' + rtl) + " " + iconClassName;
                }
            }

            var text = this._getColumnText(this.groups[renderrow.level]).label;
            var indentwidth = this.groupindentwidth;
            var indent = this.rowdetails && this.showrowdetailscolumn ? (1 + groupslength) * indentwidth : (groupslength) * indentwidth;
            var width = tablewidth - indent;

            var start = renderrow.level + 1;
            if (this.rtl) {
                start = 0;
            }

            var cellToRender = visualrow.cells[start];
            var m = 2;
            while (cellToRender != undefined && cellToRender.style.display == 'none' && m < visualrow.cells.length-1) {
                cellToRender = visualrow.cells[start + m - 1];
                m++;
            }
         
            var $cellToRender = $(cellToRender);
            if (!cellToRender) {
                return;
            }
            cellToRender.style.width = parseInt(width) + 'px';
            if (cellToRender.className.indexOf('jqx-grid-cell-filter') != -1) {
                $cellToRender.removeClass(this.toThemeProperty('jqx-grid-cell-filter'));
            }
            if (cellToRender.className.indexOf('jqx-grid-cell-sort') != -1) {
                $cellToRender.removeClass(this.toThemeProperty('jqx-grid-cell-sort'));
            }
            if (cellToRender.className.indexOf('jqx-grid-cell-pinned') != -1) {
                $cellToRender.removeClass(this.toThemeProperty('jqx-grid-cell-pinned'));
            }

            if (this.groupsrenderer != null) {
                var groupdata = { group: renderrow.group, level: renderrow.level, parent: renderrow.bounddata.parentItem, subGroups: renderrow.bounddata.subGroups, subItems: renderrow.bounddata.subItems, groupcolumn: this._getColumnText(this.groups[renderrow.level]).column };
                var html = this.groupsrenderer(text + ': ' + renderrow.group, renderrow.group, expanded, groupdata);
                if (html) {
                    cellToRender.innerHTML = html;
                }
                else {
                    var count = renderrow.bounddata.subItems.length > 0 ? renderrow.bounddata.subItems.length : renderrow.bounddata.subGroups.length;
                    cellToRender.innerHTML = '<div class="' + this.toThemeProperty('jqx-grid-groups-row') + '" style="position: absolute;"><span>' + text + ': </span>' + '<span class="' + this.toThemeProperty('jqx-grid-groups-row-details') + '">' + renderrow.group + ' (' + count + ')' + '</span></div>';
                }
            }
            else {
                var column = this._getcolumnbydatafield(this.groups[renderrow.level]);
                var value = renderrow.group;
                if (column != null) {
                    if (column.cellsformat) {
                        if ($.jqx.dataFormat) {
                            if ($.jqx.dataFormat.isDate(value)) {
                                value = $.jqx.dataFormat.formatdate(value, column.cellsformat, this.gridlocalization);
                            }
                            else if ($.jqx.dataFormat.isNumber(value)) {
                                value = $.jqx.dataFormat.formatnumber(value, column.cellsformat, this.gridlocalization);
                            }
                        }
                    }
                    var count = renderrow.bounddata.subItems.length > 0 ? renderrow.bounddata.subItems.length : renderrow.bounddata.subGroups.length;
                    cellToRender.innerHTML = '<div class="' + this.toThemeProperty('jqx-grid-groups-row') + '" style="position: absolute;"><span>' + text + ': </span>' + '<span class="' + this.toThemeProperty('jqx-grid-groups-row-details') + '">' + value + ' (' + count + ')' + '</span></div>';
                }
                else throw new Error("jqxGrid: Unable to find '" + this.groups[renderrow.level] + "' group in the Grid's columns collection.");
            }
            if (this.rtl) {
                if (!column) {
                    column = this._getcolumnbydatafield(this.groups[renderrow.level])
                }
                var scrollValue = this.hScrollBar.css('visibility') == 'hidden' ? 0 : this.hScrollInstance.max - this.hScrollInstance.value;
                var scrollIndent = this.vScrollBar.css('visibility') == 'hidden' ? 0 : this.scrollbarsize + 6;
                var indent = this.rowdetails && this.showrowdetailscolumn ? (2 + renderrow.level) * indentwidth : (1 + renderrow.level) * indentwidth;
                cellToRender.style.width = tablewidth + parseInt(scrollValue) - indent - scrollIndent + 'px';
                $cellToRender.addClass(this.toThemeProperty('jqx-rtl'));
                //var zIndex = $cellToRender.css('z-index');
                var zIndex = $(tablerow.cells[tablerow.cells.length - 1]).css('z-index');
                $cellToRender.css('z-index', zIndex);
                var content = $cellToRender.find('div');
                var width = content.width();
                content.css('left', '100%');
                var pinnedColumn = this.columns.records[tablerow.cells.length - 2 - renderrow.level] != null ? this.columns.records[tablerow.cells.length - 2 - renderrow.level].pinned : false;
                if (this.table.width() < tablewidth) {
                    tablewidth = this.table.width();
                    if (this.vScrollBar.css('visibility') != 'hidden') {
                        tablewidth += this.vScrollBar.outerWidth();
                    }
                }
                if (column.pinned || pinnedColumn) {
                    if (this.rowdetails && this.showrowdetailscolumn) {
                        tablewidth += 30;
                    }
                    content.css('margin-left', -width);
                    cellToRender.style.width = tablewidth + scrollValue - indent - scrollIndent + 'px';
                }
                else {               
                    var scrollValue = this.hScrollBar.css('visibility') == 'hidden' ? 0 : this.hScrollInstance.max;
                    cellToRender.style.width = tablewidth + scrollValue - indent - scrollIndent + 'px';
                    var width = content.width();
                    content.css('margin-left', -width);
                }
            }
        }
    });
})(jQuery);
/*
 * file from "src\jqxgrid.aggregates.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
    $.extend($.jqx._jqxGrid.prototype, {
        _calculateaggregate: function (column, aggregates, formatData, records) {
            var aggregate = column.aggregates;
            if (!aggregate) aggregate = aggregates;

            if (aggregate) {
                var formatstrings = new Array();
                for (var i = 0; i < aggregate.length; i++) {
                    if (aggregate[i] == 'count') {
                        continue;
                    }
                    formatstrings[formatstrings.length] = column.cellsformat;
                }

                if (this.source && this.source.getAggregatedData) {
                    if (records == undefined) {
                        records = this.getrows();
                    }
                    if (this.virtualmode) {
                        var records = new Array();
                        $.each(this.source._source.records, function () {
                            records.push(this);
                        });
                    }

                    if (formatData == undefined || formatData == true) {
                        var summaryData = this.source.getAggregatedData
                ([{ name: column.datafield, aggregates: aggregate, formatStrings: formatstrings }], this.gridlocalization, records);
                        return summaryData;
                    }
                    else {
                        var summaryData = this.source.getAggregatedData
                ([{ name: column.datafield, aggregates: aggregate }], this.gridlocalization, records);
                        return summaryData;
                    }
                }
            }
            return null;
        },

        getcolumnaggregateddata: function (datafield, aggregates, formatdata, records) {
            var column = this.getcolumn(datafield);
            var format = (formatdata == undefined || formatdata == false) ? false : formatdata;
            if (aggregates == null) return "";

            var tmpaggregates = column.aggregates;
            column.aggregates = null;

            var agg = this._calculateaggregate(column, aggregates, format, records);
            var summaryData = {};
            if (agg) {
                summaryData = agg[datafield];
            }
            column.aggregates = tmpaggregates;
            return summaryData;
        },

        refreshaggregates: function () {
            this._updatecolumnsaggregates();
        },

        renderaggregates: function () {
            this._updateaggregates();
        },

        _updatecolumnaggregates: function (column, aggregates, columnelement) {
            var me = this;
            if (!aggregates) {
                columnelement.children().remove();
                columnelement.html('');
                if (column.aggregatesrenderer) {
                    var obj = {};
                    if (column.aggregates) {
                        obj = this.getcolumnaggregateddata(column.datafield, column.aggregates);
                    }

                    var renderstring = column.aggregatesrenderer({}, column, columnelement, null);
                    columnelement.html(renderstring);
                }
                return;
            }

            columnelement.children().remove();
            columnelement.html('');
            if (column.aggregatesrenderer) {
                if (aggregates) {
                    var renderstring = column.aggregatesrenderer(aggregates[column.datafield], column, columnelement, this.getcolumnaggregateddata(column.datafield, aggregates[column.datafield]));
                    columnelement.html(renderstring);
                }
            }
            else {
                $.each(aggregates, function () {
                    var aggregate = this;
                    for (obj in aggregate) {
                        var field = $('<div style="position: relative; margin: 4px; overflow: hidden;"></div>');
                        var name = obj;
                        name = me._getaggregatename(name);
                        field.html(name + ':' + aggregate[obj]);
                        if (me.rtl) {
                            field.addClass(me.toThemeProperty('jqx-rtl'));
                        }

                        columnelement.append(field);
                    }
                });
            }
        },

        _getaggregatetype: function (obj) {
            switch (obj) {
                case 'min':
                case 'max':
                case 'count':
                case 'avg':
                case 'product':
                case 'var':
                case 'varp':
                case 'stdev':
                case 'stdevp':
                case 'sum':
                    return obj;
            }
            var name = obj;
            for (var myObj in obj) {
                name = myObj;
                break;
            }
            return name;
        },

        _getaggregatename: function (obj) {
            var name = obj;
            switch (obj) {
                case 'min':
                    name = 'Min';
                    break;
                case 'max':
                    name = 'Max';
                    break;
                case 'count':
                    name = 'Count';
                    break;
                case 'avg':
                    name = 'Avg';
                    break;
                case 'product':
                    name = 'Product';
                    break;
                case 'var':
                    name = 'Var';
                    break;
                case 'stdevp':
                    name = 'StDevP';
                    break;
                case 'stdev':
                    name = 'StDev';
                    break;
                case 'varp':
                    name = 'VarP';
                case 'sum':
                    name = 'Sum';
                    break;
            }
            if (obj === name && typeof(name) != 'string') {
                for (var myObj in obj) {
                    name = myObj;
                    break;
                }
            }
            return name;
        },

        _updatecolumnsaggregates: function () {
            var rows = this.getrows();
            var columnslength = this.columns.records.length;
            if (undefined != this.statusbar[0].cells) {
                for (var j = 0; j < columnslength; j++) {
                    var tablecolumn = $(this.statusbar[0].cells[j]);
                    var columnrecord = this.columns.records[j];
                    var summaryData = this._calculateaggregate(columnrecord, null, true, rows);
                    this._updatecolumnaggregates(columnrecord, summaryData, tablecolumn);
                }
            }
        },

        _updateaggregates: function () {
            var tablerow = $('<div style="position: relative;" id="statusrow' + this.element.id + '"></div>');
            var left = 0;
            var columnslength = this.columns.records.length;
            var cellclass = this.toThemeProperty('jqx-grid-cell');
            if (this.rtl) {
                cellclass += ' ' + this.toThemeProperty('jqx-grid-cell-rtl');
                left = -1;
            }
            cellclass += ' ' + this.toThemeProperty('jqx-grid-cell-pinned');
            //var cellclass = this.toThemeProperty('jqx-widget-header');
            var zindex = columnslength + 10;
            var cells = new Array();
            this.statusbar[0].cells = cells;
            
            for (var j = 0; j < columnslength; j++) {
                var columnrecord = this.columns.records[j];
                var summaryData = this._calculateaggregate(columnrecord);
                var width = columnrecord.width;
                if (width < columnrecord.minwidth) width = columnrecord.minwidth;
                if (width > columnrecord.maxwidth) width = columnrecord.maxwidth;
                var currentCellClass = cellclass;
                if (columnrecord.cellsalign) {
                    currentCellClass += ' ' + this.toThemeProperty('jqx-' + columnrecord.cellsalign + '-align');
                }
                var tablecolumn = $('<div style="overflow: hidden; position: absolute; height: 100%;" class="' + currentCellClass + '"></div>');
                tablerow.append(tablecolumn);
                tablecolumn.css('left', left);
                if (!this.rtl) {
                    tablecolumn.css('z-index', zindex--);
                }
                else {
                    tablecolumn.css('z-index', zindex++);
                }

                tablecolumn.width(width);
                tablecolumn[0].left = left;
                if (!(columnrecord.hidden && columnrecord.hideable)) {
                    left += width;
                }
                else {
                    tablecolumn.css('display', 'none');
                }
                cells[cells.length] = tablecolumn[0];
                this._updatecolumnaggregates(columnrecord, summaryData, tablecolumn);
            }

            if ($.jqx.browser.msie && $.jqx.browser.version < 8) {
                tablerow.css('z-index', zindex--);
            }

            tablerow.width(parseInt(left) + 2);
            tablerow.height(this.statusbarheight);
            this.statusbar.children().remove();
            this.statusbar.append(tablerow);
            this.statusbar.removeClass(this.toThemeProperty('jqx-widget-header'));
            this.statusbar.addClass(cellclass);
            this.statusbar.css('border-bottom-color', 'transparent');
            this.statusbar.css('border-top-width', '1px');
            if (this.rtl && this.hScrollBar.css('visibility') != 'hidden') {
                this._renderhorizontalscroll();
            }
        }
    });
})(jQuery);



/*
 * file from "src\jqxgrid.columnsreorder.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
    $.extend($.jqx._jqxGrid.prototype, {

        getcolumnindex: function(datafield)
        {
            var column = this.getcolumn(datafield);
            var columnindex = this.columns.records.indexOf(column);
            return columnindex;
        },

        setcolumnindex: function (datafield, index, refresh) {
            var column = this.getcolumn(datafield);
            if (column.pinned) return;
            if (column.hidden) return;
            if (column.checkboxcolumn) return;
            if (column.grouped) return;

            var columnindex = this.columns.records.indexOf(column);
            this.columns.records.splice(columnindex, 1);
            this.columns.records.splice(index, 0, column);

            var left = 0;
            var zindex = this.headerZIndex;
            this.columnsrow.children().detach();

            var cellclass = this.toThemeProperty('jqx-grid-cell');
            cellclass += ' ' + this.toThemeProperty('jqx-grid-cell-pinned');
            if (this.filterrow) {
                $(this.filterrow.children()[0]).children().detach();
                this.filterrow[0].cells = [];
            }

            var self = this;
            var tablerow = null;
            if (self.filterrow != undefined) {
                var tablerow = $(self.filterrow.children()[0]);
            }

            this.columnsrow[0].cells = [];
            var hasHiddenColumns = false;
            $.each(this.columns.records, function (i, value) {
                var column = this.uielement;
                self.columnsrow.append(column);
                if (!self.rtl) {
                    column.css('z-index', zindex--);
                }
                else {
                    column.css('z-index', zindex++);
                }

                var desiredwidth = this.width;
                column.css('left', left);
                self.columnsrow[0].cells[self.columnsrow[0].cells.length] = column[0];

                if (self.filterrow) {
                    var tablecolumn = $('<div style="overflow: hidden; position: absolute; height: 100%;" class="' + cellclass + '"></div>');
                    tablerow.append(tablecolumn);
                    tablecolumn.css('left', left);
                    tablecolumn.css('z-index', zindex + 1);
                    tablecolumn.width(this.width);
                    tablecolumn[0].left = left;
                    tablecolumn.append(this._filterwidget);
                    self.filterrow[0].cells[self.filterrow[0].cells.length] = tablecolumn[0];
                }
                if (this.hidden) {
                    hasHiddenColumns = true;
                }
                if (!(this.hidden && this.hideable)) {
                    left += desiredwidth;
                }
            });

            if (this.groupable) {
                var groupslength = this.groups.length;
                if (groupslength > 0) {
                    if (columnindex - groupslength >= 0) {
                        columnindex -= groupslength;
                        index -= groupslength;
                    }
                }
            }
            if (this.rowdetails) {
                if (columnindex - 1 >= 0) {
                    columnindex --;
                    index --;
                }
            }
            if (this.selectionmode == 'checkbox') {
                if (columnindex - 1 >= 0) {
                    columnindex--;
                    index--;
                }
            }

            var column = this._columns[columnindex];
   
            this._columns.splice(columnindex, 1);
            this._columns.splice(index, 0, column);

            this._raiseEvent(24, { columntext: column.text, datafield: column.datafield, oldindex: columnindex, newindex: index });
            if (refresh == false) return;

            if (hasHiddenColumns || column.columntype == "checkbox") {
                this.prerenderrequired = true;
                this.rendergridcontent(true, false);
                this._updatecolumnwidths();
                this._updatecellwidths();
            }
            else {
                this._updatecolumnwidths();
                this._updatecellwidths();
            }
            if (this._updatefilterrowui && this.filterable && this.showfilterrow) {
                this._updatefilterrowui();
            }

            this._rendercolumngroups();
            this._renderrows(this.virtualsizeinfo);

        },

        _pinnedColumnsLength: function () {
            var pinned = 0;
            $.each(this.columns.records, function () {
                if (this.pinned) pinned++;
                if (this.grouped) pinned++;
            });
            if (this.selectionmode == 'checkbox') pinned++;
            return pinned;
        },

        _handlecolumnsreorder: function () {
            var self = this;
            var dropindex = -1;
            var candrop = false;

            if (!self.columnsreorder)
                return;

            var mousemove = 'mousemove.reorder' + this.element.id;
            var mousedown = 'mousedown.reorder' + this.element.id;
            var mouseup = 'mouseup.reorder' + this.element.id;

            var touchdevice = false;
            if (this.isTouchDevice() && this.touchmode !== true) {
                touchdevice = true;
                mousemove = $.jqx.mobile.getTouchEventName('touchmove') + '.reorder' + this.element.id;
                mousedown = $.jqx.mobile.getTouchEventName('touchstart') + '.reorder' + this.element.id;
                mouseup = $.jqx.mobile.getTouchEventName('touchend') + '.reorder' + this.element.id;
            }

            this.removeHandler($(document), mousemove);
            this.addHandler($(document), mousemove, function (event) {
                if (self.resizing) {
                    return true;
                }

                if (self.reordercolumn != null) {
                    var left = parseInt(event.pageX);
                    var top = parseInt(event.pageY);
                    if (touchdevice) {
                        var touches = self.getTouches(event);
                        var touch = touches[0];
                        if (touch != undefined) {
                            left = parseInt(touch.pageX);
                            top = parseInt(touch.pageY);
                        }
                    }
                    var hostoffset = self.host.coord();
                    var hostleft = parseInt(hostoffset.left);
                    var hosttop = parseInt(hostoffset.top);
                    if (self.dragmousedownoffset == undefined || self.dragmousedownoffset == null) {
                        self.dragmousedownoffset = { left: 0, top: 0 };
                    }

                    var leftposition = parseInt(left) - parseInt(self.dragmousedownoffset.left);
                    var topposition = parseInt(top) - parseInt(self.dragmousedownoffset.top);

                    self.reordercolumn.css({ left: leftposition + 'px', top: topposition + 'px' });
                    candrop = false;
                    if (left >= hostleft && left <= hostleft + self.host.width()) {
                        if (top >= hosttop && top <= hosttop + self.host.height()) {
                            candrop = true;
                        }
                    }

                    dropindex = -1;
                    if (candrop) {
                        self.reordercolumnicon.removeClass(self.toThemeProperty('jqx-grid-dragcancel-icon'));
                        self.reordercolumnicon.addClass(self.toThemeProperty('jqx-grid-drag-icon'));
                        var groupsheaderoffset = self.columnsheader.coord();
                        var groupsheaderbottom = groupsheaderoffset.top + self.columnsheader.height();

                        if (self.columnsdropline != null) {
                            if (top >= groupsheaderoffset.top && top <= groupsheaderbottom) {
                                dropindex = self._handlereordercolumnsdroplines(left);
                            }
                            else {
                                self.columnsdropline.fadeOut('slow');
                            }
                        }
                    }
                    else {
                        if (self.columnsdropline != null) {
                            self.columnsdropline.fadeOut('slow');
                        }

                        self.reordercolumnicon.removeClass(self.toThemeProperty('jqx-grid-drag-icon'));
                        self.reordercolumnicon.addClass(self.toThemeProperty('jqx-grid-dragcancel-icon'));
                    }
                    if (touchdevice) {
                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    }
                }
            });

            this.columnsbounds = new Array();

            this.removeHandler($(document), mousedown);
            this.addHandler($(document), mousedown, function (event) {
                if (self.resizing) {
                    return true;
                }

                self.columnsbounds = new Array();
                var left = self.host.coord().left;
                var top = self.host.coord().top;
                if (self.showtoolbar) top += self.toolbarheight;
                if (self.groupable && self.showgroupsheader) top += self.groupsheaderheight;
                var columnIndex = 0;
                $.each(self.columns.records, function (index) {
                    var column = this;

                    if (column.hidden) {
                        self.columnsbounds[self.columnsbounds.length] = { top: top, column: column, left: left, width: 0, height: 2 + self.rowsheight };
                        return true;
                    }

                    if (columnIndex == 0) {
                        if (!self.rtl) {
                            left = parseInt(self.host.coord().left) - self.hScrollInstance.value;
                        }
                        else {
                            left = parseInt(self.host.coord().left) - self.hScrollInstance.max + self.hScrollInstance.value;
                        }
                    }
                    columnIndex++;
                    var height = 2 + self.columnsheight;
                    if (self.columnshierarchy) {
                        top = $(column.uielement).coord().top;
                        height = $(column.uielement).height();
                    }
                    self.columnsbounds[self.columnsbounds.length] = { top: top, column: column, left: left, width: column.width, height: height };
                    left += column.width;
                });
            });
            this.removeHandler($(document), mouseup);
            this.addHandler($(document), mouseup, function (event) {
                if (self.resizing) {
                    return true;
                }

                self.__drag = false;

                $(document.body).removeClass('jqx-disableselect');
                var left = parseInt(event.pageX);
                var top = parseInt(event.pageY);
                if (touchdevice) {
                    var touches = self.getTouches(event);
                    var touch = touches[0];
                    left = parseInt(touch.pageX);
                    top = parseInt(touch.pageY);
                }
                var hostoffset = self.host.coord();
                var hostleft = parseInt(hostoffset.left);
                var hosttop = parseInt(hostoffset.top);
                var groupsheaderheight = self.groupsheader.height();
                if (self.showtoolbar) {
                    hosttop += self.toolbarheight;
                }

                self.columndragstarted = false;
                self.dragmousedown = null;
                if (self.reordercolumn != null) {
                    var datafield = $.data(self.reordercolumn[0], 'reorderrecord');
                    var oldindex = self.columns.records.indexOf(self.getcolumn(datafield));
                    self.reordercolumn.remove();
                    self.reordercolumn = null;
                    var minIndex = 0;
                 //   minIndex += self.rowdetails ? 1 : 0;
                    minIndex += self._pinnedColumnsLength();

                    if (datafield != null) {
                        if (candrop) {
                            if (dropindex != -1) {
                                var index = dropindex.index;
                                if (index >= minIndex) {
                                    var targetcolumn = self.columns.records[index];
                                    if (targetcolumn != undefined) {
                                        var columnindex = self.columns.records.indexOf(self.getcolumn(targetcolumn.datafield));
                                        if (targetcolumn.datafield == null) {
                                            var columnindex = self.columns.records.indexOf(self.getcolumnbytext(targetcolumn.text));
                                        }
                                        if (self.columngroups) {
                                            var target = targetcolumn;
                                            if (oldindex < columnindex) {
                                                if (dropindex.position == 'before') {
                                                     target = self.columns.records[columnindex - 1];
                                                }
                                            }

                                            if (target.columngroup != self.getcolumn(datafield).columngroup) {
                                                if (self.columnsdropline != null) {
                                                    self.columnsdropline.remove();
                                                    self.columnsdropline = null;
                                                }
                                                return;
                                            }
                                        }

                                        if (oldindex < columnindex) {
                                            if (dropindex.position == 'before') {
                                                self.setcolumnindex(datafield, columnindex - 1);
                                            }
                                            else {
                                                self.setcolumnindex(datafield, columnindex);
                                            }
                                        }
                                        else if (oldindex > columnindex) {
                                            self.setcolumnindex(datafield, columnindex);
                                        }
                                        if (self.autosavestate) {
                                            if (self.savestate) self.savestate();
                                        }
                                    }
                                }
                            }
                        }

                        if (self.columnsdropline != null) {
                            self.columnsdropline.remove();
                            self.columnsdropline = null;
                        }
                    }
                }
            });
        },

        getcolumnbytext: function (text) {
            var column = null;
            if (this.columns.records) {
                $.each(this.columns.records, function () {
                    if (this.text == text) {
                        column = this;
                        return false;
                    }
                });
            }
            return column;
        },

        _handlereordercolumnsdroplines: function (left) {
            var self = this;
            var dropindex = -1;
            var minIndex = self._pinnedColumnsLength();
            var hostleft = parseInt(self.host.coord().left);
            var hostright = hostleft + self.host.width();
            var leftOffset = self.vScrollBar.css('visibility') != 'hidden' ? 19 : 0;
            if (!self.rtl) leftOffset = 0;

            $.each(self.columnsbounds, function (index) {
                if (index >= minIndex) {
                    if (this.width == 0) return true;

                    if (left <= this.left + this.width / 2) {
                        if (left > hostright) {
                            self.columnsdropline.fadeOut();
                            return false;
                        }
                        self.columnsdropline.css('left', leftOffset + parseInt(this.left) + 'px');
                        self.columnsdropline.css('top', parseInt(this.top) + 'px');
                        self.columnsdropline.height(this.height);
                        self.columnsdropline.fadeIn('slow');
                        dropindex = { index: index, position: 'before' }
                        return false;
                    }
                    else if (left >= this.left + this.width / 2) {
                        if (this.left + this.width > hostright) {
                            self.columnsdropline.fadeOut();
                            return false;
                        }

                        self.columnsdropline.css('left', leftOffset + 1 + this.left + this.width);
                        self.columnsdropline.css('top', this.top);
                        self.columnsdropline.height(this.height);
                        self.columnsdropline.fadeIn('slow');
                        dropindex = { index: index, position: 'after' }
                    }
                }
            });

            return dropindex;
        },

        _createreordercolumn: function (column, position, hascolumnsdropline) {
            var me = this;
            var mousemove = position;

            if (me.reordercolumn) me.reordercolumn.remove();
            if (me.columnsdropline) me.columnsdropline.remove();
            me.reordercolumn = $('<div></div>');
            var columnclone = column.clone();
            me.reordercolumn.css('z-index', 999999);
            columnclone.css('border-width', '1px');
            columnclone.css('opacity', '0.4');
            var menubutton = $(columnclone.find('.' + me.toThemeProperty('jqx-grid-column-menubutton')));
            if (menubutton.length > 0) {
                menubutton.css('display', 'none');
            }
            var closebutton = $(columnclone.find('.jqx-icon-close'));
            if (closebutton.length > 0) {
                closebutton.css('display', 'none');
            }

            me.reordercolumnicon = $('<div style="z-index: 9999; position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -7px;"></div>');
            me.reordercolumnicon.addClass(me.toThemeProperty('jqx-grid-drag-icon'));
            me.reordercolumn.css('float', 'left');
            me.reordercolumn.css('position', 'absolute');
            var hostoffset = me.host.coord();
            columnclone.width(column.width() + 16);
            me.reordercolumn.append(columnclone);
            me.reordercolumn.height(column.height());
            me.reordercolumn.width(columnclone.width());
            me.reordercolumn.append(me.reordercolumnicon);
            $(document.body).append(me.reordercolumn);

            columnclone.css('margin-left', 0);
            columnclone.css('left', 0);
            columnclone.css('top', 0);
            me.reordercolumn.css('left', mousemove.left + me.dragmousedown.left);
            me.reordercolumn.css('top', mousemove.top + me.dragmousedown.top);

            if (hascolumnsdropline != undefined && hascolumnsdropline) {
                me.columnsdropline = $('<div style="z-index: 9999; display: none; position: absolute;"></div>');

                me.columnsdropline.width(2);
                me.columnsdropline.addClass(me.toThemeProperty('jqx-grid-group-drag-line'));
                $(document.body).append(me.columnsdropline);
            }
        },

        _handlecolumnsdragreorder: function (record, column) {
            if (this.reordercolumn) this.reordercolumn.remove();
            if (this.columnsdropline) this.columnsdropline.remove();

            this.dragmousedown = null;
            this.dragmousedownoffset = null;
            this.columndragstarted = false;
            this.reordercolumn = null;

            var me = this;
            var mousemove;
            var touchdevice = false;
            if (this.isTouchDevice() && this.touchmode !== true) {
                touchdevice = true;
            }

            var mousedown = 'mousedown.drag';
            var mousemove = 'mousemove.drag';
            if (touchdevice) {
                mousedown = $.jqx.mobile.getTouchEventName('touchstart') + '.drag';
                mousemove = $.jqx.mobile.getTouchEventName('touchmove') + '.drag';
            }
            else {
                this.addHandler(column, 'dragstart', function (event) {
                    return false;
                });
            }
            this.addHandler(column, mousedown, function (event) {
                if (false == record.draggable) {
                    return true;
                }
                if (me.resizing) {
                    return true;
                }

                me.__drag = true;

                var pagex = event.pageX;
                var pagey = event.pageY;
                if (touchdevice) {
                    var touches = me.getTouches(event);
                    var touch = touches[0];
                    pagex = touch.pageX;
                    pagey = touch.pageY;
                }

                me.dragmousedown = { left: pagex, top: pagey };

                var offsetposition = $(event.target).coord();
                me.dragmousedownoffset = { left: parseInt(pagex) - parseInt(offsetposition.left), top: parseInt(pagey - offsetposition.top) };
                return true;
            });

            this.addHandler(column, mousemove, function (event) {
                if (!record.draggable) return true;
                if (undefined == record.datafield) return true;
                if (record.pinned) return true;
                if (me.resizing) {
                    return true;
                }

                if (me.dragmousedown) {
                    var pagex = event.pageX;
                    var pagey = event.pageY;
                    if (touchdevice) {
                        var touches = me.getTouches(event);
                        var touch = touches[0];
                        if (touch != undefined) {
                            pagex = touch.pageX;
                            pagey = touch.pageY;
                        }
                    }
                    mousemove = { left: pagex, top: pagey };
                    if (!me.columndragstarted && me.reordercolumn == null) {
                        var xoffset = Math.abs(mousemove.left - me.dragmousedown.left);
                        var yoffset = Math.abs(mousemove.top - me.dragmousedown.top);
                        if (xoffset > 3 || yoffset > 3) {
                            me._createreordercolumn(column, mousemove, true);
                            $(document.body).addClass('jqx-disableselect');
                            $.data(me.reordercolumn[0], 'reorderrecord', record.datafield);
                        }
                    }
                }
            });
        }
    });
})(jQuery);
/*
 * file from "src\jqxgrid.export.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
    $.extend($.jqx._jqxGrid.prototype, {
        exportdata: function (datatype, filename, exportHeader, rows, exportHiddenColumns, exportServer, charset) {
            if (!$.jqx.dataAdapter.ArrayExporter) {
                throw 'jqxGrid: Missing reference to jqxdata.export.js!';
            }

            if (exportHeader == undefined) {
                exportHeader = true;
            }

            var me = this;

            if (rows == undefined) {
                var rows = this.getrows();
                if (rows.length == 0) {
                    throw 'No data to export.';
                }
            }

            this.exporting = true;
            if (!this.pageable) {
                this.loadondemand = true;
            }

            if (this.altrows) {
                this._renderrows(this.virtualsizeinfo);
            }

            var addhiddencolumns = exportHiddenColumns != undefined ? exportHiddenColumns : false;
            var dataFields = {};
            var styles = {};
            var alignments = [];
            var $cell = this.host.find('.jqx-grid-cell:first');
            var $cellalt = this.host.find('.jqx-grid-cell-alt:first');
            $cell.removeClass(this.toThemeProperty('jqx-grid-cell-selected'));
            $cell.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            $cellalt.removeClass(this.toThemeProperty('jqx-grid-cell-selected'));
            $cellalt.removeClass(this.toThemeProperty('jqx-fill-state-pressed'));
            $cell.removeClass(this.toThemeProperty('jqx-grid-cell-hover'));
            $cell.removeClass(this.toThemeProperty('jqx-fill-state-hover'));
            $cellalt.removeClass(this.toThemeProperty('jqx-grid-cell-hover'));
            $cellalt.removeClass(this.toThemeProperty('jqx-fill-state-hover'));

            var styleName = 'cell';
            var styleIndex = 1;
            var columnStyleName = 'column';
            var columnStyleIndex = 1;
            var aggregates = [];

            for (var j = 0; j < this.columns.records.length; j++) {
                var column = this.columns.records[j];
                if (column.cellclassname != "") {
                    column.customCellStyles = new Array();
                    if (typeof column.cellclassname == "string") {
                        for (var i = 0; i < rows.length; i++) {
                            column.customCellStyles[i] = column.cellclassname;
                        }
                    }
                    else {
                        for (var i = 0; i < rows.length; i++) {
                            var boundIndex = this.getrowboundindex(i);
                            var className = column.cellclassname(boundIndex, column.displayfield, rows[i][column.displayfield], rows[i]);
                            if (className) {
                                column.customCellStyles[i] = className;
                            }
                        }
                    }
                }
            }

            $.each(this.columns.records, function (index) {
                var $cell = $(me.table[0].rows[0].cells[index]);
                if (me.table[0].rows.length > 1) {
                    var $cellalt = $(me.table[0].rows[1].cells[index]);
                }
                var column = this;
                var removeClassFunc = function (cell) {
                    cell.removeClass(me.toThemeProperty('jqx-grid-cell-selected'));
                    cell.removeClass(me.toThemeProperty('jqx-fill-state-pressed'));
                    cell.removeClass(me.toThemeProperty('jqx-grid-cell-hover'));
                    cell.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                    if (column.customCellStyles) {
                        for (var o in column.customCellStyles) {
                            cell.removeClass(column.customCellStyles[o]);
                        }
                    }
                }
                removeClassFunc($cell);
                if ($cellalt) {
                    removeClassFunc($cellalt);
                }

                if (this.displayfield == null) return true;

                if (me.showaggregates) {
                    if (me.getcolumnaggregateddata) {
                        aggregates.push(me.getcolumnaggregateddata(this.displayfield, this.aggregates, true, rows));
                    }
                }

                var type = me._getexportcolumntype(this);
                if (this.exportable && (!this.hidden || addhiddencolumns)) {
                    dataFields[this.displayfield] = {};
                    dataFields[this.displayfield].text = this.text;
                    dataFields[this.displayfield].width = parseInt(this.width);
                    if (isNaN(dataFields[this.displayfield].width)) dataFields[this.displayfield].width = 60;
                    dataFields[this.displayfield].formatString = this.cellsformat;
                    dataFields[this.displayfield].localization = me.gridlocalization;
                    dataFields[this.displayfield].type = type;
                    dataFields[this.displayfield].cellsAlign = this.cellsalign;
                    dataFields[this.displayfield].hidden = !exportHeader;
                }

                styleName = 'cell' + styleIndex;

                var $element = $(this.element);
                if (this.element == undefined) $element = $(this.uielement);

                columnStyleName = 'column' + columnStyleIndex;
                if (datatype == 'html' || datatype == 'xls' || datatype == 'pdf') {
                    var buildStyle = function (styleName, $element, isColumn, altStyle, meColumn, me, index, customStyle, rowIndex) {
                        styles[styleName] = {};
                        styles[styleName]['font-size'] = $element.css('font-size');
                        styles[styleName]['font-weight'] = $element.css('font-weight');
                        styles[styleName]['font-style'] = $element.css('font-style');
                        styles[styleName]['background-color'] = me._getexportcolor($element.css('background-color'));
                        styles[styleName]['color'] = me._getexportcolor($element.css('color'));
                        styles[styleName]['border-color'] = me._getexportcolor($element.css('border-top-color'));
                        if (isColumn) {
                            styles[styleName]['text-align'] = meColumn.align;
                        }
                        else {
                            styles[styleName]['text-align'] = meColumn.cellsalign;
                            styles[styleName]['formatString'] = meColumn.cellsformat;
                            styles[styleName]['dataType'] = type;
                        }

                        if (datatype == 'html' || datatype == 'pdf') {
                            styles[styleName]['border-top-width'] = $element.css('border-top-width');
                            styles[styleName]['border-left-width'] = $element.css('border-left-width');
                            styles[styleName]['border-right-width'] = $element.css('border-right-width');
                            styles[styleName]['border-bottom-width'] = $element.css('border-bottom-width');
                            styles[styleName]['border-top-style'] = $element.css('border-top-style');
                            styles[styleName]['border-left-style'] = $element.css('border-left-style');
                            styles[styleName]['border-right-style'] = $element.css('border-right-style');
                            styles[styleName]['border-bottom-style'] = $element.css('border-bottom-style');
                            if (isColumn) {
                                if (index == 0) {
                                    styles[styleName]['border-left-width'] = $element.css('border-right-width');
                                }
                                styles[styleName]['border-top-width'] = $element.css('border-right-width');
                                styles[styleName]['border-bottom-width'] = $element.css('border-bottom-width');
                            }
                            else {
                                if (index == 0) {
                                    styles[styleName]['border-left-width'] = $element.css('border-right-width');
                                }
                            }
                            styles[styleName]['height'] = $element.css('height');
                        }

                        if (meColumn.exportable && (!meColumn.hidden || addhiddencolumns)) {
                            if (customStyle == true) {
                                if (!dataFields[meColumn.displayfield].customCellStyles) {
                                    dataFields[meColumn.displayfield].customCellStyles = new Array();
                                }

                                dataFields[meColumn.displayfield].customCellStyles[rowIndex] = styleName;
                            }
                            else {
                                if (isColumn) {
                                    dataFields[meColumn.displayfield].style = styleName;
                                }
                                else if (!altStyle) {
                                    dataFields[meColumn.displayfield].cellStyle = styleName;
                                }
                                else dataFields[meColumn.displayfield].cellAltStyle = styleName;
                            }
                        }
                    }
                    buildStyle(columnStyleName, $element, true, false, this, me, index);
                    columnStyleIndex++;
                    buildStyle(styleName, $cell, false, false, this, me, index);
                    if (me.altrows) {
                        styleName = 'cellalt' + styleIndex;
                        buildStyle(styleName, $cellalt, false, true, this, me, index);
                    }
                    if (this.customCellStyles) {
                        for (var o in column.customCellStyles) {
                            $cell.removeClass(column.customCellStyles[o]);
                        }
                        for (var o in column.customCellStyles) {
                            $cell.addClass(column.customCellStyles[o]);
                            buildStyle(styleName + column.customCellStyles[o], $cell, false, false, this, me, index, true, o);
                            $cell.removeClass(column.customCellStyles[o]);
                        }
                    }

                    styleIndex++;
                }
            });

            if (this.showaggregates) {
                var aggregatedrows = [];
                var prefix = datatype == 'xls' ? "AG" : "";
                var offset = this.groupable ? this.groups.length : 0;
                if (this.rowdetails) offset++;

                if (aggregates.length > 0) {
                    $.each(this.columns.records, function (index) {
                        if (this.aggregates) {
                            for (var i = 0; i < this.aggregates.length; i++) {
                                if (!aggregatedrows[i]) aggregatedrows[i] = {};
                                if (aggregatedrows[i]) {
                                    var aggregatename = me._getaggregatename(this.aggregates[i]);
                                    var aggregatetype = me._getaggregatetype(this.aggregates[i]);
                                    var aggregate = aggregates[index-offset];
                                    if (aggregate) {
                                        aggregatedrows[i][this.displayfield] = prefix + aggregatename + ": " + aggregate[aggregatetype];
                                    }
                                }
                            }
                        }
                    });
                    $.each(this.columns.records, function (index) {
                        for (var i = 0; i < aggregatedrows.length; i++) {
                            if (aggregatedrows[i][this.displayfield] == undefined) {
                                aggregatedrows[i][this.displayfield] = prefix;
                            }
                        }
                    });
                }
                $.each(aggregatedrows, function () {
                    rows.push(this);
                });
            }

            var that = this;
            var exporter = $.jqx.dataAdapter.ArrayExporter(rows, dataFields, styles);
            if (filename == undefined) {
                // update ui
                this._renderrows(this.virtualsizeinfo);
                var result = exporter.exportTo(datatype);
                if (this.showaggregates) {
                    $.each(aggregatedrows, function () {
                        rows.pop(this);
                    });
                }
                
                setTimeout(function () {
                    that.exporting = false;
                }, 50);
                return result;
            }
            else {
                exporter.exportToFile(datatype, filename, exportServer, charset);
            }
            // update ui
            if (this.showaggregates) {
                $.each(aggregatedrows, function () {
                    rows.pop(this);
                });
            }
            this._renderrows(this.virtualsizeinfo);
            setTimeout(function () {
                that.exporting = false;
            }, 50);
        },

        _getexportcolor: function (value) {
            var color = value;
            if (value == 'transparent') color = "#FFFFFF";
            if (!color || !color.toString()) {
                color = "#FFFFFF";
            }

            if (color.toString().indexOf('rgb') != -1) {
                var rgb = color.split(',');
                if (color.toString().indexOf('rgba') != -1) {
                    var r = parseInt(rgb[0].substring(5));
                    var g = parseInt(rgb[1]);
                    var b = parseInt(rgb[2]);
                    var a = parseInt(rgb[3].substring(1, 4));
                    var rgbObj = { r: r, g: g, b: b };
                    var hex = this._rgbToHex(rgbObj);
                    if (r == 0 && g == 0 && b == 0 && a == 0) {
                        return "#ffffff";
                    }

                    return "#" + hex;
                }

                var r = parseInt(rgb[0].substring(4));
                var g = parseInt(rgb[1]);
                var b = parseInt(rgb[2].substring(1, 4));
                var rgbObj = { r: r, g: g, b: b };
                var hex = this._rgbToHex(rgbObj);
                return "#" + hex;
            }
            else if (color.toString().indexOf('#') != -1) {
                if (color.toString().length == 4) {
                    var colorPart = color.toString().substring(1, 4);
                    color += colorPart;
                }
            }

            return color;
        },

        _rgbToHex: function (rgb) {
            return this._intToHex(rgb.r) + this._intToHex(rgb.g) + this._intToHex(rgb.b);
        },

        _intToHex: function (dec) {
            var result = (parseInt(dec).toString(16));
            if (result.length == 1)
                result = ("0" + result);
            return result.toUpperCase();
        },

        _getexportcolumntype: function (column) {
            var me = this;
            var type = 'string';
            var datafields = me.source.datafields || ((me.source._source) ? me.source._source.datafields : null);

            if (datafields) {
                var foundType = "";
                $.each(datafields, function () {
                    if (this.name == column.displayfield) {
                        if (this.type) {
                            foundType = this.type;
                        }
                        return false;
                    }
                });
                if (foundType)
                    return foundType;
            }

            if (column != null) {
                if (this.dataview.cachedrecords == undefined) {
                    return type;
                }

                var cell = null;

                if (!this.virtualmode) {
                    if (this.dataview.cachedrecords.length == 0)
                        return type;

                    cell = this.dataview.cachedrecords[0][column.displayfield];
                    if (cell != null && cell.toString() == "") {
                        return "string";
                    }
                }
                else {
                    $.each(this.dataview.cachedrecords, function () {
                        cell = this[column.displayfield];
                        return false;
                    });
                }

                if (cell != null) {
                    if (column.cellsformat.indexOf('c') != -1) {
                        return 'number';
                    }
                    if (column.cellsformat.indexOf('n') != -1) {
                        return 'number';
                    }
                    if (column.cellsformat.indexOf('p') != -1) {
                        return 'number';
                    }
                    if (column.cellsformat.indexOf('d') != -1) {
                        return 'date';
                    }
                    if (column.cellsformat.indexOf('y') != -1) {
                        return 'date';
                    }
                    if (column.cellsformat.indexOf('M') != -1) {
                        return 'date';
                    }
                    if (column.cellsformat.indexOf('m') != -1) {
                        return 'date';
                    }
                    if (column.cellsformat.indexOf('t') != -1) {
                        return 'date';
                    }

                    if (typeof cell == 'boolean') {
                        type = 'boolean';
                    }
                    else if ($.jqx.dataFormat.isNumber(cell)) {
                        type = 'number';
                    }
                    else {
                        var tmpvalue = new Date(cell);
                        if (tmpvalue.toString() == 'NaN' || tmpvalue.toString() == "Invalid Date") {
                            if ($.jqx.dataFormat) {
                                tmpvalue = $.jqx.dataFormat.tryparsedate(cell);
                                if (tmpvalue != null) {
                                    if (tmpvalue && tmpvalue.getFullYear()) {
                                        if (tmpvalue.getFullYear() == 1970 && tmpvalue.getMonth() == 0 && tmpvalue.getDate() == 1) {
                                            var num = new Number(cell);
                                            if (!isNaN(num))
                                                return 'number';

                                            return 'string';
                                        }
                                    }

                                    return 'date';
                                }
                                else {
                                    type = 'string';
                                }
                            }
                            else type = 'string';
                        }
                        else {
                            type = 'date';
                        }
                    }
                }
            }
            return type;
        }

    });
})(jQuery);



/*
 * file from "src\jqxgrid.storage.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {
    $.extend($.jqx._jqxGrid.prototype, {
        savestate: function (options) {
            var state = this.getstate();

            if (options !== undefined && !$.isEmptyObject(options)) {
                if (options.indexOf('sort') == -1) {
                    delete state.sortcolumn;
                    delete state.sortdirection;
                }
                if (options.indexOf('pager') == -1) {
                    delete state.pagenum;
                    delete state.pagesizeoptions;
                    delete state.pagesize;
                }
                if (options.indexOf('selection') == -1) {
                    delete state.selectedcells;;
                    delete state.selectedrowindexes;
                    delete state.selectedrowindex;
                }
                if (options.indexOf('grouping') == -1) {
                    delete state.groups;
                }
                if (options.indexOf('filter') == -1) {
                    delete state.filters;
                }
                $.each(this.columns.records, function (index) {
                    var column_state = state.columns[this.datafield];
                    if (options.indexOf('hidden_columns') == -1) {
                        delete column_state.hidden;
                    }
                    if (options.indexOf('reorder') == -1) {
                        delete column_state.index;
                    }
                    if (options.indexOf('columns_width') == -1) {
                        delete column_state.width;
                    }
                    if (options.indexOf('columns_text') == -1) {
                        delete column_state.text;
                    }
                    if (options.indexOf('alignment') == -1) {
                        delete column_state.align;
                        delete column_state.cellsalign;
                    }
                });
            }

            if (window.localStorage) {
                window.localStorage["jqxGrid" + this.element.id] = this._stringify(state);
            }
            this._savedstate = state;
            return state;
        },

        loadstate: function (gridstate, binding) {
            var state = "";
            if (gridstate != undefined && gridstate.width != undefined) {
                state = gridstate;
            }
            else if (window.localStorage) {
                var hasState = window.localStorage["jqxGrid" + this.element.id];
                if (hasState) {
                    var state = $.parseJSON(window.localStorage["jqxGrid" + this.element.id]);
                }
            }
            else if (this._savedstate) {
                var state = this._savedstate;
            }
            if (state != null && state !== "") {
                if (this.virtualmode || (this.source._source.url && this.source._source.url != "")) {
                    this.source.beginUpdate();
                }
                var data = state;
                if (data.width !== undefined) {
                    this.width = data.width;
                }
                if (data.height !== undefined) {
                    this.height = data.height;
                }
                if (this.pageable) {
                    if (data.pagesize != undefined) {
                        this.pagesize = data.pagesize;
                        this.dataview.pagesize = data.pagesize;
                    }
                    if (data.pagenum != undefined) {
                        this.dataview.pagenum = data.pagenum;
                    }
                    if (data.pagesizeoptions != undefined) {
                        this.pagesizeoptions = data.pagesizeoptions;
                    }
                    if (this.pagesizeoptions) {
                        var selectedindex = 0;

                        for (var i = 0; i < this.pagesizeoptions.length; i++) {
                            if (this.pagesize >= this.pagesizeoptions[i]) {
                                selectedindex = i;
                            }
                        }
                        if (this.pagershowrowscombo) {
                            this.pagershowrowscombo.jqxDropDownList({ selectedIndex: selectedindex });
                        }
                    }
                }
                if (this.sortable) {
                    if (data.sortdirection) {
                        if (data.sortdirection.ascending || data.sortdirection.descending) {
                            this.dataview.sortfield = data.sortcolumn;
                            var direction = data.sortdirection.ascending ? 'asc' : 'desc';
                            this.dataview.sortfielddirection = direction;
                            this.source.sortcolumn = data.sortcolumn;
                            this.source.sortdirection = direction;
                            this.sortby(data.sortcolumn, direction);
                        }
                    }
                    else if (this.dataview.sortfield != null && (this.dataview.sortfielddirection == 'asc' || this.dataview.sortfielddirection == 'desc')) {
                        this.sortby(this.dataview.sortfield, null);
                    }
                }
                if (this.groupable && data.groups) {
                    this.dataview.groups = data.groups;
                    this.groups = data.groups;
                }
                this.loadingstate = true;
                if (this.virtualsizeinfo) {
                    this._loadselectionandcolumnwidths(data);
                }
                this.loadingstate = false;
                if (this.virtualmode || (this.source._source.url && this.source._source.url != "")) {
                    if (binding == true) {
                        this.source.endUpdate(false);
                    }
                    else {
                        this.source.endUpdate(false);
                        if (this.virtualmode || this.source._source.filter || this.source._source.sort) {
                            this.updatebounddata("state");
                        }
                    }
                }
            }
        },

        _loadselectionandcolumnwidths: function (gridstate) {
            this.loadingstate = true;
            var state = "";

            if (gridstate != undefined && gridstate.width != undefined) {
                state = gridstate;
            }
            else if (window.localStorage) {
                if (window.localStorage["jqxGrid" + this.element.id]) {
                    var state = $.parseJSON(window.localStorage["jqxGrid" + this.element.id]);
                }
            }
            else if (this._savedstate) {
                var state = this._savedstate;
            }
            if (state != null && state != "") {
                var _tmploading = this._loading;
                this._loading = false;

                var data = state;
                var me = this;
                var requiresRender = false;
                var columnstomove = [];
                columnstomove.length = 0;
                var columnstomoveindexes = [];
                $.each(this.columns.records, function (index) {
                    var savedColumn = data.columns[this.datafield];
                    if (savedColumn != undefined) {
                        if (this.text != savedColumn.text) {
                            requiresRender = true;
                        }
                        if (this.hidden != savedColumn.hidden) {
                            requiresRender = true;
                        }

                        if (savedColumn.width !== undefined) {
                            this.width = savedColumn.width;
                            if (this._width) {
                                this._width = null;
                            }
                            if (this._percentagewidth) {
                                this._percentagewidth = null;
                            }
                        }
                        if (savedColumn.hidden !== undefined) {
                            this.hidden = savedColumn.hidden;
                        }
                        if (savedColumn.pinned !== undefined) {
                            this.pinned = savedColumn.pinned;
                        }
                        if (savedColumn.groupable !== undefined) {
                            this.groupable = savedColumn.groupable;
                        }
                        if (savedColumn.resizable !== undefined) {
                            this.resizable = savedColumn.resizable;
                        }
                        this.draggable = savedColumn.draggable;
                        if (savedColumn.text !== undefined) {
                            this.text = savedColumn.text;
                        }
                        if (savedColumn.align !== undefined) {
                            this.align = savedColumn.align;
                        }
                        if (savedColumn.cellsalign !== undefined) {
                            this.cellsalign = savedColumn.cellsalign;
                        }
                        if (me._columns) {
                            for (var j = 0; j < me._columns.length; j++) {
                                if (me._columns[j].datafield == this.datafield) {
                                    if (savedColumn.hidden !== undefined) {
                                        me._columns[j]["hidden"] = savedColumn.hidden;
                                    }
                                    if (savedColumn.width !== undefined) {
                                        if (me._columns[j]["width"] != undefined) {
                                            me._columns[j]["width"] = savedColumn.width;
                                        }
                                    }
                                }
                            }
                        }

                        if (savedColumn.index !== undefined) {
                            columnstomove[this.datafield] = savedColumn.index;
                            columnstomove.length++;
                        }
                    }
                });

                if (columnstomove.length > 0) {
                    if (this.setcolumnindex) {
                        var groupingcolumnscount = this.rowdetails ? 1 : 0;
                        groupingcolumnscount += this.groupable ? this.groups.length : 0;

                        var columnsRecords = new Array();
                        for (var i = 0; i < this.columns.records.length; i++) {
                            columnsRecords.push(this.columns.records[i]);
                        }

                        var groupedcolumns = 0;
                        for (var i = 0; i < columnsRecords.length; i++) {
                            var column = columnsRecords[i];
                            var index = columnstomove[column.datafield];

                            if (this.groupable && column.grouped) {
                                groupedcolumns++;
                                continue;
                            }
                            if (i == 0 && this.rowdetails) {
                                groupedcolumns++;
                                continue;
                            }

                            if (i !== index || this.groupable || this.rowdetails) {
                                me.setcolumnindex(column.datafield, groupedcolumns+index, false);
                            }
                        }
                    }
                    this.prerenderrequired = true;
                    if (this.groupable) {
                        this._refreshdataview();
                    }
                    this.rendergridcontent(true);
   
                    if (this._updatefilterrowui && this.filterable && this.showfilterrow) {
                        this._updatefilterrowui();
                    }
                    this._renderrows(this.virtualsizeinfo);
                }

                if (this.filterable && data.filters !== undefined) {
                    if (this.clearfilters) {
                        this._loading = false;
                        this.clearfilters(false);
                    }
                    var oldcolumn = "";
                    var filtergroup = new $.jqx.filter();
                    for (var i = 0; i < data.filters.filterscount; i++) {
                        var condition = data.filters['filtercondition' + i];
                        var datafield = data.filters['filterdatafield' + i];
                        var column = this.getcolumn(datafield);
                        if (datafield != oldcolumn) {
                            filtergroup = new $.jqx.filter();
                        }

                        oldcolumn = datafield;
                        if (column && column.filterable) {
                            var value = data.filters['filtervalue' + i];
                            var operator = data.filters['filteroperator' + i];
                            var filtertype = data.filters['filtertype' + i];
                            if (filtertype == "datefilter") {
                                var filter = filtergroup.createfilter(filtertype, value, condition, null, column.cellsformat, this.gridlocalization);
                            }
                            else {
                                var filter = filtergroup.createfilter(filtertype, value, condition);
                            }
                            filtergroup.addfilter(operator, filter);

                            if (this.showfilterrow) {
                                var widget = column._filterwidget;
                                var tablecolumn = column._filterwidget.parent();
                                if (widget != null) {
                                    switch (column.filtertype) {
                                        case 'number':
                                            tablecolumn.find('input').val(value);
                                            if (this.host.jqxDropDownList) {
                                                var conditions = filtergroup.getoperatorsbyfiltertype('numericfilter');
                                                widget.find('.filter').jqxDropDownList('selectIndex', conditions.indexOf(condition));
                                            }
                                            break;
                                        case 'date':
                                            if (this.host.jqxDateTimeInput) {
                                                var value2 = data.filters['filtervalue' + (i + 1)];
                                                var filtertype = data.filters['filtertype' + i];
                                                var filter = filtergroup.createfilter(filtertype, value2, "LESS_THAN_OR_EQUAL");
                                                filtergroup.addfilter(operator, filter);

                                                var from = new Date(value);
                                                var to = new Date(value2);
                                                if (isNaN(from)) {
                                                    from = $.jqx.dataFormat.tryparsedate(value);
                                                }
                                                if (isNaN(to)) {
                                                    to = $.jqx.dataFormat.tryparsedate(value);
                                                }

                                                $(tablecolumn.children()[0]).jqxDateTimeInput('setRange', from, to);
                                                i++;
                                            }
                                            else widget.val(value);
                                            break;
                                        case 'textbox':
                                        case 'default':
                                            widget.val(value);
                                            me["_oldWriteText" + widget[0].id] = value;
                                            break;
                                        case 'list':
                                            if (this.host.jqxDropDownList) {
                                                var items = $(tablecolumn.children()[0]).jqxDropDownList('getItems');
                                                var index = -1;
                                                $.each(items, function (i) {
                                                    if (this.value == value) {
                                                        index = i;
                                                        return false;
                                                    }
                                                });

                                                $(tablecolumn.children()[0]).jqxDropDownList('selectIndex', index);
                                            }
                                            else widget.val(value);
                                            break;
                                        case 'checkedlist':
                                            if (!this.host.jqxDropDownList) {
                                                widget.val(value);
                                            }
                                            break;
                                        case 'bool':
                                        case 'boolean':
                                            if (!this.host.jqxCheckBox) {
                                                widget.val(value);
                                            }
                                            else $(tablecolumn.children()[0]).jqxCheckBox({ checked: value });
                                            break;
                                    }
                                }
                            }
                            this.addfilter(datafield, filtergroup);
                        }
                    }
                    if (data.filters && data.filters.filterscount > 0) {
                        this.applyfilters();
                        if (this.showfilterrow) {
                            $.each(this.columns.records, function () {
                                if (this.filtertype == 'checkedlist' && this.filterable) {
                                    if (me.host.jqxDropDownList) {
                                        var column = this;
                                        var dropdownlist = column._filterwidget;
                                        var dropdownitems = dropdownlist.jqxDropDownList('getItems');
                                        var listbox = dropdownlist.jqxDropDownList('listBox');
                                        listbox.checkAll(false);
                                        if (column.filter) {
                                            listbox.uncheckAll(false);
                                            var filters = column.filter.getfilters();

                                            for (var i = 0; i < listbox.items.length; i++) {
                                                var label = listbox.items[i].label;
                                                $.each(filters, function () {
                                                    if (this.condition == "NOT_EQUAL") return true;
                                                    if (label == this.value) {
                                                        listbox.checkIndex(i, false, false);
                                                    }
                                                });
                                            }
                                            listbox._updateCheckedItems();
                                            var checkedItemsLength = listbox.getCheckedItems().length;
                                            if (listbox.items.length != checkedItemsLength && checkedItemsLength > 0) {
                                                listbox.host.jqxListBox('indeterminateIndex', 0, true, false);
                                            }
                                        }
                                    }
                                }
                            });
                        }
                    }

                    if (this.pageable && data.pagenum !== undefined) {
                        if (this.gotopage && !this.virtualmode) {
                            this.dataview.pagenum = -1;
                            this.gotopage(data.pagenum);
                        }
                        else if (this.gotopage && this.virtualmode) {
                            this.gotopage(data.pagenum);
                        }
                    }
                }

                if (data.selectedrowindexes && data.selectedrowindexes && data.selectedrowindexes.length > 0) {
                    this.selectedrowindexes = data.selectedrowindexes;
                    this.selectedrowindex = data.selectedrowindex;
                    if (this.selectionmode === "checkbox") {
                        this._updatecheckboxselection();
                    }
                }
                if (data.selectedcells) {
                    if (this._applycellselection) {
                        $.each(data.selectedcells, function () {
                            me._applycellselection(this.rowindex, this.datafield, true, false);
                        });
                    }
                }

                if (this.groupable && data.groups !== undefined) {
                    this._refreshdataview();
                    this.render();
                    this._loading = _tmploading;
                    this.loadingstate = false;

                    return;
                }

                if (requiresRender) {
                    this.prerenderrequired = true;
                    this.rendergridcontent(true);
                    this._loading = _tmploading;
                    this.loadingstate = false;
                    if (this.updating()) {
                        return false;
                    }
                }
                else {
                    this._loading = _tmploading;
                    this._updatecolumnwidths();
                    this._updatecellwidths();
                    this.loadingstate = false;
                }

                this.loadingstate = false;
                this._loading = _tmploading;
                this._renderrows(this.virtualsizeinfo);
            }
            this.loadingstate = false;
        },

        getstate: function () {
            var datainfo = this.getdatainformation();
            var data = {};
            data.width = this.width;
            data.height = this.height;
            data.pagenum = datainfo.paginginformation.pagenum;
            data.pagesize = datainfo.paginginformation.pagesize;
            data.pagesizeoptions = this.pagesizeoptions;
            data.sortcolumn = datainfo.sortinformation.sortcolumn;
            data.sortdirection = datainfo.sortinformation.sortdirection;
            if (this.selectionmode != null) {
                if (this.getselectedcells) {
                    if (this.selectionmode.toString().indexOf('cell') != -1) {
                        var selectedcells = this.getselectedcells();
                        var cells = new Array();
                        $.each(selectedcells, function () {
                            cells.push({ datafield: this.datafield, rowindex: this.rowindex });
                        });
                        data.selectedcells = cells;
                    }
                    else {
                        var selectedrowindexes = this.getselectedrowindexes();
                        data.selectedrowindexes = selectedrowindexes;
                        data.selectedrowindex = this.selectedrowindex;
                    }
                }
            }
            var postdata = {};
            var filterslength = 0;
            if (this.dataview.filters) {
                for (var x = 0; x < this.dataview.filters.length; x++) {
                    var filterdatafield = this.dataview.filters[x].datafield;
                    var filter = this.dataview.filters[x].filter;
                    var filters = filter.getfilters();
                    postdata[filterdatafield + "operator"] = filter.operator;
                    for (var m = 0; m < filters.length; m++) {
                        filters[m].datafield = filterdatafield;
                        if (filters[m].type == "datefilter") {
                            if (filters[m].value && filters[m].value.toLocaleString) {
                                var column = this.getcolumn(filters[m].datafield);
                                if (column.cellsformat) {
                                    var value = this.source.formatDate(filters[m].value, column.cellsformat, this.gridlocalization);
                                    if (value) {
                                        postdata["filtervalue" + filterslength] = value;
                                    }
                                    else {
                                        postdata["filtervalue" + filterslength] = filters[m].value.toLocaleString();
                                    }
                                }
                                else {
                                    postdata["filtervalue" + filterslength] = filters[m].value.toLocaleString();
                                }
                            }
                            else {
                                postdata["filtervalue" + filterslength] = filters[m].value;
                            }
                        }
                        else {
                            postdata["filtervalue" + filterslength] = filters[m].value;
                        }
                        postdata["filtercondition" + filterslength] = filters[m].condition;
                        postdata["filteroperator" + filterslength] = filters[m].operator;
                        postdata["filterdatafield" + filterslength] = filterdatafield;
                        postdata["filtertype" + filterslength] = filters[m].type;

                        filterslength++;
                    }
                }
            }
            postdata.filterscount = filterslength;
            data.filters = postdata;
            data.groups = this.groups;
            //if (this.groupable && this.groups.length > 0) {
            //    var me = this;
            //    var groupstates = [];
            //    $.each(this.dataview.loadedgroups, function () {
            //        var groupstate = me._findgroupstate(this.uniqueid);
            //        groupstates[this.group] = groupstate;
            //    });
            //    data.groupstates = groupstates;
            //}

            data.columns = {};
            var columnindex = 0;
            if (this.columns.records) {
                $.each(this.columns.records, function (index, value) {
                    if (!this.datafield) {
                        return true;
                    }

                    var columndata = {};
                    columndata.width = this.width;
                    columndata.hidden = this.hidden;
                    columndata.pinned = this.pinned;
                    columndata.groupable = this.groupable;
                    columndata.resizable = this.resizable;
                    columndata.draggable = this.draggable;
                    columndata.text = this.text;
                    columndata.align = this.align;
                    columndata.cellsalign = this.cellsalign;
                    columndata.index = columnindex++;
                    data.columns[this.datafield] = columndata;
                });
            }
            return data;
        },

        _stringify: function (value) {
            if (window.JSON && typeof window.JSON.stringify === 'function') {
                var me = this;
                var json = "";
                try {
                    json = window.JSON.stringify(value);
                }
                catch (error) {
                    return me._str("", { "": value })
                }
                return json;
            }

            var json = this._str("", { "": value })
            return json;
        },

        _quote: function (string) {
            var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            meta = {
                '\b': '\\b',
                '\t': '\\t',
                '\n': '\\n',
                '\f': '\\f',
                '\r': '\\r',
                '"': '\\"',
                '\\': '\\\\'
            };

            return '"' + string.replace(escapable, function (a) {
                var c = meta[a];
                return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            }) + '"';
        },


        _stringifyArray: function (value) {
            var len = value.length,
                partial = [],
                i;
            for (var i = 0; i < len; i++) {
                partial.push(this._str(i, value) || 'null');
            }

            return '[' + partial.join(',') + ']';
        },

        _stringifyObject: function (value) {
            var partial = [],
                i, v;
            var me = this;
            for (i in value) {
                if (Object.prototype.hasOwnProperty.call(value, i)) {
                    v = me._str(i, value);
                    if (v) {
                        partial.push(me._quote(i) + ':' + v);
                    }
                }
            }
            return '{' + partial.join(',') + '}';
        },

        _stringifyReference: function (value) {
            switch (Object.prototype.toString.call(value)) {
                case '[object Array]':
                    return this._stringifyArray(value);
            }
            return this._stringifyObject(value);
        },

        _stringifyPrimitive: function (value, type) {
            switch (type) {
                case 'string':
                    return this._quote(value);
                case 'number':
                    return isFinite(value) ? value : 'null';
                case 'boolean':
                    return value;
            }
            return 'null';
        },

        _str: function (key, holder) {
            var value = holder[key], type = typeof value;

            if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
                value = value.toJSON(key);
                type = typeof value;
            }
            if (/(number|string|boolean)/.test(type) || (!value && type === 'object')) {
                return this._stringifyPrimitive(value, type);
            } else {
                return this._stringifyReference(value);
            }
        }
    });
})(jQuery);

/*
 * file from "src\jqxcheckbox.js"
 */

/*
jQWidgets v3.2.2 (2014-Mar-21)
Copyright (c) 2011-2014 jQWidgets.
License: http://jqwidgets.com/license/
*/

(function ($) {

    $.jqx.jqxWidget("jqxCheckBox", "", {});

    $.extend($.jqx._jqxCheckBox.prototype, {
        defineInstance: function () {
            // Type: Number
            // Default: 250
            // Gets or sets the delay of the fade animation when the CheckBox is going to be opened.
            this.animationShowDelay = 300,
            // Type: Number
            // Default: 300
            // Gets or sets the delay of the fade animation when the CheckBox is going to be closed. 
             this.animationHideDelay = 300,
            // Type: Number.
            // Default: null.
            // Sets the width.
            this.width = null;
            // Type: Number.
            // Default: null.
            // Sets the height.
            this.height = null;
            // Type: String
            // Default: '13px'
            // Gets or sets the checkbox's size.
            this.boxSize = '13px';
            // Type: Bool and Null
            // Default: false
            // Gets or sets the ckeck state.
            // Possible Values: true, false and null.
            this.checked = false;
            // Type: Bool
            // Default: false
            // Gets or sets whether the checkbox has 3 states - checked, unchecked and indeterminate.
            this.hasThreeStates = false;
            // Type: Bool
            // Default: false
            // Gets whether the CheckBox is disabled.
            this.disabled = false;
            // Type: Bool
            // Default: true
            // Gets or sets whether the clicks on the container are handled as clicks on the check box.
            this.enableContainerClick = true;
            // Type: Bool
            // Default: true
            // Gets or sets whether the checkbox is locked. In this mode the user is not allowed to check/uncheck the checkbox.
            this.locked = false;
            // Type: String
            // Default: ''
            // Gets or sets the group name. When this property is set, the checkboxes in the same group behave as radio buttons.
            this.groupName = '';
            this.keyboardCheck = true;
            this.enableHover = true;
            this.hasInput = true;
            this.rtl = false;
            this.updated = null;
            this.disabledContainer = false;
            this._canFocus = true;
            this.aria =
            {
                "aria-checked": { name: "checked", type: "boolean" },
                "aria-disabled": { name: "disabled", type: "boolean" }
            };
            // 'checked' is triggered when the checkbox is checked.
            // 'unchecked' is triggered when the checkbox is unchecked.
            // 'indeterminate' is triggered when the checkbox's ckecked property is going to be null.
            // 'change' is triggered when the checkbox's state is changed.
            this.events =
			 [
			    'checked', 'unchecked', 'indeterminate', 'change'
             ];
        },

        createInstance: function (args) {
            this.render();
        },

        _addInput: function()
        {
            if (this.hasInput) {
                if (this.input) this.input.remove();
                var name = this.host.attr('name');
                if (!name) name = this.element.id;
                this.input = $("<input type='hidden'/>");
                this.host.append(this.input);
                this.input.attr('name', name);
                this.input.val(this.checked);

                this.host.attr('role', 'checkbox');
                $.jqx.aria(this);
            }
        },

        render: function()
        {
            this.init = true;
            var me = this;
            this.setSize();
            this.propertyChangeMap['width'] = function (instance, key, oldVal, value) {
                me.setSize();
            };

            this.propertyChangeMap['height'] = function (instance, key, oldVal, value) {
                me.setSize();
            };
            this._removeHandlers();

            if (this.checkbox) {
                this.checkbox.remove();
                this.checkbox = null;
            }
            if (this.checkMark) {
                this.checkMark.remove();
                this.checkMark = null;
            }
            if (this.box) {
                this.box.remove();
                this.box = null;
            }
            if (this.clear) {
                this.clear.remove();
                this.clear = null;
            }
           
            if (this.boxSize == null) this.boxSize = 13;
            var boxSize = parseInt(this.boxSize) + 'px';
            this.checkbox = $('<div><div style="width: ' + boxSize + '; height: ' + boxSize + ';"><span style="width: ' + boxSize + '; height: ' + boxSize + ';"></span></div></div>');
            this.host.prepend(this.checkbox);
            if (!this.disabledContainer) {
                if (!this.host.attr('tabIndex')) {
                    this.host.attr('tabIndex', 0);
                }
                this.clear = $('<div style="clear: both;"></div>');
                this.host.append(this.clear);
            }

            this.checkMark = $(this.checkbox[0].firstChild.firstChild);//$(this.checkbox).find('span');
            this.box = this.checkbox;

            this.box.addClass(this.toThemeProperty('jqx-checkbox-default') + " " + this.toThemeProperty('jqx-fill-state-normal') + " " + this.toThemeProperty('jqx-rc-all'));

            if (this.disabled) {
                this.disable();
            }

            if (!this.disabledContainer) {
                this.host.addClass(this.toThemeProperty('jqx-widget'));
                this.host.addClass(this.toThemeProperty('jqx-checkbox'));
            }

            if (this.locked && !this.disabledContainer) {
                this.host.css('cursor', 'auto');
            }

            var checked = this.element.getAttribute('checked');
            if (checked == 'checked' || checked == 'true' || checked == true) {
                this.checked = true;
            }

            this._addInput();
            this._render();
            this._addHandlers();
            this.init = false;
        },

        refresh: function (initialRefresh) {
            if (!initialRefresh) {
                this.setSize();
                this._render();
            }
        },

        resize: function (width, height) {
            this.width = width;
            this.height = height;
            this.refresh();
        },

        setSize: function () {
            if (this.width != null && this.width.toString().indexOf("px") != -1) {
                this.host.width(this.width);
            }
            else
                if (this.width != undefined && !isNaN(this.width)) {
                    this.host.width(this.width);
                };

            if (this.height != null && this.height.toString().indexOf("px") != -1) {
                this.host.height(this.height);
            }
            else if (this.height != undefined && !isNaN(this.height)) {
                this.host.height(this.height);
            };
        },

        _addHandlers: function () {
            var me = this;

            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            var eventName = 'mousedown';
            if (isTouchDevice) eventName = $.jqx.mobile.getTouchEventName('touchend');

            this.addHandler(this.box, eventName, function (event) {
                if (!me.disabled && !me.enableContainerClick && !me.locked) {
                    me.toggle();
                    if (me.updated) {
                        event.owner = me;
                        me.updated(event, me.checked, me.oldChecked);
                    }
                    if (event.preventDefault) {
                        event.preventDefault();
                    }
                    return false;
                }
            });

            if (!this.disabledContainer) {
                this.addHandler(this.host, 'keydown', function (event) {
                    if (!me.disabled && !me.locked && me.keyboardCheck) {
                        if (event.keyCode == 32) {
                            if (!me._canFocus) {
                                return true;
                            }

                            me.toggle();
                            if (me.updated) {
                                event.owner = me;
                                me.updated(event, me.checked, me.oldChecked);
                            }
                            if (event.preventDefault) {
                                event.preventDefault();
                            }
                            return false;
                        }
                    }
                });

                this.addHandler(this.host, eventName, function (event) {
                    if (!me.disabled && me.enableContainerClick && !me.locked) {
                        me.toggle();
                        if (event.preventDefault) {
                            event.preventDefault();
                        }
                        return false;
                    }
                });

                this.addHandler(this.host, 'selectstart', function (event) {
                    if (!me.disabled && me.enableContainerClick) {
                        if (event.preventDefault) {
                            event.preventDefault();
                        }
                        return false;
                    }
                });

                this.addHandler(this.host, 'mouseup', function (event) {
                    if (!me.disabled && me.enableContainerClick) {
                        if (event.preventDefault) {
                            event.preventDefault();
                        }
                    }
                });

                this.addHandler(this.host, 'focus', function (event) {
                    if (!me.disabled && !me.locked) {
                        if (!me._canFocus) {
                            return true;
                        }

                        if (me.enableHover) {
                            me.box.addClass(me.toThemeProperty('jqx-checkbox-hover'));
                        }
                        me.box.addClass(me.toThemeProperty('jqx-fill-state-focus'));
                        if (event.preventDefault) {
                            event.preventDefault();
                        }
                        me.hovered = true;
                        return false;
                    }
                });

                this.addHandler(this.host, 'blur', function (event) {
                    if (!me.disabled && !me.locked) {
                        if (!me._canFocus) {
                            return true;
                        }
                        if (me.enableHover) {
                            me.box.removeClass(me.toThemeProperty('jqx-checkbox-hover'));
                        }
                        me.box.removeClass(me.toThemeProperty('jqx-fill-state-focus'));
                        if (event.preventDefault) {
                            event.preventDefault();
                        }
                        me.hovered = false;
                        return false;
                    }
                });

                this.addHandler(this.host, 'mouseenter', function (event) {
                    if (me.locked) {
                        me.host.css('cursor', 'arrow')
                    }
                    if (me.enableHover) {
                        if (!me.disabled && me.enableContainerClick && !me.locked) {
                            me.box.addClass(me.toThemeProperty('jqx-checkbox-hover'));
                            me.box.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                            if (event.preventDefault) {
                                event.preventDefault();
                            }
                            me.hovered = true;
                            return false;
                        }
                    }
                });

                this.addHandler(this.host, 'mouseleave', function (event) {
                    if (me.enableHover) {
                        if (!me.disabled && me.enableContainerClick && !me.locked) {
                            me.box.removeClass(me.toThemeProperty('jqx-checkbox-hover'));
                            me.box.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                            if (event.preventDefault) {
                                event.preventDefault();
                            }
                            me.hovered = false;
                            return false;
                        }
                    }
                });

                this.addHandler(this.box, 'mouseenter', function () {
                    if (me.locked) {
                        return;
                    }

                    if (!me.disabled && !me.enableContainerClick) {
                        me.box.addClass(me.toThemeProperty('jqx-checkbox-hover'));
                        me.box.addClass(me.toThemeProperty('jqx-fill-state-hover'));
                    }
                });

                this.addHandler(this.box, 'mouseleave', function () {
                    if (!me.disabled && !me.enableContainerClick) {
                        me.box.removeClass(me.toThemeProperty('jqx-checkbox-hover'));
                        me.box.removeClass(me.toThemeProperty('jqx-fill-state-hover'));
                    }
                });
            }
        },

        focus: function () {
            try {
                this.host.focus();
            }
            catch (error) {
            }
        },

        _removeHandlers: function () {
            var isTouchDevice = $.jqx.mobile.isTouchDevice();
            var eventName = 'mousedown';
            if (isTouchDevice) eventName = 'touchend';

            if (this.box) {
                this.removeHandler(this.box, eventName);
                this.removeHandler(this.box, 'mouseenter');
                this.removeHandler(this.box, 'mouseleave');
            }
            this.removeHandler(this.host, eventName);
            this.removeHandler(this.host, 'mouseup');
            this.removeHandler(this.host, 'selectstart');
            this.removeHandler(this.host, 'mouseenter');
            this.removeHandler(this.host, 'mouseleave');
            this.removeHandler(this.host, 'keydown');
            this.removeHandler(this.host, 'blur');
            this.removeHandler(this.host, 'focus');
        },

        _render: function () {
            if (!this.disabled) {
                if (this.enableContainerClick) {
                    this.host.css('cursor', 'pointer');
                }
                else
                    if (!this.init) {
                        this.host.css('cursor', 'auto');
                    }
            }
            else {
                this.disable();
            }
            if (this.rtl) {
                this.box.addClass(this.toThemeProperty('jqx-checkbox-rtl'));
                this.host.addClass(this.toThemeProperty('jqx-rtl'));
            }

            this.updateStates();
        },

        _setState: function (checked) {
            if (this.checked != checked) {
                this.checked = checked;
                if (this.checked) {
                    this.checkMark[0].className = this.toThemeProperty('jqx-checkbox-check-checked');
                }
                else if (this.checked == null) {
                    this.checkMark[0].className = this.toThemeProperty('jqx-checkbox-check-indeterminate');
                }
                else {
                    this.checkMark[0].className = "";
                }
            }
        },

        val: function (value) {
            if (arguments.length == 0 || (value != null && typeof (value) == "object")) {
                return this.checked;
            }

            if (typeof value == "string") {
                if (value == "true") this.check();
                if (value == "false") this.uncheck();
                if (value == "") this.indeterminate();
            }
            else {
                if (value == true) this.check();
                if (value == false) this.uncheck();
                if (value == null) this.indeterminate();
            }
            return this.checked;
        },

        // checks the ckeckbox.
        check: function () {
            this.checked = true;
            var me = this;
            this.checkMark.removeClass();

            if ($.jqx.browser.msie || this.animationShowDelay == 0) {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-checked'));
            }
            else {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-checked'));
                this.checkMark.css('opacity', 0);
                this.checkMark.stop().animate({ opacity: 1 }, this.animationShowDelay, function () {
                });
            }
       
            if (this.groupName != null && this.groupName.length > 0) {
                var checkboxes = $.find(this.toThemeProperty('.jqx-checkbox', true));
                $.each(checkboxes, function () {
                    var groupName = $(this).jqxCheckBox('groupName');
                    if (groupName == me.groupName && this != me.element) {
                        $(this).jqxCheckBox('uncheck')
                    }
                });
            }

            this._raiseEvent('0', true);
            this._raiseEvent('3', { checked: true });
            if (this.input != undefined) {
                this.input.val(this.checked);
                $.jqx.aria(this, "aria-checked", this.checked);
            }
        },

        // unchecks the checkbox.
        uncheck: function () {
            this.checked = false;
            var me = this;

            if ($.jqx.browser.msie || this.animationHideDelay == 0) {
                if (me.checkMark[0].className != "")
                {
                    me.checkMark[0].className = "";
                }
            }
            else {
                this.checkMark.css('opacity', 1);
                this.checkMark.stop().animate({ opacity: 0 }, this.animationHideDelay, function () {
                    if (me.checkMark[0].className != "") {
                        me.checkMark[0].className = "";
                    }
                });
            }

            this._raiseEvent('1');
            this._raiseEvent('3', { checked: false });
            if (this.input != undefined) {
                this.input.val(this.checked);
                $.jqx.aria(this, "aria-checked", this.checked);
            }
        },

        // sets the indeterminate state.
        indeterminate: function () {
            this.checked = null;
            this.checkMark.removeClass();

            if ($.jqx.browser.msie || this.animationShowDelay == 0) {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-indeterminate'));
            }
            else {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-indeterminate'));
                this.checkMark.css('opacity', 0);
                this.checkMark.stop().animate({ opacity: 1 }, this.animationShowDelay, function () {
                });
            }

            this._raiseEvent('2');
            this._raiseEvent('3', { checked: null });
            if (this.input != undefined) {
                this.input.val(this.checked);
                $.jqx.aria(this, "aria-checked", "undefined");
            }
        },

        // toggles the check state.
        toggle: function () {
            if (this.disabled)
                return;

            if (this.locked)
                return;

            if (this.groupName != null && this.groupName.length > 0) {
                if (this.checked != true) {
                    this.checked = true;
                    this.updateStates();
                }
                return;
            }

            this.oldChecked = this.checked;
            if (this.checked == true) {
                this.checked = this.hasThreeStates ? null : false;
            }
            else {
                this.checked = this.checked != null;
            }

            this.updateStates();
            if (this.input != undefined) {
                this.input.val(this.checked);
            }
        },

        // updates check states depending on the value of the 'checked' property.
        updateStates: function () {
            if (this.checked) {
                this.check();
            }
            else if (this.checked == false) {
                this.uncheck();
            }
            else if (this.checked == null) {
                this.indeterminate();
            }
        },

        // disables the checkbox.
        disable: function () {
            this.disabled = true;

            if (this.checked == true) {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-disabled'));
            }
            else if (this.checked == null) {
                this.checkMark.addClass(this.toThemeProperty('jqx-checkbox-check-indeterminate-disabled'));
            }
            this.box.addClass(this.toThemeProperty('jqx-checkbox-disabled-box'));
            this.host.addClass(this.toThemeProperty('jqx-checkbox-disabled'));
            this.host.addClass(this.toThemeProperty('jqx-fill-state-disabled'));
            this.box.addClass(this.toThemeProperty('jqx-checkbox-disabled'));
            $.jqx.aria(this, "aria-disabled", this.disabled);
        },

        // enables the checkbox.
        enable: function () {
            if (this.checked == true) {
                this.checkMark.removeClass(this.toThemeProperty('jqx-checkbox-check-disabled'));
            }
            else if (this.checked == null) {
                this.checkMark.removeClass(this.toThemeProperty('jqx-checkbox-check-indeterminate-disabled'));
            }
            this.box.removeClass(this.toThemeProperty('jqx-checkbox-disabled-box'));
            this.host.removeClass(this.toThemeProperty('jqx-checkbox-disabled'));
            this.host.removeClass(this.toThemeProperty('jqx-fill-state-disabled'));
            this.box.removeClass(this.toThemeProperty('jqx-checkbox-disabled'));
            this.disabled = false;
            $.jqx.aria(this, "aria-disabled", this.disabled);
        },

        destroy: function () {
            this.host.remove();
        },

        _raiseEvent: function (id, args) {
            if (this.init) return;
            var evt = this.events[id];
            var event = new jQuery.Event(evt);
            event.owner = this;
            event.args = args;
            try
            {
                var result = this.host.trigger(event);
            }
            catch (error) {

            }

            return result;
        },

        propertyChangedHandler: function (object, key, oldvalue, value) {
            if (this.isInitialized == undefined || this.isInitialized == false)
                return;

            if (key == object.enableContainerClick && !object.disabled && !object.locked) {
                if (value) {
                    object.host.css('cursor', 'pointer');
                }
                else object.host.css('cursor', 'auto');
            }

            if (key == "rtl") {
                if (value) {
                    object.box.addClass(object.toThemeProperty('jqx-checkbox-rtl'));
                    object.host.addClass(object.toThemeProperty('jqx-rtl'));
                }
                else
                {
                    object.box.removeClass(object.toThemeProperty('jqx-checkbox-rtl'));
                    object.host.removeClass(object.toThemeProperty('jqx-rtl'));
                }
            }

            if (key == "boxSize") {
                object.render();
            }

            if (key == 'theme') {
                $.jqx.utilities.setTheme(oldvalue, value, object.host);
            }

            if (key == 'checked') {
                if (value != oldvalue) {
                    switch (value) {
                        case true:
                            object.check();
                            break;
                        case false:
                            object.uncheck();
                            break;
                        case null:
                            object.indeterminate();
                            break;
                    }
                }
            }

            if (key == 'disabled') {
                if (value != oldvalue) {
                    if (value) {
                        object.disable();
                    } else object.enable();
                }
            }
        }
    });
})(jQuery);

