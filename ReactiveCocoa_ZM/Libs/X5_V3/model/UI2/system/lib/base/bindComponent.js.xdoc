/**
	@name BindComponent
	@url $UI/system/lib/base/bindComponent
	@class 
	@category javascript
	@extends ViewComponent
	@extendurl $UI/system/lib/base/viewComponent
	@model UI2
	@description 可视感知数据组件基类
*/

/**
	@name BindComponent#doInit
	@function
	@description 初始化组件接口函数，由派生类实现
	@param value 组件关联的数据项的值
	@param bindingContext 数据上下文
	@return obj 返回值类似\{dependence: true/false\}，其中dependence表示组件是否异步依赖别的组件
	@example
	<xmp>
	 如果返回{ dependence:true}时，表示组件还没有初始化完成，它依赖其它组件，在要获取其其它组件
的promise的回调中调用当前组件的inited方法，通知界面引擎组件初始化完成。
	</xmp>
*/

/**
	@name BindComponent#doUpdate
	@function
	@description 更新组件接口函数，可以派生类中重载实现，目前默认调用updateValue（数据更新）、updateReadonly（只读状态更新）、updateValidation（规则校验状态更新）
	@param value 组件关联的数据项的值
	@param bindingContext 数据上下文
	@return {void}
	@example
	当组件关联的数据项的值发生改变时，会调用组件实例的update方法。 
*/

/**
	@name BindComponent#updateValue
	@function
	@description 更新组件的数据部分
	@example
	通过组件实现的val函数或者set({value:...})更新 
*/

/**
	@name BindComponent#updateReadonly
	@function
	@description 组件只读状态更新
*/

/**
	@name BindComponent#updateValidation
	@function
	@description 组件规则校验状态更新
*/

/**
	@name BindComponent#render
	@function
	@description 组件渲染方法接口，由派生类实现
	@example
	组件init时，和set属性后设置了this.needRender==true时会调用
*/

/**
	@name BindComponent#val2ref
	@function
	@description 将组件的value更新到bind-ref
*/
